
EmbSys.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee60  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001eb4  0800f060  0800f060  0001f060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f14  08010f14  000300b8  2**0
                  CONTENTS
  4 .ARM          00000008  08010f14  08010f14  00020f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010f1c  08010f1c  000300b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010f1c  08010f1c  00020f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010f20  08010f20  00020f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08010f24  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009940  200000b8  08010fdc  000300b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200099f8  08010fdc  000399f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003697a  00000000  00000000  000300e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d46  00000000  00000000  00066a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002700  00000000  00000000  0006c7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002468  00000000  00000000  0006eea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a712  00000000  00000000  00071310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030ef8  00000000  00000000  000aba22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015767c  00000000  00000000  000dc91a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00233f96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a994  00000000  00000000  00233fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000b8 	.word	0x200000b8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800f048 	.word	0x0800f048

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000bc 	.word	0x200000bc
 800023c:	0800f048 	.word	0x0800f048

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr

08000602 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000602:	b480      	push	{r7}
 8000604:	b083      	sub	sp, #12
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
 800060a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
	...

08000628 <integer_length>:
	int stack_size;
	uint32_t sent_messages;
	int time_running;
} thread_info;

int integer_length(int num) {
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	int result = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	60fb      	str	r3, [r7, #12]
	if (num == 0) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d10c      	bne.n	8000654 <integer_length+0x2c>
		return 1;
 800063a:	2301      	movs	r3, #1
 800063c:	e00e      	b.n	800065c <integer_length+0x34>
	}

	while (num > 0) {
		num /= 10;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4a09      	ldr	r2, [pc, #36]	; (8000668 <integer_length+0x40>)
 8000642:	fb82 1203 	smull	r1, r2, r2, r3
 8000646:	1092      	asrs	r2, r2, #2
 8000648:	17db      	asrs	r3, r3, #31
 800064a:	1ad3      	subs	r3, r2, r3
 800064c:	607b      	str	r3, [r7, #4]
		result++;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	3301      	adds	r3, #1
 8000652:	60fb      	str	r3, [r7, #12]
	while (num > 0) {
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2b00      	cmp	r3, #0
 8000658:	dcf1      	bgt.n	800063e <integer_length+0x16>
	}
	return result;
 800065a:	68fb      	ldr	r3, [r7, #12]
}
 800065c:	4618      	mov	r0, r3
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	66666667 	.word	0x66666667

0800066c <fibonacci_display_num>:


void fibonacci_display_num() {
 800066c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000670:	b085      	sub	sp, #20
 8000672:	af00      	add	r7, sp, #0
 8000674:	466b      	mov	r3, sp
 8000676:	461e      	mov	r6, r3
	int number_strlen = integer_length(calculating);
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <fibonacci_display_num+0x8c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ffd3 	bl	8000628 <integer_length>
 8000682:	60f8      	str	r0, [r7, #12]
	char number[number_strlen];
 8000684:	68f9      	ldr	r1, [r7, #12]
 8000686:	1e4b      	subs	r3, r1, #1
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	460a      	mov	r2, r1
 800068c:	2300      	movs	r3, #0
 800068e:	4690      	mov	r8, r2
 8000690:	4699      	mov	r9, r3
 8000692:	f04f 0200 	mov.w	r2, #0
 8000696:	f04f 0300 	mov.w	r3, #0
 800069a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800069e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80006a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80006a6:	460a      	mov	r2, r1
 80006a8:	2300      	movs	r3, #0
 80006aa:	4614      	mov	r4, r2
 80006ac:	461d      	mov	r5, r3
 80006ae:	f04f 0200 	mov.w	r2, #0
 80006b2:	f04f 0300 	mov.w	r3, #0
 80006b6:	00eb      	lsls	r3, r5, #3
 80006b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80006bc:	00e2      	lsls	r2, r4, #3
 80006be:	460b      	mov	r3, r1
 80006c0:	3307      	adds	r3, #7
 80006c2:	08db      	lsrs	r3, r3, #3
 80006c4:	00db      	lsls	r3, r3, #3
 80006c6:	ebad 0d03 	sub.w	sp, sp, r3
 80006ca:	466b      	mov	r3, sp
 80006cc:	3300      	adds	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
	sprintf(number, "%02d", calculating);
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <fibonacci_display_num+0x8c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	461a      	mov	r2, r3
 80006d6:	4909      	ldr	r1, [pc, #36]	; (80006fc <fibonacci_display_num+0x90>)
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f00e f945 	bl	800e968 <siprintf>
	BSP_LCD_DisplayStringAt(460, 230, (uint8_t*) number, LEFT_MODE);
 80006de:	2303      	movs	r3, #3
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	21e6      	movs	r1, #230	; 0xe6
 80006e4:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 80006e8:	f002 fef6 	bl	80034d8 <BSP_LCD_DisplayStringAt>
 80006ec:	46b5      	mov	sp, r6
}
 80006ee:	bf00      	nop
 80006f0:	3714      	adds	r7, #20
 80006f2:	46bd      	mov	sp, r7
 80006f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80006f8:	20000000 	.word	0x20000000
 80006fc:	0800f090 	.word	0x0800f090

08000700 <fibonacci_prepare>:

void fibonacci_prepare() {
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	BSP_LCD_FillRect(300, 150, 150, 200);
 8000704:	23c8      	movs	r3, #200	; 0xc8
 8000706:	2296      	movs	r2, #150	; 0x96
 8000708:	2196      	movs	r1, #150	; 0x96
 800070a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800070e:	f003 f82b 	bl	8003768 <BSP_LCD_FillRect>
	BSP_LCD_DisplayStringAt(370, 230, (uint8_t*) "-", LEFT_MODE);
 8000712:	2303      	movs	r3, #3
 8000714:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <fibonacci_prepare+0x44>)
 8000716:	21e6      	movs	r1, #230	; 0xe6
 8000718:	f44f 70b9 	mov.w	r0, #370	; 0x172
 800071c:	f002 fedc 	bl	80034d8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_FillRect(500, 150, 150, 200);
 8000720:	23c8      	movs	r3, #200	; 0xc8
 8000722:	2296      	movs	r2, #150	; 0x96
 8000724:	2196      	movs	r1, #150	; 0x96
 8000726:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800072a:	f003 f81d 	bl	8003768 <BSP_LCD_FillRect>
	BSP_LCD_DisplayStringAt(570, 230, (uint8_t*) "+", LEFT_MODE);
 800072e:	2303      	movs	r3, #3
 8000730:	4a05      	ldr	r2, [pc, #20]	; (8000748 <fibonacci_prepare+0x48>)
 8000732:	21e6      	movs	r1, #230	; 0xe6
 8000734:	f240 203a 	movw	r0, #570	; 0x23a
 8000738:	f002 fece 	bl	80034d8 <BSP_LCD_DisplayStringAt>
	fibonacci_display_num();
 800073c:	f7ff ff96 	bl	800066c <fibonacci_display_num>
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	0800f098 	.word	0x0800f098
 8000748:	0800f09c 	.word	0x0800f09c

0800074c <fibonacci_inc>:

int fibonacci_inc (int num) {
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	return ++num;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3301      	adds	r3, #1
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
}
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <fibonacci_dec>:

int fibonacci_dec (int num) {
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	if (num <= 1) return 1;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2b01      	cmp	r3, #1
 8000774:	dc01      	bgt.n	800077a <fibonacci_dec+0x12>
 8000776:	2301      	movs	r3, #1
 8000778:	e003      	b.n	8000782 <fibonacci_dec+0x1a>
	else return --num;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	3b01      	subs	r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
}
 8000782:	4618      	mov	r0, r3
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr

0800078e <fibonnaci_f>:

int fibonnaci_f (int num) {
 800078e:	b590      	push	{r4, r7, lr}
 8000790:	b083      	sub	sp, #12
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]

	if (num == 0) {
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d101      	bne.n	80007a0 <fibonnaci_f+0x12>
		return 0;
 800079c:	2300      	movs	r3, #0
 800079e:	e011      	b.n	80007c4 <fibonnaci_f+0x36>
	} else if (num == 1) {
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d101      	bne.n	80007aa <fibonnaci_f+0x1c>
		return 1;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e00c      	b.n	80007c4 <fibonnaci_f+0x36>
	} else {
		return (fibonnaci_f(num - 1) + fibonnaci_f(num - 2));
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	3b01      	subs	r3, #1
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff ffed 	bl	800078e <fibonnaci_f>
 80007b4:	4604      	mov	r4, r0
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	3b02      	subs	r3, #2
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff ffe7 	bl	800078e <fibonnaci_f>
 80007c0:	4603      	mov	r3, r0
 80007c2:	4423      	add	r3, r4
	}
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd90      	pop	{r4, r7, pc}

080007cc <fibonacci_t>:

void fibonacci_t (void* args) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]

	thread_info *fibonacci_info = malloc(sizeof(thread_info));
 80007d4:	2014      	movs	r0, #20
 80007d6:	f00d ffb9 	bl	800e74c <malloc>
 80007da:	4603      	mov	r3, r0
 80007dc:	60bb      	str	r3, [r7, #8]
	fibonacci_info->pid = FIB + 1;
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	2201      	movs	r2, #1
 80007e2:	701a      	strb	r2, [r3, #0]
	fibonacci_info->sent_messages = 0;
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
	fibonacci_info->stack_size = FIBBIONACI_STACK_CAPACITY;
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f0:	609a      	str	r2, [r3, #8]
	fibonacci_info->time_running = 0;
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]

	while (1) {
		fibonnaci_f(calculating);
 80007f8:	4b3d      	ldr	r3, [pc, #244]	; (80008f0 <fibonacci_t+0x124>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ffc6 	bl	800078e <fibonnaci_f>

		if (APP_PAGE == FIB) {
 8000802:	4b3c      	ldr	r3, [pc, #240]	; (80008f4 <fibonacci_t+0x128>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d16d      	bne.n	80008e6 <fibonacci_t+0x11a>
			int stack_space = osThreadGetStackSpace(fibonacci_taskHandle);
 800080a:	4b3b      	ldr	r3, [pc, #236]	; (80008f8 <fibonacci_t+0x12c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4618      	mov	r0, r3
 8000810:	f00a f8c4 	bl	800a99c <osThreadGetStackSpace>
 8000814:	4603      	mov	r3, r0
 8000816:	60fb      	str	r3, [r7, #12]
			fibonacci_info->stack_space = stack_space;
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	605a      	str	r2, [r3, #4]

			if (osMessageQueuePut(thread_manager_message, &fibonacci_info, 0, osWaitForever) == osOK) {
 800081e:	4b37      	ldr	r3, [pc, #220]	; (80008fc <fibonacci_t+0x130>)
 8000820:	6818      	ldr	r0, [r3, #0]
 8000822:	f107 0108 	add.w	r1, r7, #8
 8000826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800082a:	2200      	movs	r2, #0
 800082c:	f00a fc20 	bl	800b070 <osMessageQueuePut>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d104      	bne.n	8000840 <fibonacci_t+0x74>
				fibonacci_info->sent_messages += 1;
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	68da      	ldr	r2, [r3, #12]
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	3201      	adds	r2, #1
 800083e:	60da      	str	r2, [r3, #12]
			}
			BSP_TS_GetState(&TS_State);
 8000840:	482f      	ldr	r0, [pc, #188]	; (8000900 <fibonacci_t+0x134>)
 8000842:	f003 fbe7 	bl	8004014 <BSP_TS_GetState>
			if (TS_State.touchDetected > 0) {
 8000846:	4b2e      	ldr	r3, [pc, #184]	; (8000900 <fibonacci_t+0x134>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d04b      	beq.n	80008e6 <fibonacci_t+0x11a>
				if (TS_State.touchY[0] > 300 && TS_State.touchX[0] < STACK_VIEW_WIDTH) {
 800084e:	4b2c      	ldr	r3, [pc, #176]	; (8000900 <fibonacci_t+0x134>)
 8000850:	88db      	ldrh	r3, [r3, #6]
 8000852:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000856:	d909      	bls.n	800086c <fibonacci_t+0xa0>
 8000858:	4b29      	ldr	r3, [pc, #164]	; (8000900 <fibonacci_t+0x134>)
 800085a:	885b      	ldrh	r3, [r3, #2]
 800085c:	2bc7      	cmp	r3, #199	; 0xc7
 800085e:	d805      	bhi.n	800086c <fibonacci_t+0xa0>
					osThreadTerminate(fibonacci_taskHandle);
 8000860:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <fibonacci_t+0x12c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4618      	mov	r0, r3
 8000866:	f00a f8c7 	bl	800a9f8 <osThreadTerminate>
 800086a:	e037      	b.n	80008dc <fibonacci_t+0x110>
//					osThreadYield();
				} else if (TS_State.touchX[0] > 300 && TS_State.touchX[0] < 450 && TS_State.touchY[0] > 150 && TS_State.touchY[0] < 350) {
 800086c:	4b24      	ldr	r3, [pc, #144]	; (8000900 <fibonacci_t+0x134>)
 800086e:	885b      	ldrh	r3, [r3, #2]
 8000870:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000874:	d916      	bls.n	80008a4 <fibonacci_t+0xd8>
 8000876:	4b22      	ldr	r3, [pc, #136]	; (8000900 <fibonacci_t+0x134>)
 8000878:	885b      	ldrh	r3, [r3, #2]
 800087a:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 800087e:	d211      	bcs.n	80008a4 <fibonacci_t+0xd8>
 8000880:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <fibonacci_t+0x134>)
 8000882:	88db      	ldrh	r3, [r3, #6]
 8000884:	2b96      	cmp	r3, #150	; 0x96
 8000886:	d90d      	bls.n	80008a4 <fibonacci_t+0xd8>
 8000888:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <fibonacci_t+0x134>)
 800088a:	88db      	ldrh	r3, [r3, #6]
 800088c:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000890:	d208      	bcs.n	80008a4 <fibonacci_t+0xd8>
					calculating = fibonacci_dec(calculating);
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <fibonacci_t+0x124>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff ff66 	bl	8000768 <fibonacci_dec>
 800089c:	4603      	mov	r3, r0
 800089e:	4a14      	ldr	r2, [pc, #80]	; (80008f0 <fibonacci_t+0x124>)
 80008a0:	6013      	str	r3, [r2, #0]
 80008a2:	e01b      	b.n	80008dc <fibonacci_t+0x110>
				} else if (TS_State.touchX[0] > 500 && TS_State.touchX[0] < 650 && TS_State.touchY[0] > 150 && TS_State.touchY[0] < 350) {
 80008a4:	4b16      	ldr	r3, [pc, #88]	; (8000900 <fibonacci_t+0x134>)
 80008a6:	885b      	ldrh	r3, [r3, #2]
 80008a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008ac:	d916      	bls.n	80008dc <fibonacci_t+0x110>
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <fibonacci_t+0x134>)
 80008b0:	885b      	ldrh	r3, [r3, #2]
 80008b2:	f240 2289 	movw	r2, #649	; 0x289
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d810      	bhi.n	80008dc <fibonacci_t+0x110>
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <fibonacci_t+0x134>)
 80008bc:	88db      	ldrh	r3, [r3, #6]
 80008be:	2b96      	cmp	r3, #150	; 0x96
 80008c0:	d90c      	bls.n	80008dc <fibonacci_t+0x110>
 80008c2:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <fibonacci_t+0x134>)
 80008c4:	88db      	ldrh	r3, [r3, #6]
 80008c6:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80008ca:	d207      	bcs.n	80008dc <fibonacci_t+0x110>
					calculating = fibonacci_inc(calculating);
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <fibonacci_t+0x124>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff3b 	bl	800074c <fibonacci_inc>
 80008d6:	4603      	mov	r3, r0
 80008d8:	4a05      	ldr	r2, [pc, #20]	; (80008f0 <fibonacci_t+0x124>)
 80008da:	6013      	str	r3, [r2, #0]
				}
				fibonacci_display_num(calculating);
 80008dc:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <fibonacci_t+0x124>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fec3 	bl	800066c <fibonacci_display_num>
			}
		}

		osDelay(20);
 80008e6:	2014      	movs	r0, #20
 80008e8:	f00a f8ec 	bl	800aac4 <osDelay>
		fibonnaci_f(calculating);
 80008ec:	e784      	b.n	80007f8 <fibonacci_t+0x2c>
 80008ee:	bf00      	nop
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000764 	.word	0x20000764
 80008f8:	2000073c 	.word	0x2000073c
 80008fc:	20000760 	.word	0x20000760
 8000900:	20000754 	.word	0x20000754

08000904 <prepare_gol>:

bool grid[GOL_CELLS][GOL_CELLS];
osTimerId_t timer_gol;
bool GOL_running = true;

void prepare_gol() {
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800090a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800090e:	f002 fd2b 	bl	8003368 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(GOL_STARTPOINT_X, GOL_STARTPOINT_Y, GOL_BOX_SIZE, GOL_BOX_SIZE);
 8000912:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000916:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800091a:	2164      	movs	r1, #100	; 0x64
 800091c:	20fa      	movs	r0, #250	; 0xfa
 800091e:	f002 ff23 	bl	8003768 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000922:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000926:	f002 fd1f 	bl	8003368 <BSP_LCD_SetTextColor>

	// draw horizontal lines
	for (int i = 0; i <= GOL_CELLS; i++) {
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	e011      	b.n	8000954 <prepare_gol+0x50>
		BSP_LCD_DrawHLine(GOL_STARTPOINT_X, GOL_STARTPOINT_Y + i * GOL_CELL_SIZE, GOL_BOX_SIZE);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	b29b      	uxth	r3, r3
 8000934:	461a      	mov	r2, r3
 8000936:	0092      	lsls	r2, r2, #2
 8000938:	4413      	add	r3, r2
 800093a:	00db      	lsls	r3, r3, #3
 800093c:	b29b      	uxth	r3, r3
 800093e:	3364      	adds	r3, #100	; 0x64
 8000940:	b29b      	uxth	r3, r3
 8000942:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000946:	4619      	mov	r1, r3
 8000948:	20fa      	movs	r0, #250	; 0xfa
 800094a:	f002 fe8d 	bl	8003668 <BSP_LCD_DrawHLine>
	for (int i = 0; i <= GOL_CELLS; i++) {
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3301      	adds	r3, #1
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b09      	cmp	r3, #9
 8000958:	ddea      	ble.n	8000930 <prepare_gol+0x2c>
	}

	// draw vertical lines
	for (int i = 0; i <= GOL_CELLS; i++) {
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	e011      	b.n	8000984 <prepare_gol+0x80>
		BSP_LCD_DrawVLine(GOL_STARTPOINT_X + i * GOL_CELL_SIZE, GOL_STARTPOINT_Y, GOL_BOX_SIZE);
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	b29b      	uxth	r3, r3
 8000964:	461a      	mov	r2, r3
 8000966:	0092      	lsls	r2, r2, #2
 8000968:	4413      	add	r3, r2
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	b29b      	uxth	r3, r3
 800096e:	33fa      	adds	r3, #250	; 0xfa
 8000970:	b29b      	uxth	r3, r3
 8000972:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000976:	2164      	movs	r1, #100	; 0x64
 8000978:	4618      	mov	r0, r3
 800097a:	f002 feb3 	bl	80036e4 <BSP_LCD_DrawVLine>
	for (int i = 0; i <= GOL_CELLS; i++) {
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	3301      	adds	r3, #1
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	2b09      	cmp	r3, #9
 8000988:	ddea      	ble.n	8000960 <prepare_gol+0x5c>
	}
}
 800098a:	bf00      	nop
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <gol_display_grid>:

void gol_display_grid(bool grid[][GOL_CELLS]) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	// draw horizontal lines
	for (int i = 0; i < GOL_CELLS; i++) {
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	e011      	b.n	80009c6 <gol_display_grid+0x32>
		BSP_LCD_DrawHLine(GOL_STARTPOINT_X, GOL_STARTPOINT_Y + i * GOL_CELL_SIZE, GOL_BOX_SIZE);
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	461a      	mov	r2, r3
 80009a8:	0092      	lsls	r2, r2, #2
 80009aa:	4413      	add	r3, r2
 80009ac:	00db      	lsls	r3, r3, #3
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	3364      	adds	r3, #100	; 0x64
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80009b8:	4619      	mov	r1, r3
 80009ba:	20fa      	movs	r0, #250	; 0xfa
 80009bc:	f002 fe54 	bl	8003668 <BSP_LCD_DrawHLine>
	for (int i = 0; i < GOL_CELLS; i++) {
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	3301      	adds	r3, #1
 80009c4:	617b      	str	r3, [r7, #20]
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	2b08      	cmp	r3, #8
 80009ca:	ddea      	ble.n	80009a2 <gol_display_grid+0xe>
	}

	// draw vertical lines
	for (int i = 0; i < GOL_CELLS; i++) {
 80009cc:	2300      	movs	r3, #0
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	e011      	b.n	80009f6 <gol_display_grid+0x62>
		BSP_LCD_DrawVLine(GOL_STARTPOINT_X + i * GOL_CELL_SIZE, GOL_STARTPOINT_Y, GOL_BOX_SIZE);
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	461a      	mov	r2, r3
 80009d8:	0092      	lsls	r2, r2, #2
 80009da:	4413      	add	r3, r2
 80009dc:	00db      	lsls	r3, r3, #3
 80009de:	b29b      	uxth	r3, r3
 80009e0:	33fa      	adds	r3, #250	; 0xfa
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80009e8:	2164      	movs	r1, #100	; 0x64
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 fe7a 	bl	80036e4 <BSP_LCD_DrawVLine>
	for (int i = 0; i < GOL_CELLS; i++) {
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	3301      	adds	r3, #1
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	2b08      	cmp	r3, #8
 80009fa:	ddea      	ble.n	80009d2 <gol_display_grid+0x3e>
	}

	for (int i = 0; i < GOL_CELLS; i++) {
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	e035      	b.n	8000a6e <gol_display_grid+0xda>
		for (int j = 0; j < GOL_CELLS; j++) {
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	e02c      	b.n	8000a62 <gol_display_grid+0xce>
			if (grid[i][j] == true) {
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	4413      	add	r3, r2
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	441a      	add	r2, r3
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	4413      	add	r3, r2
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d004      	beq.n	8000a28 <gol_display_grid+0x94>
				BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000a1e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000a22:	f002 fca1 	bl	8003368 <BSP_LCD_SetTextColor>
 8000a26:	e003      	b.n	8000a30 <gol_display_grid+0x9c>
			} else {
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a2c:	f002 fc9c 	bl	8003368 <BSP_LCD_SetTextColor>
			}
			BSP_LCD_FillRect(GOL_STARTPOINT_X + j * GOL_CELL_SIZE + 1, GOL_STARTPOINT_Y + i * GOL_CELL_SIZE + 1, GOL_CELL_SIZE - 1, GOL_CELL_SIZE - 1);
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	461a      	mov	r2, r3
 8000a36:	0092      	lsls	r2, r2, #2
 8000a38:	4413      	add	r3, r2
 8000a3a:	00db      	lsls	r3, r3, #3
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	33fb      	adds	r3, #251	; 0xfb
 8000a40:	b298      	uxth	r0, r3
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	461a      	mov	r2, r3
 8000a48:	0092      	lsls	r2, r2, #2
 8000a4a:	4413      	add	r3, r2
 8000a4c:	00db      	lsls	r3, r3, #3
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	3365      	adds	r3, #101	; 0x65
 8000a52:	b299      	uxth	r1, r3
 8000a54:	2327      	movs	r3, #39	; 0x27
 8000a56:	2227      	movs	r2, #39	; 0x27
 8000a58:	f002 fe86 	bl	8003768 <BSP_LCD_FillRect>
		for (int j = 0; j < GOL_CELLS; j++) {
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	2b08      	cmp	r3, #8
 8000a66:	ddcf      	ble.n	8000a08 <gol_display_grid+0x74>
	for (int i = 0; i < GOL_CELLS; i++) {
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	2b08      	cmp	r3, #8
 8000a72:	ddc6      	ble.n	8000a02 <gol_display_grid+0x6e>
		}
	}
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000a74:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000a78:	f002 fc76 	bl	8003368 <BSP_LCD_SetTextColor>
}
 8000a7c:	bf00      	nop
 8000a7e:	3718      	adds	r7, #24
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <gol_next_gen>:


void gol_next_gen(bool grid[][GOL_CELLS]) {
 8000a84:	b480      	push	{r7}
 8000a86:	b09f      	sub	sp, #124	; 0x7c
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]

	bool next_gen[GOL_CELLS][GOL_CELLS];

	for (int i = 0; i < GOL_CELLS; i++) {
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	677b      	str	r3, [r7, #116]	; 0x74
 8000a90:	e01f      	b.n	8000ad2 <gol_next_gen+0x4e>
		for (int j = 0; j < GOL_CELLS; j++) {
 8000a92:	2300      	movs	r3, #0
 8000a94:	673b      	str	r3, [r7, #112]	; 0x70
 8000a96:	e016      	b.n	8000ac6 <gol_next_gen+0x42>
			next_gen[i][j] = grid[i][j];
 8000a98:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	4413      	add	r3, r2
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	441a      	add	r2, r3
 8000aa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000aa6:	4413      	add	r3, r2
 8000aa8:	7819      	ldrb	r1, [r3, #0]
 8000aaa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000aac:	4613      	mov	r3, r2
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	4413      	add	r3, r2
 8000ab2:	3378      	adds	r3, #120	; 0x78
 8000ab4:	19da      	adds	r2, r3, r7
 8000ab6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ab8:	4413      	add	r3, r2
 8000aba:	3b70      	subs	r3, #112	; 0x70
 8000abc:	460a      	mov	r2, r1
 8000abe:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < GOL_CELLS; j++) {
 8000ac0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	673b      	str	r3, [r7, #112]	; 0x70
 8000ac6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ac8:	2b08      	cmp	r3, #8
 8000aca:	dde5      	ble.n	8000a98 <gol_next_gen+0x14>
	for (int i = 0; i < GOL_CELLS; i++) {
 8000acc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ace:	3301      	adds	r3, #1
 8000ad0:	677b      	str	r3, [r7, #116]	; 0x74
 8000ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ad4:	2b08      	cmp	r3, #8
 8000ad6:	dddc      	ble.n	8000a92 <gol_next_gen+0xe>
		}
	}

	for (int i = 0; i < GOL_CELLS; i++) {
 8000ad8:	2300      	movs	r3, #0
 8000ada:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000adc:	e0db      	b.n	8000c96 <gol_next_gen+0x212>
		for (int j = 0; j < GOL_CELLS; j++) {
 8000ade:	2300      	movs	r3, #0
 8000ae0:	66bb      	str	r3, [r7, #104]	; 0x68
 8000ae2:	e0d1      	b.n	8000c88 <gol_next_gen+0x204>

			uint8_t neigh = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			// count neigbours
			if (i > 0) {
 8000aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	dd38      	ble.n	8000b62 <gol_next_gen+0xde>
				if (j > 0) {
 8000af0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	dd10      	ble.n	8000b18 <gol_next_gen+0x94>
					if (grid[i - 1][j - 1]) neigh++; // 1 - levo gor
 8000af6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000af8:	4613      	mov	r3, r2
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	4413      	add	r3, r2
 8000afe:	3b09      	subs	r3, #9
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	441a      	add	r2, r3
 8000b04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b06:	3b01      	subs	r3, #1
 8000b08:	5cd3      	ldrb	r3, [r2, r3]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d004      	beq.n	8000b18 <gol_next_gen+0x94>
 8000b0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b12:	3301      	adds	r3, #1
 8000b14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (grid[i - 1][j]) neigh++; // 2 - gor
 8000b18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	00db      	lsls	r3, r3, #3
 8000b1e:	4413      	add	r3, r2
 8000b20:	3b09      	subs	r3, #9
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	441a      	add	r2, r3
 8000b26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b28:	4413      	add	r3, r2
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d004      	beq.n	8000b3a <gol_next_gen+0xb6>
 8000b30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b34:	3301      	adds	r3, #1
 8000b36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (j < GOL_CELLS - 1) {
 8000b3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b3c:	2b07      	cmp	r3, #7
 8000b3e:	dc10      	bgt.n	8000b62 <gol_next_gen+0xde>
					if (grid[i - 1][j + 1]) neigh++; // 3 - desno gor
 8000b40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000b42:	4613      	mov	r3, r2
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	4413      	add	r3, r2
 8000b48:	3b09      	subs	r3, #9
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	441a      	add	r2, r3
 8000b4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b50:	3301      	adds	r3, #1
 8000b52:	5cd3      	ldrb	r3, [r2, r3]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d004      	beq.n	8000b62 <gol_next_gen+0xde>
 8000b58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (i < GOL_CELLS - 1) {
 8000b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b64:	2b07      	cmp	r3, #7
 8000b66:	dc38      	bgt.n	8000bda <gol_next_gen+0x156>
				if (j > 0) {
 8000b68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	dd10      	ble.n	8000b90 <gol_next_gen+0x10c>
					if (grid[i + 1][j - 1]) neigh++; // 4 - levo dol
 8000b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b70:	1c5a      	adds	r2, r3, #1
 8000b72:	4613      	mov	r3, r2
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	4413      	add	r3, r2
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	441a      	add	r2, r3
 8000b7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	5cd3      	ldrb	r3, [r2, r3]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d004      	beq.n	8000b90 <gol_next_gen+0x10c>
 8000b86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (grid[i + 1][j]) neigh++; // 5 - dol
 8000b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b92:	1c5a      	adds	r2, r3, #1
 8000b94:	4613      	mov	r3, r2
 8000b96:	00db      	lsls	r3, r3, #3
 8000b98:	4413      	add	r3, r2
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	441a      	add	r2, r3
 8000b9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ba0:	4413      	add	r3, r2
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d004      	beq.n	8000bb2 <gol_next_gen+0x12e>
 8000ba8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000bac:	3301      	adds	r3, #1
 8000bae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (j < GOL_CELLS - 1) {
 8000bb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bb4:	2b07      	cmp	r3, #7
 8000bb6:	dc10      	bgt.n	8000bda <gol_next_gen+0x156>
					if (grid[i + 1][j + 1]) neigh++; // 6 - desno dol
 8000bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bba:	1c5a      	adds	r2, r3, #1
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	4413      	add	r3, r2
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	441a      	add	r2, r3
 8000bc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bc8:	3301      	adds	r3, #1
 8000bca:	5cd3      	ldrb	r3, [r2, r3]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d004      	beq.n	8000bda <gol_next_gen+0x156>
 8000bd0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (j > 0) {
 8000bda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	dd0f      	ble.n	8000c00 <gol_next_gen+0x17c>
					if (grid[i][j - 1]) neigh++; // 7 - levo
 8000be0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000be2:	4613      	mov	r3, r2
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	4413      	add	r3, r2
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	441a      	add	r2, r3
 8000bec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	5cd3      	ldrb	r3, [r2, r3]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d004      	beq.n	8000c00 <gol_next_gen+0x17c>
 8000bf6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
			if (j < GOL_CELLS - 1) {
 8000c00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c02:	2b07      	cmp	r3, #7
 8000c04:	dc0f      	bgt.n	8000c26 <gol_next_gen+0x1a2>
					if (grid[i][j + 1]) neigh++; // 8 - desno
 8000c06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000c08:	4613      	mov	r3, r2
 8000c0a:	00db      	lsls	r3, r3, #3
 8000c0c:	4413      	add	r3, r2
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	441a      	add	r2, r3
 8000c12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c14:	3301      	adds	r3, #1
 8000c16:	5cd3      	ldrb	r3, [r2, r3]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d004      	beq.n	8000c26 <gol_next_gen+0x1a2>
 8000c1c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c20:	3301      	adds	r3, #1
 8000c22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}

			if (grid[i][j]) {
 8000c26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000c28:	4613      	mov	r3, r2
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	4413      	add	r3, r2
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	441a      	add	r2, r3
 8000c32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c34:	4413      	add	r3, r2
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d013      	beq.n	8000c64 <gol_next_gen+0x1e0>
				if (!(neigh == 2 || neigh == 3)) {
 8000c3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d01e      	beq.n	8000c82 <gol_next_gen+0x1fe>
 8000c44:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c48:	2b03      	cmp	r3, #3
 8000c4a:	d01a      	beq.n	8000c82 <gol_next_gen+0x1fe>
					next_gen[i][j] = false;
 8000c4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000c4e:	4613      	mov	r3, r2
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	4413      	add	r3, r2
 8000c54:	3378      	adds	r3, #120	; 0x78
 8000c56:	19da      	adds	r2, r3, r7
 8000c58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c5a:	4413      	add	r3, r2
 8000c5c:	3b70      	subs	r3, #112	; 0x70
 8000c5e:	2200      	movs	r2, #0
 8000c60:	701a      	strb	r2, [r3, #0]
 8000c62:	e00e      	b.n	8000c82 <gol_next_gen+0x1fe>
				}
			} else {
				if (neigh == 3) {
 8000c64:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c68:	2b03      	cmp	r3, #3
 8000c6a:	d10a      	bne.n	8000c82 <gol_next_gen+0x1fe>
					next_gen[i][j] = true;
 8000c6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000c6e:	4613      	mov	r3, r2
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	4413      	add	r3, r2
 8000c74:	3378      	adds	r3, #120	; 0x78
 8000c76:	19da      	adds	r2, r3, r7
 8000c78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c7a:	4413      	add	r3, r2
 8000c7c:	3b70      	subs	r3, #112	; 0x70
 8000c7e:	2201      	movs	r2, #1
 8000c80:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < GOL_CELLS; j++) {
 8000c82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c84:	3301      	adds	r3, #1
 8000c86:	66bb      	str	r3, [r7, #104]	; 0x68
 8000c88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c8a:	2b08      	cmp	r3, #8
 8000c8c:	f77f af2a 	ble.w	8000ae4 <gol_next_gen+0x60>
	for (int i = 0; i < GOL_CELLS; i++) {
 8000c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c92:	3301      	adds	r3, #1
 8000c94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c98:	2b08      	cmp	r3, #8
 8000c9a:	f77f af20 	ble.w	8000ade <gol_next_gen+0x5a>
				}
			}

		}
	}
	for (int i = 0; i < GOL_CELLS; i++) {
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	663b      	str	r3, [r7, #96]	; 0x60
 8000ca2:	e01e      	b.n	8000ce2 <gol_next_gen+0x25e>
		for (int j = 0; j < GOL_CELLS; j++) {
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000ca8:	e015      	b.n	8000cd6 <gol_next_gen+0x252>
			grid[i][j] = next_gen[i][j];
 8000caa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000cac:	4613      	mov	r3, r2
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	4413      	add	r3, r2
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	18d1      	adds	r1, r2, r3
 8000cb6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000cb8:	4613      	mov	r3, r2
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	4413      	add	r3, r2
 8000cbe:	3378      	adds	r3, #120	; 0x78
 8000cc0:	19da      	adds	r2, r3, r7
 8000cc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cc4:	4413      	add	r3, r2
 8000cc6:	3b70      	subs	r3, #112	; 0x70
 8000cc8:	781a      	ldrb	r2, [r3, #0]
 8000cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ccc:	440b      	add	r3, r1
 8000cce:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < GOL_CELLS; j++) {
 8000cd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000cd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cd8:	2b08      	cmp	r3, #8
 8000cda:	dde6      	ble.n	8000caa <gol_next_gen+0x226>
	for (int i = 0; i < GOL_CELLS; i++) {
 8000cdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000cde:	3301      	adds	r3, #1
 8000ce0:	663b      	str	r3, [r7, #96]	; 0x60
 8000ce2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ce4:	2b08      	cmp	r3, #8
 8000ce6:	dddd      	ble.n	8000ca4 <gol_next_gen+0x220>
		}
	}
}
 8000ce8:	bf00      	nop
 8000cea:	bf00      	nop
 8000cec:	377c      	adds	r7, #124	; 0x7c
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
	...

08000cf8 <gol_timer_func>:

// && (osThreadGetState(game_of_life_taskHandle) == osThreadRunning || osThreadGetState(game_of_life_taskHandle) == osThreadReady)
void gol_timer_func(){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	if (APP_PAGE == GOL && GOL_running) {
 8000cfc:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <gol_timer_func+0x24>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d109      	bne.n	8000d18 <gol_timer_func+0x20>
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <gol_timer_func+0x28>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d005      	beq.n	8000d18 <gol_timer_func+0x20>
		gol_display_grid(grid);
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <gol_timer_func+0x2c>)
 8000d0e:	f7ff fe41 	bl	8000994 <gol_display_grid>
		gol_next_gen(grid);
 8000d12:	4804      	ldr	r0, [pc, #16]	; (8000d24 <gol_timer_func+0x2c>)
 8000d14:	f7ff feb6 	bl	8000a84 <gol_next_gen>
	}
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000764 	.word	0x20000764
 8000d20:	20000004 	.word	0x20000004
 8000d24:	2000076c 	.word	0x2000076c

08000d28 <game_of_life_t>:



void game_of_life_t (void* args) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]

	thread_info *gol_info = malloc(sizeof(thread_info));
 8000d30:	2014      	movs	r0, #20
 8000d32:	f00d fd0b 	bl	800e74c <malloc>
 8000d36:	4603      	mov	r3, r0
 8000d38:	60fb      	str	r3, [r7, #12]
	gol_info->pid = GOL + 1;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	2202      	movs	r2, #2
 8000d3e:	701a      	strb	r2, [r3, #0]
	gol_info->sent_messages = 0;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
	gol_info->stack_size = GOL_STACK_CAPACITY;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d4c:	609a      	str	r2, [r3, #8]
	gol_info->time_running = 4;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	2204      	movs	r2, #4
 8000d52:	611a      	str	r2, [r3, #16]


	// initiate grid

	for (int i = 0; i < GOL_CELLS; i++) {
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
 8000d58:	e015      	b.n	8000d86 <game_of_life_t+0x5e>
		for (int j = 0; j < GOL_CELLS; j++) {
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
 8000d5e:	e00c      	b.n	8000d7a <game_of_life_t+0x52>
			grid[i][j] = false;
 8000d60:	4948      	ldr	r1, [pc, #288]	; (8000e84 <game_of_life_t+0x15c>)
 8000d62:	69fa      	ldr	r2, [r7, #28]
 8000d64:	4613      	mov	r3, r2
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	4413      	add	r3, r2
 8000d6a:	18ca      	adds	r2, r1, r3
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	4413      	add	r3, r2
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < GOL_CELLS; j++) {
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	3301      	adds	r3, #1
 8000d78:	61bb      	str	r3, [r7, #24]
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	2b08      	cmp	r3, #8
 8000d7e:	ddef      	ble.n	8000d60 <game_of_life_t+0x38>
	for (int i = 0; i < GOL_CELLS; i++) {
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	3301      	adds	r3, #1
 8000d84:	61fb      	str	r3, [r7, #28]
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	2b08      	cmp	r3, #8
 8000d8a:	dde6      	ble.n	8000d5a <game_of_life_t+0x32>
		}
	}

	// Never ending pattern
	grid[3][4] = true;
 8000d8c:	4b3d      	ldr	r3, [pc, #244]	; (8000e84 <game_of_life_t+0x15c>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	77da      	strb	r2, [r3, #31]
	grid[4][3] = true;
 8000d92:	4b3c      	ldr	r3, [pc, #240]	; (8000e84 <game_of_life_t+0x15c>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	grid[4][4] = true;
 8000d9a:	4b3a      	ldr	r3, [pc, #232]	; (8000e84 <game_of_life_t+0x15c>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	grid[4][5] = true;
 8000da2:	4b38      	ldr	r3, [pc, #224]	; (8000e84 <game_of_life_t+0x15c>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	while(1) {
		if (APP_PAGE == GOL) {
 8000daa:	4b37      	ldr	r3, [pc, #220]	; (8000e88 <game_of_life_t+0x160>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d163      	bne.n	8000e7a <game_of_life_t+0x152>
			int stack_space = osThreadGetStackSpace(game_of_life_taskHandle);
 8000db2:	4b36      	ldr	r3, [pc, #216]	; (8000e8c <game_of_life_t+0x164>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f009 fdf0 	bl	800a99c <osThreadGetStackSpace>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	617b      	str	r3, [r7, #20]
			gol_info->stack_space = stack_space;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	697a      	ldr	r2, [r7, #20]
 8000dc4:	605a      	str	r2, [r3, #4]

			if(osMessageQueuePut(thread_manager_message, &gol_info, 0, osWaitForever) == osOK) {
 8000dc6:	4b32      	ldr	r3, [pc, #200]	; (8000e90 <game_of_life_t+0x168>)
 8000dc8:	6818      	ldr	r0, [r3, #0]
 8000dca:	f107 010c 	add.w	r1, r7, #12
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f00a f94c 	bl	800b070 <osMessageQueuePut>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d104      	bne.n	8000de8 <game_of_life_t+0xc0>
				gol_info->sent_messages += 1;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	68da      	ldr	r2, [r3, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	3201      	adds	r2, #1
 8000de6:	60da      	str	r2, [r3, #12]
			}

			BSP_TS_GetState(&TS_State);
 8000de8:	482a      	ldr	r0, [pc, #168]	; (8000e94 <game_of_life_t+0x16c>)
 8000dea:	f003 f913 	bl	8004014 <BSP_TS_GetState>
			if (TS_State.touchDetected > 0) {
 8000dee:	4b29      	ldr	r3, [pc, #164]	; (8000e94 <game_of_life_t+0x16c>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d041      	beq.n	8000e7a <game_of_life_t+0x152>

				if (TS_State.touchX[0] > GOL_STARTPOINT_X && TS_State.touchX[0] < GOL_STARTPOINT_X + GOL_BOX_SIZE &&
 8000df6:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <game_of_life_t+0x16c>)
 8000df8:	885b      	ldrh	r3, [r3, #2]
 8000dfa:	2bfa      	cmp	r3, #250	; 0xfa
 8000dfc:	d92c      	bls.n	8000e58 <game_of_life_t+0x130>
 8000dfe:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <game_of_life_t+0x16c>)
 8000e00:	885b      	ldrh	r3, [r3, #2]
 8000e02:	f240 2261 	movw	r2, #609	; 0x261
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d826      	bhi.n	8000e58 <game_of_life_t+0x130>
						TS_State.touchY[0] > GOL_STARTPOINT_Y && TS_State.touchY[0] < GOL_STARTPOINT_Y + GOL_BOX_SIZE) {
 8000e0a:	4b22      	ldr	r3, [pc, #136]	; (8000e94 <game_of_life_t+0x16c>)
 8000e0c:	88db      	ldrh	r3, [r3, #6]
				if (TS_State.touchX[0] > GOL_STARTPOINT_X && TS_State.touchX[0] < GOL_STARTPOINT_X + GOL_BOX_SIZE &&
 8000e0e:	2b64      	cmp	r3, #100	; 0x64
 8000e10:	d922      	bls.n	8000e58 <game_of_life_t+0x130>
						TS_State.touchY[0] > GOL_STARTPOINT_Y && TS_State.touchY[0] < GOL_STARTPOINT_Y + GOL_BOX_SIZE) {
 8000e12:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <game_of_life_t+0x16c>)
 8000e14:	88db      	ldrh	r3, [r3, #6]
 8000e16:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8000e1a:	d21d      	bcs.n	8000e58 <game_of_life_t+0x130>
						uint16_t x = (TS_State.touchX[0] - GOL_STARTPOINT_X) / GOL_CELL_SIZE;
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <game_of_life_t+0x16c>)
 8000e1e:	885b      	ldrh	r3, [r3, #2]
 8000e20:	3bfa      	subs	r3, #250	; 0xfa
 8000e22:	4a1d      	ldr	r2, [pc, #116]	; (8000e98 <game_of_life_t+0x170>)
 8000e24:	fb82 1203 	smull	r1, r2, r2, r3
 8000e28:	1112      	asrs	r2, r2, #4
 8000e2a:	17db      	asrs	r3, r3, #31
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	827b      	strh	r3, [r7, #18]
						uint16_t y = (TS_State.touchY[0] - GOL_STARTPOINT_Y) / GOL_CELL_SIZE;
 8000e30:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <game_of_life_t+0x16c>)
 8000e32:	88db      	ldrh	r3, [r3, #6]
 8000e34:	3b64      	subs	r3, #100	; 0x64
 8000e36:	4a18      	ldr	r2, [pc, #96]	; (8000e98 <game_of_life_t+0x170>)
 8000e38:	fb82 1203 	smull	r1, r2, r2, r3
 8000e3c:	1112      	asrs	r2, r2, #4
 8000e3e:	17db      	asrs	r3, r3, #31
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	823b      	strh	r3, [r7, #16]

						grid[y][x] = true;
 8000e44:	8a3a      	ldrh	r2, [r7, #16]
 8000e46:	8a79      	ldrh	r1, [r7, #18]
 8000e48:	480e      	ldr	r0, [pc, #56]	; (8000e84 <game_of_life_t+0x15c>)
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	4413      	add	r3, r2
 8000e50:	4403      	add	r3, r0
 8000e52:	440b      	add	r3, r1
 8000e54:	2201      	movs	r2, #1
 8000e56:	701a      	strb	r2, [r3, #0]
				}

				if (TS_State.touchY[0] > 300 && TS_State.touchX[0] < STACK_VIEW_WIDTH) {
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <game_of_life_t+0x16c>)
 8000e5a:	88db      	ldrh	r3, [r3, #6]
 8000e5c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000e60:	d90b      	bls.n	8000e7a <game_of_life_t+0x152>
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <game_of_life_t+0x16c>)
 8000e64:	885b      	ldrh	r3, [r3, #2]
 8000e66:	2bc7      	cmp	r3, #199	; 0xc7
 8000e68:	d807      	bhi.n	8000e7a <game_of_life_t+0x152>
					GOL_running = false;
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <game_of_life_t+0x174>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
					osThreadTerminate(game_of_life_taskHandle);
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <game_of_life_t+0x164>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f009 fdbf 	bl	800a9f8 <osThreadTerminate>
				}
			}
		}


		osDelay(50);
 8000e7a:	2032      	movs	r0, #50	; 0x32
 8000e7c:	f009 fe22 	bl	800aac4 <osDelay>
		if (APP_PAGE == GOL) {
 8000e80:	e793      	b.n	8000daa <game_of_life_t+0x82>
 8000e82:	bf00      	nop
 8000e84:	2000076c 	.word	0x2000076c
 8000e88:	20000764 	.word	0x20000764
 8000e8c:	20000740 	.word	0x20000740
 8000e90:	20000760 	.word	0x20000760
 8000e94:	20000754 	.word	0x20000754
 8000e98:	66666667 	.word	0x66666667
 8000e9c:	20000004 	.word	0x20000004

08000ea0 <ww_timer_func>:
		osMutexRobust,
		NULL,
		0
};

void ww_timer_func () {
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
	ww_step = true;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <ww_timer_func+0x14>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	701a      	strb	r2, [r3, #0]
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	200008c8 	.word	0x200008c8

08000eb8 <ww_display_map>:

void ww_display_map() {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0

		for (int i = 0; i < WW_CELLS_Y_AXIS; i++) {
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	e056      	b.n	8000f72 <ww_display_map+0xba>
			for (int j = 0; j < WW_CELLS_X_AXIS; j++) {
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	e04d      	b.n	8000f66 <ww_display_map+0xae>
				if (ww_map[i][j] == WW_BLACK) {
 8000eca:	494a      	ldr	r1, [pc, #296]	; (8000ff4 <ww_display_map+0x13c>)
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	1a9b      	subs	r3, r3, r2
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	18ca      	adds	r2, r1, r3
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	4413      	add	r3, r2
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d104      	bne.n	8000eec <ww_display_map+0x34>
					BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000ee2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000ee6:	f002 fa3f 	bl	8003368 <BSP_LCD_SetTextColor>
 8000eea:	e023      	b.n	8000f34 <ww_display_map+0x7c>
				} else if (ww_map[i][j] == WW_YELLOW) {
 8000eec:	4941      	ldr	r1, [pc, #260]	; (8000ff4 <ww_display_map+0x13c>)
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	1a9b      	subs	r3, r3, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	18ca      	adds	r2, r1, r3
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	4413      	add	r3, r2
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d104      	bne.n	8000f0e <ww_display_map+0x56>
					BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8000f04:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 8000f08:	f002 fa2e 	bl	8003368 <BSP_LCD_SetTextColor>
 8000f0c:	e012      	b.n	8000f34 <ww_display_map+0x7c>
				} else if (ww_map[i][j] == WW_RED) {
 8000f0e:	4939      	ldr	r1, [pc, #228]	; (8000ff4 <ww_display_map+0x13c>)
 8000f10:	68fa      	ldr	r2, [r7, #12]
 8000f12:	4613      	mov	r3, r2
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	1a9b      	subs	r3, r3, r2
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	18ca      	adds	r2, r1, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4413      	add	r3, r2
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d103      	bne.n	8000f2e <ww_display_map+0x76>
					BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000f26:	4834      	ldr	r0, [pc, #208]	; (8000ff8 <ww_display_map+0x140>)
 8000f28:	f002 fa1e 	bl	8003368 <BSP_LCD_SetTextColor>
 8000f2c:	e002      	b.n	8000f34 <ww_display_map+0x7c>
				} else {
					BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8000f2e:	4833      	ldr	r0, [pc, #204]	; (8000ffc <ww_display_map+0x144>)
 8000f30:	f002 fa1a 	bl	8003368 <BSP_LCD_SetTextColor>
				}
				BSP_LCD_FillRect(WW_BOX_X_START + j * WW_CELL_SIZE + 1, WW_BOX_Y_START + i * WW_CELL_SIZE + 1, WW_CELL_SIZE - 1, WW_CELL_SIZE - 1);
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	461a      	mov	r2, r3
 8000f3a:	0092      	lsls	r2, r2, #2
 8000f3c:	4413      	add	r3, r2
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	33dd      	adds	r3, #221	; 0xdd
 8000f44:	b298      	uxth	r0, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	0092      	lsls	r2, r2, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	3365      	adds	r3, #101	; 0x65
 8000f56:	b299      	uxth	r1, r3
 8000f58:	2327      	movs	r3, #39	; 0x27
 8000f5a:	2227      	movs	r2, #39	; 0x27
 8000f5c:	f002 fc04 	bl	8003768 <BSP_LCD_FillRect>
			for (int j = 0; j < WW_CELLS_X_AXIS; j++) {
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	3301      	adds	r3, #1
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	2b0d      	cmp	r3, #13
 8000f6a:	ddae      	ble.n	8000eca <ww_display_map+0x12>
		for (int i = 0; i < WW_CELLS_Y_AXIS; i++) {
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	3301      	adds	r3, #1
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2b08      	cmp	r3, #8
 8000f76:	dda5      	ble.n	8000ec4 <ww_display_map+0xc>
			}
		}
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000f78:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000f7c:	f002 f9f4 	bl	8003368 <BSP_LCD_SetTextColor>

		for (int i = 0; i < WW_CELLS_Y_AXIS; i++) {
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	e02e      	b.n	8000fe4 <ww_display_map+0x12c>
				for (int j = 0; j < WW_CELLS_X_AXIS; j++) {
 8000f86:	2300      	movs	r3, #0
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	e025      	b.n	8000fd8 <ww_display_map+0x120>
					// Only if all the processes were finished
					if (ww_blue_finished && ww_red_finished) {
 8000f8c:	4b1c      	ldr	r3, [pc, #112]	; (8001000 <ww_display_map+0x148>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d01e      	beq.n	8000fd2 <ww_display_map+0x11a>
 8000f94:	4b1b      	ldr	r3, [pc, #108]	; (8001004 <ww_display_map+0x14c>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d01a      	beq.n	8000fd2 <ww_display_map+0x11a>
						ww_map_prev[j][i] = ww_map[j][i];
 8000f9c:	4915      	ldr	r1, [pc, #84]	; (8000ff4 <ww_display_map+0x13c>)
 8000f9e:	683a      	ldr	r2, [r7, #0]
 8000fa0:	4613      	mov	r3, r2
 8000fa2:	00db      	lsls	r3, r3, #3
 8000fa4:	1a9b      	subs	r3, r3, r2
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	18ca      	adds	r2, r1, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	7818      	ldrb	r0, [r3, #0]
 8000fb0:	4915      	ldr	r1, [pc, #84]	; (8001008 <ww_display_map+0x150>)
 8000fb2:	683a      	ldr	r2, [r7, #0]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	1a9b      	subs	r3, r3, r2
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	18ca      	adds	r2, r1, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	701a      	strb	r2, [r3, #0]
						ww_red_finished = false;
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <ww_display_map+0x14c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
						ww_blue_finished = false;
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <ww_display_map+0x148>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < WW_CELLS_X_AXIS; j++) {
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	603b      	str	r3, [r7, #0]
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	2b0d      	cmp	r3, #13
 8000fdc:	ddd6      	ble.n	8000f8c <ww_display_map+0xd4>
		for (int i = 0; i < WW_CELLS_Y_AXIS; i++) {
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b08      	cmp	r3, #8
 8000fe8:	ddcd      	ble.n	8000f86 <ww_display_map+0xce>
					}
				}
		}
}
 8000fea:	bf00      	nop
 8000fec:	bf00      	nop
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	200007c4 	.word	0x200007c4
 8000ff8:	ffff0000 	.word	0xffff0000
 8000ffc:	ff0000ff 	.word	0xff0000ff
 8001000:	200008ca 	.word	0x200008ca
 8001004:	200008c9 	.word	0x200008c9
 8001008:	20000844 	.word	0x20000844

0800100c <prepare_ww>:

void prepare_ww () {
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001012:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001016:	f002 f9a7 	bl	8003368 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(WW_BOX_X_START, WW_BOX_Y_START, WW_CELLS_X_AXIS * WW_CELL_SIZE, WW_CELLS_Y_AXIS * WW_CELL_SIZE);
 800101a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800101e:	f44f 720c 	mov.w	r2, #560	; 0x230
 8001022:	2164      	movs	r1, #100	; 0x64
 8001024:	20dc      	movs	r0, #220	; 0xdc
 8001026:	f002 fb9f 	bl	8003768 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800102a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800102e:	f002 f99b 	bl	8003368 <BSP_LCD_SetTextColor>

	// draw horizontal lines
	for (int i = 0; i <= WW_CELLS_Y_AXIS; i++) {
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	e011      	b.n	800105c <prepare_ww+0x50>
		BSP_LCD_DrawHLine(WW_BOX_X_START, WW_BOX_Y_START + i * WW_CELL_SIZE, WW_CELLS_X_AXIS * WW_CELL_SIZE);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	b29b      	uxth	r3, r3
 800103c:	461a      	mov	r2, r3
 800103e:	0092      	lsls	r2, r2, #2
 8001040:	4413      	add	r3, r2
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	b29b      	uxth	r3, r3
 8001046:	3364      	adds	r3, #100	; 0x64
 8001048:	b29b      	uxth	r3, r3
 800104a:	f44f 720c 	mov.w	r2, #560	; 0x230
 800104e:	4619      	mov	r1, r3
 8001050:	20dc      	movs	r0, #220	; 0xdc
 8001052:	f002 fb09 	bl	8003668 <BSP_LCD_DrawHLine>
	for (int i = 0; i <= WW_CELLS_Y_AXIS; i++) {
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3301      	adds	r3, #1
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b09      	cmp	r3, #9
 8001060:	ddea      	ble.n	8001038 <prepare_ww+0x2c>
	}

	// draw vertical lines
	for (int i = 0; i <= WW_CELLS_X_AXIS; i++) {
 8001062:	2300      	movs	r3, #0
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	e011      	b.n	800108c <prepare_ww+0x80>
		BSP_LCD_DrawVLine(WW_BOX_X_START + i * WW_CELL_SIZE, WW_BOX_Y_START, WW_CELLS_Y_AXIS * WW_CELL_SIZE);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	b29b      	uxth	r3, r3
 800106c:	461a      	mov	r2, r3
 800106e:	0092      	lsls	r2, r2, #2
 8001070:	4413      	add	r3, r2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	b29b      	uxth	r3, r3
 8001076:	33dc      	adds	r3, #220	; 0xdc
 8001078:	b29b      	uxth	r3, r3
 800107a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800107e:	2164      	movs	r1, #100	; 0x64
 8001080:	4618      	mov	r0, r3
 8001082:	f002 fb2f 	bl	80036e4 <BSP_LCD_DrawVLine>
	for (int i = 0; i <= WW_CELLS_X_AXIS; i++) {
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	3301      	adds	r3, #1
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	2b0e      	cmp	r3, #14
 8001090:	ddea      	ble.n	8001068 <prepare_ww+0x5c>
	}
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001092:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001096:	f002 f967 	bl	8003368 <BSP_LCD_SetTextColor>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <wireworld_t>:

void wireworld_t (void* args) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

	thread_info *ww_info = malloc(sizeof(thread_info));
 80010ac:	2014      	movs	r0, #20
 80010ae:	f00d fb4d 	bl	800e74c <malloc>
 80010b2:	4603      	mov	r3, r0
 80010b4:	60fb      	str	r3, [r7, #12]
	ww_info->pid = WW + 1;
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2203      	movs	r2, #3
 80010ba:	701a      	strb	r2, [r3, #0]
	ww_info->sent_messages = 0;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
	ww_info->stack_size = WW_STACK_CAPACITY;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010c8:	609a      	str	r2, [r3, #8]
	ww_info->time_running = 0;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2200      	movs	r2, #0
 80010ce:	611a      	str	r2, [r3, #16]

	// Starting pattern
	ww_map[0][1] = WW_BLUE;
 80010d0:	4b41      	ldr	r3, [pc, #260]	; (80011d8 <wireworld_t+0x134>)
 80010d2:	2203      	movs	r2, #3
 80010d4:	705a      	strb	r2, [r3, #1]
	ww_map[0][2] = WW_YELLOW;
 80010d6:	4b40      	ldr	r3, [pc, #256]	; (80011d8 <wireworld_t+0x134>)
 80010d8:	2201      	movs	r2, #1
 80010da:	709a      	strb	r2, [r3, #2]
	ww_map[1][0] = WW_RED;
 80010dc:	4b3e      	ldr	r3, [pc, #248]	; (80011d8 <wireworld_t+0x134>)
 80010de:	2202      	movs	r2, #2
 80010e0:	739a      	strb	r2, [r3, #14]
	ww_map[2][1] = WW_YELLOW;
 80010e2:	4b3d      	ldr	r3, [pc, #244]	; (80011d8 <wireworld_t+0x134>)
 80010e4:	2201      	movs	r2, #1
 80010e6:	775a      	strb	r2, [r3, #29]
	ww_map[2][2] = WW_YELLOW;
 80010e8:	4b3b      	ldr	r3, [pc, #236]	; (80011d8 <wireworld_t+0x134>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	779a      	strb	r2, [r3, #30]
	ww_map[1][3] = WW_YELLOW;
 80010ee:	4b3a      	ldr	r3, [pc, #232]	; (80011d8 <wireworld_t+0x134>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	745a      	strb	r2, [r3, #17]

	while(1) {

		if (APP_PAGE == WW) {
 80010f4:	4b39      	ldr	r3, [pc, #228]	; (80011dc <wireworld_t+0x138>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d168      	bne.n	80011ce <wireworld_t+0x12a>
			int stack_space = osThreadGetStackSpace(wirewolrd_taskHandle);
 80010fc:	4b38      	ldr	r3, [pc, #224]	; (80011e0 <wireworld_t+0x13c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f009 fc4b 	bl	800a99c <osThreadGetStackSpace>
 8001106:	4603      	mov	r3, r0
 8001108:	617b      	str	r3, [r7, #20]

			if (ww_step == true) {
 800110a:	4b36      	ldr	r3, [pc, #216]	; (80011e4 <wireworld_t+0x140>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d005      	beq.n	800111e <wireworld_t+0x7a>
				ww_display_map(ww_map);
 8001112:	4831      	ldr	r0, [pc, #196]	; (80011d8 <wireworld_t+0x134>)
 8001114:	f7ff fed0 	bl	8000eb8 <ww_display_map>
				ww_step = false;
 8001118:	4b32      	ldr	r3, [pc, #200]	; (80011e4 <wireworld_t+0x140>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
			}

			mutex_status = osMutexAcquire(ww_mutex_id, osWaitForever);
 800111e:	4b32      	ldr	r3, [pc, #200]	; (80011e8 <wireworld_t+0x144>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001126:	4618      	mov	r0, r3
 8001128:	f009 fe6e 	bl	800ae08 <osMutexAcquire>
 800112c:	4603      	mov	r3, r0
 800112e:	4a2f      	ldr	r2, [pc, #188]	; (80011ec <wireworld_t+0x148>)
 8001130:	6013      	str	r3, [r2, #0]
			if (mutex_status == osOK) {
 8001132:	4b2e      	ldr	r3, [pc, #184]	; (80011ec <wireworld_t+0x148>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d130      	bne.n	800119c <wireworld_t+0xf8>
				if (TS_State.touchX[0] > WW_BOX_X_START && TS_State.touchX[0] < WW_BOX_X_START + WW_CELLS_X_AXIS * WW_CELL_SIZE &&
 800113a:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <wireworld_t+0x14c>)
 800113c:	885b      	ldrh	r3, [r3, #2]
 800113e:	2bdc      	cmp	r3, #220	; 0xdc
 8001140:	d92c      	bls.n	800119c <wireworld_t+0xf8>
 8001142:	4b2b      	ldr	r3, [pc, #172]	; (80011f0 <wireworld_t+0x14c>)
 8001144:	885b      	ldrh	r3, [r3, #2]
 8001146:	f5b3 7f43 	cmp.w	r3, #780	; 0x30c
 800114a:	d227      	bcs.n	800119c <wireworld_t+0xf8>
					TS_State.touchY[0] > WW_BOX_Y_START && TS_State.touchY[0] < WW_BOX_Y_START + WW_CELLS_Y_AXIS * WW_CELL_SIZE) {
 800114c:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <wireworld_t+0x14c>)
 800114e:	88db      	ldrh	r3, [r3, #6]
				if (TS_State.touchX[0] > WW_BOX_X_START && TS_State.touchX[0] < WW_BOX_X_START + WW_CELLS_X_AXIS * WW_CELL_SIZE &&
 8001150:	2b64      	cmp	r3, #100	; 0x64
 8001152:	d923      	bls.n	800119c <wireworld_t+0xf8>
					TS_State.touchY[0] > WW_BOX_Y_START && TS_State.touchY[0] < WW_BOX_Y_START + WW_CELLS_Y_AXIS * WW_CELL_SIZE) {
 8001154:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <wireworld_t+0x14c>)
 8001156:	88db      	ldrh	r3, [r3, #6]
 8001158:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 800115c:	d21e      	bcs.n	800119c <wireworld_t+0xf8>
					uint16_t x = (TS_State.touchX[0] - WW_BOX_X_START) / WW_CELL_SIZE;
 800115e:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <wireworld_t+0x14c>)
 8001160:	885b      	ldrh	r3, [r3, #2]
 8001162:	3bdc      	subs	r3, #220	; 0xdc
 8001164:	4a23      	ldr	r2, [pc, #140]	; (80011f4 <wireworld_t+0x150>)
 8001166:	fb82 1203 	smull	r1, r2, r2, r3
 800116a:	1112      	asrs	r2, r2, #4
 800116c:	17db      	asrs	r3, r3, #31
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	827b      	strh	r3, [r7, #18]
					uint16_t y = (TS_State.touchY[0] - WW_BOX_Y_START) / WW_CELL_SIZE;
 8001172:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <wireworld_t+0x14c>)
 8001174:	88db      	ldrh	r3, [r3, #6]
 8001176:	3b64      	subs	r3, #100	; 0x64
 8001178:	4a1e      	ldr	r2, [pc, #120]	; (80011f4 <wireworld_t+0x150>)
 800117a:	fb82 1203 	smull	r1, r2, r2, r3
 800117e:	1112      	asrs	r2, r2, #4
 8001180:	17db      	asrs	r3, r3, #31
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	823b      	strh	r3, [r7, #16]

					ww_map[y][x] = WW_YELLOW;
 8001186:	8a3a      	ldrh	r2, [r7, #16]
 8001188:	8a79      	ldrh	r1, [r7, #18]
 800118a:	4813      	ldr	r0, [pc, #76]	; (80011d8 <wireworld_t+0x134>)
 800118c:	4613      	mov	r3, r2
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	1a9b      	subs	r3, r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4403      	add	r3, r0
 8001196:	440b      	add	r3, r1
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]
				}
			}
			osMutexRelease(ww_mutex_id);
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <wireworld_t+0x144>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f009 fe8f 	bl	800aec4 <osMutexRelease>

			ww_info->stack_space = stack_space;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	605a      	str	r2, [r3, #4]
			if(osMessageQueuePut(thread_manager_message, &ww_info, 0, osWaitForever) == osOK) {
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <wireworld_t+0x154>)
 80011ae:	6818      	ldr	r0, [r3, #0]
 80011b0:	f107 010c 	add.w	r1, r7, #12
 80011b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011b8:	2200      	movs	r2, #0
 80011ba:	f009 ff59 	bl	800b070 <osMessageQueuePut>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d104      	bne.n	80011ce <wireworld_t+0x12a>
				ww_info->sent_messages += 1;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	3201      	adds	r2, #1
 80011cc:	60da      	str	r2, [r3, #12]
			}
		}

		osDelay(20);
 80011ce:	2014      	movs	r0, #20
 80011d0:	f009 fc78 	bl	800aac4 <osDelay>
		if (APP_PAGE == WW) {
 80011d4:	e78e      	b.n	80010f4 <wireworld_t+0x50>
 80011d6:	bf00      	nop
 80011d8:	200007c4 	.word	0x200007c4
 80011dc:	20000764 	.word	0x20000764
 80011e0:	20000744 	.word	0x20000744
 80011e4:	200008c8 	.word	0x200008c8
 80011e8:	200008cc 	.word	0x200008cc
 80011ec:	200008d0 	.word	0x200008d0
 80011f0:	20000754 	.word	0x20000754
 80011f4:	66666667 	.word	0x66666667
 80011f8:	20000760 	.word	0x20000760

080011fc <ww_red_t>:
	}
}

void ww_red_t () {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
	while (1) {
		mutex_status = osMutexAcquire(ww_mutex_id, osWaitForever);
 8001202:	4b21      	ldr	r3, [pc, #132]	; (8001288 <ww_red_t+0x8c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800120a:	4618      	mov	r0, r3
 800120c:	f009 fdfc 	bl	800ae08 <osMutexAcquire>
 8001210:	4603      	mov	r3, r0
 8001212:	4a1e      	ldr	r2, [pc, #120]	; (800128c <ww_red_t+0x90>)
 8001214:	6013      	str	r3, [r2, #0]
		if (mutex_status == osOK) {
 8001216:	4b1d      	ldr	r3, [pc, #116]	; (800128c <ww_red_t+0x90>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d128      	bne.n	8001270 <ww_red_t+0x74>
			for (int i = 0; i < WW_CELLS_Y_AXIS; i++) {
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	e022      	b.n	800126a <ww_red_t+0x6e>
				for (int j = 0; j < WW_CELLS_X_AXIS; j++) {
 8001224:	2300      	movs	r3, #0
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	e019      	b.n	800125e <ww_red_t+0x62>

					if (ww_map_prev[j][i] == WW_BLUE) {
 800122a:	4919      	ldr	r1, [pc, #100]	; (8001290 <ww_red_t+0x94>)
 800122c:	683a      	ldr	r2, [r7, #0]
 800122e:	4613      	mov	r3, r2
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	1a9b      	subs	r3, r3, r2
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	18ca      	adds	r2, r1, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4413      	add	r3, r2
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b03      	cmp	r3, #3
 8001240:	d10a      	bne.n	8001258 <ww_red_t+0x5c>
						ww_map[j][i] = WW_RED;
 8001242:	4914      	ldr	r1, [pc, #80]	; (8001294 <ww_red_t+0x98>)
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	4613      	mov	r3, r2
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	1a9b      	subs	r3, r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	18ca      	adds	r2, r1, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4413      	add	r3, r2
 8001254:	2202      	movs	r2, #2
 8001256:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < WW_CELLS_X_AXIS; j++) {
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	3301      	adds	r3, #1
 800125c:	603b      	str	r3, [r7, #0]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	2b0d      	cmp	r3, #13
 8001262:	dde2      	ble.n	800122a <ww_red_t+0x2e>
			for (int i = 0; i < WW_CELLS_Y_AXIS; i++) {
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3301      	adds	r3, #1
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b08      	cmp	r3, #8
 800126e:	ddd9      	ble.n	8001224 <ww_red_t+0x28>
					}

				}
			}
		}
		ww_red_finished = true;
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <ww_red_t+0x9c>)
 8001272:	2201      	movs	r2, #1
 8001274:	701a      	strb	r2, [r3, #0]
		osMutexRelease(ww_mutex_id);
 8001276:	4b04      	ldr	r3, [pc, #16]	; (8001288 <ww_red_t+0x8c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f009 fe22 	bl	800aec4 <osMutexRelease>
		osDelay(20);
 8001280:	2014      	movs	r0, #20
 8001282:	f009 fc1f 	bl	800aac4 <osDelay>
		mutex_status = osMutexAcquire(ww_mutex_id, osWaitForever);
 8001286:	e7bc      	b.n	8001202 <ww_red_t+0x6>
 8001288:	200008cc 	.word	0x200008cc
 800128c:	200008d0 	.word	0x200008d0
 8001290:	20000844 	.word	0x20000844
 8001294:	200007c4 	.word	0x200007c4
 8001298:	200008c9 	.word	0x200008c9

0800129c <prepare_pages>:
		osMutexRelease(ww_mutex_id);
		osDelay(20);
	}
}

void prepare_pages() {
 800129c:	b598      	push	{r3, r4, r7, lr}
 800129e:	af00      	add	r7, sp, #0
	if (APP_PAGE == FIB) {
 80012a0:	4b2c      	ldr	r3, [pc, #176]	; (8001354 <prepare_pages+0xb8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d11a      	bne.n	80012de <prepare_pages+0x42>
		BSP_LCD_SetTextColor(LCD_COLOR_DARKYELLOW);
 80012a8:	482b      	ldr	r0, [pc, #172]	; (8001358 <prepare_pages+0xbc>)
 80012aa:	f002 f85d 	bl	8003368 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(STACK_VIEW_WIDTH, MENU_HEIGHT, BSP_LCD_GetXSize() - STACK_VIEW_WIDTH, BSP_LCD_GetYSize() - MENU_HEIGHT);
 80012ae:	f001 ffe3 	bl	8003278 <BSP_LCD_GetXSize>
 80012b2:	4603      	mov	r3, r0
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	3bc8      	subs	r3, #200	; 0xc8
 80012b8:	b29c      	uxth	r4, r3
 80012ba:	f001 ffe9 	bl	8003290 <BSP_LCD_GetYSize>
 80012be:	4603      	mov	r3, r0
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	3b4b      	subs	r3, #75	; 0x4b
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	4622      	mov	r2, r4
 80012c8:	214b      	movs	r1, #75	; 0x4b
 80012ca:	20c8      	movs	r0, #200	; 0xc8
 80012cc:	f002 fa4c 	bl	8003768 <BSP_LCD_FillRect>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80012d0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80012d4:	f002 f848 	bl	8003368 <BSP_LCD_SetTextColor>
		fibonacci_prepare();
 80012d8:	f7ff fa12 	bl	8000700 <fibonacci_prepare>
		BSP_LCD_SetTextColor(LCD_COLOR_DARKMAGENTA);
		BSP_LCD_FillRect(STACK_VIEW_WIDTH, MENU_HEIGHT, BSP_LCD_GetXSize() - STACK_VIEW_WIDTH, BSP_LCD_GetYSize() - MENU_HEIGHT);
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
		prepare_ww();
	}
}
 80012dc:	e038      	b.n	8001350 <prepare_pages+0xb4>
	} else if (APP_PAGE == GOL) {
 80012de:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <prepare_pages+0xb8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d11a      	bne.n	800131c <prepare_pages+0x80>
		BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
 80012e6:	481d      	ldr	r0, [pc, #116]	; (800135c <prepare_pages+0xc0>)
 80012e8:	f002 f83e 	bl	8003368 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(STACK_VIEW_WIDTH, MENU_HEIGHT, BSP_LCD_GetXSize() - STACK_VIEW_WIDTH, BSP_LCD_GetYSize() - MENU_HEIGHT);
 80012ec:	f001 ffc4 	bl	8003278 <BSP_LCD_GetXSize>
 80012f0:	4603      	mov	r3, r0
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	3bc8      	subs	r3, #200	; 0xc8
 80012f6:	b29c      	uxth	r4, r3
 80012f8:	f001 ffca 	bl	8003290 <BSP_LCD_GetYSize>
 80012fc:	4603      	mov	r3, r0
 80012fe:	b29b      	uxth	r3, r3
 8001300:	3b4b      	subs	r3, #75	; 0x4b
 8001302:	b29b      	uxth	r3, r3
 8001304:	4622      	mov	r2, r4
 8001306:	214b      	movs	r1, #75	; 0x4b
 8001308:	20c8      	movs	r0, #200	; 0xc8
 800130a:	f002 fa2d 	bl	8003768 <BSP_LCD_FillRect>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800130e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001312:	f002 f829 	bl	8003368 <BSP_LCD_SetTextColor>
		prepare_gol();
 8001316:	f7ff faf5 	bl	8000904 <prepare_gol>
}
 800131a:	e019      	b.n	8001350 <prepare_pages+0xb4>
		BSP_LCD_SetTextColor(LCD_COLOR_DARKMAGENTA);
 800131c:	4810      	ldr	r0, [pc, #64]	; (8001360 <prepare_pages+0xc4>)
 800131e:	f002 f823 	bl	8003368 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(STACK_VIEW_WIDTH, MENU_HEIGHT, BSP_LCD_GetXSize() - STACK_VIEW_WIDTH, BSP_LCD_GetYSize() - MENU_HEIGHT);
 8001322:	f001 ffa9 	bl	8003278 <BSP_LCD_GetXSize>
 8001326:	4603      	mov	r3, r0
 8001328:	b29b      	uxth	r3, r3
 800132a:	3bc8      	subs	r3, #200	; 0xc8
 800132c:	b29c      	uxth	r4, r3
 800132e:	f001 ffaf 	bl	8003290 <BSP_LCD_GetYSize>
 8001332:	4603      	mov	r3, r0
 8001334:	b29b      	uxth	r3, r3
 8001336:	3b4b      	subs	r3, #75	; 0x4b
 8001338:	b29b      	uxth	r3, r3
 800133a:	4622      	mov	r2, r4
 800133c:	214b      	movs	r1, #75	; 0x4b
 800133e:	20c8      	movs	r0, #200	; 0xc8
 8001340:	f002 fa12 	bl	8003768 <BSP_LCD_FillRect>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001344:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001348:	f002 f80e 	bl	8003368 <BSP_LCD_SetTextColor>
		prepare_ww();
 800134c:	f7ff fe5e 	bl	800100c <prepare_ww>
}
 8001350:	bf00      	nop
 8001352:	bd98      	pop	{r3, r4, r7, pc}
 8001354:	20000764 	.word	0x20000764
 8001358:	ff808000 	.word	0xff808000
 800135c:	ff404040 	.word	0xff404040
 8001360:	ff800080 	.word	0xff800080

08001364 <refresh_navigation>:

void refresh_navigation() {
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	if (prev_page != APP_PAGE) {
 8001368:	4b35      	ldr	r3, [pc, #212]	; (8001440 <refresh_navigation+0xdc>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b35      	ldr	r3, [pc, #212]	; (8001444 <refresh_navigation+0xe0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	429a      	cmp	r2, r3
 8001372:	d05f      	beq.n	8001434 <refresh_navigation+0xd0>
		BSP_LCD_DisplayStringAt(50, 20, (uint8_t*) "Fibonacci", LEFT_MODE);
 8001374:	2303      	movs	r3, #3
 8001376:	4a34      	ldr	r2, [pc, #208]	; (8001448 <refresh_navigation+0xe4>)
 8001378:	2114      	movs	r1, #20
 800137a:	2032      	movs	r0, #50	; 0x32
 800137c:	f002 f8ac 	bl	80034d8 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(300, 20, (uint8_t*) "Game of Life", LEFT_MODE);
 8001380:	2303      	movs	r3, #3
 8001382:	4a32      	ldr	r2, [pc, #200]	; (800144c <refresh_navigation+0xe8>)
 8001384:	2114      	movs	r1, #20
 8001386:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800138a:	f002 f8a5 	bl	80034d8 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(580, 20, (uint8_t*) "Worldwire", LEFT_MODE);
 800138e:	2303      	movs	r3, #3
 8001390:	4a2f      	ldr	r2, [pc, #188]	; (8001450 <refresh_navigation+0xec>)
 8001392:	2114      	movs	r1, #20
 8001394:	f44f 7011 	mov.w	r0, #580	; 0x244
 8001398:	f002 f89e 	bl	80034d8 <BSP_LCD_DisplayStringAt>

		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800139c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013a0:	f001 ffe2 	bl	8003368 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80013a4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80013a8:	f001 fff6 	bl	8003398 <BSP_LCD_SetBackColor>
		if (APP_PAGE == FIB) {
 80013ac:	4b25      	ldr	r3, [pc, #148]	; (8001444 <refresh_navigation+0xe0>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d106      	bne.n	80013c2 <refresh_navigation+0x5e>
			BSP_LCD_DisplayStringAt(50, 20, (uint8_t*) "Fibonacci", LEFT_MODE);
 80013b4:	2303      	movs	r3, #3
 80013b6:	4a24      	ldr	r2, [pc, #144]	; (8001448 <refresh_navigation+0xe4>)
 80013b8:	2114      	movs	r1, #20
 80013ba:	2032      	movs	r0, #50	; 0x32
 80013bc:	f002 f88c 	bl	80034d8 <BSP_LCD_DisplayStringAt>
 80013c0:	e012      	b.n	80013e8 <refresh_navigation+0x84>
		} else if (APP_PAGE == GOL) {
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <refresh_navigation+0xe0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d107      	bne.n	80013da <refresh_navigation+0x76>
			BSP_LCD_DisplayStringAt(300, 20, (uint8_t*) "Game of Life", LEFT_MODE);
 80013ca:	2303      	movs	r3, #3
 80013cc:	4a1f      	ldr	r2, [pc, #124]	; (800144c <refresh_navigation+0xe8>)
 80013ce:	2114      	movs	r1, #20
 80013d0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80013d4:	f002 f880 	bl	80034d8 <BSP_LCD_DisplayStringAt>
 80013d8:	e006      	b.n	80013e8 <refresh_navigation+0x84>
		} else {
			BSP_LCD_DisplayStringAt(580, 20, (uint8_t*) "Wireworld", LEFT_MODE);
 80013da:	2303      	movs	r3, #3
 80013dc:	4a1d      	ldr	r2, [pc, #116]	; (8001454 <refresh_navigation+0xf0>)
 80013de:	2114      	movs	r1, #20
 80013e0:	f44f 7011 	mov.w	r0, #580	; 0x244
 80013e4:	f002 f878 	bl	80034d8 <BSP_LCD_DisplayStringAt>
		}
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80013e8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80013ec:	f001 ffbc 	bl	8003368 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013f4:	f001 ffd0 	bl	8003398 <BSP_LCD_SetBackColor>

		BSP_LCD_DisplayStringAt(10, 100, (uint8_t*) "           ", LEFT_MODE);
 80013f8:	2303      	movs	r3, #3
 80013fa:	4a17      	ldr	r2, [pc, #92]	; (8001458 <refresh_navigation+0xf4>)
 80013fc:	2164      	movs	r1, #100	; 0x64
 80013fe:	200a      	movs	r0, #10
 8001400:	f002 f86a 	bl	80034d8 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(10, 130, (uint8_t*) "           ", LEFT_MODE);
 8001404:	2303      	movs	r3, #3
 8001406:	4a14      	ldr	r2, [pc, #80]	; (8001458 <refresh_navigation+0xf4>)
 8001408:	2182      	movs	r1, #130	; 0x82
 800140a:	200a      	movs	r0, #10
 800140c:	f002 f864 	bl	80034d8 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(10, 160, (uint8_t*) "           ", LEFT_MODE);
 8001410:	2303      	movs	r3, #3
 8001412:	4a11      	ldr	r2, [pc, #68]	; (8001458 <refresh_navigation+0xf4>)
 8001414:	21a0      	movs	r1, #160	; 0xa0
 8001416:	200a      	movs	r0, #10
 8001418:	f002 f85e 	bl	80034d8 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(10, 190, (uint8_t*) "           ", LEFT_MODE);
 800141c:	2303      	movs	r3, #3
 800141e:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <refresh_navigation+0xf4>)
 8001420:	21be      	movs	r1, #190	; 0xbe
 8001422:	200a      	movs	r0, #10
 8001424:	f002 f858 	bl	80034d8 <BSP_LCD_DisplayStringAt>

		prepare_pages();
 8001428:	f7ff ff38 	bl	800129c <prepare_pages>
		prev_page = APP_PAGE;
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <refresh_navigation+0xe0>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a03      	ldr	r2, [pc, #12]	; (8001440 <refresh_navigation+0xdc>)
 8001432:	6013      	str	r3, [r2, #0]
	}
	osDelay(20);
 8001434:	2014      	movs	r0, #20
 8001436:	f009 fb45 	bl	800aac4 <osDelay>

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000768 	.word	0x20000768
 8001444:	20000764 	.word	0x20000764
 8001448:	0800f0ac 	.word	0x0800f0ac
 800144c:	0800f0b8 	.word	0x0800f0b8
 8001450:	0800f0c8 	.word	0x0800f0c8
 8001454:	0800f0d4 	.word	0x0800f0d4
 8001458:	0800f0e0 	.word	0x0800f0e0

0800145c <prepare_navigation>:

void prepare_navigation() {
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
	BSP_LCD_DisplayStringAt(10, 100, (uint8_t*) "           ", LEFT_MODE);
 8001460:	2303      	movs	r3, #3
 8001462:	4a2e      	ldr	r2, [pc, #184]	; (800151c <prepare_navigation+0xc0>)
 8001464:	2164      	movs	r1, #100	; 0x64
 8001466:	200a      	movs	r0, #10
 8001468:	f002 f836 	bl	80034d8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(10, 130, (uint8_t*) "           ", LEFT_MODE);
 800146c:	2303      	movs	r3, #3
 800146e:	4a2b      	ldr	r2, [pc, #172]	; (800151c <prepare_navigation+0xc0>)
 8001470:	2182      	movs	r1, #130	; 0x82
 8001472:	200a      	movs	r0, #10
 8001474:	f002 f830 	bl	80034d8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(10, 160, (uint8_t*) "           ", LEFT_MODE);
 8001478:	2303      	movs	r3, #3
 800147a:	4a28      	ldr	r2, [pc, #160]	; (800151c <prepare_navigation+0xc0>)
 800147c:	21a0      	movs	r1, #160	; 0xa0
 800147e:	200a      	movs	r0, #10
 8001480:	f002 f82a 	bl	80034d8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(10, 190, (uint8_t*) "           ", LEFT_MODE);
 8001484:	2303      	movs	r3, #3
 8001486:	4a25      	ldr	r2, [pc, #148]	; (800151c <prepare_navigation+0xc0>)
 8001488:	21be      	movs	r1, #190	; 0xbe
 800148a:	200a      	movs	r0, #10
 800148c:	f002 f824 	bl	80034d8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(50, 20, (uint8_t*) "Fibonacci", LEFT_MODE);
 8001490:	2303      	movs	r3, #3
 8001492:	4a23      	ldr	r2, [pc, #140]	; (8001520 <prepare_navigation+0xc4>)
 8001494:	2114      	movs	r1, #20
 8001496:	2032      	movs	r0, #50	; 0x32
 8001498:	f002 f81e 	bl	80034d8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(300, 20, (uint8_t*) "Game of Life", LEFT_MODE);
 800149c:	2303      	movs	r3, #3
 800149e:	4a21      	ldr	r2, [pc, #132]	; (8001524 <prepare_navigation+0xc8>)
 80014a0:	2114      	movs	r1, #20
 80014a2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80014a6:	f002 f817 	bl	80034d8 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(580, 20, (uint8_t*) "Worldwire", LEFT_MODE);
 80014aa:	2303      	movs	r3, #3
 80014ac:	4a1e      	ldr	r2, [pc, #120]	; (8001528 <prepare_navigation+0xcc>)
 80014ae:	2114      	movs	r1, #20
 80014b0:	f44f 7011 	mov.w	r0, #580	; 0x244
 80014b4:	f002 f810 	bl	80034d8 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014bc:	f001 ff54 	bl	8003368 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80014c0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80014c4:	f001 ff68 	bl	8003398 <BSP_LCD_SetBackColor>
	if (APP_PAGE == FIB) {
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <prepare_navigation+0xd0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d106      	bne.n	80014de <prepare_navigation+0x82>
	BSP_LCD_DisplayStringAt(50, 20, (uint8_t*) "Fibonacci", LEFT_MODE);
 80014d0:	2303      	movs	r3, #3
 80014d2:	4a13      	ldr	r2, [pc, #76]	; (8001520 <prepare_navigation+0xc4>)
 80014d4:	2114      	movs	r1, #20
 80014d6:	2032      	movs	r0, #50	; 0x32
 80014d8:	f001 fffe 	bl	80034d8 <BSP_LCD_DisplayStringAt>
 80014dc:	e012      	b.n	8001504 <prepare_navigation+0xa8>
	} else if (APP_PAGE == GOL) {
 80014de:	4b13      	ldr	r3, [pc, #76]	; (800152c <prepare_navigation+0xd0>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d107      	bne.n	80014f6 <prepare_navigation+0x9a>
	BSP_LCD_DisplayStringAt(300, 20, (uint8_t*) "Game of Life", LEFT_MODE);
 80014e6:	2303      	movs	r3, #3
 80014e8:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <prepare_navigation+0xc8>)
 80014ea:	2114      	movs	r1, #20
 80014ec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80014f0:	f001 fff2 	bl	80034d8 <BSP_LCD_DisplayStringAt>
 80014f4:	e006      	b.n	8001504 <prepare_navigation+0xa8>
	} else {
	BSP_LCD_DisplayStringAt(580, 20, (uint8_t*) "Worldwire", LEFT_MODE);
 80014f6:	2303      	movs	r3, #3
 80014f8:	4a0b      	ldr	r2, [pc, #44]	; (8001528 <prepare_navigation+0xcc>)
 80014fa:	2114      	movs	r1, #20
 80014fc:	f44f 7011 	mov.w	r0, #580	; 0x244
 8001500:	f001 ffea 	bl	80034d8 <BSP_LCD_DisplayStringAt>
	}

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001504:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001508:	f001 ff2e 	bl	8003368 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800150c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001510:	f001 ff42 	bl	8003398 <BSP_LCD_SetBackColor>

	prepare_pages();
 8001514:	f7ff fec2 	bl	800129c <prepare_pages>
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	0800f0e0 	.word	0x0800f0e0
 8001520:	0800f0ac 	.word	0x0800f0ac
 8001524:	0800f0b8 	.word	0x0800f0b8
 8001528:	0800f0c8 	.word	0x0800f0c8
 800152c:	20000764 	.word	0x20000764

08001530 <LCD_manager_t>:

void LCD_manager_t (void* args) {
 8001530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001534:	b0ad      	sub	sp, #180	; 0xb4
 8001536:	af00      	add	r7, sp, #0
 8001538:	63f8      	str	r0, [r7, #60]	; 0x3c

	prepare_navigation();
 800153a:	f7ff ff8f 	bl	800145c <prepare_navigation>

	thread_info *received_message = malloc(sizeof(thread_info));
 800153e:	2014      	movs	r0, #20
 8001540:	f00d f904 	bl	800e74c <malloc>
 8001544:	4603      	mov	r3, r0
 8001546:	65fb      	str	r3, [r7, #92]	; 0x5c

	while(1) {
 8001548:	466b      	mov	r3, sp
 800154a:	461e      	mov	r6, r3
		int number_of_active_threads = osThreadGetCount();
 800154c:	f009 fa94 	bl	800aa78 <osThreadGetCount>
 8001550:	4603      	mov	r3, r0
 8001552:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		int number_of_active_threads_strlen = integer_length(number_of_active_threads);
 8001556:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800155a:	f7ff f865 	bl	8000628 <integer_length>
 800155e:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
		char number_of_active_threads_str[number_of_active_threads_strlen];
 8001562:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8001566:	1e4b      	subs	r3, r1, #1
 8001568:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800156c:	460a      	mov	r2, r1
 800156e:	2300      	movs	r3, #0
 8001570:	633a      	str	r2, [r7, #48]	; 0x30
 8001572:	637b      	str	r3, [r7, #52]	; 0x34
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	f04f 0300 	mov.w	r3, #0
 800157c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800157e:	00c3      	lsls	r3, r0, #3
 8001580:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001582:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001586:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001588:	00c2      	lsls	r2, r0, #3
 800158a:	460a      	mov	r2, r1
 800158c:	2300      	movs	r3, #0
 800158e:	4614      	mov	r4, r2
 8001590:	461d      	mov	r5, r3
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	f04f 0300 	mov.w	r3, #0
 800159a:	00eb      	lsls	r3, r5, #3
 800159c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015a0:	00e2      	lsls	r2, r4, #3
 80015a2:	460b      	mov	r3, r1
 80015a4:	3307      	adds	r3, #7
 80015a6:	08db      	lsrs	r3, r3, #3
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	ebad 0d03 	sub.w	sp, sp, r3
 80015ae:	466b      	mov	r3, sp
 80015b0:	3300      	adds	r3, #0
 80015b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		sprintf(number_of_active_threads_str, "Threads: %d", number_of_active_threads);
 80015b6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80015ba:	49ba      	ldr	r1, [pc, #744]	; (80018a4 <LCD_manager_t+0x374>)
 80015bc:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80015c0:	f00d f9d2 	bl	800e968 <siprintf>
 		BSP_LCD_DisplayStringAt(10, 380, (uint8_t*) number_of_active_threads_str, LEFT_MODE);
 80015c4:	2303      	movs	r3, #3
 80015c6:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80015ca:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80015ce:	200a      	movs	r0, #10
 80015d0:	f001 ff82 	bl	80034d8 <BSP_LCD_DisplayStringAt>


		BSP_TS_GetState(&TS_State);
 80015d4:	48b4      	ldr	r0, [pc, #720]	; (80018a8 <LCD_manager_t+0x378>)
 80015d6:	f002 fd1d 	bl	8004014 <BSP_TS_GetState>
		if (TS_State.touchDetected > 0) {
 80015da:	4bb3      	ldr	r3, [pc, #716]	; (80018a8 <LCD_manager_t+0x378>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d01d      	beq.n	800161e <LCD_manager_t+0xee>
			if (TS_State.touchY[0] < 75) {
 80015e2:	4bb1      	ldr	r3, [pc, #708]	; (80018a8 <LCD_manager_t+0x378>)
 80015e4:	88db      	ldrh	r3, [r3, #6]
 80015e6:	2b4a      	cmp	r3, #74	; 0x4a
 80015e8:	d819      	bhi.n	800161e <LCD_manager_t+0xee>
				if (TS_State.touchX[0] < 267) {
 80015ea:	4baf      	ldr	r3, [pc, #700]	; (80018a8 <LCD_manager_t+0x378>)
 80015ec:	885b      	ldrh	r3, [r3, #2]
 80015ee:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 80015f2:	d803      	bhi.n	80015fc <LCD_manager_t+0xcc>
					APP_PAGE = FIB;
 80015f4:	4aad      	ldr	r2, [pc, #692]	; (80018ac <LCD_manager_t+0x37c>)
 80015f6:	2300      	movs	r3, #0
 80015f8:	6013      	str	r3, [r2, #0]
 80015fa:	e010      	b.n	800161e <LCD_manager_t+0xee>
				} else if (TS_State.touchX[0] > 267 && TS_State.touchX[0] < 533) {
 80015fc:	4baa      	ldr	r3, [pc, #680]	; (80018a8 <LCD_manager_t+0x378>)
 80015fe:	885b      	ldrh	r3, [r3, #2]
 8001600:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8001604:	d308      	bcc.n	8001618 <LCD_manager_t+0xe8>
 8001606:	4ba8      	ldr	r3, [pc, #672]	; (80018a8 <LCD_manager_t+0x378>)
 8001608:	885b      	ldrh	r3, [r3, #2]
 800160a:	f5b3 7f05 	cmp.w	r3, #532	; 0x214
 800160e:	d803      	bhi.n	8001618 <LCD_manager_t+0xe8>
					APP_PAGE = GOL;
 8001610:	4aa6      	ldr	r2, [pc, #664]	; (80018ac <LCD_manager_t+0x37c>)
 8001612:	2301      	movs	r3, #1
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	e002      	b.n	800161e <LCD_manager_t+0xee>
				} else {
					APP_PAGE = WW;
 8001618:	4aa4      	ldr	r2, [pc, #656]	; (80018ac <LCD_manager_t+0x37c>)
 800161a:	2302      	movs	r3, #2
 800161c:	6013      	str	r3, [r2, #0]
				}
			}
		}
		refresh_navigation();
 800161e:	f7ff fea1 	bl	8001364 <refresh_navigation>

		// stack view
		osMessageQueueGet(thread_manager_message, &received_message, NULL, osWaitForever);
 8001622:	4ba3      	ldr	r3, [pc, #652]	; (80018b0 <LCD_manager_t+0x380>)
 8001624:	6818      	ldr	r0, [r3, #0]
 8001626:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800162a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800162e:	2200      	movs	r2, #0
 8001630:	f009 fd92 	bl	800b158 <osMessageQueueGet>

		int pid = received_message->pid;
 8001634:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		int pid_strlen = integer_length(pid);
 800163c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8001640:	f7fe fff2 	bl	8000628 <integer_length>
 8001644:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
		char PID[] = "PID";
 8001648:	4b9a      	ldr	r3, [pc, #616]	; (80018b4 <LCD_manager_t+0x384>)
 800164a:	65bb      	str	r3, [r7, #88]	; 0x58
		char pid_str[strlen(PID) + pid_strlen];
 800164c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe fdf5 	bl	8000240 <strlen>
 8001656:	4602      	mov	r2, r0
 8001658:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800165c:	18d1      	adds	r1, r2, r3
 800165e:	460b      	mov	r3, r1
 8001660:	3b01      	subs	r3, #1
 8001662:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001666:	2300      	movs	r3, #0
 8001668:	62b9      	str	r1, [r7, #40]	; 0x28
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	f04f 0300 	mov.w	r3, #0
 8001674:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001676:	00c3      	lsls	r3, r0, #3
 8001678:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800167a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800167e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001680:	00c2      	lsls	r2, r0, #3
 8001682:	2300      	movs	r3, #0
 8001684:	6239      	str	r1, [r7, #32]
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	f04f 0300 	mov.w	r3, #0
 8001690:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001692:	00c3      	lsls	r3, r0, #3
 8001694:	6a38      	ldr	r0, [r7, #32]
 8001696:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800169a:	6a38      	ldr	r0, [r7, #32]
 800169c:	00c2      	lsls	r2, r0, #3
 800169e:	1dcb      	adds	r3, r1, #7
 80016a0:	08db      	lsrs	r3, r3, #3
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	ebad 0d03 	sub.w	sp, sp, r3
 80016a8:	466b      	mov	r3, sp
 80016aa:	3300      	adds	r3, #0
 80016ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		sprintf(pid_str, "%s:%d", PID, pid);
 80016b0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80016b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016b8:	497f      	ldr	r1, [pc, #508]	; (80018b8 <LCD_manager_t+0x388>)
 80016ba:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80016be:	f00d f953 	bl	800e968 <siprintf>
		BSP_LCD_DisplayStringAt(10, 100, (uint8_t*) pid_str, LEFT_MODE);
 80016c2:	2303      	movs	r3, #3
 80016c4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80016c8:	2164      	movs	r1, #100	; 0x64
 80016ca:	200a      	movs	r0, #10
 80016cc:	f001 ff04 	bl	80034d8 <BSP_LCD_DisplayStringAt>

		int stack_space = received_message->stack_space;
 80016d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		int stack_space_strlen = integer_length(stack_space);
 80016d8:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80016dc:	f7fe ffa4 	bl	8000628 <integer_length>
 80016e0:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		char stack_sp[] = "Unused";
 80016e4:	4b75      	ldr	r3, [pc, #468]	; (80018bc <LCD_manager_t+0x38c>)
 80016e6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80016ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80016ee:	6010      	str	r0, [r2, #0]
 80016f0:	3204      	adds	r2, #4
 80016f2:	8011      	strh	r1, [r2, #0]
 80016f4:	3202      	adds	r2, #2
 80016f6:	0c0b      	lsrs	r3, r1, #16
 80016f8:	7013      	strb	r3, [r2, #0]
		char stack_space_str[strlen(stack_sp) + stack_space_strlen];
 80016fa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016fe:	4618      	mov	r0, r3
 8001700:	f7fe fd9e 	bl	8000240 <strlen>
 8001704:	4602      	mov	r2, r0
 8001706:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800170a:	18d1      	adds	r1, r2, r3
 800170c:	460b      	mov	r3, r1
 800170e:	3b01      	subs	r3, #1
 8001710:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001714:	2300      	movs	r3, #0
 8001716:	61b9      	str	r1, [r7, #24]
 8001718:	61fb      	str	r3, [r7, #28]
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	f04f 0300 	mov.w	r3, #0
 8001722:	69f8      	ldr	r0, [r7, #28]
 8001724:	00c3      	lsls	r3, r0, #3
 8001726:	69b8      	ldr	r0, [r7, #24]
 8001728:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800172c:	69b8      	ldr	r0, [r7, #24]
 800172e:	00c2      	lsls	r2, r0, #3
 8001730:	2300      	movs	r3, #0
 8001732:	6139      	str	r1, [r7, #16]
 8001734:	617b      	str	r3, [r7, #20]
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	6978      	ldr	r0, [r7, #20]
 8001740:	00c3      	lsls	r3, r0, #3
 8001742:	6938      	ldr	r0, [r7, #16]
 8001744:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001748:	6938      	ldr	r0, [r7, #16]
 800174a:	00c2      	lsls	r2, r0, #3
 800174c:	1dcb      	adds	r3, r1, #7
 800174e:	08db      	lsrs	r3, r3, #3
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	ebad 0d03 	sub.w	sp, sp, r3
 8001756:	466b      	mov	r3, sp
 8001758:	3300      	adds	r3, #0
 800175a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		sprintf(stack_space_str, "%s:%04d", stack_sp, stack_space);
 800175e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001762:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001766:	4956      	ldr	r1, [pc, #344]	; (80018c0 <LCD_manager_t+0x390>)
 8001768:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800176c:	f00d f8fc 	bl	800e968 <siprintf>
		BSP_LCD_DisplayStringAt(10, 130, (uint8_t*) stack_space_str, LEFT_MODE);
 8001770:	2303      	movs	r3, #3
 8001772:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001776:	2182      	movs	r1, #130	; 0x82
 8001778:	200a      	movs	r0, #10
 800177a:	f001 fead 	bl	80034d8 <BSP_LCD_DisplayStringAt>

		int stack_size = received_message->stack_size;
 800177e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	67fb      	str	r3, [r7, #124]	; 0x7c
		int stack_size_strlen = integer_length(stack_size);
 8001784:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001786:	f7fe ff4f 	bl	8000628 <integer_length>
 800178a:	67b8      	str	r0, [r7, #120]	; 0x78
		char stack_si[] = "Size";
 800178c:	4a4d      	ldr	r2, [pc, #308]	; (80018c4 <LCD_manager_t+0x394>)
 800178e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001792:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001796:	6018      	str	r0, [r3, #0]
 8001798:	3304      	adds	r3, #4
 800179a:	7019      	strb	r1, [r3, #0]
		char stack_size_str[strlen(stack_si) + stack_size_strlen];
 800179c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fd4d 	bl	8000240 <strlen>
 80017a6:	4602      	mov	r2, r0
 80017a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017aa:	18d1      	adds	r1, r2, r3
 80017ac:	460b      	mov	r3, r1
 80017ae:	3b01      	subs	r3, #1
 80017b0:	677b      	str	r3, [r7, #116]	; 0x74
 80017b2:	2300      	movs	r3, #0
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	f04f 0200 	mov.w	r2, #0
 80017bc:	f04f 0300 	mov.w	r3, #0
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	00c3      	lsls	r3, r0, #3
 80017c4:	68b8      	ldr	r0, [r7, #8]
 80017c6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80017ca:	68b8      	ldr	r0, [r7, #8]
 80017cc:	00c2      	lsls	r2, r0, #3
 80017ce:	2300      	movs	r3, #0
 80017d0:	6039      	str	r1, [r7, #0]
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	f04f 0200 	mov.w	r2, #0
 80017d8:	f04f 0300 	mov.w	r3, #0
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	00c3      	lsls	r3, r0, #3
 80017e0:	6838      	ldr	r0, [r7, #0]
 80017e2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80017e6:	6838      	ldr	r0, [r7, #0]
 80017e8:	00c2      	lsls	r2, r0, #3
 80017ea:	1dcb      	adds	r3, r1, #7
 80017ec:	08db      	lsrs	r3, r3, #3
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	ebad 0d03 	sub.w	sp, sp, r3
 80017f4:	466b      	mov	r3, sp
 80017f6:	3300      	adds	r3, #0
 80017f8:	673b      	str	r3, [r7, #112]	; 0x70
		sprintf(stack_size_str, "%s:%04d", stack_si, stack_size);
 80017fa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80017fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001800:	492f      	ldr	r1, [pc, #188]	; (80018c0 <LCD_manager_t+0x390>)
 8001802:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001804:	f00d f8b0 	bl	800e968 <siprintf>
		BSP_LCD_DisplayStringAt(10, 160, (uint8_t*) stack_size_str, LEFT_MODE);
 8001808:	2303      	movs	r3, #3
 800180a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800180c:	21a0      	movs	r1, #160	; 0xa0
 800180e:	200a      	movs	r0, #10
 8001810:	f001 fe62 	bl	80034d8 <BSP_LCD_DisplayStringAt>

		int sent_messages = received_message->sent_messages;
 8001814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	66fb      	str	r3, [r7, #108]	; 0x6c
		int sent_messages_strlen = integer_length(sent_messages);
 800181a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800181c:	f7fe ff04 	bl	8000628 <integer_length>
 8001820:	66b8      	str	r0, [r7, #104]	; 0x68
		char MSG[] = "MSG";
 8001822:	4b29      	ldr	r3, [pc, #164]	; (80018c8 <LCD_manager_t+0x398>)
 8001824:	647b      	str	r3, [r7, #68]	; 0x44
		char sent_messages_str[strlen(MSG) + sent_messages_strlen];
 8001826:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fd08 	bl	8000240 <strlen>
 8001830:	4602      	mov	r2, r0
 8001832:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001834:	18d1      	adds	r1, r2, r3
 8001836:	460b      	mov	r3, r1
 8001838:	3b01      	subs	r3, #1
 800183a:	667b      	str	r3, [r7, #100]	; 0x64
 800183c:	2300      	movs	r3, #0
 800183e:	468a      	mov	sl, r1
 8001840:	469b      	mov	fp, r3
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800184e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001852:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001856:	2300      	movs	r3, #0
 8001858:	4688      	mov	r8, r1
 800185a:	4699      	mov	r9, r3
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	f04f 0300 	mov.w	r3, #0
 8001864:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001868:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800186c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001870:	1dcb      	adds	r3, r1, #7
 8001872:	08db      	lsrs	r3, r3, #3
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	ebad 0d03 	sub.w	sp, sp, r3
 800187a:	466b      	mov	r3, sp
 800187c:	3300      	adds	r3, #0
 800187e:	663b      	str	r3, [r7, #96]	; 0x60
		sprintf(sent_messages_str, "%s:%04d", MSG, sent_messages);
 8001880:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001886:	490e      	ldr	r1, [pc, #56]	; (80018c0 <LCD_manager_t+0x390>)
 8001888:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800188a:	f00d f86d 	bl	800e968 <siprintf>
		BSP_LCD_DisplayStringAt(10, 190, (uint8_t*) sent_messages_str, LEFT_MODE);
 800188e:	2303      	movs	r3, #3
 8001890:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001892:	21be      	movs	r1, #190	; 0xbe
 8001894:	200a      	movs	r0, #10
 8001896:	f001 fe1f 	bl	80034d8 <BSP_LCD_DisplayStringAt>

		osDelay(50);
 800189a:	2032      	movs	r0, #50	; 0x32
 800189c:	f009 f912 	bl	800aac4 <osDelay>
 80018a0:	46b5      	mov	sp, r6
	while(1) {
 80018a2:	e651      	b.n	8001548 <LCD_manager_t+0x18>
 80018a4:	0800f0ec 	.word	0x0800f0ec
 80018a8:	20000754 	.word	0x20000754
 80018ac:	20000764 	.word	0x20000764
 80018b0:	20000760 	.word	0x20000760
 80018b4:	00444950 	.word	0x00444950
 80018b8:	0800f0f8 	.word	0x0800f0f8
 80018bc:	0800f108 	.word	0x0800f108
 80018c0:	0800f100 	.word	0x0800f100
 80018c4:	0800f110 	.word	0x0800f110
 80018c8:	0047534d 	.word	0x0047534d

080018cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b087      	sub	sp, #28
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	extern int APP_PAGE;
	APP_PAGE = FIB;
 80018d2:	4b6d      	ldr	r3, [pc, #436]	; (8001a88 <main+0x1bc>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
	prev_page = APP_PAGE;
 80018d8:	4b6b      	ldr	r3, [pc, #428]	; (8001a88 <main+0x1bc>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a6b      	ldr	r2, [pc, #428]	; (8001a8c <main+0x1c0>)
 80018de:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018e0:	f002 fcd2 	bl	8004288 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018e4:	f000 f906 	bl	8001af4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

	GPIO_InitTypeDef gumb_a;
	gumb_a.Pin = GPIO_PIN_0;
 80018e8:	2301      	movs	r3, #1
 80018ea:	607b      	str	r3, [r7, #4]
	gumb_a.Mode = GPIO_MODE_IT_RISING;
 80018ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018f0:	60bb      	str	r3, [r7, #8]
	gumb_a.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
	gumb_a.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &gumb_a);
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	4619      	mov	r1, r3
 80018fe:	4864      	ldr	r0, [pc, #400]	; (8001a90 <main+0x1c4>)
 8001900:	f004 fa50 	bl	8005da4 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 2);
 8001904:	2202      	movs	r2, #2
 8001906:	2101      	movs	r1, #1
 8001908:	2006      	movs	r0, #6
 800190a:	f002 fee7 	bl	80046dc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800190e:	2006      	movs	r0, #6
 8001910:	f002 ff00 	bl	8004714 <HAL_NVIC_EnableIRQ>

  BSP_LCD_Init();
 8001914:	f001 fb2b 	bl	8002f6e <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8001918:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800191c:	2000      	movs	r0, #0
 800191e:	f001 fcc3 	bl	80032a8 <BSP_LCD_LayerDefaultInit>

  ts_status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001922:	f001 fca9 	bl	8003278 <BSP_LCD_GetXSize>
 8001926:	4603      	mov	r3, r0
 8001928:	b29c      	uxth	r4, r3
 800192a:	f001 fcb1 	bl	8003290 <BSP_LCD_GetYSize>
 800192e:	4603      	mov	r3, r0
 8001930:	b29b      	uxth	r3, r3
 8001932:	4619      	mov	r1, r3
 8001934:	4620      	mov	r0, r4
 8001936:	f002 fadb 	bl	8003ef0 <BSP_TS_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	461a      	mov	r2, r3
 800193e:	4b55      	ldr	r3, [pc, #340]	; (8001a94 <main+0x1c8>)
 8001940:	601a      	str	r2, [r3, #0]
  while(ts_status != TS_OK);
 8001942:	bf00      	nop
 8001944:	4b53      	ldr	r3, [pc, #332]	; (8001a94 <main+0x1c8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1fb      	bne.n	8001944 <main+0x78>

  ts_status = BSP_TS_ITConfig();
 800194c:	f002 fb30 	bl	8003fb0 <BSP_TS_ITConfig>
 8001950:	4603      	mov	r3, r0
 8001952:	461a      	mov	r2, r3
 8001954:	4b4f      	ldr	r3, [pc, #316]	; (8001a94 <main+0x1c8>)
 8001956:	601a      	str	r2, [r3, #0]
  while(ts_status != TS_OK);
 8001958:	bf00      	nop
 800195a:	4b4e      	ldr	r3, [pc, #312]	; (8001a94 <main+0x1c8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1fb      	bne.n	800195a <main+0x8e>

  BSP_TS_INT_MspInit();
 8001962:	f002 fc6b 	bl	800423c <BSP_TS_INT_MspInit>

	BSP_LCD_Clear(LCD_COLOR_DARKCYAN);
 8001966:	484c      	ldr	r0, [pc, #304]	; (8001a98 <main+0x1cc>)
 8001968:	f001 fd4a 	bl	8003400 <BSP_LCD_Clear>
	BSP_LCD_DrawVLine(MENU_PANEL_WIDTH, 0, MENU_HEIGHT);
 800196c:	224b      	movs	r2, #75	; 0x4b
 800196e:	2100      	movs	r1, #0
 8001970:	f240 100b 	movw	r0, #267	; 0x10b
 8001974:	f001 feb6 	bl	80036e4 <BSP_LCD_DrawVLine>
	BSP_LCD_DrawVLine(2 * MENU_PANEL_WIDTH, 0, MENU_HEIGHT);
 8001978:	224b      	movs	r2, #75	; 0x4b
 800197a:	2100      	movs	r1, #0
 800197c:	f240 2016 	movw	r0, #534	; 0x216
 8001980:	f001 feb0 	bl	80036e4 <BSP_LCD_DrawVLine>

	BSP_LCD_DrawHLine(0, MENU_HEIGHT, BSP_LCD_GetXSize());
 8001984:	f001 fc78 	bl	8003278 <BSP_LCD_GetXSize>
 8001988:	4603      	mov	r3, r0
 800198a:	b29b      	uxth	r3, r3
 800198c:	461a      	mov	r2, r3
 800198e:	214b      	movs	r1, #75	; 0x4b
 8001990:	2000      	movs	r0, #0
 8001992:	f001 fe69 	bl	8003668 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawVLine(STACK_VIEW_WIDTH, MENU_HEIGHT, BSP_LCD_GetYSize() - MENU_HEIGHT);
 8001996:	f001 fc7b 	bl	8003290 <BSP_LCD_GetYSize>
 800199a:	4603      	mov	r3, r0
 800199c:	b29b      	uxth	r3, r3
 800199e:	3b4b      	subs	r3, #75	; 0x4b
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	461a      	mov	r2, r3
 80019a4:	214b      	movs	r1, #75	; 0x4b
 80019a6:	20c8      	movs	r0, #200	; 0xc8
 80019a8:	f001 fe9c 	bl	80036e4 <BSP_LCD_DrawVLine>

	BSP_LCD_FillRect(0, 300, STACK_VIEW_WIDTH, BSP_LCD_GetYSize());
 80019ac:	f001 fc70 	bl	8003290 <BSP_LCD_GetYSize>
 80019b0:	4603      	mov	r3, r0
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	22c8      	movs	r2, #200	; 0xc8
 80019b6:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80019ba:	2000      	movs	r0, #0
 80019bc:	f001 fed4 	bl	8003768 <BSP_LCD_FillRect>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80019c0:	f008 fedc 	bl	800a77c <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  ww_mutex_id = osMutexNew(&ww_mutex);
 80019c4:	4835      	ldr	r0, [pc, #212]	; (8001a9c <main+0x1d0>)
 80019c6:	f009 f985 	bl	800acd4 <osMutexNew>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4a34      	ldr	r2, [pc, #208]	; (8001aa0 <main+0x1d4>)
 80019ce:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  timer_gol = osTimerNew(gol_timer_func, osTimerPeriodic, NULL, NULL);
 80019d0:	2300      	movs	r3, #0
 80019d2:	2200      	movs	r2, #0
 80019d4:	2101      	movs	r1, #1
 80019d6:	4833      	ldr	r0, [pc, #204]	; (8001aa4 <main+0x1d8>)
 80019d8:	f009 f8b8 	bl	800ab4c <osTimerNew>
 80019dc:	4603      	mov	r3, r0
 80019de:	4a32      	ldr	r2, [pc, #200]	; (8001aa8 <main+0x1dc>)
 80019e0:	6013      	str	r3, [r2, #0]
  if (timer_gol != NULL) {
 80019e2:	4b31      	ldr	r3, [pc, #196]	; (8001aa8 <main+0x1dc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d006      	beq.n	80019f8 <main+0x12c>
	  osTimerStart(timer_gol, 500);
 80019ea:	4b2f      	ldr	r3, [pc, #188]	; (8001aa8 <main+0x1dc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80019f2:	4618      	mov	r0, r3
 80019f4:	f009 f92e 	bl	800ac54 <osTimerStart>
  }
  timer_ww = osTimerNew(ww_timer_func, osTimerPeriodic, NULL, NULL);
 80019f8:	2300      	movs	r3, #0
 80019fa:	2200      	movs	r2, #0
 80019fc:	2101      	movs	r1, #1
 80019fe:	482b      	ldr	r0, [pc, #172]	; (8001aac <main+0x1e0>)
 8001a00:	f009 f8a4 	bl	800ab4c <osTimerNew>
 8001a04:	4603      	mov	r3, r0
 8001a06:	4a2a      	ldr	r2, [pc, #168]	; (8001ab0 <main+0x1e4>)
 8001a08:	6013      	str	r3, [r2, #0]
  if (timer_ww != NULL) {
 8001a0a:	4b29      	ldr	r3, [pc, #164]	; (8001ab0 <main+0x1e4>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d006      	beq.n	8001a20 <main+0x154>
	  osTimerStart(timer_ww, 1000);
 8001a12:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <main+0x1e4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f009 f91a 	bl	800ac54 <osTimerStart>
  }
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  thread_manager_message = osMessageQueueNew(5, sizeof(thread_info), NULL);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2114      	movs	r1, #20
 8001a24:	2005      	movs	r0, #5
 8001a26:	f009 fa9d 	bl	800af64 <osMessageQueueNew>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4a21      	ldr	r2, [pc, #132]	; (8001ab4 <main+0x1e8>)
 8001a2e:	6013      	str	r3, [r2, #0]
  /* creation of defaultTask */
//  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	fibonacci_taskHandle = osThreadNew(fibonacci_t, NULL, &fibonacci_Task_attributes);
 8001a30:	4a21      	ldr	r2, [pc, #132]	; (8001ab8 <main+0x1ec>)
 8001a32:	2100      	movs	r1, #0
 8001a34:	4821      	ldr	r0, [pc, #132]	; (8001abc <main+0x1f0>)
 8001a36:	f008 ff0b 	bl	800a850 <osThreadNew>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	4a20      	ldr	r2, [pc, #128]	; (8001ac0 <main+0x1f4>)
 8001a3e:	6013      	str	r3, [r2, #0]
	game_of_life_taskHandle = osThreadNew(game_of_life_t, NULL, &game_of_life_Task_attributes);
 8001a40:	4a20      	ldr	r2, [pc, #128]	; (8001ac4 <main+0x1f8>)
 8001a42:	2100      	movs	r1, #0
 8001a44:	4820      	ldr	r0, [pc, #128]	; (8001ac8 <main+0x1fc>)
 8001a46:	f008 ff03 	bl	800a850 <osThreadNew>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4a1f      	ldr	r2, [pc, #124]	; (8001acc <main+0x200>)
 8001a4e:	6013      	str	r3, [r2, #0]
	wirewolrd_taskHandle = osThreadNew(wireworld_t, NULL, &wirewolrd_Task_attributes);
 8001a50:	4a1f      	ldr	r2, [pc, #124]	; (8001ad0 <main+0x204>)
 8001a52:	2100      	movs	r1, #0
 8001a54:	481f      	ldr	r0, [pc, #124]	; (8001ad4 <main+0x208>)
 8001a56:	f008 fefb 	bl	800a850 <osThreadNew>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	4a1e      	ldr	r2, [pc, #120]	; (8001ad8 <main+0x20c>)
 8001a5e:	6013      	str	r3, [r2, #0]
	ww_RED_taskHandle = osThreadNew(ww_red_t, NULL, &ww_red_Task_attributes);
 8001a60:	4a1e      	ldr	r2, [pc, #120]	; (8001adc <main+0x210>)
 8001a62:	2100      	movs	r1, #0
 8001a64:	481e      	ldr	r0, [pc, #120]	; (8001ae0 <main+0x214>)
 8001a66:	f008 fef3 	bl	800a850 <osThreadNew>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4a1d      	ldr	r2, [pc, #116]	; (8001ae4 <main+0x218>)
 8001a6e:	6013      	str	r3, [r2, #0]
//	ww_BLUE_taskHandle = osThreadNew(ww_blue_t, NULL, &ww_blue_Task_attributes);
	LCD_manager_taskHandle = osThreadNew(LCD_manager_t, NULL, &LCD_manager_Task_attributes);
 8001a70:	4a1d      	ldr	r2, [pc, #116]	; (8001ae8 <main+0x21c>)
 8001a72:	2100      	movs	r1, #0
 8001a74:	481d      	ldr	r0, [pc, #116]	; (8001aec <main+0x220>)
 8001a76:	f008 feeb 	bl	800a850 <osThreadNew>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4a1c      	ldr	r2, [pc, #112]	; (8001af0 <main+0x224>)
 8001a7e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001a80:	f008 feb0 	bl	800a7e4 <osKernelStart>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <main+0x1b8>
 8001a86:	bf00      	nop
 8001a88:	20000764 	.word	0x20000764
 8001a8c:	20000768 	.word	0x20000768
 8001a90:	40020000 	.word	0x40020000
 8001a94:	20000750 	.word	0x20000750
 8001a98:	ff008080 	.word	0xff008080
 8001a9c:	0800f1e4 	.word	0x0800f1e4
 8001aa0:	200008cc 	.word	0x200008cc
 8001aa4:	08000cf9 	.word	0x08000cf9
 8001aa8:	200007c0 	.word	0x200007c0
 8001aac:	08000ea1 	.word	0x08000ea1
 8001ab0:	200008c4 	.word	0x200008c4
 8001ab4:	20000760 	.word	0x20000760
 8001ab8:	0800f130 	.word	0x0800f130
 8001abc:	080007cd 	.word	0x080007cd
 8001ac0:	2000073c 	.word	0x2000073c
 8001ac4:	0800f154 	.word	0x0800f154
 8001ac8:	08000d29 	.word	0x08000d29
 8001acc:	20000740 	.word	0x20000740
 8001ad0:	0800f178 	.word	0x0800f178
 8001ad4:	080010a5 	.word	0x080010a5
 8001ad8:	20000744 	.word	0x20000744
 8001adc:	0800f19c 	.word	0x0800f19c
 8001ae0:	080011fd 	.word	0x080011fd
 8001ae4:	20000748 	.word	0x20000748
 8001ae8:	0800f1c0 	.word	0x0800f1c0
 8001aec:	08001531 	.word	0x08001531
 8001af0:	2000074c 	.word	0x2000074c

08001af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b094      	sub	sp, #80	; 0x50
 8001af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001afa:	f107 031c 	add.w	r3, r7, #28
 8001afe:	2234      	movs	r2, #52	; 0x34
 8001b00:	2100      	movs	r1, #0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f00c fe38 	bl	800e778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b08:	f107 0308 	add.w	r3, r7, #8
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001b18:	f006 fcc4 	bl	80084a4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1c:	4b31      	ldr	r3, [pc, #196]	; (8001be4 <SystemClock_Config+0xf0>)
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	4a30      	ldr	r2, [pc, #192]	; (8001be4 <SystemClock_Config+0xf0>)
 8001b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b26:	6413      	str	r3, [r2, #64]	; 0x40
 8001b28:	4b2e      	ldr	r3, [pc, #184]	; (8001be4 <SystemClock_Config+0xf0>)
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b30:	607b      	str	r3, [r7, #4]
 8001b32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b34:	4b2c      	ldr	r3, [pc, #176]	; (8001be8 <SystemClock_Config+0xf4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a2b      	ldr	r2, [pc, #172]	; (8001be8 <SystemClock_Config+0xf4>)
 8001b3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <SystemClock_Config+0xf4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b48:	603b      	str	r3, [r7, #0]
 8001b4a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001b4c:	230b      	movs	r3, #11
 8001b4e:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b54:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b56:	2301      	movs	r3, #1
 8001b58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b5a:	2310      	movs	r3, #16
 8001b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b62:	2302      	movs	r3, #2
 8001b64:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b6a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001b6c:	2319      	movs	r3, #25
 8001b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001b70:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001b74:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b76:	2302      	movs	r3, #2
 8001b78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b7a:	2304      	movs	r3, #4
 8001b7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b82:	f107 031c 	add.w	r3, r7, #28
 8001b86:	4618      	mov	r0, r3
 8001b88:	f006 fcec 	bl	8008564 <HAL_RCC_OscConfig>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001b92:	f000 f83d 	bl	8001c10 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b96:	f006 fc95 	bl	80084c4 <HAL_PWREx_EnableOverDrive>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001ba0:	f000 f836 	bl	8001c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ba4:	230f      	movs	r3, #15
 8001ba6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bb0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bb4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001bbc:	f107 0308 	add.w	r3, r7, #8
 8001bc0:	2107      	movs	r1, #7
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f006 ff7c 	bl	8008ac0 <HAL_RCC_ClockConfig>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001bce:	f000 f81f 	bl	8001c10 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f007 f85e 	bl	8008c98 <HAL_RCC_MCOConfig>
}
 8001bdc:	bf00      	nop
 8001bde:	3750      	adds	r7, #80	; 0x50
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40007000 	.word	0x40007000

08001bec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a04      	ldr	r2, [pc, #16]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d101      	bne.n	8001c02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bfe:	f002 fb51 	bl	80042a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40001000 	.word	0x40001000

08001c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c14:	b672      	cpsid	i
}
 8001c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <Error_Handler+0x8>
	...

08001c1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c22:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <HAL_MspInit+0x4c>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	4a10      	ldr	r2, [pc, #64]	; (8001c68 <HAL_MspInit+0x4c>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <HAL_MspInit+0x4c>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_MspInit+0x4c>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	4a0a      	ldr	r2, [pc, #40]	; (8001c68 <HAL_MspInit+0x4c>)
 8001c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c44:	6453      	str	r3, [r2, #68]	; 0x44
 8001c46:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <HAL_MspInit+0x4c>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	210f      	movs	r1, #15
 8001c56:	f06f 0001 	mvn.w	r0, #1
 8001c5a:	f002 fd3f 	bl	80046dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	40023800 	.word	0x40023800

08001c6c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a0d      	ldr	r2, [pc, #52]	; (8001cb0 <HAL_DMA2D_MspInit+0x44>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d113      	bne.n	8001ca6 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <HAL_DMA2D_MspInit+0x48>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a0c      	ldr	r2, [pc, #48]	; (8001cb4 <HAL_DMA2D_MspInit+0x48>)
 8001c84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <HAL_DMA2D_MspInit+0x48>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2105      	movs	r1, #5
 8001c9a:	205a      	movs	r0, #90	; 0x5a
 8001c9c:	f002 fd1e 	bl	80046dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001ca0:	205a      	movs	r0, #90	; 0x5a
 8001ca2:	f002 fd37 	bl	8004714 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8001ca6:	bf00      	nop
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	4002b000 	.word	0x4002b000
 8001cb4:	40023800 	.word	0x40023800

08001cb8 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08a      	sub	sp, #40	; 0x28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	609a      	str	r2, [r3, #8]
 8001ccc:	60da      	str	r2, [r3, #12]
 8001cce:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a1b      	ldr	r2, [pc, #108]	; (8001d44 <HAL_DSI_MspInit+0x8c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d12f      	bne.n	8001d3a <HAL_DSI_MspInit+0x82>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001cda:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <HAL_DSI_MspInit+0x90>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	4a1a      	ldr	r2, [pc, #104]	; (8001d48 <HAL_DSI_MspInit+0x90>)
 8001ce0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce6:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <HAL_DSI_MspInit+0x90>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cee:	613b      	str	r3, [r7, #16]
 8001cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_DSI_MspInit+0x90>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	4a14      	ldr	r2, [pc, #80]	; (8001d48 <HAL_DSI_MspInit+0x90>)
 8001cf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfe:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_DSI_MspInit+0x90>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSIHOST_TE_Pin;
 8001d0a:	2304      	movs	r3, #4
 8001d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d16:	2300      	movs	r3, #0
 8001d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001d1a:	230d      	movs	r3, #13
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 8001d1e:	f107 0314 	add.w	r3, r7, #20
 8001d22:	4619      	mov	r1, r3
 8001d24:	4809      	ldr	r0, [pc, #36]	; (8001d4c <HAL_DSI_MspInit+0x94>)
 8001d26:	f004 f83d 	bl	8005da4 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2105      	movs	r1, #5
 8001d2e:	2062      	movs	r0, #98	; 0x62
 8001d30:	f002 fcd4 	bl	80046dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001d34:	2062      	movs	r0, #98	; 0x62
 8001d36:	f002 fced 	bl	8004714 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8001d3a:	bf00      	nop
 8001d3c:	3728      	adds	r7, #40	; 0x28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40016c00 	.word	0x40016c00
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40022400 	.word	0x40022400

08001d50 <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <HAL_DSI_MspDeInit+0x34>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d10c      	bne.n	8001d7c <HAL_DSI_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <HAL_DSI_MspDeInit+0x38>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	4a08      	ldr	r2, [pc, #32]	; (8001d88 <HAL_DSI_MspDeInit+0x38>)
 8001d68:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001d6c:	6453      	str	r3, [r2, #68]	; 0x44

    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    HAL_GPIO_DeInit(DSIHOST_TE_GPIO_Port, DSIHOST_TE_Pin);
 8001d6e:	2104      	movs	r1, #4
 8001d70:	4806      	ldr	r0, [pc, #24]	; (8001d8c <HAL_DSI_MspDeInit+0x3c>)
 8001d72:	f004 f9c3 	bl	80060fc <HAL_GPIO_DeInit>

    /* DSI interrupt DeInit */
    HAL_NVIC_DisableIRQ(DSI_IRQn);
 8001d76:	2062      	movs	r0, #98	; 0x62
 8001d78:	f002 fcda 	bl	8004730 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40016c00 	.word	0x40016c00
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40022400 	.word	0x40022400

08001d90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b0b0      	sub	sp, #192	; 0xc0
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001da8:	f107 031c 	add.w	r3, r7, #28
 8001dac:	2290      	movs	r2, #144	; 0x90
 8001dae:	2100      	movs	r1, #0
 8001db0:	4618      	mov	r0, r3
 8001db2:	f00c fce1 	bl	800e778 <memset>
  if(hi2c->Instance==I2C1)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a55      	ldr	r2, [pc, #340]	; (8001f10 <HAL_I2C_MspInit+0x180>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d13e      	bne.n	8001e3e <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001dc0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dc4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dcc:	f107 031c 	add.w	r3, r7, #28
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f007 f8dd 	bl	8008f90 <HAL_RCCEx_PeriphCLKConfig>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001ddc:	f7ff ff18 	bl	8001c10 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de0:	4b4c      	ldr	r3, [pc, #304]	; (8001f14 <HAL_I2C_MspInit+0x184>)
 8001de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de4:	4a4b      	ldr	r2, [pc, #300]	; (8001f14 <HAL_I2C_MspInit+0x184>)
 8001de6:	f043 0302 	orr.w	r3, r3, #2
 8001dea:	6313      	str	r3, [r2, #48]	; 0x30
 8001dec:	4b49      	ldr	r3, [pc, #292]	; (8001f14 <HAL_I2C_MspInit+0x184>)
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001df8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e00:	2312      	movs	r3, #18
 8001e02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e06:	2301      	movs	r3, #1
 8001e08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e12:	2304      	movs	r3, #4
 8001e14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e18:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	483e      	ldr	r0, [pc, #248]	; (8001f18 <HAL_I2C_MspInit+0x188>)
 8001e20:	f003 ffc0 	bl	8005da4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e24:	4b3b      	ldr	r3, [pc, #236]	; (8001f14 <HAL_I2C_MspInit+0x184>)
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	4a3a      	ldr	r2, [pc, #232]	; (8001f14 <HAL_I2C_MspInit+0x184>)
 8001e2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e2e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e30:	4b38      	ldr	r3, [pc, #224]	; (8001f14 <HAL_I2C_MspInit+0x184>)
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e38:	617b      	str	r3, [r7, #20]
 8001e3a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001e3c:	e063      	b.n	8001f06 <HAL_I2C_MspInit+0x176>
  else if(hi2c->Instance==I2C4)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a36      	ldr	r2, [pc, #216]	; (8001f1c <HAL_I2C_MspInit+0x18c>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d15e      	bne.n	8001f06 <HAL_I2C_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001e48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e4c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f007 f899 	bl	8008f90 <HAL_RCCEx_PeriphCLKConfig>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001e64:	f7ff fed4 	bl	8001c10 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e68:	4b2a      	ldr	r3, [pc, #168]	; (8001f14 <HAL_I2C_MspInit+0x184>)
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	4a29      	ldr	r2, [pc, #164]	; (8001f14 <HAL_I2C_MspInit+0x184>)
 8001e6e:	f043 0302 	orr.w	r3, r3, #2
 8001e72:	6313      	str	r3, [r2, #48]	; 0x30
 8001e74:	4b27      	ldr	r3, [pc, #156]	; (8001f14 <HAL_I2C_MspInit+0x184>)
 8001e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e80:	4b24      	ldr	r3, [pc, #144]	; (8001f14 <HAL_I2C_MspInit+0x184>)
 8001e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e84:	4a23      	ldr	r2, [pc, #140]	; (8001f14 <HAL_I2C_MspInit+0x184>)
 8001e86:	f043 0308 	orr.w	r3, r3, #8
 8001e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8c:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <HAL_I2C_MspInit+0x184>)
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	f003 0308 	and.w	r3, r3, #8
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 8001e98:	2380      	movs	r3, #128	; 0x80
 8001e9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e9e:	2312      	movs	r3, #18
 8001ea0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8001eb0:	230b      	movs	r3, #11
 8001eb2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8001eb6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4816      	ldr	r0, [pc, #88]	; (8001f18 <HAL_I2C_MspInit+0x188>)
 8001ebe:	f003 ff71 	bl	8005da4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 8001ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001eca:	2312      	movs	r3, #18
 8001ecc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001edc:	2304      	movs	r3, #4
 8001ede:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8001ee2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	480d      	ldr	r0, [pc, #52]	; (8001f20 <HAL_I2C_MspInit+0x190>)
 8001eea:	f003 ff5b 	bl	8005da4 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001eee:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <HAL_I2C_MspInit+0x184>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	4a08      	ldr	r2, [pc, #32]	; (8001f14 <HAL_I2C_MspInit+0x184>)
 8001ef4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_I2C_MspInit+0x184>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]
}
 8001f06:	bf00      	nop
 8001f08:	37c0      	adds	r7, #192	; 0xc0
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40005400 	.word	0x40005400
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40020400 	.word	0x40020400
 8001f1c:	40006000 	.word	0x40006000
 8001f20:	40020c00 	.word	0x40020c00

08001f24 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a15      	ldr	r2, [pc, #84]	; (8001f88 <HAL_I2C_MspDeInit+0x64>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d110      	bne.n	8001f58 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <HAL_I2C_MspDeInit+0x68>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	4a14      	ldr	r2, [pc, #80]	; (8001f8c <HAL_I2C_MspDeInit+0x68>)
 8001f3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f40:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8001f42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f46:	4812      	ldr	r0, [pc, #72]	; (8001f90 <HAL_I2C_MspDeInit+0x6c>)
 8001f48:	f004 f8d8 	bl	80060fc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8001f4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f50:	480f      	ldr	r0, [pc, #60]	; (8001f90 <HAL_I2C_MspDeInit+0x6c>)
 8001f52:	f004 f8d3 	bl	80060fc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8001f56:	e013      	b.n	8001f80 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C4)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a0d      	ldr	r2, [pc, #52]	; (8001f94 <HAL_I2C_MspDeInit+0x70>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d10e      	bne.n	8001f80 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C4_CLK_DISABLE();
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_I2C_MspDeInit+0x68>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	4a09      	ldr	r2, [pc, #36]	; (8001f8c <HAL_I2C_MspDeInit+0x68>)
 8001f68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f6c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(AUDIO_SDA_GPIO_Port, AUDIO_SDA_Pin);
 8001f6e:	2180      	movs	r1, #128	; 0x80
 8001f70:	4807      	ldr	r0, [pc, #28]	; (8001f90 <HAL_I2C_MspDeInit+0x6c>)
 8001f72:	f004 f8c3 	bl	80060fc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_SCL_GPIO_Port, AUDIO_SCL_Pin);
 8001f76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f7a:	4807      	ldr	r0, [pc, #28]	; (8001f98 <HAL_I2C_MspDeInit+0x74>)
 8001f7c:	f004 f8be 	bl	80060fc <HAL_GPIO_DeInit>
}
 8001f80:	bf00      	nop
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40005400 	.word	0x40005400
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020400 	.word	0x40020400
 8001f94:	40006000 	.word	0x40006000
 8001f98:	40020c00 	.word	0x40020c00

08001f9c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a0d      	ldr	r2, [pc, #52]	; (8001fe0 <HAL_LTDC_MspInit+0x44>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d113      	bne.n	8001fd6 <HAL_LTDC_MspInit+0x3a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001fae:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <HAL_LTDC_MspInit+0x48>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	4a0c      	ldr	r2, [pc, #48]	; (8001fe4 <HAL_LTDC_MspInit+0x48>)
 8001fb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001fb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fba:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <HAL_LTDC_MspInit+0x48>)
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2105      	movs	r1, #5
 8001fca:	2058      	movs	r0, #88	; 0x58
 8001fcc:	f002 fb86 	bl	80046dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001fd0:	2058      	movs	r0, #88	; 0x58
 8001fd2:	f002 fb9f 	bl	8004714 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001fd6:	bf00      	nop
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40016800 	.word	0x40016800
 8001fe4:	40023800 	.word	0x40023800

08001fe8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b087      	sub	sp, #28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a1c      	ldr	r2, [pc, #112]	; (8002068 <HAL_TIM_Base_MspInit+0x80>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d10c      	bne.n	8002014 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ffa:	4b1c      	ldr	r3, [pc, #112]	; (800206c <HAL_TIM_Base_MspInit+0x84>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	4a1b      	ldr	r2, [pc, #108]	; (800206c <HAL_TIM_Base_MspInit+0x84>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6453      	str	r3, [r2, #68]	; 0x44
 8002006:	4b19      	ldr	r3, [pc, #100]	; (800206c <HAL_TIM_Base_MspInit+0x84>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002012:	e022      	b.n	800205a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM10)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a15      	ldr	r2, [pc, #84]	; (8002070 <HAL_TIM_Base_MspInit+0x88>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d10c      	bne.n	8002038 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800201e:	4b13      	ldr	r3, [pc, #76]	; (800206c <HAL_TIM_Base_MspInit+0x84>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	4a12      	ldr	r2, [pc, #72]	; (800206c <HAL_TIM_Base_MspInit+0x84>)
 8002024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002028:	6453      	str	r3, [r2, #68]	; 0x44
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <HAL_TIM_Base_MspInit+0x84>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	693b      	ldr	r3, [r7, #16]
}
 8002036:	e010      	b.n	800205a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM11)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0d      	ldr	r2, [pc, #52]	; (8002074 <HAL_TIM_Base_MspInit+0x8c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d10b      	bne.n	800205a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <HAL_TIM_Base_MspInit+0x84>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	4a09      	ldr	r2, [pc, #36]	; (800206c <HAL_TIM_Base_MspInit+0x84>)
 8002048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800204c:	6453      	str	r3, [r2, #68]	; 0x44
 800204e:	4b07      	ldr	r3, [pc, #28]	; (800206c <HAL_TIM_Base_MspInit+0x84>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
}
 800205a:	bf00      	nop
 800205c:	371c      	adds	r7, #28
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40010000 	.word	0x40010000
 800206c:	40023800 	.word	0x40023800
 8002070:	40014400 	.word	0x40014400
 8002074:	40014800 	.word	0x40014800

08002078 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800207e:	1d3b      	adds	r3, r7, #4
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800208c:	4b3b      	ldr	r3, [pc, #236]	; (800217c <HAL_FMC_MspInit+0x104>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d16f      	bne.n	8002174 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8002094:	4b39      	ldr	r3, [pc, #228]	; (800217c <HAL_FMC_MspInit+0x104>)
 8002096:	2201      	movs	r2, #1
 8002098:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800209a:	4b39      	ldr	r3, [pc, #228]	; (8002180 <HAL_FMC_MspInit+0x108>)
 800209c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209e:	4a38      	ldr	r2, [pc, #224]	; (8002180 <HAL_FMC_MspInit+0x108>)
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	6393      	str	r3, [r2, #56]	; 0x38
 80020a6:	4b36      	ldr	r3, [pc, #216]	; (8002180 <HAL_FMC_MspInit+0x108>)
 80020a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80020b2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80020b6:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b8:	2302      	movs	r3, #2
 80020ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c0:	2303      	movs	r3, #3
 80020c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020c4:	230c      	movs	r3, #12
 80020c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020c8:	1d3b      	adds	r3, r7, #4
 80020ca:	4619      	mov	r1, r3
 80020cc:	482d      	ldr	r0, [pc, #180]	; (8002184 <HAL_FMC_MspInit+0x10c>)
 80020ce:	f003 fe69 	bl	8005da4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin
 80020d2:	f248 1337 	movw	r3, #33079	; 0x8137
 80020d6:	607b      	str	r3, [r7, #4]
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d8:	2302      	movs	r3, #2
 80020da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e0:	2303      	movs	r3, #3
 80020e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80020e4:	230c      	movs	r3, #12
 80020e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020e8:	1d3b      	adds	r3, r7, #4
 80020ea:	4619      	mov	r1, r3
 80020ec:	4826      	ldr	r0, [pc, #152]	; (8002188 <HAL_FMC_MspInit+0x110>)
 80020ee:	f003 fe59 	bl	8005da4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80020f2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80020f6:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f8:	2302      	movs	r3, #2
 80020fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002100:	2303      	movs	r3, #3
 8002102:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002104:	230c      	movs	r3, #12
 8002106:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002108:	1d3b      	adds	r3, r7, #4
 800210a:	4619      	mov	r1, r3
 800210c:	481f      	ldr	r0, [pc, #124]	; (800218c <HAL_FMC_MspInit+0x114>)
 800210e:	f003 fe49 	bl	8005da4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8002112:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8002116:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002118:	2302      	movs	r3, #2
 800211a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002120:	2303      	movs	r3, #3
 8002122:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002124:	230c      	movs	r3, #12
 8002126:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002128:	1d3b      	adds	r3, r7, #4
 800212a:	4619      	mov	r1, r3
 800212c:	4818      	ldr	r0, [pc, #96]	; (8002190 <HAL_FMC_MspInit+0x118>)
 800212e:	f003 fe39 	bl	8005da4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8002132:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002136:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	2302      	movs	r3, #2
 800213a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002140:	2303      	movs	r3, #3
 8002142:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002144:	230c      	movs	r3, #12
 8002146:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002148:	1d3b      	adds	r3, r7, #4
 800214a:	4619      	mov	r1, r3
 800214c:	4811      	ldr	r0, [pc, #68]	; (8002194 <HAL_FMC_MspInit+0x11c>)
 800214e:	f003 fe29 	bl	8005da4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin
 8002152:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8002156:	607b      	str	r3, [r7, #4]
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002158:	2302      	movs	r3, #2
 800215a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002160:	2303      	movs	r3, #3
 8002162:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002164:	230c      	movs	r3, #12
 8002166:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002168:	1d3b      	adds	r3, r7, #4
 800216a:	4619      	mov	r1, r3
 800216c:	480a      	ldr	r0, [pc, #40]	; (8002198 <HAL_FMC_MspInit+0x120>)
 800216e:	f003 fe19 	bl	8005da4 <HAL_GPIO_Init>
 8002172:	e000      	b.n	8002176 <HAL_FMC_MspInit+0xfe>
    return;
 8002174:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	200008d4 	.word	0x200008d4
 8002180:	40023800 	.word	0x40023800
 8002184:	40021000 	.word	0x40021000
 8002188:	40021800 	.word	0x40021800
 800218c:	40020c00 	.word	0x40020c00
 8002190:	40022000 	.word	0x40022000
 8002194:	40021400 	.word	0x40021400
 8002198:	40021c00 	.word	0x40021c00

0800219c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80021a4:	f7ff ff68 	bl	8002078 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80021a8:	bf00      	nop
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b08e      	sub	sp, #56	; 0x38
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80021c0:	4b33      	ldr	r3, [pc, #204]	; (8002290 <HAL_InitTick+0xe0>)
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	4a32      	ldr	r2, [pc, #200]	; (8002290 <HAL_InitTick+0xe0>)
 80021c6:	f043 0310 	orr.w	r3, r3, #16
 80021ca:	6413      	str	r3, [r2, #64]	; 0x40
 80021cc:	4b30      	ldr	r3, [pc, #192]	; (8002290 <HAL_InitTick+0xe0>)
 80021ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d0:	f003 0310 	and.w	r3, r3, #16
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80021d8:	f107 0210 	add.w	r2, r7, #16
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	4611      	mov	r1, r2
 80021e2:	4618      	mov	r0, r3
 80021e4:	f006 fea2 	bl	8008f2c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80021e8:	6a3b      	ldr	r3, [r7, #32]
 80021ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80021ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d103      	bne.n	80021fa <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80021f2:	f006 fe87 	bl	8008f04 <HAL_RCC_GetPCLK1Freq>
 80021f6:	6378      	str	r0, [r7, #52]	; 0x34
 80021f8:	e004      	b.n	8002204 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80021fa:	f006 fe83 	bl	8008f04 <HAL_RCC_GetPCLK1Freq>
 80021fe:	4603      	mov	r3, r0
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002206:	4a23      	ldr	r2, [pc, #140]	; (8002294 <HAL_InitTick+0xe4>)
 8002208:	fba2 2303 	umull	r2, r3, r2, r3
 800220c:	0c9b      	lsrs	r3, r3, #18
 800220e:	3b01      	subs	r3, #1
 8002210:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002212:	4b21      	ldr	r3, [pc, #132]	; (8002298 <HAL_InitTick+0xe8>)
 8002214:	4a21      	ldr	r2, [pc, #132]	; (800229c <HAL_InitTick+0xec>)
 8002216:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002218:	4b1f      	ldr	r3, [pc, #124]	; (8002298 <HAL_InitTick+0xe8>)
 800221a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800221e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002220:	4a1d      	ldr	r2, [pc, #116]	; (8002298 <HAL_InitTick+0xe8>)
 8002222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002224:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002226:	4b1c      	ldr	r3, [pc, #112]	; (8002298 <HAL_InitTick+0xe8>)
 8002228:	2200      	movs	r2, #0
 800222a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800222c:	4b1a      	ldr	r3, [pc, #104]	; (8002298 <HAL_InitTick+0xe8>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002232:	4b19      	ldr	r3, [pc, #100]	; (8002298 <HAL_InitTick+0xe8>)
 8002234:	2200      	movs	r2, #0
 8002236:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002238:	4817      	ldr	r0, [pc, #92]	; (8002298 <HAL_InitTick+0xe8>)
 800223a:	f007 fb62 	bl	8009902 <HAL_TIM_Base_Init>
 800223e:	4603      	mov	r3, r0
 8002240:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002244:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002248:	2b00      	cmp	r3, #0
 800224a:	d11b      	bne.n	8002284 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800224c:	4812      	ldr	r0, [pc, #72]	; (8002298 <HAL_InitTick+0xe8>)
 800224e:	f007 fbaf 	bl	80099b0 <HAL_TIM_Base_Start_IT>
 8002252:	4603      	mov	r3, r0
 8002254:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002258:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800225c:	2b00      	cmp	r3, #0
 800225e:	d111      	bne.n	8002284 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002260:	2036      	movs	r0, #54	; 0x36
 8002262:	f002 fa57 	bl	8004714 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b0f      	cmp	r3, #15
 800226a:	d808      	bhi.n	800227e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800226c:	2200      	movs	r2, #0
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	2036      	movs	r0, #54	; 0x36
 8002272:	f002 fa33 	bl	80046dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002276:	4a0a      	ldr	r2, [pc, #40]	; (80022a0 <HAL_InitTick+0xf0>)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	e002      	b.n	8002284 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002284:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002288:	4618      	mov	r0, r3
 800228a:	3738      	adds	r7, #56	; 0x38
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40023800 	.word	0x40023800
 8002294:	431bde83 	.word	0x431bde83
 8002298:	200008d8 	.word	0x200008d8
 800229c:	40001000 	.word	0x40001000
 80022a0:	20000048 	.word	0x20000048

080022a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022a8:	e7fe      	b.n	80022a8 <NMI_Handler+0x4>

080022aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ae:	e7fe      	b.n	80022ae <HardFault_Handler+0x4>

080022b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b4:	e7fe      	b.n	80022b4 <MemManage_Handler+0x4>

080022b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ba:	e7fe      	b.n	80022ba <BusFault_Handler+0x4>

080022bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c0:	e7fe      	b.n	80022c0 <UsageFault_Handler+0x4>

080022c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80022d4:	4802      	ldr	r0, [pc, #8]	; (80022e0 <TIM6_DAC_IRQHandler+0x10>)
 80022d6:	f007 fbe3 	bl	8009aa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	200008d8 	.word	0x200008d8

080022e4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80022e8:	4802      	ldr	r0, [pc, #8]	; (80022f4 <OTG_HS_IRQHandler+0x10>)
 80022ea:	f005 f9a1 	bl	8007630 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000234 	.word	0x20000234

080022f8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80022fc:	4802      	ldr	r0, [pc, #8]	; (8002308 <LTDC_IRQHandler+0x10>)
 80022fe:	f004 fead 	bl	800705c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	2000018c 	.word	0x2000018c

0800230c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002310:	4802      	ldr	r0, [pc, #8]	; (800231c <DMA2D_IRQHandler+0x10>)
 8002312:	f002 fd47 	bl	8004da4 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	200000d4 	.word	0x200000d4

08002320 <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 8002324:	4802      	ldr	r0, [pc, #8]	; (8002330 <CEC_IRQHandler+0x10>)
 8002326:	f002 f801 	bl	800432c <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000148 	.word	0x20000148

08002334 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8002338:	4802      	ldr	r0, [pc, #8]	; (8002344 <DSI_IRQHandler+0x10>)
 800233a:	f003 f955 	bl	80055e8 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	2000012c 	.word	0x2000012c

08002348 <EXTI0_IRQHandler>:

extern int APP_PAGE;
#define REFRESH_RATE 300
uint32_t lastClick = 0;

void EXTI0_IRQHandler() {
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0)) {
 800234c:	4b17      	ldr	r3, [pc, #92]	; (80023ac <EXTI0_IRQHandler+0x64>)
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b00      	cmp	r3, #0
 8002356:	d023      	beq.n	80023a0 <EXTI0_IRQHandler+0x58>
		if (HAL_GetTick() - lastClick > REFRESH_RATE) {
 8002358:	f001 ffb8 	bl	80042cc <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <EXTI0_IRQHandler+0x68>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002368:	d91a      	bls.n	80023a0 <EXTI0_IRQHandler+0x58>
			APP_PAGE++;
 800236a:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <EXTI0_IRQHandler+0x6c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	3301      	adds	r3, #1
 8002370:	4a10      	ldr	r2, [pc, #64]	; (80023b4 <EXTI0_IRQHandler+0x6c>)
 8002372:	6013      	str	r3, [r2, #0]
			if (APP_PAGE > 2) APP_PAGE = APP_PAGE % 3;
 8002374:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <EXTI0_IRQHandler+0x6c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b02      	cmp	r3, #2
 800237a:	dd0c      	ble.n	8002396 <EXTI0_IRQHandler+0x4e>
 800237c:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <EXTI0_IRQHandler+0x6c>)
 800237e:	6819      	ldr	r1, [r3, #0]
 8002380:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <EXTI0_IRQHandler+0x70>)
 8002382:	fb83 3201 	smull	r3, r2, r3, r1
 8002386:	17cb      	asrs	r3, r1, #31
 8002388:	1ad2      	subs	r2, r2, r3
 800238a:	4613      	mov	r3, r2
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	4413      	add	r3, r2
 8002390:	1aca      	subs	r2, r1, r3
 8002392:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <EXTI0_IRQHandler+0x6c>)
 8002394:	601a      	str	r2, [r3, #0]
			lastClick = HAL_GetTick();
 8002396:	f001 ff99 	bl	80042cc <HAL_GetTick>
 800239a:	4603      	mov	r3, r0
 800239c:	4a04      	ldr	r2, [pc, #16]	; (80023b0 <EXTI0_IRQHandler+0x68>)
 800239e:	6013      	str	r3, [r2, #0]
		}
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 80023a0:	4b02      	ldr	r3, [pc, #8]	; (80023ac <EXTI0_IRQHandler+0x64>)
 80023a2:	2201      	movs	r2, #1
 80023a4:	615a      	str	r2, [r3, #20]
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	40013c00 	.word	0x40013c00
 80023b0:	20000924 	.word	0x20000924
 80023b4:	20000764 	.word	0x20000764
 80023b8:	55555556 	.word	0x55555556

080023bc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0

  HAL_GPIO_EXTI_IRQHandler(TS_INT_PIN); // Reset the GPIO_PIN_13 Interrupt - Touch Screen
 80023c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80023c4:	f003 ffc0 	bl	8006348 <HAL_GPIO_EXTI_IRQHandler>

}
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}

080023cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023d4:	4a14      	ldr	r2, [pc, #80]	; (8002428 <_sbrk+0x5c>)
 80023d6:	4b15      	ldr	r3, [pc, #84]	; (800242c <_sbrk+0x60>)
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023e0:	4b13      	ldr	r3, [pc, #76]	; (8002430 <_sbrk+0x64>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d102      	bne.n	80023ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023e8:	4b11      	ldr	r3, [pc, #68]	; (8002430 <_sbrk+0x64>)
 80023ea:	4a12      	ldr	r2, [pc, #72]	; (8002434 <_sbrk+0x68>)
 80023ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ee:	4b10      	ldr	r3, [pc, #64]	; (8002430 <_sbrk+0x64>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d207      	bcs.n	800240c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023fc:	f00c f97c 	bl	800e6f8 <__errno>
 8002400:	4603      	mov	r3, r0
 8002402:	220c      	movs	r2, #12
 8002404:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800240a:	e009      	b.n	8002420 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800240c:	4b08      	ldr	r3, [pc, #32]	; (8002430 <_sbrk+0x64>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002412:	4b07      	ldr	r3, [pc, #28]	; (8002430 <_sbrk+0x64>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	4a05      	ldr	r2, [pc, #20]	; (8002430 <_sbrk+0x64>)
 800241c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800241e:	68fb      	ldr	r3, [r7, #12]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20080000 	.word	0x20080000
 800242c:	00000400 	.word	0x00000400
 8002430:	20000928 	.word	0x20000928
 8002434:	200099f8 	.word	0x200099f8

08002438 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <SystemInit+0x20>)
 800243e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002442:	4a05      	ldr	r2, [pc, #20]	; (8002458 <SystemInit+0x20>)
 8002444:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002448:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	e000ed00 	.word	0xe000ed00

0800245c <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 800245c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002494 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002460:	480d      	ldr	r0, [pc, #52]	; (8002498 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002462:	490e      	ldr	r1, [pc, #56]	; (800249c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002464:	4a0e      	ldr	r2, [pc, #56]	; (80024a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002466:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002468:	e002      	b.n	8002470 <LoopCopyDataInit>

0800246a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800246a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800246c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800246e:	3304      	adds	r3, #4

08002470 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002470:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002472:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002474:	d3f9      	bcc.n	800246a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002476:	4a0b      	ldr	r2, [pc, #44]	; (80024a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002478:	4c0b      	ldr	r4, [pc, #44]	; (80024a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800247a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800247c:	e001      	b.n	8002482 <LoopFillZerobss>

0800247e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800247e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002480:	3204      	adds	r2, #4

08002482 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002482:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002484:	d3fb      	bcc.n	800247e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002486:	f7ff ffd7 	bl	8002438 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800248a:	f00c f93b 	bl	800e704 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800248e:	f7ff fa1d 	bl	80018cc <main>
  bx  lr    
 8002492:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8002494:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002498:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800249c:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 80024a0:	08010f24 	.word	0x08010f24
  ldr r2, =_sbss
 80024a4:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 80024a8:	200099f8 	.word	0x200099f8

080024ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024ac:	e7fe      	b.n	80024ac <ADC_IRQHandler>
	...

080024b0 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 80024ba:	88fb      	ldrh	r3, [r7, #6]
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 f90d 	bl	80026dc <ft6x06_GetInstance>
 80024c2:	4603      	mov	r3, r0
 80024c4:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	2bff      	cmp	r3, #255	; 0xff
 80024ca:	d10e      	bne.n	80024ea <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 80024cc:	2000      	movs	r0, #0
 80024ce:	f000 f905 	bl	80026dc <ft6x06_GetInstance>
 80024d2:	4603      	mov	r3, r0
 80024d4:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 80024d6:	7bbb      	ldrb	r3, [r7, #14]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d806      	bhi.n	80024ea <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 80024dc:	7bbb      	ldrb	r3, [r7, #14]
 80024de:	88fa      	ldrh	r2, [r7, #6]
 80024e0:	b2d1      	uxtb	r1, r2
 80024e2:	4a04      	ldr	r2, [pc, #16]	; (80024f4 <ft6x06_Init+0x44>)
 80024e4:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 80024e6:	f000 fcd7 	bl	8002e98 <TS_IO_Init>
    }
  }
}
 80024ea:	bf00      	nop
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	2000092c 	.word	0x2000092c

080024f8 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	4603      	mov	r3, r0
 8002516:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8002518:	f000 fcbe 	bl	8002e98 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 800251c:	88fb      	ldrh	r3, [r7, #6]
 800251e:	b2db      	uxtb	r3, r3
 8002520:	21a8      	movs	r1, #168	; 0xa8
 8002522:	4618      	mov	r0, r3
 8002524:	f000 fcdc 	bl	8002ee0 <TS_IO_Read>
 8002528:	4603      	mov	r3, r0
 800252a:	b29b      	uxth	r3, r3
}
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 800253e:	88fb      	ldrh	r3, [r7, #6]
 8002540:	4618      	mov	r0, r3
 8002542:	f000 f8bc 	bl	80026be <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	4618      	mov	r0, r3
 800254a:	f000 f88d 	bl	8002668 <ft6x06_TS_DisableIT>
}
 800254e:	bf00      	nop
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 8002566:	88fb      	ldrh	r3, [r7, #6]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2102      	movs	r1, #2
 800256c:	4618      	mov	r0, r3
 800256e:	f000 fcb7 	bl	8002ee0 <TS_IO_Read>
 8002572:	4603      	mov	r3, r0
 8002574:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	b2db      	uxtb	r3, r3
 8002580:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 800258e:	7bfb      	ldrb	r3, [r7, #15]
 8002590:	b2da      	uxtb	r2, r3
 8002592:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <ft6x06_TS_DetectTouch+0x50>)
 8002594:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 8002596:	4b04      	ldr	r3, [pc, #16]	; (80025a8 <ft6x06_TS_DetectTouch+0x50>)
 8002598:	2200      	movs	r2, #0
 800259a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	b2db      	uxtb	r3, r3
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20000930 	.word	0x20000930

080025ac <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
 80025b8:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 80025ba:	2300      	movs	r3, #0
 80025bc:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 80025be:	4b1f      	ldr	r3, [pc, #124]	; (800263c <ft6x06_TS_GetXY+0x90>)
 80025c0:	789a      	ldrb	r2, [r3, #2]
 80025c2:	4b1e      	ldr	r3, [pc, #120]	; (800263c <ft6x06_TS_GetXY+0x90>)
 80025c4:	785b      	ldrb	r3, [r3, #1]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d234      	bcs.n	8002634 <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 80025ca:	4b1c      	ldr	r3, [pc, #112]	; (800263c <ft6x06_TS_GetXY+0x90>)
 80025cc:	789b      	ldrb	r3, [r3, #2]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d002      	beq.n	80025d8 <ft6x06_TS_GetXY+0x2c>
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d003      	beq.n	80025de <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 80025d6:	e005      	b.n	80025e4 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 80025d8:	2303      	movs	r3, #3
 80025da:	75fb      	strb	r3, [r7, #23]
      break;
 80025dc:	e002      	b.n	80025e4 <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 80025de:	2309      	movs	r3, #9
 80025e0:	75fb      	strb	r3, [r7, #23]
      break;
 80025e2:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 80025e4:	89fb      	ldrh	r3, [r7, #14]
 80025e6:	b2d8      	uxtb	r0, r3
 80025e8:	f107 0210 	add.w	r2, r7, #16
 80025ec:	7df9      	ldrb	r1, [r7, #23]
 80025ee:	2304      	movs	r3, #4
 80025f0:	f000 fc94 	bl	8002f1c <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 80025f4:	7c3b      	ldrb	r3, [r7, #16]
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	b21b      	sxth	r3, r3
 80025fa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80025fe:	b21a      	sxth	r2, r3
 8002600:	7c7b      	ldrb	r3, [r7, #17]
 8002602:	b21b      	sxth	r3, r3
 8002604:	4313      	orrs	r3, r2
 8002606:	b21b      	sxth	r3, r3
 8002608:	b29a      	uxth	r2, r3
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 800260e:	7cbb      	ldrb	r3, [r7, #18]
 8002610:	021b      	lsls	r3, r3, #8
 8002612:	b21b      	sxth	r3, r3
 8002614:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002618:	b21a      	sxth	r2, r3
 800261a:	7cfb      	ldrb	r3, [r7, #19]
 800261c:	b21b      	sxth	r3, r3
 800261e:	4313      	orrs	r3, r2
 8002620:	b21b      	sxth	r3, r3
 8002622:	b29a      	uxth	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8002628:	4b04      	ldr	r3, [pc, #16]	; (800263c <ft6x06_TS_GetXY+0x90>)
 800262a:	789b      	ldrb	r3, [r3, #2]
 800262c:	3301      	adds	r3, #1
 800262e:	b2da      	uxtb	r2, r3
 8002630:	4b02      	ldr	r3, [pc, #8]	; (800263c <ft6x06_TS_GetXY+0x90>)
 8002632:	709a      	strb	r2, [r3, #2]
  }
}
 8002634:	bf00      	nop
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	20000930 	.word	0x20000930

08002640 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800264a:	2300      	movs	r3, #0
 800264c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 800264e:	2301      	movs	r3, #1
 8002650:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8002652:	88fb      	ldrh	r3, [r7, #6]
 8002654:	b2db      	uxtb	r3, r3
 8002656:	7bfa      	ldrb	r2, [r7, #15]
 8002658:	21a4      	movs	r1, #164	; 0xa4
 800265a:	4618      	mov	r0, r3
 800265c:	f000 fc26 	bl	8002eac <TS_IO_Write>
}
 8002660:	bf00      	nop
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8002676:	2300      	movs	r3, #0
 8002678:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 800267a:	88fb      	ldrh	r3, [r7, #6]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	7bfa      	ldrb	r2, [r7, #15]
 8002680:	21a4      	movs	r1, #164	; 0xa4
 8002682:	4618      	mov	r0, r3
 8002684:	f000 fc12 	bl	8002eac <TS_IO_Write>
}
 8002688:	bf00      	nop
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 80026be:	b480      	push	{r7}
 80026c0:	b085      	sub	sp, #20
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	4603      	mov	r3, r0
 80026c6:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 80026cc:	68fb      	ldr	r3, [r7, #12]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
	...

080026dc <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 80026ea:	2300      	movs	r3, #0
 80026ec:	73fb      	strb	r3, [r7, #15]
 80026ee:	e00b      	b.n	8002708 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
 80026f2:	4a0a      	ldr	r2, [pc, #40]	; (800271c <ft6x06_GetInstance+0x40>)
 80026f4:	5cd3      	ldrb	r3, [r2, r3]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	88fa      	ldrh	r2, [r7, #6]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d101      	bne.n	8002702 <ft6x06_GetInstance+0x26>
    {
      return idx; 
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	e006      	b.n	8002710 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	3301      	adds	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
 8002708:	7bfb      	ldrb	r3, [r7, #15]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d9f0      	bls.n	80026f0 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800270e:	23ff      	movs	r3, #255	; 0xff
}
 8002710:	4618      	mov	r0, r3
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	2000092c 	.word	0x2000092c

08002720 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800272a:	49c1      	ldr	r1, [pc, #772]	; (8002a30 <OTM8009A_Init+0x310>)
 800272c:	2000      	movs	r0, #0
 800272e:	f001 f875 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8002732:	49c0      	ldr	r1, [pc, #768]	; (8002a34 <OTM8009A_Init+0x314>)
 8002734:	2003      	movs	r0, #3
 8002736:	f001 f871 	bl	800381c <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 800273a:	49bf      	ldr	r1, [pc, #764]	; (8002a38 <OTM8009A_Init+0x318>)
 800273c:	2000      	movs	r0, #0
 800273e:	f001 f86d 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8002742:	49be      	ldr	r1, [pc, #760]	; (8002a3c <OTM8009A_Init+0x31c>)
 8002744:	2002      	movs	r0, #2
 8002746:	f001 f869 	bl	800381c <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800274a:	49bb      	ldr	r1, [pc, #748]	; (8002a38 <OTM8009A_Init+0x318>)
 800274c:	2000      	movs	r0, #0
 800274e:	f001 f865 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8002752:	49bb      	ldr	r1, [pc, #748]	; (8002a40 <OTM8009A_Init+0x320>)
 8002754:	2000      	movs	r0, #0
 8002756:	f001 f861 	bl	800381c <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 800275a:	200a      	movs	r0, #10
 800275c:	f000 fbfc 	bl	8002f58 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8002760:	49b8      	ldr	r1, [pc, #736]	; (8002a44 <OTM8009A_Init+0x324>)
 8002762:	2000      	movs	r0, #0
 8002764:	f001 f85a 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8002768:	49b7      	ldr	r1, [pc, #732]	; (8002a48 <OTM8009A_Init+0x328>)
 800276a:	2000      	movs	r0, #0
 800276c:	f001 f856 	bl	800381c <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8002770:	200a      	movs	r0, #10
 8002772:	f000 fbf1 	bl	8002f58 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8002776:	49b5      	ldr	r1, [pc, #724]	; (8002a4c <OTM8009A_Init+0x32c>)
 8002778:	2000      	movs	r0, #0
 800277a:	f001 f84f 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 800277e:	49b4      	ldr	r1, [pc, #720]	; (8002a50 <OTM8009A_Init+0x330>)
 8002780:	2000      	movs	r0, #0
 8002782:	f001 f84b 	bl	800381c <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8002786:	49b3      	ldr	r1, [pc, #716]	; (8002a54 <OTM8009A_Init+0x334>)
 8002788:	2000      	movs	r0, #0
 800278a:	f001 f847 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800278e:	49b2      	ldr	r1, [pc, #712]	; (8002a58 <OTM8009A_Init+0x338>)
 8002790:	2000      	movs	r0, #0
 8002792:	f001 f843 	bl	800381c <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8002796:	49b1      	ldr	r1, [pc, #708]	; (8002a5c <OTM8009A_Init+0x33c>)
 8002798:	2000      	movs	r0, #0
 800279a:	f001 f83f 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 800279e:	49b0      	ldr	r1, [pc, #704]	; (8002a60 <OTM8009A_Init+0x340>)
 80027a0:	2000      	movs	r0, #0
 80027a2:	f001 f83b 	bl	800381c <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80027a6:	49a2      	ldr	r1, [pc, #648]	; (8002a30 <OTM8009A_Init+0x310>)
 80027a8:	2000      	movs	r0, #0
 80027aa:	f001 f837 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80027ae:	49ad      	ldr	r1, [pc, #692]	; (8002a64 <OTM8009A_Init+0x344>)
 80027b0:	2000      	movs	r0, #0
 80027b2:	f001 f833 	bl	800381c <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80027b6:	49ac      	ldr	r1, [pc, #688]	; (8002a68 <OTM8009A_Init+0x348>)
 80027b8:	2000      	movs	r0, #0
 80027ba:	f001 f82f 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 80027be:	49ab      	ldr	r1, [pc, #684]	; (8002a6c <OTM8009A_Init+0x34c>)
 80027c0:	2000      	movs	r0, #0
 80027c2:	f001 f82b 	bl	800381c <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80027c6:	49aa      	ldr	r1, [pc, #680]	; (8002a70 <OTM8009A_Init+0x350>)
 80027c8:	2000      	movs	r0, #0
 80027ca:	f001 f827 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 80027ce:	49a9      	ldr	r1, [pc, #676]	; (8002a74 <OTM8009A_Init+0x354>)
 80027d0:	2000      	movs	r0, #0
 80027d2:	f001 f823 	bl	800381c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 80027d6:	49a8      	ldr	r1, [pc, #672]	; (8002a78 <OTM8009A_Init+0x358>)
 80027d8:	2000      	movs	r0, #0
 80027da:	f001 f81f 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 80027de:	49a7      	ldr	r1, [pc, #668]	; (8002a7c <OTM8009A_Init+0x35c>)
 80027e0:	2000      	movs	r0, #0
 80027e2:	f001 f81b 	bl	800381c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 80027e6:	49a6      	ldr	r1, [pc, #664]	; (8002a80 <OTM8009A_Init+0x360>)
 80027e8:	2000      	movs	r0, #0
 80027ea:	f001 f817 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80027ee:	499a      	ldr	r1, [pc, #616]	; (8002a58 <OTM8009A_Init+0x338>)
 80027f0:	2000      	movs	r0, #0
 80027f2:	f001 f813 	bl	800381c <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80027f6:	498e      	ldr	r1, [pc, #568]	; (8002a30 <OTM8009A_Init+0x310>)
 80027f8:	2000      	movs	r0, #0
 80027fa:	f001 f80f 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 80027fe:	49a1      	ldr	r1, [pc, #644]	; (8002a84 <OTM8009A_Init+0x364>)
 8002800:	2002      	movs	r0, #2
 8002802:	f001 f80b 	bl	800381c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8002806:	49a0      	ldr	r1, [pc, #640]	; (8002a88 <OTM8009A_Init+0x368>)
 8002808:	2000      	movs	r0, #0
 800280a:	f001 f807 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 800280e:	499f      	ldr	r1, [pc, #636]	; (8002a8c <OTM8009A_Init+0x36c>)
 8002810:	2000      	movs	r0, #0
 8002812:	f001 f803 	bl	800381c <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8002816:	499e      	ldr	r1, [pc, #632]	; (8002a90 <OTM8009A_Init+0x370>)
 8002818:	2000      	movs	r0, #0
 800281a:	f000 ffff 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 800281e:	499d      	ldr	r1, [pc, #628]	; (8002a94 <OTM8009A_Init+0x374>)
 8002820:	2000      	movs	r0, #0
 8002822:	f000 fffb 	bl	800381c <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8002826:	499c      	ldr	r1, [pc, #624]	; (8002a98 <OTM8009A_Init+0x378>)
 8002828:	2000      	movs	r0, #0
 800282a:	f000 fff7 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 800282e:	499b      	ldr	r1, [pc, #620]	; (8002a9c <OTM8009A_Init+0x37c>)
 8002830:	2000      	movs	r0, #0
 8002832:	f000 fff3 	bl	800381c <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8002836:	498c      	ldr	r1, [pc, #560]	; (8002a68 <OTM8009A_Init+0x348>)
 8002838:	2000      	movs	r0, #0
 800283a:	f000 ffef 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 800283e:	4998      	ldr	r1, [pc, #608]	; (8002aa0 <OTM8009A_Init+0x380>)
 8002840:	2000      	movs	r0, #0
 8002842:	f000 ffeb 	bl	800381c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8002846:	498a      	ldr	r1, [pc, #552]	; (8002a70 <OTM8009A_Init+0x350>)
 8002848:	2000      	movs	r0, #0
 800284a:	f000 ffe7 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800284e:	4995      	ldr	r1, [pc, #596]	; (8002aa4 <OTM8009A_Init+0x384>)
 8002850:	2000      	movs	r0, #0
 8002852:	f000 ffe3 	bl	800381c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8002856:	4994      	ldr	r1, [pc, #592]	; (8002aa8 <OTM8009A_Init+0x388>)
 8002858:	2000      	movs	r0, #0
 800285a:	f000 ffdf 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 800285e:	4993      	ldr	r1, [pc, #588]	; (8002aac <OTM8009A_Init+0x38c>)
 8002860:	2002      	movs	r0, #2
 8002862:	f000 ffdb 	bl	800381c <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8002866:	4974      	ldr	r1, [pc, #464]	; (8002a38 <OTM8009A_Init+0x318>)
 8002868:	2000      	movs	r0, #0
 800286a:	f000 ffd7 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 800286e:	4990      	ldr	r1, [pc, #576]	; (8002ab0 <OTM8009A_Init+0x390>)
 8002870:	2006      	movs	r0, #6
 8002872:	f000 ffd3 	bl	800381c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8002876:	498f      	ldr	r1, [pc, #572]	; (8002ab4 <OTM8009A_Init+0x394>)
 8002878:	2000      	movs	r0, #0
 800287a:	f000 ffcf 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 800287e:	498e      	ldr	r1, [pc, #568]	; (8002ab8 <OTM8009A_Init+0x398>)
 8002880:	200e      	movs	r0, #14
 8002882:	f000 ffcb 	bl	800381c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8002886:	498d      	ldr	r1, [pc, #564]	; (8002abc <OTM8009A_Init+0x39c>)
 8002888:	2000      	movs	r0, #0
 800288a:	f000 ffc7 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 800288e:	498c      	ldr	r1, [pc, #560]	; (8002ac0 <OTM8009A_Init+0x3a0>)
 8002890:	200e      	movs	r0, #14
 8002892:	f000 ffc3 	bl	800381c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8002896:	498b      	ldr	r1, [pc, #556]	; (8002ac4 <OTM8009A_Init+0x3a4>)
 8002898:	2000      	movs	r0, #0
 800289a:	f000 ffbf 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 800289e:	498a      	ldr	r1, [pc, #552]	; (8002ac8 <OTM8009A_Init+0x3a8>)
 80028a0:	200a      	movs	r0, #10
 80028a2:	f000 ffbb 	bl	800381c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80028a6:	4989      	ldr	r1, [pc, #548]	; (8002acc <OTM8009A_Init+0x3ac>)
 80028a8:	2000      	movs	r0, #0
 80028aa:	f000 ffb7 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80028ae:	4988      	ldr	r1, [pc, #544]	; (8002ad0 <OTM8009A_Init+0x3b0>)
 80028b0:	2000      	movs	r0, #0
 80028b2:	f000 ffb3 	bl	800381c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80028b6:	4960      	ldr	r1, [pc, #384]	; (8002a38 <OTM8009A_Init+0x318>)
 80028b8:	2000      	movs	r0, #0
 80028ba:	f000 ffaf 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80028be:	4985      	ldr	r1, [pc, #532]	; (8002ad4 <OTM8009A_Init+0x3b4>)
 80028c0:	200a      	movs	r0, #10
 80028c2:	f000 ffab 	bl	800381c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80028c6:	4984      	ldr	r1, [pc, #528]	; (8002ad8 <OTM8009A_Init+0x3b8>)
 80028c8:	2000      	movs	r0, #0
 80028ca:	f000 ffa7 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 80028ce:	4983      	ldr	r1, [pc, #524]	; (8002adc <OTM8009A_Init+0x3bc>)
 80028d0:	200f      	movs	r0, #15
 80028d2:	f000 ffa3 	bl	800381c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80028d6:	4977      	ldr	r1, [pc, #476]	; (8002ab4 <OTM8009A_Init+0x394>)
 80028d8:	2000      	movs	r0, #0
 80028da:	f000 ff9f 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 80028de:	4980      	ldr	r1, [pc, #512]	; (8002ae0 <OTM8009A_Init+0x3c0>)
 80028e0:	200f      	movs	r0, #15
 80028e2:	f000 ff9b 	bl	800381c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80028e6:	4975      	ldr	r1, [pc, #468]	; (8002abc <OTM8009A_Init+0x39c>)
 80028e8:	2000      	movs	r0, #0
 80028ea:	f000 ff97 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 80028ee:	497d      	ldr	r1, [pc, #500]	; (8002ae4 <OTM8009A_Init+0x3c4>)
 80028f0:	200a      	movs	r0, #10
 80028f2:	f000 ff93 	bl	800381c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80028f6:	4973      	ldr	r1, [pc, #460]	; (8002ac4 <OTM8009A_Init+0x3a4>)
 80028f8:	2000      	movs	r0, #0
 80028fa:	f000 ff8f 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 80028fe:	497a      	ldr	r1, [pc, #488]	; (8002ae8 <OTM8009A_Init+0x3c8>)
 8002900:	200f      	movs	r0, #15
 8002902:	f000 ff8b 	bl	800381c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8002906:	4971      	ldr	r1, [pc, #452]	; (8002acc <OTM8009A_Init+0x3ac>)
 8002908:	2000      	movs	r0, #0
 800290a:	f000 ff87 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 800290e:	4977      	ldr	r1, [pc, #476]	; (8002aec <OTM8009A_Init+0x3cc>)
 8002910:	200f      	movs	r0, #15
 8002912:	f000 ff83 	bl	800381c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8002916:	4976      	ldr	r1, [pc, #472]	; (8002af0 <OTM8009A_Init+0x3d0>)
 8002918:	2000      	movs	r0, #0
 800291a:	f000 ff7f 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 800291e:	4975      	ldr	r1, [pc, #468]	; (8002af4 <OTM8009A_Init+0x3d4>)
 8002920:	200a      	movs	r0, #10
 8002922:	f000 ff7b 	bl	800381c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8002926:	4974      	ldr	r1, [pc, #464]	; (8002af8 <OTM8009A_Init+0x3d8>)
 8002928:	2000      	movs	r0, #0
 800292a:	f000 ff77 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 800292e:	4973      	ldr	r1, [pc, #460]	; (8002afc <OTM8009A_Init+0x3dc>)
 8002930:	200a      	movs	r0, #10
 8002932:	f000 ff73 	bl	800381c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8002936:	4940      	ldr	r1, [pc, #256]	; (8002a38 <OTM8009A_Init+0x318>)
 8002938:	2000      	movs	r0, #0
 800293a:	f000 ff6f 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 800293e:	4970      	ldr	r1, [pc, #448]	; (8002b00 <OTM8009A_Init+0x3e0>)
 8002940:	200a      	movs	r0, #10
 8002942:	f000 ff6b 	bl	800381c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8002946:	4964      	ldr	r1, [pc, #400]	; (8002ad8 <OTM8009A_Init+0x3b8>)
 8002948:	2000      	movs	r0, #0
 800294a:	f000 ff67 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 800294e:	496d      	ldr	r1, [pc, #436]	; (8002b04 <OTM8009A_Init+0x3e4>)
 8002950:	200f      	movs	r0, #15
 8002952:	f000 ff63 	bl	800381c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8002956:	4957      	ldr	r1, [pc, #348]	; (8002ab4 <OTM8009A_Init+0x394>)
 8002958:	2000      	movs	r0, #0
 800295a:	f000 ff5f 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 800295e:	496a      	ldr	r1, [pc, #424]	; (8002b08 <OTM8009A_Init+0x3e8>)
 8002960:	200f      	movs	r0, #15
 8002962:	f000 ff5b 	bl	800381c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8002966:	4955      	ldr	r1, [pc, #340]	; (8002abc <OTM8009A_Init+0x39c>)
 8002968:	2000      	movs	r0, #0
 800296a:	f000 ff57 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 800296e:	4967      	ldr	r1, [pc, #412]	; (8002b0c <OTM8009A_Init+0x3ec>)
 8002970:	200a      	movs	r0, #10
 8002972:	f000 ff53 	bl	800381c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8002976:	4953      	ldr	r1, [pc, #332]	; (8002ac4 <OTM8009A_Init+0x3a4>)
 8002978:	2000      	movs	r0, #0
 800297a:	f000 ff4f 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 800297e:	4964      	ldr	r1, [pc, #400]	; (8002b10 <OTM8009A_Init+0x3f0>)
 8002980:	200f      	movs	r0, #15
 8002982:	f000 ff4b 	bl	800381c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8002986:	4951      	ldr	r1, [pc, #324]	; (8002acc <OTM8009A_Init+0x3ac>)
 8002988:	2000      	movs	r0, #0
 800298a:	f000 ff47 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 800298e:	4961      	ldr	r1, [pc, #388]	; (8002b14 <OTM8009A_Init+0x3f4>)
 8002990:	200f      	movs	r0, #15
 8002992:	f000 ff43 	bl	800381c <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8002996:	4934      	ldr	r1, [pc, #208]	; (8002a68 <OTM8009A_Init+0x348>)
 8002998:	2000      	movs	r0, #0
 800299a:	f000 ff3f 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 800299e:	495e      	ldr	r1, [pc, #376]	; (8002b18 <OTM8009A_Init+0x3f8>)
 80029a0:	2000      	movs	r0, #0
 80029a2:	f000 ff3b 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 80029a6:	495d      	ldr	r1, [pc, #372]	; (8002b1c <OTM8009A_Init+0x3fc>)
 80029a8:	2000      	movs	r0, #0
 80029aa:	f000 ff37 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 80029ae:	495c      	ldr	r1, [pc, #368]	; (8002b20 <OTM8009A_Init+0x400>)
 80029b0:	2000      	movs	r0, #0
 80029b2:	f000 ff33 	bl	800381c <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 22,7kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 80029b6:	495b      	ldr	r1, [pc, #364]	; (8002b24 <OTM8009A_Init+0x404>)
 80029b8:	2000      	movs	r0, #0
 80029ba:	f000 ff2f 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 80029be:	495a      	ldr	r1, [pc, #360]	; (8002b28 <OTM8009A_Init+0x408>)
 80029c0:	2000      	movs	r0, #0
 80029c2:	f000 ff2b 	bl	800381c <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80029c6:	491a      	ldr	r1, [pc, #104]	; (8002a30 <OTM8009A_Init+0x310>)
 80029c8:	2000      	movs	r0, #0
 80029ca:	f000 ff27 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 80029ce:	4957      	ldr	r1, [pc, #348]	; (8002b2c <OTM8009A_Init+0x40c>)
 80029d0:	2003      	movs	r0, #3
 80029d2:	f000 ff23 	bl	800381c <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80029d6:	4916      	ldr	r1, [pc, #88]	; (8002a30 <OTM8009A_Init+0x310>)
 80029d8:	2000      	movs	r0, #0
 80029da:	f000 ff1f 	bl	800381c <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80029de:	4914      	ldr	r1, [pc, #80]	; (8002a30 <OTM8009A_Init+0x310>)
 80029e0:	2000      	movs	r0, #0
 80029e2:	f000 ff1b 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 80029e6:	4952      	ldr	r1, [pc, #328]	; (8002b30 <OTM8009A_Init+0x410>)
 80029e8:	2010      	movs	r0, #16
 80029ea:	f000 ff17 	bl	800381c <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80029ee:	4910      	ldr	r1, [pc, #64]	; (8002a30 <OTM8009A_Init+0x310>)
 80029f0:	2000      	movs	r0, #0
 80029f2:	f000 ff13 	bl	800381c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 80029f6:	494f      	ldr	r1, [pc, #316]	; (8002b34 <OTM8009A_Init+0x414>)
 80029f8:	2010      	movs	r0, #16
 80029fa:	f000 ff0f 	bl	800381c <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 80029fe:	494e      	ldr	r1, [pc, #312]	; (8002b38 <OTM8009A_Init+0x418>)
 8002a00:	2000      	movs	r0, #0
 8002a02:	f000 ff0b 	bl	800381c <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8002a06:	2078      	movs	r0, #120	; 0x78
 8002a08:	f000 faa6 	bl	8002f58 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d008      	beq.n	8002a24 <OTM8009A_Init+0x304>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	f040 8095 	bne.w	8002b44 <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8002a1a:	4948      	ldr	r1, [pc, #288]	; (8002b3c <OTM8009A_Init+0x41c>)
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f000 fefd 	bl	800381c <DSI_IO_WriteCmd>
    break;
 8002a22:	e090      	b.n	8002b46 <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8002a24:	4946      	ldr	r1, [pc, #280]	; (8002b40 <OTM8009A_Init+0x420>)
 8002a26:	2000      	movs	r0, #0
 8002a28:	f000 fef8 	bl	800381c <DSI_IO_WriteCmd>
    break;
 8002a2c:	e08b      	b.n	8002b46 <OTM8009A_Init+0x426>
 8002a2e:	bf00      	nop
 8002a30:	0800f354 	.word	0x0800f354
 8002a34:	0800f20c 	.word	0x0800f20c
 8002a38:	0800f358 	.word	0x0800f358
 8002a3c:	0800f210 	.word	0x0800f210
 8002a40:	0800f35c 	.word	0x0800f35c
 8002a44:	0800f360 	.word	0x0800f360
 8002a48:	0800f364 	.word	0x0800f364
 8002a4c:	0800f368 	.word	0x0800f368
 8002a50:	0800f36c 	.word	0x0800f36c
 8002a54:	0800f370 	.word	0x0800f370
 8002a58:	0800f374 	.word	0x0800f374
 8002a5c:	0800f378 	.word	0x0800f378
 8002a60:	0800f37c 	.word	0x0800f37c
 8002a64:	0800f380 	.word	0x0800f380
 8002a68:	0800f384 	.word	0x0800f384
 8002a6c:	0800f388 	.word	0x0800f388
 8002a70:	0800f38c 	.word	0x0800f38c
 8002a74:	0800f390 	.word	0x0800f390
 8002a78:	0800f394 	.word	0x0800f394
 8002a7c:	0800f398 	.word	0x0800f398
 8002a80:	0800f39c 	.word	0x0800f39c
 8002a84:	0800f23c 	.word	0x0800f23c
 8002a88:	0800f3a0 	.word	0x0800f3a0
 8002a8c:	0800f3a4 	.word	0x0800f3a4
 8002a90:	0800f3a8 	.word	0x0800f3a8
 8002a94:	0800f3ac 	.word	0x0800f3ac
 8002a98:	0800f3b0 	.word	0x0800f3b0
 8002a9c:	0800f3b4 	.word	0x0800f3b4
 8002aa0:	0800f3b8 	.word	0x0800f3b8
 8002aa4:	0800f3bc 	.word	0x0800f3bc
 8002aa8:	0800f3c0 	.word	0x0800f3c0
 8002aac:	0800f240 	.word	0x0800f240
 8002ab0:	0800f244 	.word	0x0800f244
 8002ab4:	0800f3c4 	.word	0x0800f3c4
 8002ab8:	0800f24c 	.word	0x0800f24c
 8002abc:	0800f3c8 	.word	0x0800f3c8
 8002ac0:	0800f25c 	.word	0x0800f25c
 8002ac4:	0800f3cc 	.word	0x0800f3cc
 8002ac8:	0800f26c 	.word	0x0800f26c
 8002acc:	0800f3d0 	.word	0x0800f3d0
 8002ad0:	0800f408 	.word	0x0800f408
 8002ad4:	0800f278 	.word	0x0800f278
 8002ad8:	0800f3d4 	.word	0x0800f3d4
 8002adc:	0800f284 	.word	0x0800f284
 8002ae0:	0800f294 	.word	0x0800f294
 8002ae4:	0800f2a4 	.word	0x0800f2a4
 8002ae8:	0800f2b0 	.word	0x0800f2b0
 8002aec:	0800f2c0 	.word	0x0800f2c0
 8002af0:	0800f3d8 	.word	0x0800f3d8
 8002af4:	0800f2d0 	.word	0x0800f2d0
 8002af8:	0800f3dc 	.word	0x0800f3dc
 8002afc:	0800f2dc 	.word	0x0800f2dc
 8002b00:	0800f2e8 	.word	0x0800f2e8
 8002b04:	0800f2f4 	.word	0x0800f2f4
 8002b08:	0800f304 	.word	0x0800f304
 8002b0c:	0800f314 	.word	0x0800f314
 8002b10:	0800f320 	.word	0x0800f320
 8002b14:	0800f330 	.word	0x0800f330
 8002b18:	0800f40c 	.word	0x0800f40c
 8002b1c:	0800f410 	.word	0x0800f410
 8002b20:	0800f414 	.word	0x0800f414
 8002b24:	0800f418 	.word	0x0800f418
 8002b28:	0800f41c 	.word	0x0800f41c
 8002b2c:	0800f340 	.word	0x0800f340
 8002b30:	0800f214 	.word	0x0800f214
 8002b34:	0800f228 	.word	0x0800f228
 8002b38:	0800f3e0 	.word	0x0800f3e0
 8002b3c:	0800f3e4 	.word	0x0800f3e4
 8002b40:	0800f3e8 	.word	0x0800f3e8
  default :
    break;
 8002b44:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d10b      	bne.n	8002b64 <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8002b4c:	4916      	ldr	r1, [pc, #88]	; (8002ba8 <OTM8009A_Init+0x488>)
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f000 fe64 	bl	800381c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8002b54:	4915      	ldr	r1, [pc, #84]	; (8002bac <OTM8009A_Init+0x48c>)
 8002b56:	2004      	movs	r0, #4
 8002b58:	f000 fe60 	bl	800381c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8002b5c:	4914      	ldr	r1, [pc, #80]	; (8002bb0 <OTM8009A_Init+0x490>)
 8002b5e:	2004      	movs	r0, #4
 8002b60:	f000 fe5c 	bl	800381c <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8002b64:	4913      	ldr	r1, [pc, #76]	; (8002bb4 <OTM8009A_Init+0x494>)
 8002b66:	2000      	movs	r0, #0
 8002b68:	f000 fe58 	bl	800381c <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8002b6c:	4912      	ldr	r1, [pc, #72]	; (8002bb8 <OTM8009A_Init+0x498>)
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f000 fe54 	bl	800381c <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8002b74:	4911      	ldr	r1, [pc, #68]	; (8002bbc <OTM8009A_Init+0x49c>)
 8002b76:	2000      	movs	r0, #0
 8002b78:	f000 fe50 	bl	800381c <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8002b7c:	4910      	ldr	r1, [pc, #64]	; (8002bc0 <OTM8009A_Init+0x4a0>)
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f000 fe4c 	bl	800381c <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8002b84:	490f      	ldr	r1, [pc, #60]	; (8002bc4 <OTM8009A_Init+0x4a4>)
 8002b86:	2000      	movs	r0, #0
 8002b88:	f000 fe48 	bl	800381c <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002b8c:	490e      	ldr	r1, [pc, #56]	; (8002bc8 <OTM8009A_Init+0x4a8>)
 8002b8e:	2000      	movs	r0, #0
 8002b90:	f000 fe44 	bl	800381c <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8002b94:	490d      	ldr	r1, [pc, #52]	; (8002bcc <OTM8009A_Init+0x4ac>)
 8002b96:	2000      	movs	r0, #0
 8002b98:	f000 fe40 	bl	800381c <DSI_IO_WriteCmd>

  return 0;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	0800f3ec 	.word	0x0800f3ec
 8002bac:	0800f344 	.word	0x0800f344
 8002bb0:	0800f34c 	.word	0x0800f34c
 8002bb4:	0800f3f0 	.word	0x0800f3f0
 8002bb8:	0800f3f4 	.word	0x0800f3f4
 8002bbc:	0800f3f8 	.word	0x0800f3f8
 8002bc0:	0800f3fc 	.word	0x0800f3fc
 8002bc4:	0800f400 	.word	0x0800f400
 8002bc8:	0800f354 	.word	0x0800f354
 8002bcc:	0800f404 	.word	0x0800f404

08002bd0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08c      	sub	sp, #48	; 0x30
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a58      	ldr	r2, [pc, #352]	; (8002d3c <I2Cx_MspInit+0x16c>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d15b      	bne.n	8002c98 <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8002be0:	4b57      	ldr	r3, [pc, #348]	; (8002d40 <I2Cx_MspInit+0x170>)
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	4a56      	ldr	r2, [pc, #344]	; (8002d40 <I2Cx_MspInit+0x170>)
 8002be6:	f043 0308 	orr.w	r3, r3, #8
 8002bea:	6313      	str	r3, [r2, #48]	; 0x30
 8002bec:	4b54      	ldr	r3, [pc, #336]	; (8002d40 <I2Cx_MspInit+0x170>)
 8002bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf0:	f003 0308 	and.w	r3, r3, #8
 8002bf4:	61bb      	str	r3, [r7, #24]
 8002bf6:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8002bf8:	4b51      	ldr	r3, [pc, #324]	; (8002d40 <I2Cx_MspInit+0x170>)
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfc:	4a50      	ldr	r2, [pc, #320]	; (8002d40 <I2Cx_MspInit+0x170>)
 8002bfe:	f043 0302 	orr.w	r3, r3, #2
 8002c02:	6313      	str	r3, [r2, #48]	; 0x30
 8002c04:	4b4e      	ldr	r3, [pc, #312]	; (8002d40 <I2Cx_MspInit+0x170>)
 8002c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c14:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002c16:	2312      	movs	r3, #18
 8002c18:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8002c22:	2304      	movs	r3, #4
 8002c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8002c26:	f107 031c 	add.w	r3, r7, #28
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4845      	ldr	r0, [pc, #276]	; (8002d44 <I2Cx_MspInit+0x174>)
 8002c2e:	f003 f8b9 	bl	8005da4 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002c32:	2380      	movs	r3, #128	; 0x80
 8002c34:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8002c36:	230b      	movs	r3, #11
 8002c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8002c3a:	f107 031c 	add.w	r3, r7, #28
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4841      	ldr	r0, [pc, #260]	; (8002d48 <I2Cx_MspInit+0x178>)
 8002c42:	f003 f8af 	bl	8005da4 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002c46:	4b3e      	ldr	r3, [pc, #248]	; (8002d40 <I2Cx_MspInit+0x170>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	4a3d      	ldr	r2, [pc, #244]	; (8002d40 <I2Cx_MspInit+0x170>)
 8002c4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c50:	6413      	str	r3, [r2, #64]	; 0x40
 8002c52:	4b3b      	ldr	r3, [pc, #236]	; (8002d40 <I2Cx_MspInit+0x170>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c5a:	613b      	str	r3, [r7, #16]
 8002c5c:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002c5e:	4b38      	ldr	r3, [pc, #224]	; (8002d40 <I2Cx_MspInit+0x170>)
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	4a37      	ldr	r2, [pc, #220]	; (8002d40 <I2Cx_MspInit+0x170>)
 8002c64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c68:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002c6a:	4b35      	ldr	r3, [pc, #212]	; (8002d40 <I2Cx_MspInit+0x170>)
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	4a34      	ldr	r2, [pc, #208]	; (8002d40 <I2Cx_MspInit+0x170>)
 8002c70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c74:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002c76:	2200      	movs	r2, #0
 8002c78:	210f      	movs	r1, #15
 8002c7a:	205f      	movs	r0, #95	; 0x5f
 8002c7c:	f001 fd2e 	bl	80046dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002c80:	205f      	movs	r0, #95	; 0x5f
 8002c82:	f001 fd47 	bl	8004714 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002c86:	2200      	movs	r2, #0
 8002c88:	210f      	movs	r1, #15
 8002c8a:	2060      	movs	r0, #96	; 0x60
 8002c8c:	f001 fd26 	bl	80046dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8002c90:	2060      	movs	r0, #96	; 0x60
 8002c92:	f001 fd3f 	bl	8004714 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002c96:	e04d      	b.n	8002d34 <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002c98:	4b29      	ldr	r3, [pc, #164]	; (8002d40 <I2Cx_MspInit+0x170>)
 8002c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9c:	4a28      	ldr	r2, [pc, #160]	; (8002d40 <I2Cx_MspInit+0x170>)
 8002c9e:	f043 0302 	orr.w	r3, r3, #2
 8002ca2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ca4:	4b26      	ldr	r3, [pc, #152]	; (8002d40 <I2Cx_MspInit+0x170>)
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002cb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cb4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002cb6:	2312      	movs	r3, #18
 8002cb8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002cc2:	2304      	movs	r3, #4
 8002cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002cc6:	f107 031c 	add.w	r3, r7, #28
 8002cca:	4619      	mov	r1, r3
 8002ccc:	481e      	ldr	r0, [pc, #120]	; (8002d48 <I2Cx_MspInit+0x178>)
 8002cce:	f003 f869 	bl	8005da4 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002cd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002cd8:	f107 031c 	add.w	r3, r7, #28
 8002cdc:	4619      	mov	r1, r3
 8002cde:	481a      	ldr	r0, [pc, #104]	; (8002d48 <I2Cx_MspInit+0x178>)
 8002ce0:	f003 f860 	bl	8005da4 <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002ce4:	4b16      	ldr	r3, [pc, #88]	; (8002d40 <I2Cx_MspInit+0x170>)
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	4a15      	ldr	r2, [pc, #84]	; (8002d40 <I2Cx_MspInit+0x170>)
 8002cea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002cee:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf0:	4b13      	ldr	r3, [pc, #76]	; (8002d40 <I2Cx_MspInit+0x170>)
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002cfc:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <I2Cx_MspInit+0x170>)
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	4a0f      	ldr	r2, [pc, #60]	; (8002d40 <I2Cx_MspInit+0x170>)
 8002d02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d06:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002d08:	4b0d      	ldr	r3, [pc, #52]	; (8002d40 <I2Cx_MspInit+0x170>)
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	4a0c      	ldr	r2, [pc, #48]	; (8002d40 <I2Cx_MspInit+0x170>)
 8002d0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d12:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002d14:	2200      	movs	r2, #0
 8002d16:	210f      	movs	r1, #15
 8002d18:	201f      	movs	r0, #31
 8002d1a:	f001 fcdf 	bl	80046dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002d1e:	201f      	movs	r0, #31
 8002d20:	f001 fcf8 	bl	8004714 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002d24:	2200      	movs	r2, #0
 8002d26:	210f      	movs	r1, #15
 8002d28:	2020      	movs	r0, #32
 8002d2a:	f001 fcd7 	bl	80046dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002d2e:	2020      	movs	r0, #32
 8002d30:	f001 fcf0 	bl	8004714 <HAL_NVIC_EnableIRQ>
}
 8002d34:	bf00      	nop
 8002d36:	3730      	adds	r7, #48	; 0x30
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	20000934 	.word	0x20000934
 8002d40:	40023800 	.word	0x40023800
 8002d44:	40020c00 	.word	0x40020c00
 8002d48:	40020400 	.word	0x40020400

08002d4c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f003 fe09 	bl	800696c <HAL_I2C_GetState>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d125      	bne.n	8002dac <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a14      	ldr	r2, [pc, #80]	; (8002db4 <I2Cx_Init+0x68>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d103      	bne.n	8002d70 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a13      	ldr	r2, [pc, #76]	; (8002db8 <I2Cx_Init+0x6c>)
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	e002      	b.n	8002d76 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a12      	ldr	r2, [pc, #72]	; (8002dbc <I2Cx_Init+0x70>)
 8002d74:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a11      	ldr	r2, [pc, #68]	; (8002dc0 <I2Cx_Init+0x74>)
 8002d7a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7ff ff15 	bl	8002bd0 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f003 faf2 	bl	8006390 <HAL_I2C_Init>
  }
}
 8002dac:	bf00      	nop
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	20000934 	.word	0x20000934
 8002db8:	40006000 	.word	0x40006000
 8002dbc:	40005400 	.word	0x40005400
 8002dc0:	40912732 	.word	0x40912732

08002dc4 <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08a      	sub	sp, #40	; 0x28
 8002dc8:	af04      	add	r7, sp, #16
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	4608      	mov	r0, r1
 8002dce:	4611      	mov	r1, r2
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	72fb      	strb	r3, [r7, #11]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	813b      	strh	r3, [r7, #8]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002dde:	2300      	movs	r3, #0
 8002de0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002de2:	7afb      	ldrb	r3, [r7, #11]
 8002de4:	b299      	uxth	r1, r3
 8002de6:	88f8      	ldrh	r0, [r7, #6]
 8002de8:	893a      	ldrh	r2, [r7, #8]
 8002dea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dee:	9302      	str	r3, [sp, #8]
 8002df0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002df2:	9301      	str	r3, [sp, #4]
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	4603      	mov	r3, r0
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f003 fc9c 	bl	8006738 <HAL_I2C_Mem_Read>
 8002e00:	4603      	mov	r3, r0
 8002e02:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002e04:	7dfb      	ldrb	r3, [r7, #23]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d004      	beq.n	8002e14 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8002e0a:	7afb      	ldrb	r3, [r7, #11]
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 f832 	bl	8002e78 <I2Cx_Error>
  }
  return status;
 8002e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b08a      	sub	sp, #40	; 0x28
 8002e22:	af04      	add	r7, sp, #16
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	4608      	mov	r0, r1
 8002e28:	4611      	mov	r1, r2
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	72fb      	strb	r3, [r7, #11]
 8002e30:	460b      	mov	r3, r1
 8002e32:	813b      	strh	r3, [r7, #8]
 8002e34:	4613      	mov	r3, r2
 8002e36:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002e3c:	7afb      	ldrb	r3, [r7, #11]
 8002e3e:	b299      	uxth	r1, r3
 8002e40:	88f8      	ldrh	r0, [r7, #6]
 8002e42:	893a      	ldrh	r2, [r7, #8]
 8002e44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e48:	9302      	str	r3, [sp, #8]
 8002e4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e4c:	9301      	str	r3, [sp, #4]
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	4603      	mov	r3, r0
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f003 fb5b 	bl	8006510 <HAL_I2C_Mem_Write>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002e5e:	7dfb      	ldrb	r3, [r7, #23]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d004      	beq.n	8002e6e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002e64:	7afb      	ldrb	r3, [r7, #11]
 8002e66:	4619      	mov	r1, r3
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f000 f805 	bl	8002e78 <I2Cx_Error>
  }
  return status;
 8002e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f003 fb13 	bl	80064b0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f7ff ff5e 	bl	8002d4c <I2Cx_Init>
}
 8002e90:	bf00      	nop
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002e9c:	4802      	ldr	r0, [pc, #8]	; (8002ea8 <TS_IO_Init+0x10>)
 8002e9e:	f7ff ff55 	bl	8002d4c <I2Cx_Init>
}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000934 	.word	0x20000934

08002eac <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af02      	add	r7, sp, #8
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	71fb      	strb	r3, [r7, #7]
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	71bb      	strb	r3, [r7, #6]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002ebe:	79bb      	ldrb	r3, [r7, #6]
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	79f9      	ldrb	r1, [r7, #7]
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	9301      	str	r3, [sp, #4]
 8002ec8:	1d7b      	adds	r3, r7, #5
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	2301      	movs	r3, #1
 8002ece:	4803      	ldr	r0, [pc, #12]	; (8002edc <TS_IO_Write+0x30>)
 8002ed0:	f7ff ffa5 	bl	8002e1e <I2Cx_WriteMultiple>
}
 8002ed4:	bf00      	nop
 8002ed6:	3708      	adds	r7, #8
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	20000934 	.word	0x20000934

08002ee0 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af02      	add	r7, sp, #8
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	460a      	mov	r2, r1
 8002eea:	71fb      	strb	r3, [r7, #7]
 8002eec:	4613      	mov	r3, r2
 8002eee:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002ef4:	79bb      	ldrb	r3, [r7, #6]
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	79f9      	ldrb	r1, [r7, #7]
 8002efa:	2301      	movs	r3, #1
 8002efc:	9301      	str	r3, [sp, #4]
 8002efe:	f107 030f 	add.w	r3, r7, #15
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	2301      	movs	r3, #1
 8002f06:	4804      	ldr	r0, [pc, #16]	; (8002f18 <TS_IO_Read+0x38>)
 8002f08:	f7ff ff5c 	bl	8002dc4 <I2Cx_ReadMultiple>

  return read_value;
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000934 	.word	0x20000934

08002f1c <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	603a      	str	r2, [r7, #0]
 8002f24:	461a      	mov	r2, r3
 8002f26:	4603      	mov	r3, r0
 8002f28:	71fb      	strb	r3, [r7, #7]
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	71bb      	strb	r3, [r7, #6]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002f32:	79bb      	ldrb	r3, [r7, #6]
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	79f9      	ldrb	r1, [r7, #7]
 8002f38:	88bb      	ldrh	r3, [r7, #4]
 8002f3a:	9301      	str	r3, [sp, #4]
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	2301      	movs	r3, #1
 8002f42:	4804      	ldr	r0, [pc, #16]	; (8002f54 <TS_IO_ReadMultiple+0x38>)
 8002f44:	f7ff ff3e 	bl	8002dc4 <I2Cx_ReadMultiple>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	b29b      	uxth	r3, r3
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20000934 	.word	0x20000934

08002f58 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f001 f9bf 	bl	80042e4 <HAL_Delay>
}
 8002f66:	bf00      	nop
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8002f72:	2001      	movs	r0, #1
 8002f74:	f000 f804 	bl	8002f80 <BSP_LCD_InitEx>
 8002f78:	4603      	mov	r3, r0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b090      	sub	sp, #64	; 0x40
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 8002f8a:	f646 3325 	movw	r3, #27429	; 0x6b25
 8002f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 8002f90:	2300      	movs	r3, #0
 8002f92:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 8002f94:	2300      	movs	r3, #0
 8002f96:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8002f98:	f000 f936 	bl	8003208 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 8002f9c:	f000 fc68 	bl	8003870 <LCD_IO_GetID>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 8002fa4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002fa6:	2b11      	cmp	r3, #17
 8002fa8:	d001      	beq.n	8002fae <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 8002faa:	2301      	movs	r3, #1
 8002fac:	e113      	b.n	80031d6 <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 8002fae:	f000 fc67 	bl	8003880 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 8002fb2:	4b8b      	ldr	r3, [pc, #556]	; (80031e0 <BSP_LCD_InitEx+0x260>)
 8002fb4:	4a8b      	ldr	r2, [pc, #556]	; (80031e4 <BSP_LCD_InitEx+0x264>)
 8002fb6:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8002fb8:	4889      	ldr	r0, [pc, #548]	; (80031e0 <BSP_LCD_InitEx+0x260>)
 8002fba:	f002 faa1 	bl	8005500 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 8002fbe:	2364      	movs	r3, #100	; 0x64
 8002fc0:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 8002fc2:	2305      	movs	r3, #5
 8002fc4:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8002fca:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002fce:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8002fd0:	4b83      	ldr	r3, [pc, #524]	; (80031e0 <BSP_LCD_InitEx+0x260>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8002fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd8:	089b      	lsrs	r3, r3, #2
 8002fda:	4a83      	ldr	r2, [pc, #524]	; (80031e8 <BSP_LCD_InitEx+0x268>)
 8002fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe0:	0a9b      	lsrs	r3, r3, #10
 8002fe2:	4a7f      	ldr	r2, [pc, #508]	; (80031e0 <BSP_LCD_InitEx+0x260>)
 8002fe4:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8002fe6:	f107 0308 	add.w	r3, r7, #8
 8002fea:	4619      	mov	r1, r3
 8002fec:	487c      	ldr	r0, [pc, #496]	; (80031e0 <BSP_LCD_InitEx+0x260>)
 8002fee:	f002 f96b 	bl	80052c8 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d108      	bne.n	800300a <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8002ff8:	4b7c      	ldr	r3, [pc, #496]	; (80031ec <BSP_LCD_InitEx+0x26c>)
 8002ffa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002ffe:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8003000:	4b7b      	ldr	r3, [pc, #492]	; (80031f0 <BSP_LCD_InitEx+0x270>)
 8003002:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	e007      	b.n	800301a <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 800300a:	4b78      	ldr	r3, [pc, #480]	; (80031ec <BSP_LCD_InitEx+0x26c>)
 800300c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8003010:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8003012:	4b77      	ldr	r3, [pc, #476]	; (80031f0 <BSP_LCD_InitEx+0x270>)
 8003014:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003018:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 800301a:	4b74      	ldr	r3, [pc, #464]	; (80031ec <BSP_LCD_InitEx+0x26c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 8003020:	4b73      	ldr	r3, [pc, #460]	; (80031f0 <BSP_LCD_InitEx+0x270>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 8003026:	2301      	movs	r3, #1
 8003028:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 800302a:	230f      	movs	r3, #15
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 800302e:	2310      	movs	r3, #16
 8003030:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 8003032:	2302      	movs	r3, #2
 8003034:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 8003036:	2322      	movs	r3, #34	; 0x22
 8003038:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 800303a:	2322      	movs	r3, #34	; 0x22
 800303c:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 800303e:	4b6d      	ldr	r3, [pc, #436]	; (80031f4 <BSP_LCD_InitEx+0x274>)
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8003044:	4b6b      	ldr	r3, [pc, #428]	; (80031f4 <BSP_LCD_InitEx+0x274>)
 8003046:	2205      	movs	r2, #5
 8003048:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 800304a:	4b6a      	ldr	r3, [pc, #424]	; (80031f4 <BSP_LCD_InitEx+0x274>)
 800304c:	2200      	movs	r2, #0
 800304e:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8003050:	4b68      	ldr	r3, [pc, #416]	; (80031f4 <BSP_LCD_InitEx+0x274>)
 8003052:	2200      	movs	r2, #0
 8003054:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8003056:	4b67      	ldr	r3, [pc, #412]	; (80031f4 <BSP_LCD_InitEx+0x274>)
 8003058:	2200      	movs	r2, #0
 800305a:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 800305c:	4b65      	ldr	r3, [pc, #404]	; (80031f4 <BSP_LCD_InitEx+0x274>)
 800305e:	2202      	movs	r2, #2
 8003060:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8003062:	4b64      	ldr	r3, [pc, #400]	; (80031f4 <BSP_LCD_InitEx+0x274>)
 8003064:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003068:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 800306a:	4b62      	ldr	r3, [pc, #392]	; (80031f4 <BSP_LCD_InitEx+0x274>)
 800306c:	2200      	movs	r2, #0
 800306e:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8003070:	4a60      	ldr	r2, [pc, #384]	; (80031f4 <BSP_LCD_InitEx+0x274>)
 8003072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003074:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800307a:	fb03 f202 	mul.w	r2, r3, r2
 800307e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003080:	fbb2 f3f3 	udiv	r3, r2, r3
 8003084:	4a5b      	ldr	r2, [pc, #364]	; (80031f4 <BSP_LCD_InitEx+0x274>)
 8003086:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800308c:	fb03 f202 	mul.w	r2, r3, r2
 8003090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003092:	fbb2 f3f3 	udiv	r3, r2, r3
 8003096:	4a57      	ldr	r2, [pc, #348]	; (80031f4 <BSP_LCD_InitEx+0x274>)
 8003098:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 800309a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	441a      	add	r2, r3
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	441a      	add	r2, r3
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	4413      	add	r3, r2
 80030a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030aa:	fb03 f202 	mul.w	r2, r3, r2
 80030ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b4:	4a4f      	ldr	r2, [pc, #316]	; (80031f4 <BSP_LCD_InitEx+0x274>)
 80030b6:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 80030b8:	4a4e      	ldr	r2, [pc, #312]	; (80031f4 <BSP_LCD_InitEx+0x274>)
 80030ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030bc:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 80030be:	4a4d      	ldr	r2, [pc, #308]	; (80031f4 <BSP_LCD_InitEx+0x274>)
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 80030c4:	4a4b      	ldr	r2, [pc, #300]	; (80031f4 <BSP_LCD_InitEx+0x274>)
 80030c6:	6a3b      	ldr	r3, [r7, #32]
 80030c8:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 80030ca:	4a4a      	ldr	r2, [pc, #296]	; (80031f4 <BSP_LCD_InitEx+0x274>)
 80030cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ce:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 80030d0:	4b48      	ldr	r3, [pc, #288]	; (80031f4 <BSP_LCD_InitEx+0x274>)
 80030d2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80030d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 80030d8:	4b46      	ldr	r3, [pc, #280]	; (80031f4 <BSP_LCD_InitEx+0x274>)
 80030da:	2210      	movs	r2, #16
 80030dc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 80030de:	4b45      	ldr	r3, [pc, #276]	; (80031f4 <BSP_LCD_InitEx+0x274>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 80030e4:	4b43      	ldr	r3, [pc, #268]	; (80031f4 <BSP_LCD_InitEx+0x274>)
 80030e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030ea:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 80030ec:	4b41      	ldr	r3, [pc, #260]	; (80031f4 <BSP_LCD_InitEx+0x274>)
 80030ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030f2:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 80030f4:	4b3f      	ldr	r3, [pc, #252]	; (80031f4 <BSP_LCD_InitEx+0x274>)
 80030f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030fa:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 80030fc:	4b3d      	ldr	r3, [pc, #244]	; (80031f4 <BSP_LCD_InitEx+0x274>)
 80030fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003102:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8003104:	4b3b      	ldr	r3, [pc, #236]	; (80031f4 <BSP_LCD_InitEx+0x274>)
 8003106:	f44f 7200 	mov.w	r2, #512	; 0x200
 800310a:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 800310c:	4b39      	ldr	r3, [pc, #228]	; (80031f4 <BSP_LCD_InitEx+0x274>)
 800310e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003112:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8003114:	4937      	ldr	r1, [pc, #220]	; (80031f4 <BSP_LCD_InitEx+0x274>)
 8003116:	4832      	ldr	r0, [pc, #200]	; (80031e0 <BSP_LCD_InitEx+0x260>)
 8003118:	f002 fb4e 	bl	80057b8 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	3b01      	subs	r3, #1
 8003120:	4a35      	ldr	r2, [pc, #212]	; (80031f8 <BSP_LCD_InitEx+0x278>)
 8003122:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8003124:	69fa      	ldr	r2, [r7, #28]
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	4413      	add	r3, r2
 800312a:	3b01      	subs	r3, #1
 800312c:	4a32      	ldr	r2, [pc, #200]	; (80031f8 <BSP_LCD_InitEx+0x278>)
 800312e:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8003130:	4b2e      	ldr	r3, [pc, #184]	; (80031ec <BSP_LCD_InitEx+0x26c>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	441a      	add	r2, r3
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	4413      	add	r3, r2
 800313c:	3b01      	subs	r3, #1
 800313e:	4a2e      	ldr	r2, [pc, #184]	; (80031f8 <BSP_LCD_InitEx+0x278>)
 8003140:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8003142:	4b2a      	ldr	r3, [pc, #168]	; (80031ec <BSP_LCD_InitEx+0x26c>)
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	441a      	add	r2, r3
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	441a      	add	r2, r3
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	4413      	add	r3, r2
 8003152:	3b01      	subs	r3, #1
 8003154:	4a28      	ldr	r2, [pc, #160]	; (80031f8 <BSP_LCD_InitEx+0x278>)
 8003156:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8003158:	4b24      	ldr	r3, [pc, #144]	; (80031ec <BSP_LCD_InitEx+0x26c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a26      	ldr	r2, [pc, #152]	; (80031f8 <BSP_LCD_InitEx+0x278>)
 800315e:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 8003160:	4b23      	ldr	r3, [pc, #140]	; (80031f0 <BSP_LCD_InitEx+0x270>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a24      	ldr	r2, [pc, #144]	; (80031f8 <BSP_LCD_InitEx+0x278>)
 8003166:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003168:	4b24      	ldr	r3, [pc, #144]	; (80031fc <BSP_LCD_InitEx+0x27c>)
 800316a:	2208      	movs	r2, #8
 800316c:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800316e:	4b23      	ldr	r3, [pc, #140]	; (80031fc <BSP_LCD_InitEx+0x27c>)
 8003170:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003174:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8003176:	4b21      	ldr	r3, [pc, #132]	; (80031fc <BSP_LCD_InitEx+0x27c>)
 8003178:	2207      	movs	r2, #7
 800317a:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800317c:	4b1f      	ldr	r3, [pc, #124]	; (80031fc <BSP_LCD_InitEx+0x27c>)
 800317e:	2200      	movs	r2, #0
 8003180:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003182:	481e      	ldr	r0, [pc, #120]	; (80031fc <BSP_LCD_InitEx+0x27c>)
 8003184:	f005 ff04 	bl	8008f90 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 8003188:	4b1b      	ldr	r3, [pc, #108]	; (80031f8 <BSP_LCD_InitEx+0x278>)
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 8003190:	4b19      	ldr	r3, [pc, #100]	; (80031f8 <BSP_LCD_InitEx+0x278>)
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8003198:	4b17      	ldr	r3, [pc, #92]	; (80031f8 <BSP_LCD_InitEx+0x278>)
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80031a0:	4b15      	ldr	r3, [pc, #84]	; (80031f8 <BSP_LCD_InitEx+0x278>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 80031a6:	4b14      	ldr	r3, [pc, #80]	; (80031f8 <BSP_LCD_InitEx+0x278>)
 80031a8:	4a15      	ldr	r2, [pc, #84]	; (8003200 <BSP_LCD_InitEx+0x280>)
 80031aa:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 80031ac:	4911      	ldr	r1, [pc, #68]	; (80031f4 <BSP_LCD_InitEx+0x274>)
 80031ae:	4812      	ldr	r0, [pc, #72]	; (80031f8 <BSP_LCD_InitEx+0x278>)
 80031b0:	f004 f9ee 	bl	8007590 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 80031b4:	4810      	ldr	r0, [pc, #64]	; (80031f8 <BSP_LCD_InitEx+0x278>)
 80031b6:	f003 fe81 	bl	8006ebc <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 80031ba:	4809      	ldr	r0, [pc, #36]	; (80031e0 <BSP_LCD_InitEx+0x260>)
 80031bc:	f002 fcfc 	bl	8005bb8 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80031c0:	f000 fcde 	bl	8003b80 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80031c4:	480f      	ldr	r0, [pc, #60]	; (8003204 <BSP_LCD_InitEx+0x284>)
 80031c6:	f000 f901 	bl	80033cc <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 80031ca:	79fb      	ldrb	r3, [r7, #7]
 80031cc:	4619      	mov	r1, r3
 80031ce:	2000      	movs	r0, #0
 80031d0:	f7ff faa6 	bl	8002720 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3740      	adds	r7, #64	; 0x40
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000af4 	.word	0x20000af4
 80031e4:	40016c00 	.word	0x40016c00
 80031e8:	43215e57 	.word	0x43215e57
 80031ec:	2000003c 	.word	0x2000003c
 80031f0:	20000040 	.word	0x20000040
 80031f4:	20000988 	.word	0x20000988
 80031f8:	20000a4c 	.word	0x20000a4c
 80031fc:	20000b2c 	.word	0x20000b2c
 8003200:	40016800 	.word	0x40016800
 8003204:	20000034 	.word	0x20000034

08003208 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800320e:	4b18      	ldr	r3, [pc, #96]	; (8003270 <BSP_LCD_Reset+0x68>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	4a17      	ldr	r2, [pc, #92]	; (8003270 <BSP_LCD_Reset+0x68>)
 8003214:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003218:	6313      	str	r3, [r2, #48]	; 0x30
 800321a:	4b15      	ldr	r3, [pc, #84]	; (8003270 <BSP_LCD_Reset+0x68>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 8003226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800322a:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800322c:	2301      	movs	r3, #1
 800322e:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8003230:	2301      	movs	r3, #1
 8003232:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8003234:	2303      	movs	r3, #3
 8003236:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8003238:	1d3b      	adds	r3, r7, #4
 800323a:	4619      	mov	r1, r3
 800323c:	480d      	ldr	r0, [pc, #52]	; (8003274 <BSP_LCD_Reset+0x6c>)
 800323e:	f002 fdb1 	bl	8005da4 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 8003242:	2200      	movs	r2, #0
 8003244:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003248:	480a      	ldr	r0, [pc, #40]	; (8003274 <BSP_LCD_Reset+0x6c>)
 800324a:	f003 f863 	bl	8006314 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 800324e:	2014      	movs	r0, #20
 8003250:	f001 f848 	bl	80042e4 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8003254:	2201      	movs	r2, #1
 8003256:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800325a:	4806      	ldr	r0, [pc, #24]	; (8003274 <BSP_LCD_Reset+0x6c>)
 800325c:	f003 f85a 	bl	8006314 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 8003260:	200a      	movs	r0, #10
 8003262:	f001 f83f 	bl	80042e4 <HAL_Delay>
}
 8003266:	bf00      	nop
 8003268:	3718      	adds	r7, #24
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40023800 	.word	0x40023800
 8003274:	40022400 	.word	0x40022400

08003278 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 800327c:	4b03      	ldr	r3, [pc, #12]	; (800328c <BSP_LCD_GetXSize+0x14>)
 800327e:	681b      	ldr	r3, [r3, #0]
}
 8003280:	4618      	mov	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	2000003c 	.word	0x2000003c

08003290 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8003294:	4b03      	ldr	r3, [pc, #12]	; (80032a4 <BSP_LCD_GetYSize+0x14>)
 8003296:	681b      	ldr	r3, [r3, #0]
}
 8003298:	4618      	mov	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	20000040 	.word	0x20000040

080032a8 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b090      	sub	sp, #64	; 0x40
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	6039      	str	r1, [r7, #0]
 80032b2:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80032b8:	f7ff ffde 	bl	8003278 <BSP_LCD_GetXSize>
 80032bc:	4603      	mov	r3, r0
 80032be:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 80032c4:	f7ff ffe4 	bl	8003290 <BSP_LCD_GetYSize>
 80032c8:	4603      	mov	r3, r0
 80032ca:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80032cc:	2300      	movs	r3, #0
 80032ce:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 80032d4:	23ff      	movs	r3, #255	; 0xff
 80032d6:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 80032d8:	2300      	movs	r3, #0
 80032da:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 80032dc:	2300      	movs	r3, #0
 80032de:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 80032e2:	2300      	movs	r3, #0
 80032e4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80032ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80032f2:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80032f4:	2307      	movs	r3, #7
 80032f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 80032f8:	f7ff ffbe 	bl	8003278 <BSP_LCD_GetXSize>
 80032fc:	4603      	mov	r3, r0
 80032fe:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8003300:	f7ff ffc6 	bl	8003290 <BSP_LCD_GetYSize>
 8003304:	4603      	mov	r3, r0
 8003306:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8003308:	88fa      	ldrh	r2, [r7, #6]
 800330a:	f107 030c 	add.w	r3, r7, #12
 800330e:	4619      	mov	r1, r3
 8003310:	4812      	ldr	r0, [pc, #72]	; (800335c <BSP_LCD_LayerDefaultInit+0xb4>)
 8003312:	f003 ff65 	bl	80071e0 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003316:	88fa      	ldrh	r2, [r7, #6]
 8003318:	4911      	ldr	r1, [pc, #68]	; (8003360 <BSP_LCD_LayerDefaultInit+0xb8>)
 800331a:	4613      	mov	r3, r2
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	4413      	add	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	3304      	adds	r3, #4
 8003326:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800332a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 800332c:	88fa      	ldrh	r2, [r7, #6]
 800332e:	490c      	ldr	r1, [pc, #48]	; (8003360 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003330:	4613      	mov	r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	4413      	add	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	3308      	adds	r3, #8
 800333c:	4a09      	ldr	r2, [pc, #36]	; (8003364 <BSP_LCD_LayerDefaultInit+0xbc>)
 800333e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8003340:	88fa      	ldrh	r2, [r7, #6]
 8003342:	4907      	ldr	r1, [pc, #28]	; (8003360 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003344:	4613      	mov	r3, r2
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8003352:	601a      	str	r2, [r3, #0]
}
 8003354:	bf00      	nop
 8003356:	3740      	adds	r7, #64	; 0x40
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	20000a4c 	.word	0x20000a4c
 8003360:	20000b14 	.word	0x20000b14
 8003364:	20000034 	.word	0x20000034

08003368 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003370:	4b07      	ldr	r3, [pc, #28]	; (8003390 <BSP_LCD_SetTextColor+0x28>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	4907      	ldr	r1, [pc, #28]	; (8003394 <BSP_LCD_SetTextColor+0x2c>)
 8003376:	4613      	mov	r3, r2
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	4413      	add	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	601a      	str	r2, [r3, #0]
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	20000b10 	.word	0x20000b10
 8003394:	20000b14 	.word	0x20000b14

08003398 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80033a0:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <BSP_LCD_SetBackColor+0x2c>)
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	4908      	ldr	r1, [pc, #32]	; (80033c8 <BSP_LCD_SetBackColor+0x30>)
 80033a6:	4613      	mov	r3, r2
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	4413      	add	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	3304      	adds	r3, #4
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	601a      	str	r2, [r3, #0]
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	20000b10 	.word	0x20000b10
 80033c8:	20000b14 	.word	0x20000b14

080033cc <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80033d4:	4b08      	ldr	r3, [pc, #32]	; (80033f8 <BSP_LCD_SetFont+0x2c>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	4908      	ldr	r1, [pc, #32]	; (80033fc <BSP_LCD_SetFont+0x30>)
 80033da:	4613      	mov	r3, r2
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	4413      	add	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	3308      	adds	r3, #8
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	601a      	str	r2, [r3, #0]
}
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	20000b10 	.word	0x20000b10
 80033fc:	20000b14 	.word	0x20000b14

08003400 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8003400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003402:	b085      	sub	sp, #20
 8003404:	af02      	add	r7, sp, #8
 8003406:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003408:	4b0f      	ldr	r3, [pc, #60]	; (8003448 <BSP_LCD_Clear+0x48>)
 800340a:	681c      	ldr	r4, [r3, #0]
 800340c:	4b0e      	ldr	r3, [pc, #56]	; (8003448 <BSP_LCD_Clear+0x48>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a0e      	ldr	r2, [pc, #56]	; (800344c <BSP_LCD_Clear+0x4c>)
 8003412:	2134      	movs	r1, #52	; 0x34
 8003414:	fb01 f303 	mul.w	r3, r1, r3
 8003418:	4413      	add	r3, r2
 800341a:	335c      	adds	r3, #92	; 0x5c
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	461e      	mov	r6, r3
 8003420:	f7ff ff2a 	bl	8003278 <BSP_LCD_GetXSize>
 8003424:	4605      	mov	r5, r0
 8003426:	f7ff ff33 	bl	8003290 <BSP_LCD_GetYSize>
 800342a:	4602      	mov	r2, r0
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	9301      	str	r3, [sp, #4]
 8003430:	2300      	movs	r3, #0
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	4613      	mov	r3, r2
 8003436:	462a      	mov	r2, r5
 8003438:	4631      	mov	r1, r6
 800343a:	4620      	mov	r0, r4
 800343c:	f000 fb68 	bl	8003b10 <LL_FillBuffer>
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003448:	20000b10 	.word	0x20000b10
 800344c:	20000a4c 	.word	0x20000a4c

08003450 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003450:	b590      	push	{r4, r7, lr}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	80fb      	strh	r3, [r7, #6]
 800345a:	460b      	mov	r3, r1
 800345c:	80bb      	strh	r3, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003462:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <BSP_LCD_DisplayChar+0x80>)
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	491b      	ldr	r1, [pc, #108]	; (80034d4 <BSP_LCD_DisplayChar+0x84>)
 8003468:	4613      	mov	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	3308      	adds	r3, #8
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6819      	ldr	r1, [r3, #0]
 8003478:	78fb      	ldrb	r3, [r7, #3]
 800347a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800347e:	4b14      	ldr	r3, [pc, #80]	; (80034d0 <BSP_LCD_DisplayChar+0x80>)
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	4c14      	ldr	r4, [pc, #80]	; (80034d4 <BSP_LCD_DisplayChar+0x84>)
 8003484:	4613      	mov	r3, r2
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	4413      	add	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4423      	add	r3, r4
 800348e:	3308      	adds	r3, #8
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003494:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003498:	4b0d      	ldr	r3, [pc, #52]	; (80034d0 <BSP_LCD_DisplayChar+0x80>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	4c0d      	ldr	r4, [pc, #52]	; (80034d4 <BSP_LCD_DisplayChar+0x84>)
 800349e:	4613      	mov	r3, r2
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	4413      	add	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4423      	add	r3, r4
 80034a8:	3308      	adds	r3, #8
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	889b      	ldrh	r3, [r3, #4]
 80034ae:	3307      	adds	r3, #7
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	da00      	bge.n	80034b6 <BSP_LCD_DisplayChar+0x66>
 80034b4:	3307      	adds	r3, #7
 80034b6:	10db      	asrs	r3, r3, #3
 80034b8:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80034bc:	18ca      	adds	r2, r1, r3
 80034be:	88b9      	ldrh	r1, [r7, #4]
 80034c0:	88fb      	ldrh	r3, [r7, #6]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fa6c 	bl	80039a0 <DrawChar>
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd90      	pop	{r4, r7, pc}
 80034d0:	20000b10 	.word	0x20000b10
 80034d4:	20000b14 	.word	0x20000b14

080034d8 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80034d8:	b5b0      	push	{r4, r5, r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60ba      	str	r2, [r7, #8]
 80034e0:	461a      	mov	r2, r3
 80034e2:	4603      	mov	r3, r0
 80034e4:	81fb      	strh	r3, [r7, #14]
 80034e6:	460b      	mov	r3, r1
 80034e8:	81bb      	strh	r3, [r7, #12]
 80034ea:	4613      	mov	r3, r2
 80034ec:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80034ee:	2301      	movs	r3, #1
 80034f0:	83fb      	strh	r3, [r7, #30]
 80034f2:	2300      	movs	r3, #0
 80034f4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	61bb      	str	r3, [r7, #24]
 80034fa:	2300      	movs	r3, #0
 80034fc:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8003502:	e002      	b.n	800350a <BSP_LCD_DisplayStringAt+0x32>
 8003504:	69bb      	ldr	r3, [r7, #24]
 8003506:	3301      	adds	r3, #1
 8003508:	61bb      	str	r3, [r7, #24]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	1c5a      	adds	r2, r3, #1
 800350e:	617a      	str	r2, [r7, #20]
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f6      	bne.n	8003504 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003516:	f7ff feaf 	bl	8003278 <BSP_LCD_GetXSize>
 800351a:	4601      	mov	r1, r0
 800351c:	4b50      	ldr	r3, [pc, #320]	; (8003660 <BSP_LCD_DisplayStringAt+0x188>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	4850      	ldr	r0, [pc, #320]	; (8003664 <BSP_LCD_DisplayStringAt+0x18c>)
 8003522:	4613      	mov	r3, r2
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	4413      	add	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4403      	add	r3, r0
 800352c:	3308      	adds	r3, #8
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	889b      	ldrh	r3, [r3, #4]
 8003532:	fbb1 f3f3 	udiv	r3, r1, r3
 8003536:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8003538:	79fb      	ldrb	r3, [r7, #7]
 800353a:	2b03      	cmp	r3, #3
 800353c:	d01c      	beq.n	8003578 <BSP_LCD_DisplayStringAt+0xa0>
 800353e:	2b03      	cmp	r3, #3
 8003540:	dc33      	bgt.n	80035aa <BSP_LCD_DisplayStringAt+0xd2>
 8003542:	2b01      	cmp	r3, #1
 8003544:	d002      	beq.n	800354c <BSP_LCD_DisplayStringAt+0x74>
 8003546:	2b02      	cmp	r3, #2
 8003548:	d019      	beq.n	800357e <BSP_LCD_DisplayStringAt+0xa6>
 800354a:	e02e      	b.n	80035aa <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	1ad1      	subs	r1, r2, r3
 8003552:	4b43      	ldr	r3, [pc, #268]	; (8003660 <BSP_LCD_DisplayStringAt+0x188>)
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	4843      	ldr	r0, [pc, #268]	; (8003664 <BSP_LCD_DisplayStringAt+0x18c>)
 8003558:	4613      	mov	r3, r2
 800355a:	005b      	lsls	r3, r3, #1
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4403      	add	r3, r0
 8003562:	3308      	adds	r3, #8
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	889b      	ldrh	r3, [r3, #4]
 8003568:	fb01 f303 	mul.w	r3, r1, r3
 800356c:	085b      	lsrs	r3, r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	89fb      	ldrh	r3, [r7, #14]
 8003572:	4413      	add	r3, r2
 8003574:	83fb      	strh	r3, [r7, #30]
      break;
 8003576:	e01b      	b.n	80035b0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8003578:	89fb      	ldrh	r3, [r7, #14]
 800357a:	83fb      	strh	r3, [r7, #30]
      break;
 800357c:	e018      	b.n	80035b0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	b299      	uxth	r1, r3
 8003586:	4b36      	ldr	r3, [pc, #216]	; (8003660 <BSP_LCD_DisplayStringAt+0x188>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	4836      	ldr	r0, [pc, #216]	; (8003664 <BSP_LCD_DisplayStringAt+0x18c>)
 800358c:	4613      	mov	r3, r2
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	4413      	add	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4403      	add	r3, r0
 8003596:	3308      	adds	r3, #8
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	889b      	ldrh	r3, [r3, #4]
 800359c:	fb11 f303 	smulbb	r3, r1, r3
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	89fb      	ldrh	r3, [r7, #14]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	83fb      	strh	r3, [r7, #30]
      break;
 80035a8:	e002      	b.n	80035b0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = Xpos;
 80035aa:	89fb      	ldrh	r3, [r7, #14]
 80035ac:	83fb      	strh	r3, [r7, #30]
      break;
 80035ae:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 80035b0:	8bfb      	ldrh	r3, [r7, #30]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <BSP_LCD_DisplayStringAt+0xe6>
 80035b6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	da1d      	bge.n	80035fa <BSP_LCD_DisplayStringAt+0x122>
  {
    refcolumn = 1;
 80035be:	2301      	movs	r3, #1
 80035c0:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80035c2:	e01a      	b.n	80035fa <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	781a      	ldrb	r2, [r3, #0]
 80035c8:	89b9      	ldrh	r1, [r7, #12]
 80035ca:	8bfb      	ldrh	r3, [r7, #30]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff ff3f 	bl	8003450 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80035d2:	4b23      	ldr	r3, [pc, #140]	; (8003660 <BSP_LCD_DisplayStringAt+0x188>)
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	4923      	ldr	r1, [pc, #140]	; (8003664 <BSP_LCD_DisplayStringAt+0x18c>)
 80035d8:	4613      	mov	r3, r2
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	3308      	adds	r3, #8
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	889a      	ldrh	r2, [r3, #4]
 80035e8:	8bfb      	ldrh	r3, [r7, #30]
 80035ea:	4413      	add	r3, r2
 80035ec:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	3301      	adds	r3, #1
 80035f2:	60bb      	str	r3, [r7, #8]
    i++;
 80035f4:	8bbb      	ldrh	r3, [r7, #28]
 80035f6:	3301      	adds	r3, #1
 80035f8:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	bf14      	ite	ne
 8003602:	2301      	movne	r3, #1
 8003604:	2300      	moveq	r3, #0
 8003606:	b2dc      	uxtb	r4, r3
 8003608:	f7ff fe36 	bl	8003278 <BSP_LCD_GetXSize>
 800360c:	8bb9      	ldrh	r1, [r7, #28]
 800360e:	4b14      	ldr	r3, [pc, #80]	; (8003660 <BSP_LCD_DisplayStringAt+0x188>)
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	4d14      	ldr	r5, [pc, #80]	; (8003664 <BSP_LCD_DisplayStringAt+0x18c>)
 8003614:	4613      	mov	r3, r2
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	4413      	add	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	442b      	add	r3, r5
 800361e:	3308      	adds	r3, #8
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	889b      	ldrh	r3, [r3, #4]
 8003624:	fb01 f303 	mul.w	r3, r1, r3
 8003628:	1ac3      	subs	r3, r0, r3
 800362a:	b299      	uxth	r1, r3
 800362c:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <BSP_LCD_DisplayStringAt+0x188>)
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	480c      	ldr	r0, [pc, #48]	; (8003664 <BSP_LCD_DisplayStringAt+0x18c>)
 8003632:	4613      	mov	r3, r2
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	4413      	add	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4403      	add	r3, r0
 800363c:	3308      	adds	r3, #8
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	889b      	ldrh	r3, [r3, #4]
 8003642:	4299      	cmp	r1, r3
 8003644:	bf2c      	ite	cs
 8003646:	2301      	movcs	r3, #1
 8003648:	2300      	movcc	r3, #0
 800364a:	b2db      	uxtb	r3, r3
 800364c:	4023      	ands	r3, r4
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1b7      	bne.n	80035c4 <BSP_LCD_DisplayStringAt+0xec>
  }

}
 8003654:	bf00      	nop
 8003656:	bf00      	nop
 8003658:	3720      	adds	r7, #32
 800365a:	46bd      	mov	sp, r7
 800365c:	bdb0      	pop	{r4, r5, r7, pc}
 800365e:	bf00      	nop
 8003660:	20000b10 	.word	0x20000b10
 8003664:	20000b14 	.word	0x20000b14

08003668 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003668:	b5b0      	push	{r4, r5, r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af02      	add	r7, sp, #8
 800366e:	4603      	mov	r3, r0
 8003670:	80fb      	strh	r3, [r7, #6]
 8003672:	460b      	mov	r3, r1
 8003674:	80bb      	strh	r3, [r7, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800367a:	2300      	movs	r3, #0
 800367c:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800367e:	4b16      	ldr	r3, [pc, #88]	; (80036d8 <BSP_LCD_DrawHLine+0x70>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a16      	ldr	r2, [pc, #88]	; (80036dc <BSP_LCD_DrawHLine+0x74>)
 8003684:	2134      	movs	r1, #52	; 0x34
 8003686:	fb01 f303 	mul.w	r3, r1, r3
 800368a:	4413      	add	r3, r2
 800368c:	335c      	adds	r3, #92	; 0x5c
 800368e:	681c      	ldr	r4, [r3, #0]
 8003690:	f7ff fdf2 	bl	8003278 <BSP_LCD_GetXSize>
 8003694:	4602      	mov	r2, r0
 8003696:	88bb      	ldrh	r3, [r7, #4]
 8003698:	fb03 f202 	mul.w	r2, r3, r2
 800369c:	88fb      	ldrh	r3, [r7, #6]
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	4423      	add	r3, r4
 80036a4:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80036a6:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <BSP_LCD_DrawHLine+0x70>)
 80036a8:	6818      	ldr	r0, [r3, #0]
 80036aa:	68f9      	ldr	r1, [r7, #12]
 80036ac:	887c      	ldrh	r4, [r7, #2]
 80036ae:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <BSP_LCD_DrawHLine+0x70>)
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	4d0b      	ldr	r5, [pc, #44]	; (80036e0 <BSP_LCD_DrawHLine+0x78>)
 80036b4:	4613      	mov	r3, r2
 80036b6:	005b      	lsls	r3, r3, #1
 80036b8:	4413      	add	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	442b      	add	r3, r5
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	9301      	str	r3, [sp, #4]
 80036c2:	2300      	movs	r3, #0
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	2301      	movs	r3, #1
 80036c8:	4622      	mov	r2, r4
 80036ca:	f000 fa21 	bl	8003b10 <LL_FillBuffer>
}
 80036ce:	bf00      	nop
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bdb0      	pop	{r4, r5, r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20000b10 	.word	0x20000b10
 80036dc:	20000a4c 	.word	0x20000a4c
 80036e0:	20000b14 	.word	0x20000b14

080036e4 <BSP_LCD_DrawVLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80036e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	4603      	mov	r3, r0
 80036ec:	80fb      	strh	r3, [r7, #6]
 80036ee:	460b      	mov	r3, r1
 80036f0:	80bb      	strh	r3, [r7, #4]
 80036f2:	4613      	mov	r3, r2
 80036f4:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80036f6:	2300      	movs	r3, #0
 80036f8:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80036fa:	4b18      	ldr	r3, [pc, #96]	; (800375c <BSP_LCD_DrawVLine+0x78>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a18      	ldr	r2, [pc, #96]	; (8003760 <BSP_LCD_DrawVLine+0x7c>)
 8003700:	2134      	movs	r1, #52	; 0x34
 8003702:	fb01 f303 	mul.w	r3, r1, r3
 8003706:	4413      	add	r3, r2
 8003708:	335c      	adds	r3, #92	; 0x5c
 800370a:	681c      	ldr	r4, [r3, #0]
 800370c:	f7ff fdb4 	bl	8003278 <BSP_LCD_GetXSize>
 8003710:	4602      	mov	r2, r0
 8003712:	88bb      	ldrh	r3, [r7, #4]
 8003714:	fb03 f202 	mul.w	r2, r3, r2
 8003718:	88fb      	ldrh	r3, [r7, #6]
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4423      	add	r3, r4
 8003720:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8003722:	4b0e      	ldr	r3, [pc, #56]	; (800375c <BSP_LCD_DrawVLine+0x78>)
 8003724:	681c      	ldr	r4, [r3, #0]
 8003726:	68fd      	ldr	r5, [r7, #12]
 8003728:	887e      	ldrh	r6, [r7, #2]
 800372a:	f7ff fda5 	bl	8003278 <BSP_LCD_GetXSize>
 800372e:	4603      	mov	r3, r0
 8003730:	1e59      	subs	r1, r3, #1
 8003732:	4b0a      	ldr	r3, [pc, #40]	; (800375c <BSP_LCD_DrawVLine+0x78>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	480b      	ldr	r0, [pc, #44]	; (8003764 <BSP_LCD_DrawVLine+0x80>)
 8003738:	4613      	mov	r3, r2
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	4413      	add	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4403      	add	r3, r0
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	9301      	str	r3, [sp, #4]
 8003746:	9100      	str	r1, [sp, #0]
 8003748:	4633      	mov	r3, r6
 800374a:	2201      	movs	r2, #1
 800374c:	4629      	mov	r1, r5
 800374e:	4620      	mov	r0, r4
 8003750:	f000 f9de 	bl	8003b10 <LL_FillBuffer>
}
 8003754:	bf00      	nop
 8003756:	3714      	adds	r7, #20
 8003758:	46bd      	mov	sp, r7
 800375a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800375c:	20000b10 	.word	0x20000b10
 8003760:	20000a4c 	.word	0x20000a4c
 8003764:	20000b14 	.word	0x20000b14

08003768 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800376c:	b086      	sub	sp, #24
 800376e:	af02      	add	r7, sp, #8
 8003770:	4604      	mov	r4, r0
 8003772:	4608      	mov	r0, r1
 8003774:	4611      	mov	r1, r2
 8003776:	461a      	mov	r2, r3
 8003778:	4623      	mov	r3, r4
 800377a:	80fb      	strh	r3, [r7, #6]
 800377c:	4603      	mov	r3, r0
 800377e:	80bb      	strh	r3, [r7, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	807b      	strh	r3, [r7, #2]
 8003784:	4613      	mov	r3, r2
 8003786:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8003788:	2300      	movs	r3, #0
 800378a:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800378c:	4b20      	ldr	r3, [pc, #128]	; (8003810 <BSP_LCD_FillRect+0xa8>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	4920      	ldr	r1, [pc, #128]	; (8003814 <BSP_LCD_FillRect+0xac>)
 8003792:	4613      	mov	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	4413      	add	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff fde2 	bl	8003368 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80037a4:	4b1a      	ldr	r3, [pc, #104]	; (8003810 <BSP_LCD_FillRect+0xa8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a1b      	ldr	r2, [pc, #108]	; (8003818 <BSP_LCD_FillRect+0xb0>)
 80037aa:	2134      	movs	r1, #52	; 0x34
 80037ac:	fb01 f303 	mul.w	r3, r1, r3
 80037b0:	4413      	add	r3, r2
 80037b2:	335c      	adds	r3, #92	; 0x5c
 80037b4:	681c      	ldr	r4, [r3, #0]
 80037b6:	f7ff fd5f 	bl	8003278 <BSP_LCD_GetXSize>
 80037ba:	4602      	mov	r2, r0
 80037bc:	88bb      	ldrh	r3, [r7, #4]
 80037be:	fb03 f202 	mul.w	r2, r3, r2
 80037c2:	88fb      	ldrh	r3, [r7, #6]
 80037c4:	4413      	add	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4423      	add	r3, r4
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80037cc:	4b10      	ldr	r3, [pc, #64]	; (8003810 <BSP_LCD_FillRect+0xa8>)
 80037ce:	681c      	ldr	r4, [r3, #0]
 80037d0:	68fd      	ldr	r5, [r7, #12]
 80037d2:	887e      	ldrh	r6, [r7, #2]
 80037d4:	f8b7 8000 	ldrh.w	r8, [r7]
 80037d8:	f7ff fd4e 	bl	8003278 <BSP_LCD_GetXSize>
 80037dc:	4602      	mov	r2, r0
 80037de:	887b      	ldrh	r3, [r7, #2]
 80037e0:	1ad1      	subs	r1, r2, r3
 80037e2:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <BSP_LCD_FillRect+0xa8>)
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	480b      	ldr	r0, [pc, #44]	; (8003814 <BSP_LCD_FillRect+0xac>)
 80037e8:	4613      	mov	r3, r2
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	4413      	add	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4403      	add	r3, r0
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	9301      	str	r3, [sp, #4]
 80037f6:	9100      	str	r1, [sp, #0]
 80037f8:	4643      	mov	r3, r8
 80037fa:	4632      	mov	r2, r6
 80037fc:	4629      	mov	r1, r5
 80037fe:	4620      	mov	r0, r4
 8003800:	f000 f986 	bl	8003b10 <LL_FillBuffer>
}
 8003804:	bf00      	nop
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800380e:	bf00      	nop
 8003810:	20000b10 	.word	0x20000b10
 8003814:	20000b14 	.word	0x20000b14
 8003818:	20000a4c 	.word	0x20000a4c

0800381c <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af02      	add	r7, sp, #8
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d80d      	bhi.n	8003848 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	461a      	mov	r2, r3
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	3301      	adds	r3, #1
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	4613      	mov	r3, r2
 800383c:	2215      	movs	r2, #21
 800383e:	2100      	movs	r1, #0
 8003840:	480a      	ldr	r0, [pc, #40]	; (800386c <DSI_IO_WriteCmd+0x50>)
 8003842:	f002 f9f5 	bl	8005c30 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8003846:	e00d      	b.n	8003864 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4413      	add	r3, r2
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	9301      	str	r3, [sp, #4]
 8003856:	9200      	str	r2, [sp, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2239      	movs	r2, #57	; 0x39
 800385c:	2100      	movs	r1, #0
 800385e:	4803      	ldr	r0, [pc, #12]	; (800386c <DSI_IO_WriteCmd+0x50>)
 8003860:	f002 fa08 	bl	8005c74 <HAL_DSI_LongWrite>
}
 8003864:	bf00      	nop
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	20000af4 	.word	0x20000af4

08003870 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8003874:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8003876:	4618      	mov	r0, r3
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003886:	4b32      	ldr	r3, [pc, #200]	; (8003950 <BSP_LCD_MspInit+0xd0>)
 8003888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388a:	4a31      	ldr	r2, [pc, #196]	; (8003950 <BSP_LCD_MspInit+0xd0>)
 800388c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003890:	6453      	str	r3, [r2, #68]	; 0x44
 8003892:	4b2f      	ldr	r3, [pc, #188]	; (8003950 <BSP_LCD_MspInit+0xd0>)
 8003894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003896:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 800389e:	4b2c      	ldr	r3, [pc, #176]	; (8003950 <BSP_LCD_MspInit+0xd0>)
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	4a2b      	ldr	r2, [pc, #172]	; (8003950 <BSP_LCD_MspInit+0xd0>)
 80038a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038a8:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 80038aa:	4b29      	ldr	r3, [pc, #164]	; (8003950 <BSP_LCD_MspInit+0xd0>)
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	4a28      	ldr	r2, [pc, #160]	; (8003950 <BSP_LCD_MspInit+0xd0>)
 80038b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038b4:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80038b6:	4b26      	ldr	r3, [pc, #152]	; (8003950 <BSP_LCD_MspInit+0xd0>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	4a25      	ldr	r2, [pc, #148]	; (8003950 <BSP_LCD_MspInit+0xd0>)
 80038bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038c0:	6313      	str	r3, [r2, #48]	; 0x30
 80038c2:	4b23      	ldr	r3, [pc, #140]	; (8003950 <BSP_LCD_MspInit+0xd0>)
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038ca:	60bb      	str	r3, [r7, #8]
 80038cc:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 80038ce:	4b20      	ldr	r3, [pc, #128]	; (8003950 <BSP_LCD_MspInit+0xd0>)
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	4a1f      	ldr	r2, [pc, #124]	; (8003950 <BSP_LCD_MspInit+0xd0>)
 80038d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038d8:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 80038da:	4b1d      	ldr	r3, [pc, #116]	; (8003950 <BSP_LCD_MspInit+0xd0>)
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	4a1c      	ldr	r2, [pc, #112]	; (8003950 <BSP_LCD_MspInit+0xd0>)
 80038e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80038e4:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 80038e6:	4b1a      	ldr	r3, [pc, #104]	; (8003950 <BSP_LCD_MspInit+0xd0>)
 80038e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ea:	4a19      	ldr	r2, [pc, #100]	; (8003950 <BSP_LCD_MspInit+0xd0>)
 80038ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80038f0:	6453      	str	r3, [r2, #68]	; 0x44
 80038f2:	4b17      	ldr	r3, [pc, #92]	; (8003950 <BSP_LCD_MspInit+0xd0>)
 80038f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038fa:	607b      	str	r3, [r7, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 80038fe:	4b14      	ldr	r3, [pc, #80]	; (8003950 <BSP_LCD_MspInit+0xd0>)
 8003900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003902:	4a13      	ldr	r2, [pc, #76]	; (8003950 <BSP_LCD_MspInit+0xd0>)
 8003904:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003908:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 800390a:	4b11      	ldr	r3, [pc, #68]	; (8003950 <BSP_LCD_MspInit+0xd0>)
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	4a10      	ldr	r2, [pc, #64]	; (8003950 <BSP_LCD_MspInit+0xd0>)
 8003910:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8003914:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8003916:	2200      	movs	r2, #0
 8003918:	2103      	movs	r1, #3
 800391a:	2058      	movs	r0, #88	; 0x58
 800391c:	f000 fede 	bl	80046dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003920:	2058      	movs	r0, #88	; 0x58
 8003922:	f000 fef7 	bl	8004714 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8003926:	2200      	movs	r2, #0
 8003928:	2103      	movs	r1, #3
 800392a:	205a      	movs	r0, #90	; 0x5a
 800392c:	f000 fed6 	bl	80046dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8003930:	205a      	movs	r0, #90	; 0x5a
 8003932:	f000 feef 	bl	8004714 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8003936:	2200      	movs	r2, #0
 8003938:	2103      	movs	r1, #3
 800393a:	2062      	movs	r0, #98	; 0x62
 800393c:	f000 fece 	bl	80046dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8003940:	2062      	movs	r0, #98	; 0x62
 8003942:	f000 fee7 	bl	8004714 <HAL_NVIC_EnableIRQ>
}
 8003946:	bf00      	nop
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40023800 	.word	0x40023800

08003954 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003954:	b5b0      	push	{r4, r5, r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	603a      	str	r2, [r7, #0]
 800395e:	80fb      	strh	r3, [r7, #6]
 8003960:	460b      	mov	r3, r1
 8003962:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003964:	4b0c      	ldr	r3, [pc, #48]	; (8003998 <BSP_LCD_DrawPixel+0x44>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a0c      	ldr	r2, [pc, #48]	; (800399c <BSP_LCD_DrawPixel+0x48>)
 800396a:	2134      	movs	r1, #52	; 0x34
 800396c:	fb01 f303 	mul.w	r3, r1, r3
 8003970:	4413      	add	r3, r2
 8003972:	335c      	adds	r3, #92	; 0x5c
 8003974:	681c      	ldr	r4, [r3, #0]
 8003976:	88bd      	ldrh	r5, [r7, #4]
 8003978:	f7ff fc7e 	bl	8003278 <BSP_LCD_GetXSize>
 800397c:	4603      	mov	r3, r0
 800397e:	fb03 f205 	mul.w	r2, r3, r5
 8003982:	88fb      	ldrh	r3, [r7, #6]
 8003984:	4413      	add	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4423      	add	r3, r4
 800398a:	461a      	mov	r2, r3
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	6013      	str	r3, [r2, #0]
}
 8003990:	bf00      	nop
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bdb0      	pop	{r4, r5, r7, pc}
 8003998:	20000b10 	.word	0x20000b10
 800399c:	20000a4c 	.word	0x20000a4c

080039a0 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	4603      	mov	r3, r0
 80039a8:	603a      	str	r2, [r7, #0]
 80039aa:	80fb      	strh	r3, [r7, #6]
 80039ac:	460b      	mov	r3, r1
 80039ae:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	61fb      	str	r3, [r7, #28]
 80039b4:	2300      	movs	r3, #0
 80039b6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 80039b8:	4b53      	ldr	r3, [pc, #332]	; (8003b08 <DrawChar+0x168>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	4953      	ldr	r1, [pc, #332]	; (8003b0c <DrawChar+0x16c>)
 80039be:	4613      	mov	r3, r2
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	4413      	add	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	440b      	add	r3, r1
 80039c8:	3308      	adds	r3, #8
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	88db      	ldrh	r3, [r3, #6]
 80039ce:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80039d0:	4b4d      	ldr	r3, [pc, #308]	; (8003b08 <DrawChar+0x168>)
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	494d      	ldr	r1, [pc, #308]	; (8003b0c <DrawChar+0x16c>)
 80039d6:	4613      	mov	r3, r2
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	4413      	add	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	440b      	add	r3, r1
 80039e0:	3308      	adds	r3, #8
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	889b      	ldrh	r3, [r3, #4]
 80039e6:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 80039e8:	8a3b      	ldrh	r3, [r7, #16]
 80039ea:	3307      	adds	r3, #7
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	da00      	bge.n	80039f2 <DrawChar+0x52>
 80039f0:	3307      	adds	r3, #7
 80039f2:	10db      	asrs	r3, r3, #3
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	8a3b      	ldrh	r3, [r7, #16]
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8003a02:	2300      	movs	r3, #0
 8003a04:	61fb      	str	r3, [r7, #28]
 8003a06:	e076      	b.n	8003af6 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003a08:	8a3b      	ldrh	r3, [r7, #16]
 8003a0a:	3307      	adds	r3, #7
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	da00      	bge.n	8003a12 <DrawChar+0x72>
 8003a10:	3307      	adds	r3, #7
 8003a12:	10db      	asrs	r3, r3, #3
 8003a14:	461a      	mov	r2, r3
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	fb02 f303 	mul.w	r3, r2, r3
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	4413      	add	r3, r2
 8003a20:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 8003a22:	8a3b      	ldrh	r3, [r7, #16]
 8003a24:	3307      	adds	r3, #7
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	da00      	bge.n	8003a2c <DrawChar+0x8c>
 8003a2a:	3307      	adds	r3, #7
 8003a2c:	10db      	asrs	r3, r3, #3
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d002      	beq.n	8003a38 <DrawChar+0x98>
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d004      	beq.n	8003a40 <DrawChar+0xa0>
 8003a36:	e00c      	b.n	8003a52 <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	617b      	str	r3, [r7, #20]
      break;
 8003a3e:	e016      	b.n	8003a6e <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	021b      	lsls	r3, r3, #8
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	3201      	adds	r2, #1
 8003a4a:	7812      	ldrb	r2, [r2, #0]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]
      break;
 8003a50:	e00d      	b.n	8003a6e <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	041a      	lsls	r2, r3, #16
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	021b      	lsls	r3, r3, #8
 8003a60:	4313      	orrs	r3, r2
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	3202      	adds	r2, #2
 8003a66:	7812      	ldrb	r2, [r2, #0]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
      break;
 8003a6c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61bb      	str	r3, [r7, #24]
 8003a72:	e036      	b.n	8003ae2 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8003a74:	8a3a      	ldrh	r2, [r7, #16]
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	1ad2      	subs	r2, r2, r3
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	2201      	movs	r2, #1
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	461a      	mov	r2, r3
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d012      	beq.n	8003ab6 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	88fb      	ldrh	r3, [r7, #6]
 8003a96:	4413      	add	r3, r2
 8003a98:	b298      	uxth	r0, r3
 8003a9a:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <DrawChar+0x168>)
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	491b      	ldr	r1, [pc, #108]	; (8003b0c <DrawChar+0x16c>)
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	4413      	add	r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	88bb      	ldrh	r3, [r7, #4]
 8003aae:	4619      	mov	r1, r3
 8003ab0:	f7ff ff50 	bl	8003954 <BSP_LCD_DrawPixel>
 8003ab4:	e012      	b.n	8003adc <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	88fb      	ldrh	r3, [r7, #6]
 8003abc:	4413      	add	r3, r2
 8003abe:	b298      	uxth	r0, r3
 8003ac0:	4b11      	ldr	r3, [pc, #68]	; (8003b08 <DrawChar+0x168>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	4911      	ldr	r1, [pc, #68]	; (8003b0c <DrawChar+0x16c>)
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	4413      	add	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	440b      	add	r3, r1
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	88bb      	ldrh	r3, [r7, #4]
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	f7ff ff3c 	bl	8003954 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	61bb      	str	r3, [r7, #24]
 8003ae2:	8a3b      	ldrh	r3, [r7, #16]
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d3c4      	bcc.n	8003a74 <DrawChar+0xd4>
      }
    }
    Ypos++;
 8003aea:	88bb      	ldrh	r3, [r7, #4]
 8003aec:	3301      	adds	r3, #1
 8003aee:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	3301      	adds	r3, #1
 8003af4:	61fb      	str	r3, [r7, #28]
 8003af6:	8a7b      	ldrh	r3, [r7, #18]
 8003af8:	69fa      	ldr	r2, [r7, #28]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d384      	bcc.n	8003a08 <DrawChar+0x68>
  }
}
 8003afe:	bf00      	nop
 8003b00:	bf00      	nop
 8003b02:	3720      	adds	r7, #32
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	20000b10 	.word	0x20000b10
 8003b0c:	20000b14 	.word	0x20000b14

08003b10 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af02      	add	r7, sp, #8
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 8003b1e:	4b16      	ldr	r3, [pc, #88]	; (8003b78 <LL_FillBuffer+0x68>)
 8003b20:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003b24:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8003b26:	4b14      	ldr	r3, [pc, #80]	; (8003b78 <LL_FillBuffer+0x68>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8003b2c:	4a12      	ldr	r2, [pc, #72]	; (8003b78 <LL_FillBuffer+0x68>)
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 8003b32:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <LL_FillBuffer+0x68>)
 8003b34:	4a11      	ldr	r2, [pc, #68]	; (8003b7c <LL_FillBuffer+0x6c>)
 8003b36:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8003b38:	480f      	ldr	r0, [pc, #60]	; (8003b78 <LL_FillBuffer+0x68>)
 8003b3a:	f000 ffc5 	bl	8004ac8 <HAL_DMA2D_Init>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d115      	bne.n	8003b70 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8003b44:	68f9      	ldr	r1, [r7, #12]
 8003b46:	480c      	ldr	r0, [pc, #48]	; (8003b78 <LL_FillBuffer+0x68>)
 8003b48:	f001 fa3c 	bl	8004fc4 <HAL_DMA2D_ConfigLayer>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10e      	bne.n	8003b70 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	69f9      	ldr	r1, [r7, #28]
 8003b5c:	4806      	ldr	r0, [pc, #24]	; (8003b78 <LL_FillBuffer+0x68>)
 8003b5e:	f001 f80d 	bl	8004b7c <HAL_DMA2D_Start>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d103      	bne.n	8003b70 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8003b68:	210a      	movs	r1, #10
 8003b6a:	4803      	ldr	r0, [pc, #12]	; (8003b78 <LL_FillBuffer+0x68>)
 8003b6c:	f001 f831 	bl	8004bd2 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8003b70:	bf00      	nop
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	200009f4 	.word	0x200009f4
 8003b7c:	4002b000 	.word	0x4002b000

08003b80 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003b84:	4b29      	ldr	r3, [pc, #164]	; (8003c2c <BSP_SDRAM_Init+0xac>)
 8003b86:	4a2a      	ldr	r2, [pc, #168]	; (8003c30 <BSP_SDRAM_Init+0xb0>)
 8003b88:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003b8a:	4b2a      	ldr	r3, [pc, #168]	; (8003c34 <BSP_SDRAM_Init+0xb4>)
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003b90:	4b28      	ldr	r3, [pc, #160]	; (8003c34 <BSP_SDRAM_Init+0xb4>)
 8003b92:	2207      	movs	r2, #7
 8003b94:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003b96:	4b27      	ldr	r3, [pc, #156]	; (8003c34 <BSP_SDRAM_Init+0xb4>)
 8003b98:	2204      	movs	r2, #4
 8003b9a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003b9c:	4b25      	ldr	r3, [pc, #148]	; (8003c34 <BSP_SDRAM_Init+0xb4>)
 8003b9e:	2207      	movs	r2, #7
 8003ba0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003ba2:	4b24      	ldr	r3, [pc, #144]	; (8003c34 <BSP_SDRAM_Init+0xb4>)
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003ba8:	4b22      	ldr	r3, [pc, #136]	; (8003c34 <BSP_SDRAM_Init+0xb4>)
 8003baa:	2202      	movs	r2, #2
 8003bac:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003bae:	4b21      	ldr	r3, [pc, #132]	; (8003c34 <BSP_SDRAM_Init+0xb4>)
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003bb4:	4b1d      	ldr	r3, [pc, #116]	; (8003c2c <BSP_SDRAM_Init+0xac>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003bba:	4b1c      	ldr	r3, [pc, #112]	; (8003c2c <BSP_SDRAM_Init+0xac>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003bc0:	4b1a      	ldr	r3, [pc, #104]	; (8003c2c <BSP_SDRAM_Init+0xac>)
 8003bc2:	2204      	movs	r2, #4
 8003bc4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003bc6:	4b19      	ldr	r3, [pc, #100]	; (8003c2c <BSP_SDRAM_Init+0xac>)
 8003bc8:	2220      	movs	r2, #32
 8003bca:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003bcc:	4b17      	ldr	r3, [pc, #92]	; (8003c2c <BSP_SDRAM_Init+0xac>)
 8003bce:	2240      	movs	r2, #64	; 0x40
 8003bd0:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8003bd2:	4b16      	ldr	r3, [pc, #88]	; (8003c2c <BSP_SDRAM_Init+0xac>)
 8003bd4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003bd8:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003bda:	4b14      	ldr	r3, [pc, #80]	; (8003c2c <BSP_SDRAM_Init+0xac>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003be0:	4b12      	ldr	r3, [pc, #72]	; (8003c2c <BSP_SDRAM_Init+0xac>)
 8003be2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003be6:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003be8:	4b10      	ldr	r3, [pc, #64]	; (8003c2c <BSP_SDRAM_Init+0xac>)
 8003bea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003bee:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003bf0:	4b0e      	ldr	r3, [pc, #56]	; (8003c2c <BSP_SDRAM_Init+0xac>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	480c      	ldr	r0, [pc, #48]	; (8003c2c <BSP_SDRAM_Init+0xac>)
 8003bfa:	f000 f87f 	bl	8003cfc <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003bfe:	490d      	ldr	r1, [pc, #52]	; (8003c34 <BSP_SDRAM_Init+0xb4>)
 8003c00:	480a      	ldr	r0, [pc, #40]	; (8003c2c <BSP_SDRAM_Init+0xac>)
 8003c02:	f005 fded 	bl	80097e0 <HAL_SDRAM_Init>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d003      	beq.n	8003c14 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003c0c:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <BSP_SDRAM_Init+0xb8>)
 8003c0e:	2201      	movs	r2, #1
 8003c10:	701a      	strb	r2, [r3, #0]
 8003c12:	e002      	b.n	8003c1a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003c14:	4b08      	ldr	r3, [pc, #32]	; (8003c38 <BSP_SDRAM_Init+0xb8>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003c1a:	f240 6003 	movw	r0, #1539	; 0x603
 8003c1e:	f000 f80d 	bl	8003c3c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003c22:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <BSP_SDRAM_Init+0xb8>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	20000bbc 	.word	0x20000bbc
 8003c30:	a0000140 	.word	0xa0000140
 8003c34:	20000bf0 	.word	0x20000bf0
 8003c38:	20000044 	.word	0x20000044

08003c3c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003c48:	4b2a      	ldr	r3, [pc, #168]	; (8003cf4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003c4e:	4b29      	ldr	r3, [pc, #164]	; (8003cf4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c50:	2210      	movs	r2, #16
 8003c52:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003c54:	4b27      	ldr	r3, [pc, #156]	; (8003cf4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c56:	2201      	movs	r2, #1
 8003c58:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003c5a:	4b26      	ldr	r3, [pc, #152]	; (8003cf4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003c60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c64:	4923      	ldr	r1, [pc, #140]	; (8003cf4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c66:	4824      	ldr	r0, [pc, #144]	; (8003cf8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c68:	f005 fdee 	bl	8009848 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003c6c:	2001      	movs	r0, #1
 8003c6e:	f000 fb39 	bl	80042e4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003c72:	4b20      	ldr	r3, [pc, #128]	; (8003cf4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c74:	2202      	movs	r2, #2
 8003c76:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003c78:	4b1e      	ldr	r3, [pc, #120]	; (8003cf4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c7a:	2210      	movs	r2, #16
 8003c7c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003c7e:	4b1d      	ldr	r3, [pc, #116]	; (8003cf4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c80:	2201      	movs	r2, #1
 8003c82:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003c84:	4b1b      	ldr	r3, [pc, #108]	; (8003cf4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003c8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c8e:	4919      	ldr	r1, [pc, #100]	; (8003cf4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c90:	4819      	ldr	r0, [pc, #100]	; (8003cf8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c92:	f005 fdd9 	bl	8009848 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003c96:	4b17      	ldr	r3, [pc, #92]	; (8003cf4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c98:	2203      	movs	r2, #3
 8003c9a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003c9c:	4b15      	ldr	r3, [pc, #84]	; (8003cf4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c9e:	2210      	movs	r2, #16
 8003ca0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003ca2:	4b14      	ldr	r3, [pc, #80]	; (8003cf4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ca4:	2208      	movs	r2, #8
 8003ca6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003ca8:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cb2:	4910      	ldr	r1, [pc, #64]	; (8003cf4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cb4:	4810      	ldr	r0, [pc, #64]	; (8003cf8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003cb6:	f005 fdc7 	bl	8009848 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003cba:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003cbe:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003cc0:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cc2:	2204      	movs	r2, #4
 8003cc4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003cc6:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cc8:	2210      	movs	r2, #16
 8003cca:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003ccc:	4b09      	ldr	r3, [pc, #36]	; (8003cf4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cce:	2201      	movs	r2, #1
 8003cd0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	4a07      	ldr	r2, [pc, #28]	; (8003cf4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cd6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003cd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cdc:	4905      	ldr	r1, [pc, #20]	; (8003cf4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cde:	4806      	ldr	r0, [pc, #24]	; (8003cf8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003ce0:	f005 fdb2 	bl	8009848 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	4804      	ldr	r0, [pc, #16]	; (8003cf8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003ce8:	f005 fde3 	bl	80098b2 <HAL_SDRAM_ProgramRefreshRate>
}
 8003cec:	bf00      	nop
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	20000c0c 	.word	0x20000c0c
 8003cf8:	20000bbc 	.word	0x20000bbc

08003cfc <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b090      	sub	sp, #64	; 0x40
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003d06:	4b71      	ldr	r3, [pc, #452]	; (8003ecc <BSP_SDRAM_MspInit+0x1d0>)
 8003d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0a:	4a70      	ldr	r2, [pc, #448]	; (8003ecc <BSP_SDRAM_MspInit+0x1d0>)
 8003d0c:	f043 0301 	orr.w	r3, r3, #1
 8003d10:	6393      	str	r3, [r2, #56]	; 0x38
 8003d12:	4b6e      	ldr	r3, [pc, #440]	; (8003ecc <BSP_SDRAM_MspInit+0x1d0>)
 8003d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003d1e:	4b6b      	ldr	r3, [pc, #428]	; (8003ecc <BSP_SDRAM_MspInit+0x1d0>)
 8003d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d22:	4a6a      	ldr	r2, [pc, #424]	; (8003ecc <BSP_SDRAM_MspInit+0x1d0>)
 8003d24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d28:	6313      	str	r3, [r2, #48]	; 0x30
 8003d2a:	4b68      	ldr	r3, [pc, #416]	; (8003ecc <BSP_SDRAM_MspInit+0x1d0>)
 8003d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d32:	627b      	str	r3, [r7, #36]	; 0x24
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d36:	4b65      	ldr	r3, [pc, #404]	; (8003ecc <BSP_SDRAM_MspInit+0x1d0>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	4a64      	ldr	r2, [pc, #400]	; (8003ecc <BSP_SDRAM_MspInit+0x1d0>)
 8003d3c:	f043 0308 	orr.w	r3, r3, #8
 8003d40:	6313      	str	r3, [r2, #48]	; 0x30
 8003d42:	4b62      	ldr	r3, [pc, #392]	; (8003ecc <BSP_SDRAM_MspInit+0x1d0>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	623b      	str	r3, [r7, #32]
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d4e:	4b5f      	ldr	r3, [pc, #380]	; (8003ecc <BSP_SDRAM_MspInit+0x1d0>)
 8003d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d52:	4a5e      	ldr	r2, [pc, #376]	; (8003ecc <BSP_SDRAM_MspInit+0x1d0>)
 8003d54:	f043 0310 	orr.w	r3, r3, #16
 8003d58:	6313      	str	r3, [r2, #48]	; 0x30
 8003d5a:	4b5c      	ldr	r3, [pc, #368]	; (8003ecc <BSP_SDRAM_MspInit+0x1d0>)
 8003d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d5e:	f003 0310 	and.w	r3, r3, #16
 8003d62:	61fb      	str	r3, [r7, #28]
 8003d64:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d66:	4b59      	ldr	r3, [pc, #356]	; (8003ecc <BSP_SDRAM_MspInit+0x1d0>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	4a58      	ldr	r2, [pc, #352]	; (8003ecc <BSP_SDRAM_MspInit+0x1d0>)
 8003d6c:	f043 0320 	orr.w	r3, r3, #32
 8003d70:	6313      	str	r3, [r2, #48]	; 0x30
 8003d72:	4b56      	ldr	r3, [pc, #344]	; (8003ecc <BSP_SDRAM_MspInit+0x1d0>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	f003 0320 	and.w	r3, r3, #32
 8003d7a:	61bb      	str	r3, [r7, #24]
 8003d7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003d7e:	4b53      	ldr	r3, [pc, #332]	; (8003ecc <BSP_SDRAM_MspInit+0x1d0>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	4a52      	ldr	r2, [pc, #328]	; (8003ecc <BSP_SDRAM_MspInit+0x1d0>)
 8003d84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d88:	6313      	str	r3, [r2, #48]	; 0x30
 8003d8a:	4b50      	ldr	r3, [pc, #320]	; (8003ecc <BSP_SDRAM_MspInit+0x1d0>)
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d92:	617b      	str	r3, [r7, #20]
 8003d94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003d96:	4b4d      	ldr	r3, [pc, #308]	; (8003ecc <BSP_SDRAM_MspInit+0x1d0>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	4a4c      	ldr	r2, [pc, #304]	; (8003ecc <BSP_SDRAM_MspInit+0x1d0>)
 8003d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003da0:	6313      	str	r3, [r2, #48]	; 0x30
 8003da2:	4b4a      	ldr	r3, [pc, #296]	; (8003ecc <BSP_SDRAM_MspInit+0x1d0>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003dae:	4b47      	ldr	r3, [pc, #284]	; (8003ecc <BSP_SDRAM_MspInit+0x1d0>)
 8003db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db2:	4a46      	ldr	r2, [pc, #280]	; (8003ecc <BSP_SDRAM_MspInit+0x1d0>)
 8003db4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003db8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dba:	4b44      	ldr	r3, [pc, #272]	; (8003ecc <BSP_SDRAM_MspInit+0x1d0>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003dd2:	230c      	movs	r3, #12
 8003dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8003dd6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003dda:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003ddc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003de0:	4619      	mov	r1, r3
 8003de2:	483b      	ldr	r0, [pc, #236]	; (8003ed0 <BSP_SDRAM_MspInit+0x1d4>)
 8003de4:	f001 ffde 	bl	8005da4 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003de8:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003dec:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003dee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003df2:	4619      	mov	r1, r3
 8003df4:	4837      	ldr	r0, [pc, #220]	; (8003ed4 <BSP_SDRAM_MspInit+0x1d8>)
 8003df6:	f001 ffd5 	bl	8005da4 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003dfa:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003e00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e04:	4619      	mov	r1, r3
 8003e06:	4834      	ldr	r0, [pc, #208]	; (8003ed8 <BSP_SDRAM_MspInit+0x1dc>)
 8003e08:	f001 ffcc 	bl	8005da4 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8003e0c:	f248 1337 	movw	r3, #33079	; 0x8137
 8003e10:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003e12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e16:	4619      	mov	r1, r3
 8003e18:	4830      	ldr	r0, [pc, #192]	; (8003edc <BSP_SDRAM_MspInit+0x1e0>)
 8003e1a:	f001 ffc3 	bl	8005da4 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8003e1e:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8003e22:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003e24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e28:	4619      	mov	r1, r3
 8003e2a:	482d      	ldr	r0, [pc, #180]	; (8003ee0 <BSP_SDRAM_MspInit+0x1e4>)
 8003e2c:	f001 ffba 	bl	8005da4 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8003e30:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8003e34:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8003e36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	4829      	ldr	r0, [pc, #164]	; (8003ee4 <BSP_SDRAM_MspInit+0x1e8>)
 8003e3e:	f001 ffb1 	bl	8005da4 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003e42:	4b29      	ldr	r3, [pc, #164]	; (8003ee8 <BSP_SDRAM_MspInit+0x1ec>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003e48:	4b27      	ldr	r3, [pc, #156]	; (8003ee8 <BSP_SDRAM_MspInit+0x1ec>)
 8003e4a:	2280      	movs	r2, #128	; 0x80
 8003e4c:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003e4e:	4b26      	ldr	r3, [pc, #152]	; (8003ee8 <BSP_SDRAM_MspInit+0x1ec>)
 8003e50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e54:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003e56:	4b24      	ldr	r3, [pc, #144]	; (8003ee8 <BSP_SDRAM_MspInit+0x1ec>)
 8003e58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e5c:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003e5e:	4b22      	ldr	r3, [pc, #136]	; (8003ee8 <BSP_SDRAM_MspInit+0x1ec>)
 8003e60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003e64:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003e66:	4b20      	ldr	r3, [pc, #128]	; (8003ee8 <BSP_SDRAM_MspInit+0x1ec>)
 8003e68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e6c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003e6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ee8 <BSP_SDRAM_MspInit+0x1ec>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003e74:	4b1c      	ldr	r3, [pc, #112]	; (8003ee8 <BSP_SDRAM_MspInit+0x1ec>)
 8003e76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e7a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003e7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ee8 <BSP_SDRAM_MspInit+0x1ec>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003e82:	4b19      	ldr	r3, [pc, #100]	; (8003ee8 <BSP_SDRAM_MspInit+0x1ec>)
 8003e84:	2203      	movs	r2, #3
 8003e86:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003e88:	4b17      	ldr	r3, [pc, #92]	; (8003ee8 <BSP_SDRAM_MspInit+0x1ec>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003e8e:	4b16      	ldr	r3, [pc, #88]	; (8003ee8 <BSP_SDRAM_MspInit+0x1ec>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003e94:	4b14      	ldr	r3, [pc, #80]	; (8003ee8 <BSP_SDRAM_MspInit+0x1ec>)
 8003e96:	4a15      	ldr	r2, [pc, #84]	; (8003eec <BSP_SDRAM_MspInit+0x1f0>)
 8003e98:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a12      	ldr	r2, [pc, #72]	; (8003ee8 <BSP_SDRAM_MspInit+0x1ec>)
 8003e9e:	631a      	str	r2, [r3, #48]	; 0x30
 8003ea0:	4a11      	ldr	r2, [pc, #68]	; (8003ee8 <BSP_SDRAM_MspInit+0x1ec>)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003ea6:	4810      	ldr	r0, [pc, #64]	; (8003ee8 <BSP_SDRAM_MspInit+0x1ec>)
 8003ea8:	f000 fcfe 	bl	80048a8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003eac:	480e      	ldr	r0, [pc, #56]	; (8003ee8 <BSP_SDRAM_MspInit+0x1ec>)
 8003eae:	f000 fc4d 	bl	800474c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	210f      	movs	r1, #15
 8003eb6:	2038      	movs	r0, #56	; 0x38
 8003eb8:	f000 fc10 	bl	80046dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003ebc:	2038      	movs	r0, #56	; 0x38
 8003ebe:	f000 fc29 	bl	8004714 <HAL_NVIC_EnableIRQ>
}
 8003ec2:	bf00      	nop
 8003ec4:	3740      	adds	r7, #64	; 0x40
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	40020c00 	.word	0x40020c00
 8003ed4:	40021000 	.word	0x40021000
 8003ed8:	40021400 	.word	0x40021400
 8003edc:	40021800 	.word	0x40021800
 8003ee0:	40021c00 	.word	0x40021c00
 8003ee4:	40022000 	.word	0x40022000
 8003ee8:	20000c1c 	.word	0x20000c1c
 8003eec:	40026410 	.word	0x40026410

08003ef0 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	460a      	mov	r2, r1
 8003efa:	80fb      	strh	r3, [r7, #6]
 8003efc:	4613      	mov	r3, r2
 8003efe:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 8003f04:	2300      	movs	r3, #0
 8003f06:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 8003f08:	4b25      	ldr	r3, [pc, #148]	; (8003fa0 <BSP_TS_Init+0xb0>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a25      	ldr	r2, [pc, #148]	; (8003fa4 <BSP_TS_Init+0xb4>)
 8003f0e:	7812      	ldrb	r2, [r2, #0]
 8003f10:	b292      	uxth	r2, r2
 8003f12:	4610      	mov	r0, r2
 8003f14:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8003f16:	4b22      	ldr	r3, [pc, #136]	; (8003fa0 <BSP_TS_Init+0xb0>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2054      	movs	r0, #84	; 0x54
 8003f1c:	4798      	blx	r3
 8003f1e:	4603      	mov	r3, r0
 8003f20:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 8003f22:	7b7b      	ldrb	r3, [r7, #13]
 8003f24:	2b11      	cmp	r3, #17
 8003f26:	d009      	beq.n	8003f3c <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8003f28:	4b1d      	ldr	r3, [pc, #116]	; (8003fa0 <BSP_TS_Init+0xb0>)
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	2070      	movs	r0, #112	; 0x70
 8003f2e:	4798      	blx	r3
 8003f30:	4603      	mov	r3, r0
 8003f32:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 8003f34:	4b1b      	ldr	r3, [pc, #108]	; (8003fa4 <BSP_TS_Init+0xb4>)
 8003f36:	2270      	movs	r2, #112	; 0x70
 8003f38:	701a      	strb	r2, [r3, #0]
 8003f3a:	e002      	b.n	8003f42 <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 8003f3c:	4b19      	ldr	r3, [pc, #100]	; (8003fa4 <BSP_TS_Init+0xb4>)
 8003f3e:	2254      	movs	r2, #84	; 0x54
 8003f40:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8003f42:	7b7b      	ldrb	r3, [r7, #13]
 8003f44:	2b11      	cmp	r3, #17
 8003f46:	d002      	beq.n	8003f4e <BSP_TS_Init+0x5e>
 8003f48:	7bbb      	ldrb	r3, [r7, #14]
 8003f4a:	2b11      	cmp	r3, #17
 8003f4c:	d121      	bne.n	8003f92 <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 8003f4e:	4b16      	ldr	r3, [pc, #88]	; (8003fa8 <BSP_TS_Init+0xb8>)
 8003f50:	4a13      	ldr	r2, [pc, #76]	; (8003fa0 <BSP_TS_Init+0xb0>)
 8003f52:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 8003f54:	88fa      	ldrh	r2, [r7, #6]
 8003f56:	88bb      	ldrh	r3, [r7, #4]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d203      	bcs.n	8003f64 <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 8003f5c:	4b13      	ldr	r3, [pc, #76]	; (8003fac <BSP_TS_Init+0xbc>)
 8003f5e:	2201      	movs	r2, #1
 8003f60:	701a      	strb	r2, [r3, #0]
 8003f62:	e002      	b.n	8003f6a <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 8003f64:	4b11      	ldr	r3, [pc, #68]	; (8003fac <BSP_TS_Init+0xbc>)
 8003f66:	220c      	movs	r2, #12
 8003f68:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 8003f6a:	7bfb      	ldrb	r3, [r7, #15]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d112      	bne.n	8003f96 <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 8003f70:	4b0d      	ldr	r3, [pc, #52]	; (8003fa8 <BSP_TS_Init+0xb8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	4a0b      	ldr	r2, [pc, #44]	; (8003fa4 <BSP_TS_Init+0xb4>)
 8003f78:	7812      	ldrb	r2, [r2, #0]
 8003f7a:	b292      	uxth	r2, r2
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 8003f80:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <BSP_TS_Init+0xb8>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	4a07      	ldr	r2, [pc, #28]	; (8003fa4 <BSP_TS_Init+0xb4>)
 8003f88:	7812      	ldrb	r2, [r2, #0]
 8003f8a:	b292      	uxth	r2, r2
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	4798      	blx	r3
    if(ts_status == TS_OK)
 8003f90:	e001      	b.n	8003f96 <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 8003f92:	2303      	movs	r3, #3
 8003f94:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	2000000c 	.word	0x2000000c
 8003fa4:	20000c81 	.word	0x20000c81
 8003fa8:	20000c7c 	.word	0x20000c7c
 8003fac:	20000c80 	.word	0x20000c80

08003fb0 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
  uint8_t ts_status = TS_OK;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef gpio_init_structure;

  /* Msp Init of GPIO used for TS_INT pin coming from TouchScreen driver IC FT6x06 */
  /* When touchscreen is operated in interrupt mode */
  BSP_TS_INT_MspInit();
 8003fba:	f000 f93f 	bl	800423c <BSP_TS_INT_MspInit>

  /* Configure Interrupt mode for TS_INT pin falling edge : when a new touch is available */
  /* TS_INT pin is active on low level on new touch available */
  gpio_init_structure.Pin = TS_INT_PIN;
 8003fbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fc2:	603b      	str	r3, [r7, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003fc8:	2302      	movs	r3, #2
 8003fca:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8003fcc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003fd0:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8003fd2:	463b      	mov	r3, r7
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	480c      	ldr	r0, [pc, #48]	; (8004008 <BSP_TS_ITConfig+0x58>)
 8003fd8:	f001 fee4 	bl	8005da4 <HAL_GPIO_Init>

  /* Enable and set the TS_INT EXTI Interrupt to an intermediate priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 8003fdc:	2200      	movs	r2, #0
 8003fde:	210f      	movs	r1, #15
 8003fe0:	2028      	movs	r0, #40	; 0x28
 8003fe2:	f000 fb7b 	bl	80046dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 8003fe6:	2028      	movs	r0, #40	; 0x28
 8003fe8:	f000 fb94 	bl	8004714 <HAL_NVIC_EnableIRQ>

  /* Enable the TS in interrupt mode */
  /* In that case the INT output of FT6206 when new touch is available */
  /* is active on low level and directed on EXTI */
  ts_driver->EnableIT(I2C_Address);
 8003fec:	4b07      	ldr	r3, [pc, #28]	; (800400c <BSP_TS_ITConfig+0x5c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	4a07      	ldr	r2, [pc, #28]	; (8004010 <BSP_TS_ITConfig+0x60>)
 8003ff4:	7812      	ldrb	r2, [r2, #0]
 8003ff6:	b292      	uxth	r2, r2
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	4798      	blx	r3

  return (ts_status);
 8003ffc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40022000 	.word	0x40022000
 800400c:	20000c7c 	.word	0x20000c7c
 8004010:	20000c81 	.word	0x20000c81

08004014 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8004014:	b590      	push	{r4, r7, lr}
 8004016:	b089      	sub	sp, #36	; 0x24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 8004020:	4b81      	ldr	r3, [pc, #516]	; (8004228 <BSP_TS_GetState+0x214>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	4a81      	ldr	r2, [pc, #516]	; (800422c <BSP_TS_GetState+0x218>)
 8004028:	7812      	ldrb	r2, [r2, #0]
 800402a:	b292      	uxth	r2, r2
 800402c:	4610      	mov	r0, r2
 800402e:	4798      	blx	r3
 8004030:	4603      	mov	r3, r0
 8004032:	461a      	mov	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 80ee 	beq.w	800421e <BSP_TS_GetState+0x20a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8004042:	2300      	movs	r3, #0
 8004044:	61fb      	str	r3, [r7, #28]
 8004046:	e0e3      	b.n	8004210 <BSP_TS_GetState+0x1fc>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8004048:	4b77      	ldr	r3, [pc, #476]	; (8004228 <BSP_TS_GetState+0x214>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	4a77      	ldr	r2, [pc, #476]	; (800422c <BSP_TS_GetState+0x218>)
 8004050:	7812      	ldrb	r2, [r2, #0]
 8004052:	b290      	uxth	r0, r2
 8004054:	f107 0110 	add.w	r1, r7, #16
 8004058:	69fa      	ldr	r2, [r7, #28]
 800405a:	0052      	lsls	r2, r2, #1
 800405c:	188c      	adds	r4, r1, r2
 800405e:	f107 010c 	add.w	r1, r7, #12
 8004062:	69fa      	ldr	r2, [r7, #28]
 8004064:	0052      	lsls	r2, r2, #1
 8004066:	440a      	add	r2, r1
 8004068:	4621      	mov	r1, r4
 800406a:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 800406c:	4b70      	ldr	r3, [pc, #448]	; (8004230 <BSP_TS_GetState+0x21c>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	f003 0308 	and.w	r3, r3, #8
 8004074:	2b00      	cmp	r3, #0
 8004076:	d019      	beq.n	80040ac <BSP_TS_GetState+0x98>
      {
        tmp = Raw_x[index];
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	3320      	adds	r3, #32
 800407e:	443b      	add	r3, r7
 8004080:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8004084:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	3320      	adds	r3, #32
 800408c:	443b      	add	r3, r7
 800408e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	3320      	adds	r3, #32
 8004098:	443b      	add	r3, r7
 800409a:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	3320      	adds	r3, #32
 80040a4:	443b      	add	r3, r7
 80040a6:	8b3a      	ldrh	r2, [r7, #24]
 80040a8:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 80040ac:	4b60      	ldr	r3, [pc, #384]	; (8004230 <BSP_TS_GetState+0x21c>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00f      	beq.n	80040d8 <BSP_TS_GetState+0xc4>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	3320      	adds	r3, #32
 80040be:	443b      	add	r3, r7
 80040c0:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 80040c4:	f240 331f 	movw	r3, #799	; 0x31f
 80040c8:	1a9b      	subs	r3, r3, r2
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	3320      	adds	r3, #32
 80040d2:	443b      	add	r3, r7
 80040d4:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 80040d8:	4b55      	ldr	r3, [pc, #340]	; (8004230 <BSP_TS_GetState+0x21c>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00f      	beq.n	8004104 <BSP_TS_GetState+0xf0>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	3320      	adds	r3, #32
 80040ea:	443b      	add	r3, r7
 80040ec:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80040f0:	f240 13df 	movw	r3, #479	; 0x1df
 80040f4:	1a9b      	subs	r3, r3, r2
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	3320      	adds	r3, #32
 80040fe:	443b      	add	r3, r7
 8004100:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	3320      	adds	r3, #32
 800410a:	443b      	add	r3, r7
 800410c:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8004110:	4619      	mov	r1, r3
 8004112:	4a48      	ldr	r2, [pc, #288]	; (8004234 <BSP_TS_GetState+0x220>)
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800411a:	4299      	cmp	r1, r3
 800411c:	d90d      	bls.n	800413a <BSP_TS_GetState+0x126>
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	3320      	adds	r3, #32
 8004124:	443b      	add	r3, r7
 8004126:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 800412a:	4942      	ldr	r1, [pc, #264]	; (8004234 <BSP_TS_GetState+0x220>)
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004132:	b29b      	uxth	r3, r3
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	b29b      	uxth	r3, r3
 8004138:	e00c      	b.n	8004154 <BSP_TS_GetState+0x140>
 800413a:	4a3e      	ldr	r2, [pc, #248]	; (8004234 <BSP_TS_GetState+0x220>)
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004142:	b29a      	uxth	r2, r3
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	3320      	adds	r3, #32
 800414a:	443b      	add	r3, r7
 800414c:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	b29b      	uxth	r3, r3
 8004154:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	3320      	adds	r3, #32
 800415c:	443b      	add	r3, r7
 800415e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8004162:	4619      	mov	r1, r3
 8004164:	4a34      	ldr	r2, [pc, #208]	; (8004238 <BSP_TS_GetState+0x224>)
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800416c:	4299      	cmp	r1, r3
 800416e:	d90d      	bls.n	800418c <BSP_TS_GetState+0x178>
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	3320      	adds	r3, #32
 8004176:	443b      	add	r3, r7
 8004178:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800417c:	492e      	ldr	r1, [pc, #184]	; (8004238 <BSP_TS_GetState+0x224>)
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004184:	b29b      	uxth	r3, r3
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	b29b      	uxth	r3, r3
 800418a:	e00c      	b.n	80041a6 <BSP_TS_GetState+0x192>
 800418c:	4a2a      	ldr	r2, [pc, #168]	; (8004238 <BSP_TS_GetState+0x224>)
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004194:	b29a      	uxth	r2, r3
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	3320      	adds	r3, #32
 800419c:	443b      	add	r3, r7
 800419e:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 80041a8:	8afa      	ldrh	r2, [r7, #22]
 80041aa:	8abb      	ldrh	r3, [r7, #20]
 80041ac:	4413      	add	r3, r2
 80041ae:	2b05      	cmp	r3, #5
 80041b0:	dd15      	ble.n	80041de <BSP_TS_GetState+0x1ca>
      {
        _x[index] = Raw_x[index];
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	3320      	adds	r3, #32
 80041b8:	443b      	add	r3, r7
 80041ba:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80041be:	4619      	mov	r1, r3
 80041c0:	4a1c      	ldr	r2, [pc, #112]	; (8004234 <BSP_TS_GetState+0x220>)
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	3320      	adds	r3, #32
 80041ce:	443b      	add	r3, r7
 80041d0:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80041d4:	4619      	mov	r1, r3
 80041d6:	4a18      	ldr	r2, [pc, #96]	; (8004238 <BSP_TS_GetState+0x224>)
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 80041de:	4a15      	ldr	r2, [pc, #84]	; (8004234 <BSP_TS_GetState+0x220>)
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041e6:	b299      	uxth	r1, r3
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	4413      	add	r3, r2
 80041f0:	460a      	mov	r2, r1
 80041f2:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 80041f4:	4a10      	ldr	r2, [pc, #64]	; (8004238 <BSP_TS_GetState+0x224>)
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041fc:	b299      	uxth	r1, r3
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	4413      	add	r3, r2
 8004206:	460a      	mov	r2, r1
 8004208:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	3301      	adds	r3, #1
 800420e:	61fb      	str	r3, [r7, #28]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	461a      	mov	r2, r3
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	4293      	cmp	r3, r2
 800421a:	f4ff af15 	bcc.w	8004048 <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800421e:	7efb      	ldrb	r3, [r7, #27]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3724      	adds	r7, #36	; 0x24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd90      	pop	{r4, r7, pc}
 8004228:	20000c7c 	.word	0x20000c7c
 800422c:	20000c81 	.word	0x20000c81
 8004230:	20000c80 	.word	0x20000c80
 8004234:	20000c84 	.word	0x20000c84
 8004238:	20000c8c 	.word	0x20000c8c

0800423c <BSP_TS_INT_MspInit>:
/**
  * @brief  Initializes the TS_INT pin MSP.
  * @retval None
  */
__weak void BSP_TS_INT_MspInit(void)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  TS_INT_GPIO_CLK_ENABLE();
 8004242:	4b0f      	ldr	r3, [pc, #60]	; (8004280 <BSP_TS_INT_MspInit+0x44>)
 8004244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004246:	4a0e      	ldr	r2, [pc, #56]	; (8004280 <BSP_TS_INT_MspInit+0x44>)
 8004248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800424c:	6313      	str	r3, [r2, #48]	; 0x30
 800424e:	4b0c      	ldr	r3, [pc, #48]	; (8004280 <BSP_TS_INT_MspInit+0x44>)
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004256:	603b      	str	r3, [r7, #0]
 8004258:	683b      	ldr	r3, [r7, #0]

  /* GPIO configuration in input for TouchScreen interrupt signal on TS_INT pin */
  gpio_init_structure.Pin       = TS_INT_PIN;
 800425a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800425e:	607b      	str	r3, [r7, #4]

  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8004260:	2300      	movs	r3, #0
 8004262:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004264:	2301      	movs	r3, #1
 8004266:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8004268:	2303      	movs	r3, #3
 800426a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 800426c:	1d3b      	adds	r3, r7, #4
 800426e:	4619      	mov	r1, r3
 8004270:	4804      	ldr	r0, [pc, #16]	; (8004284 <BSP_TS_INT_MspInit+0x48>)
 8004272:	f001 fd97 	bl	8005da4 <HAL_GPIO_Init>
}
 8004276:	bf00      	nop
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40023800 	.word	0x40023800
 8004284:	40022000 	.word	0x40022000

08004288 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800428c:	2003      	movs	r0, #3
 800428e:	f000 fa1a 	bl	80046c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004292:	2000      	movs	r0, #0
 8004294:	f7fd ff8c 	bl	80021b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004298:	f7fd fcc0 	bl	8001c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042a4:	b480      	push	{r7}
 80042a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042a8:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <HAL_IncTick+0x20>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	461a      	mov	r2, r3
 80042ae:	4b06      	ldr	r3, [pc, #24]	; (80042c8 <HAL_IncTick+0x24>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4413      	add	r3, r2
 80042b4:	4a04      	ldr	r2, [pc, #16]	; (80042c8 <HAL_IncTick+0x24>)
 80042b6:	6013      	str	r3, [r2, #0]
}
 80042b8:	bf00      	nop
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	2000004c 	.word	0x2000004c
 80042c8:	20000c94 	.word	0x20000c94

080042cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
  return uwTick;
 80042d0:	4b03      	ldr	r3, [pc, #12]	; (80042e0 <HAL_GetTick+0x14>)
 80042d2:	681b      	ldr	r3, [r3, #0]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	20000c94 	.word	0x20000c94

080042e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b084      	sub	sp, #16
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042ec:	f7ff ffee 	bl	80042cc <HAL_GetTick>
 80042f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042fc:	d005      	beq.n	800430a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042fe:	4b0a      	ldr	r3, [pc, #40]	; (8004328 <HAL_Delay+0x44>)
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	461a      	mov	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4413      	add	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800430a:	bf00      	nop
 800430c:	f7ff ffde 	bl	80042cc <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	429a      	cmp	r2, r3
 800431a:	d8f7      	bhi.n	800430c <HAL_Delay+0x28>
  {
  }
}
 800431c:	bf00      	nop
 800431e:	bf00      	nop
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	2000004c 	.word	0x2000004c

0800432c <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t itflag;
  itflag = hcec->Instance->ISR;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_ARBLST))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2280      	movs	r2, #128	; 0x80
 800434a:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	691a      	ldr	r2, [r3, #16]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800435a:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXBR))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d01c      	beq.n	80043a0 <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2222      	movs	r2, #34	; 0x22
 800436a:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->RxXferSize++;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004370:	3301      	adds	r3, #1
 8004372:	b29a      	uxth	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	865a      	strh	r2, [r3, #50]	; 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	691a      	ldr	r2, [r3, #16]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0201 	orr.w	r2, r2, #1
 800439e:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXEND))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d01e      	beq.n	80043e8 <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f042 0202 	orr.w	r2, r2, #2
 80043b8:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2220      	movs	r2, #32
 80043be:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	641a      	str	r2, [r3, #64]	; 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043ce:	425b      	negs	r3, r3
 80043d0:	441a      	add	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043da:	4619      	mov	r1, r3
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f000 f88b 	bl	80044f8 <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXBR))
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d024      	beq.n	800443c <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80043f6:	3b01      	subs	r3, #1
 80043f8:	b29a      	uxth	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	861a      	strh	r2, [r3, #48]	; 0x30
    if (hcec->TxXferCount == 0U)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004402:	2b00      	cmp	r3, #0
 8004404:	d107      	bne.n	8004416 <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f042 0204 	orr.w	r2, r2, #4
 8004414:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = (uint8_t)*hcec->pTxBuffPtr;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	781a      	ldrb	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691a      	ldr	r2, [r3, #16]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800443a:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXEND))
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004442:	2b00      	cmp	r3, #0
 8004444:	d014      	beq.n	8004470 <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	691a      	ldr	r2, [r3, #16]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004454:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2220      	movs	r2, #32
 800445a:	639a      	str	r2, [r3, #56]	; 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f83a 	bl	80044e4 <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR |
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	f641 437c 	movw	r3, #7292	; 0x1c7c
 8004476:	4013      	ands	r3, r2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d02f      	beq.n	80044dc <HAL_CEC_IRQHandler+0x1b0>
              CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = itflag;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6919      	ldr	r1, [r3, #16]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	f641 437c 	movw	r3, #7292	; 0x1c7c
 8004490:	430b      	orrs	r3, r1
 8004492:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00e      	beq.n	80044bc <HAL_CEC_IRQHandler+0x190>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044a6:	425b      	negs	r3, r3
 80044a8:	441a      	add	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	629a      	str	r2, [r3, #40]	; 0x28
      hcec->RxXferSize = 0U;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	865a      	strh	r2, [r3, #50]	; 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	63da      	str	r2, [r3, #60]	; 0x3c
 80044ba:	e00c      	b.n	80044d6 <HAL_CEC_IRQHandler+0x1aa>
    }
    else if (((itflag & CEC_ISR_ARBLST) == 0U) && ((itflag & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d107      	bne.n	80044d6 <HAL_CEC_IRQHandler+0x1aa>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d002      	beq.n	80044d6 <HAL_CEC_IRQHandler+0x1aa>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2220      	movs	r2, #32
 80044d4:	639a      	str	r2, [r3, #56]	; 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f819 	bl	800450e <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 80044dc:	bf00      	nop
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 800450e:	b480      	push	{r7}
 8004510:	b083      	sub	sp, #12
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 8004516:	bf00      	nop
 8004518:	370c      	adds	r7, #12
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
	...

08004524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f003 0307 	and.w	r3, r3, #7
 8004532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004534:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <__NVIC_SetPriorityGrouping+0x40>)
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004540:	4013      	ands	r3, r2
 8004542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800454c:	4b06      	ldr	r3, [pc, #24]	; (8004568 <__NVIC_SetPriorityGrouping+0x44>)
 800454e:	4313      	orrs	r3, r2
 8004550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004552:	4a04      	ldr	r2, [pc, #16]	; (8004564 <__NVIC_SetPriorityGrouping+0x40>)
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	60d3      	str	r3, [r2, #12]
}
 8004558:	bf00      	nop
 800455a:	3714      	adds	r7, #20
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr
 8004564:	e000ed00 	.word	0xe000ed00
 8004568:	05fa0000 	.word	0x05fa0000

0800456c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004570:	4b04      	ldr	r3, [pc, #16]	; (8004584 <__NVIC_GetPriorityGrouping+0x18>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	0a1b      	lsrs	r3, r3, #8
 8004576:	f003 0307 	and.w	r3, r3, #7
}
 800457a:	4618      	mov	r0, r3
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	e000ed00 	.word	0xe000ed00

08004588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	4603      	mov	r3, r0
 8004590:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004596:	2b00      	cmp	r3, #0
 8004598:	db0b      	blt.n	80045b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800459a:	79fb      	ldrb	r3, [r7, #7]
 800459c:	f003 021f 	and.w	r2, r3, #31
 80045a0:	4907      	ldr	r1, [pc, #28]	; (80045c0 <__NVIC_EnableIRQ+0x38>)
 80045a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a6:	095b      	lsrs	r3, r3, #5
 80045a8:	2001      	movs	r0, #1
 80045aa:	fa00 f202 	lsl.w	r2, r0, r2
 80045ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045b2:	bf00      	nop
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	e000e100 	.word	0xe000e100

080045c4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	4603      	mov	r3, r0
 80045cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	db12      	blt.n	80045fc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045d6:	79fb      	ldrb	r3, [r7, #7]
 80045d8:	f003 021f 	and.w	r2, r3, #31
 80045dc:	490a      	ldr	r1, [pc, #40]	; (8004608 <__NVIC_DisableIRQ+0x44>)
 80045de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e2:	095b      	lsrs	r3, r3, #5
 80045e4:	2001      	movs	r0, #1
 80045e6:	fa00 f202 	lsl.w	r2, r0, r2
 80045ea:	3320      	adds	r3, #32
 80045ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80045f0:	f3bf 8f4f 	dsb	sy
}
 80045f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80045f6:	f3bf 8f6f 	isb	sy
}
 80045fa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	e000e100 	.word	0xe000e100

0800460c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	4603      	mov	r3, r0
 8004614:	6039      	str	r1, [r7, #0]
 8004616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461c:	2b00      	cmp	r3, #0
 800461e:	db0a      	blt.n	8004636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	b2da      	uxtb	r2, r3
 8004624:	490c      	ldr	r1, [pc, #48]	; (8004658 <__NVIC_SetPriority+0x4c>)
 8004626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800462a:	0112      	lsls	r2, r2, #4
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	440b      	add	r3, r1
 8004630:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004634:	e00a      	b.n	800464c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	b2da      	uxtb	r2, r3
 800463a:	4908      	ldr	r1, [pc, #32]	; (800465c <__NVIC_SetPriority+0x50>)
 800463c:	79fb      	ldrb	r3, [r7, #7]
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	3b04      	subs	r3, #4
 8004644:	0112      	lsls	r2, r2, #4
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	440b      	add	r3, r1
 800464a:	761a      	strb	r2, [r3, #24]
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	e000e100 	.word	0xe000e100
 800465c:	e000ed00 	.word	0xe000ed00

08004660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004660:	b480      	push	{r7}
 8004662:	b089      	sub	sp, #36	; 0x24
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	f1c3 0307 	rsb	r3, r3, #7
 800467a:	2b04      	cmp	r3, #4
 800467c:	bf28      	it	cs
 800467e:	2304      	movcs	r3, #4
 8004680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	3304      	adds	r3, #4
 8004686:	2b06      	cmp	r3, #6
 8004688:	d902      	bls.n	8004690 <NVIC_EncodePriority+0x30>
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	3b03      	subs	r3, #3
 800468e:	e000      	b.n	8004692 <NVIC_EncodePriority+0x32>
 8004690:	2300      	movs	r3, #0
 8004692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004694:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	fa02 f303 	lsl.w	r3, r2, r3
 800469e:	43da      	mvns	r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	401a      	ands	r2, r3
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	fa01 f303 	lsl.w	r3, r1, r3
 80046b2:	43d9      	mvns	r1, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046b8:	4313      	orrs	r3, r2
         );
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3724      	adds	r7, #36	; 0x24
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr

080046c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b082      	sub	sp, #8
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7ff ff28 	bl	8004524 <__NVIC_SetPriorityGrouping>
}
 80046d4:	bf00      	nop
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	4603      	mov	r3, r0
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
 80046e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80046ea:	2300      	movs	r3, #0
 80046ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046ee:	f7ff ff3d 	bl	800456c <__NVIC_GetPriorityGrouping>
 80046f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	68b9      	ldr	r1, [r7, #8]
 80046f8:	6978      	ldr	r0, [r7, #20]
 80046fa:	f7ff ffb1 	bl	8004660 <NVIC_EncodePriority>
 80046fe:	4602      	mov	r2, r0
 8004700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004704:	4611      	mov	r1, r2
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff ff80 	bl	800460c <__NVIC_SetPriority>
}
 800470c:	bf00      	nop
 800470e:	3718      	adds	r7, #24
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	4603      	mov	r3, r0
 800471c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800471e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff ff30 	bl	8004588 <__NVIC_EnableIRQ>
}
 8004728:	bf00      	nop
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	4603      	mov	r3, r0
 8004738:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800473a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff ff40 	bl	80045c4 <__NVIC_DisableIRQ>
}
 8004744:	bf00      	nop
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004758:	f7ff fdb8 	bl	80042cc <HAL_GetTick>
 800475c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e099      	b.n	800489c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f022 0201 	bic.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004788:	e00f      	b.n	80047aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800478a:	f7ff fd9f 	bl	80042cc <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b05      	cmp	r3, #5
 8004796:	d908      	bls.n	80047aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2220      	movs	r2, #32
 800479c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2203      	movs	r2, #3
 80047a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e078      	b.n	800489c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1e8      	bne.n	800478a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	4b38      	ldr	r3, [pc, #224]	; (80048a4 <HAL_DMA_Init+0x158>)
 80047c4:	4013      	ands	r3, r2
 80047c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	2b04      	cmp	r3, #4
 8004802:	d107      	bne.n	8004814 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480c:	4313      	orrs	r3, r2
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4313      	orrs	r3, r2
 8004812:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f023 0307 	bic.w	r3, r3, #7
 800482a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	4313      	orrs	r3, r2
 8004834:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	2b04      	cmp	r3, #4
 800483c:	d117      	bne.n	800486e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00e      	beq.n	800486e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f8bd 	bl	80049d0 <DMA_CheckFifoParam>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d008      	beq.n	800486e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2240      	movs	r2, #64	; 0x40
 8004860:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800486a:	2301      	movs	r3, #1
 800486c:	e016      	b.n	800489c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f874 	bl	8004964 <DMA_CalcBaseAndBitshift>
 800487c:	4603      	mov	r3, r0
 800487e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004884:	223f      	movs	r2, #63	; 0x3f
 8004886:	409a      	lsls	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	e010803f 	.word	0xe010803f

080048a8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e050      	b.n	800495c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d101      	bne.n	80048ca <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80048c6:	2302      	movs	r3, #2
 80048c8:	e048      	b.n	800495c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0201 	bic.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2200      	movs	r2, #0
 80048e0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2200      	movs	r2, #0
 80048e8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2200      	movs	r2, #0
 80048f0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2200      	movs	r2, #0
 80048f8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2200      	movs	r2, #0
 8004900:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2221      	movs	r2, #33	; 0x21
 8004908:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f82a 	bl	8004964 <DMA_CalcBaseAndBitshift>
 8004910:	4603      	mov	r3, r0
 8004912:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004918:	223f      	movs	r2, #63	; 0x3f
 800491a:	409a      	lsls	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	b2db      	uxtb	r3, r3
 8004972:	3b10      	subs	r3, #16
 8004974:	4a13      	ldr	r2, [pc, #76]	; (80049c4 <DMA_CalcBaseAndBitshift+0x60>)
 8004976:	fba2 2303 	umull	r2, r3, r2, r3
 800497a:	091b      	lsrs	r3, r3, #4
 800497c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800497e:	4a12      	ldr	r2, [pc, #72]	; (80049c8 <DMA_CalcBaseAndBitshift+0x64>)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	4413      	add	r3, r2
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	461a      	mov	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2b03      	cmp	r3, #3
 8004990:	d908      	bls.n	80049a4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	4b0c      	ldr	r3, [pc, #48]	; (80049cc <DMA_CalcBaseAndBitshift+0x68>)
 800499a:	4013      	ands	r3, r2
 800499c:	1d1a      	adds	r2, r3, #4
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	659a      	str	r2, [r3, #88]	; 0x58
 80049a2:	e006      	b.n	80049b2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	461a      	mov	r2, r3
 80049aa:	4b08      	ldr	r3, [pc, #32]	; (80049cc <DMA_CalcBaseAndBitshift+0x68>)
 80049ac:	4013      	ands	r3, r2
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	aaaaaaab 	.word	0xaaaaaaab
 80049c8:	08010ed8 	.word	0x08010ed8
 80049cc:	fffffc00 	.word	0xfffffc00

080049d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049d8:	2300      	movs	r3, #0
 80049da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d11f      	bne.n	8004a2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	d856      	bhi.n	8004a9e <DMA_CheckFifoParam+0xce>
 80049f0:	a201      	add	r2, pc, #4	; (adr r2, 80049f8 <DMA_CheckFifoParam+0x28>)
 80049f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f6:	bf00      	nop
 80049f8:	08004a09 	.word	0x08004a09
 80049fc:	08004a1b 	.word	0x08004a1b
 8004a00:	08004a09 	.word	0x08004a09
 8004a04:	08004a9f 	.word	0x08004a9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d046      	beq.n	8004aa2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a18:	e043      	b.n	8004aa2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a22:	d140      	bne.n	8004aa6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a28:	e03d      	b.n	8004aa6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a32:	d121      	bne.n	8004a78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	d837      	bhi.n	8004aaa <DMA_CheckFifoParam+0xda>
 8004a3a:	a201      	add	r2, pc, #4	; (adr r2, 8004a40 <DMA_CheckFifoParam+0x70>)
 8004a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a40:	08004a51 	.word	0x08004a51
 8004a44:	08004a57 	.word	0x08004a57
 8004a48:	08004a51 	.word	0x08004a51
 8004a4c:	08004a69 	.word	0x08004a69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	73fb      	strb	r3, [r7, #15]
      break;
 8004a54:	e030      	b.n	8004ab8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d025      	beq.n	8004aae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a66:	e022      	b.n	8004aae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a70:	d11f      	bne.n	8004ab2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a76:	e01c      	b.n	8004ab2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d903      	bls.n	8004a86 <DMA_CheckFifoParam+0xb6>
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	2b03      	cmp	r3, #3
 8004a82:	d003      	beq.n	8004a8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a84:	e018      	b.n	8004ab8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	73fb      	strb	r3, [r7, #15]
      break;
 8004a8a:	e015      	b.n	8004ab8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00e      	beq.n	8004ab6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004a9c:	e00b      	b.n	8004ab6 <DMA_CheckFifoParam+0xe6>
      break;
 8004a9e:	bf00      	nop
 8004aa0:	e00a      	b.n	8004ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8004aa2:	bf00      	nop
 8004aa4:	e008      	b.n	8004ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8004aa6:	bf00      	nop
 8004aa8:	e006      	b.n	8004ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8004aaa:	bf00      	nop
 8004aac:	e004      	b.n	8004ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8004aae:	bf00      	nop
 8004ab0:	e002      	b.n	8004ab8 <DMA_CheckFifoParam+0xe8>
      break;   
 8004ab2:	bf00      	nop
 8004ab4:	e000      	b.n	8004ab8 <DMA_CheckFifoParam+0xe8>
      break;
 8004ab6:	bf00      	nop
    }
  } 
  
  return status; 
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop

08004ac8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e049      	b.n	8004b6e <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d106      	bne.n	8004af4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7fd f8bc 	bl	8001c6c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b18:	f023 0107 	bic.w	r1, r3, #7
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b2e:	4b12      	ldr	r3, [pc, #72]	; (8004b78 <HAL_DMA2D_Init+0xb0>)
 8004b30:	4013      	ands	r3, r2
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	68d1      	ldr	r1, [r2, #12]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	6812      	ldr	r2, [r2, #0]
 8004b3a:	430b      	orrs	r3, r1
 8004b3c:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b44:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	051a      	lsls	r2, r3, #20
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	055b      	lsls	r3, r3, #21
 8004b54:	431a      	orrs	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	ffffc000 	.word	0xffffc000

08004b7c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af02      	add	r7, sp, #8
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
 8004b88:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d101      	bne.n	8004b98 <HAL_DMA2D_Start+0x1c>
 8004b94:	2302      	movs	r3, #2
 8004b96:	e018      	b.n	8004bca <HAL_DMA2D_Start+0x4e>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	68b9      	ldr	r1, [r7, #8]
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 faa4 	bl	8005100 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f042 0201 	orr.w	r2, r2, #1
 8004bc6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b086      	sub	sp, #24
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d056      	beq.n	8004c9c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bee:	f7ff fb6d 	bl	80042cc <HAL_GetTick>
 8004bf2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004bf4:	e04b      	b.n	8004c8e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d023      	beq.n	8004c50 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f003 0320 	and.w	r3, r3, #32
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d005      	beq.n	8004c1e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c16:	f043 0202 	orr.w	r2, r3, #2
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d005      	beq.n	8004c34 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2c:	f043 0201 	orr.w	r2, r3, #1
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2221      	movs	r2, #33	; 0x21
 8004c3a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2204      	movs	r2, #4
 8004c40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e0a5      	b.n	8004d9c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c56:	d01a      	beq.n	8004c8e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004c58:	f7ff fb38 	bl	80042cc <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d302      	bcc.n	8004c6e <HAL_DMA2D_PollForTransfer+0x9c>
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10f      	bne.n	8004c8e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c72:	f043 0220 	orr.w	r2, r3, #32
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2203      	movs	r2, #3
 8004c7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e086      	b.n	8004d9c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0ac      	beq.n	8004bf6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	f003 0320 	and.w	r3, r3, #32
 8004ca6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	f003 0320 	and.w	r3, r3, #32
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d061      	beq.n	8004d82 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cbe:	f7ff fb05 	bl	80042cc <HAL_GetTick>
 8004cc2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004cc4:	e056      	b.n	8004d74 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d02e      	beq.n	8004d36 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f003 0308 	and.w	r3, r3, #8
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d005      	beq.n	8004cee <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce6:	f043 0204 	orr.w	r2, r3, #4
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f003 0320 	and.w	r3, r3, #32
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d005      	beq.n	8004d04 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfc:	f043 0202 	orr.w	r2, r3, #2
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d005      	beq.n	8004d1a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d12:	f043 0201 	orr.w	r2, r3, #1
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2229      	movs	r2, #41	; 0x29
 8004d20:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2204      	movs	r2, #4
 8004d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e032      	b.n	8004d9c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d3c:	d01a      	beq.n	8004d74 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d3e:	f7ff fac5 	bl	80042cc <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d302      	bcc.n	8004d54 <HAL_DMA2D_PollForTransfer+0x182>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10f      	bne.n	8004d74 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d58:	f043 0220 	orr.w	r2, r3, #32
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2203      	movs	r2, #3
 8004d64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e013      	b.n	8004d9c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f003 0310 	and.w	r3, r3, #16
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0a1      	beq.n	8004cc6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2212      	movs	r2, #18
 8004d88:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3718      	adds	r7, #24
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d026      	beq.n	8004e14 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d021      	beq.n	8004e14 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dde:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de4:	f043 0201 	orr.w	r2, r3, #1
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2201      	movs	r2, #1
 8004df2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2204      	movs	r2, #4
 8004df8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	69db      	ldr	r3, [r3, #28]
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f003 0320 	and.w	r3, r3, #32
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d026      	beq.n	8004e6c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d021      	beq.n	8004e6c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e36:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e44:	f043 0202 	orr.w	r2, r3, #2
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2204      	movs	r2, #4
 8004e50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d003      	beq.n	8004e6c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	69db      	ldr	r3, [r3, #28]
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d026      	beq.n	8004ec4 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d021      	beq.n	8004ec4 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e8e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2208      	movs	r2, #8
 8004e96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9c:	f043 0204 	orr.w	r2, r3, #4
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2204      	movs	r2, #4
 8004ea8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	69db      	ldr	r3, [r3, #28]
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d013      	beq.n	8004ef6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00e      	beq.n	8004ef6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2204      	movs	r2, #4
 8004eee:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f853 	bl	8004f9c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d024      	beq.n	8004f4a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d01f      	beq.n	8004f4a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004f18:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f003 0310 	and.w	r3, r3, #16
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d01f      	beq.n	8004f94 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d01a      	beq.n	8004f94 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f6c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2210      	movs	r2, #16
 8004f74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f80e 	bl	8004fb0 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004f94:	bf00      	nop
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004fb8:	bf00      	nop
 8004fba:	370c      	adds	r7, #12
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc2:	4770      	bx	lr

08004fc4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d101      	bne.n	8004fe4 <HAL_DMA2D_ConfigLayer+0x20>
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	e084      	b.n	80050ee <HAL_DMA2D_ConfigLayer+0x12a>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	4413      	add	r3, r2
 8004ffc:	00db      	lsls	r3, r3, #3
 8004ffe:	3320      	adds	r3, #32
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	4413      	add	r3, r2
 8005004:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	041b      	lsls	r3, r3, #16
 8005010:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005018:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8005020:	4313      	orrs	r3, r2
 8005022:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8005024:	4b35      	ldr	r3, [pc, #212]	; (80050fc <HAL_DMA2D_ConfigLayer+0x138>)
 8005026:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	2b0a      	cmp	r3, #10
 800502e:	d003      	beq.n	8005038 <HAL_DMA2D_ConfigLayer+0x74>
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	2b09      	cmp	r3, #9
 8005036:	d107      	bne.n	8005048 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	4313      	orrs	r3, r2
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	e005      	b.n	8005054 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	061b      	lsls	r3, r3, #24
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	4313      	orrs	r3, r2
 8005052:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d120      	bne.n	800509c <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	43db      	mvns	r3, r3
 8005064:	ea02 0103 	and.w	r1, r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	430a      	orrs	r2, r1
 8005070:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	6812      	ldr	r2, [r2, #0]
 800507a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	2b0a      	cmp	r3, #10
 8005082:	d003      	beq.n	800508c <HAL_DMA2D_ConfigLayer+0xc8>
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	2b09      	cmp	r3, #9
 800508a:	d127      	bne.n	80050dc <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005098:	629a      	str	r2, [r3, #40]	; 0x28
 800509a:	e01f      	b.n	80050dc <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	69da      	ldr	r2, [r3, #28]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	43db      	mvns	r3, r3
 80050a6:	ea02 0103 	and.w	r1, r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	6812      	ldr	r2, [r2, #0]
 80050bc:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	2b0a      	cmp	r3, #10
 80050c4:	d003      	beq.n	80050ce <HAL_DMA2D_ConfigLayer+0x10a>
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2b09      	cmp	r3, #9
 80050cc:	d106      	bne.n	80050dc <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80050da:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	371c      	adds	r7, #28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	ff33000f 	.word	0xff33000f

08005100 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005100:	b480      	push	{r7}
 8005102:	b08b      	sub	sp, #44	; 0x2c
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
 800510c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005114:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	041a      	lsls	r2, r3, #16
 800511c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511e:	431a      	orrs	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	430a      	orrs	r2, r1
 8005126:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005138:	d174      	bne.n	8005224 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005140:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005148:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005150:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	b2db      	uxtb	r3, r3
 8005156:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d108      	bne.n	8005172 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	69fb      	ldr	r3, [r7, #28]
 8005164:	431a      	orrs	r2, r3
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	4313      	orrs	r3, r2
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	4313      	orrs	r3, r2
 800516e:	627b      	str	r3, [r7, #36]	; 0x24
 8005170:	e053      	b.n	800521a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	2b01      	cmp	r3, #1
 8005178:	d106      	bne.n	8005188 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800517a:	69ba      	ldr	r2, [r7, #24]
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	4313      	orrs	r3, r2
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	4313      	orrs	r3, r2
 8005184:	627b      	str	r3, [r7, #36]	; 0x24
 8005186:	e048      	b.n	800521a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	2b02      	cmp	r3, #2
 800518e:	d111      	bne.n	80051b4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	0cdb      	lsrs	r3, r3, #19
 8005194:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	0a9b      	lsrs	r3, r3, #10
 800519a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	08db      	lsrs	r3, r3, #3
 80051a0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	015a      	lsls	r2, r3, #5
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	02db      	lsls	r3, r3, #11
 80051aa:	4313      	orrs	r3, r2
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	627b      	str	r3, [r7, #36]	; 0x24
 80051b2:	e032      	b.n	800521a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	2b03      	cmp	r3, #3
 80051ba:	d117      	bne.n	80051ec <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	0fdb      	lsrs	r3, r3, #31
 80051c0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	0cdb      	lsrs	r3, r3, #19
 80051c6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	0adb      	lsrs	r3, r3, #11
 80051cc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	08db      	lsrs	r3, r3, #3
 80051d2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80051d4:	69bb      	ldr	r3, [r7, #24]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	029b      	lsls	r3, r3, #10
 80051dc:	431a      	orrs	r2, r3
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	03db      	lsls	r3, r3, #15
 80051e2:	4313      	orrs	r3, r2
 80051e4:	697a      	ldr	r2, [r7, #20]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	627b      	str	r3, [r7, #36]	; 0x24
 80051ea:	e016      	b.n	800521a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	0f1b      	lsrs	r3, r3, #28
 80051f0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	0d1b      	lsrs	r3, r3, #20
 80051f6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	0b1b      	lsrs	r3, r3, #12
 80051fc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	091b      	lsrs	r3, r3, #4
 8005202:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	011a      	lsls	r2, r3, #4
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	021b      	lsls	r3, r3, #8
 800520c:	431a      	orrs	r2, r3
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	031b      	lsls	r3, r3, #12
 8005212:	4313      	orrs	r3, r2
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	4313      	orrs	r3, r2
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005220:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005222:	e003      	b.n	800522c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	60da      	str	r2, [r3, #12]
}
 800522c:	bf00      	nop
 800522e:	372c      	adds	r7, #44	; 0x2c
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
 8005244:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	019a      	lsls	r2, r3, #6
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	431a      	orrs	r2, r3
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	021b      	lsls	r3, r3, #8
 8005252:	431a      	orrs	r2, r3
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	041b      	lsls	r3, r3, #16
 8005258:	431a      	orrs	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800525e:	bf00      	nop
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b086      	sub	sp, #24
 800526e:	af00      	add	r7, sp, #0
 8005270:	60f8      	str	r0, [r7, #12]
 8005272:	60b9      	str	r1, [r7, #8]
 8005274:	607a      	str	r2, [r7, #4]
 8005276:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8005278:	f7ff f828 	bl	80042cc <HAL_GetTick>
 800527c:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800527e:	e009      	b.n	8005294 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005280:	f7ff f824 	bl	80042cc <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800528e:	d901      	bls.n	8005294 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e015      	b.n	80052c0 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d0ee      	beq.n	8005280 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	019a      	lsls	r2, r3, #6
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	431a      	orrs	r2, r3
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	021b      	lsls	r3, r3, #8
 80052ae:	ea42 0103 	orr.w	r1, r2, r3
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	041a      	lsls	r2, r3, #16
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3718      	adds	r7, #24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b088      	sub	sp, #32
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e109      	b.n	80054f0 <HAL_DSI_Init+0x228>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	7c5b      	ldrb	r3, [r3, #17]
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d102      	bne.n	80052ec <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7fc fce6 	bl	8001cb8 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2203      	movs	r2, #3
 80052f0:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 80052f2:	2300      	movs	r3, #0
 80052f4:	613b      	str	r3, [r7, #16]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005306:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8005312:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005316:	613b      	str	r3, [r7, #16]
 8005318:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800531a:	f7fe ffd7 	bl	80042cc <HAL_GetTick>
 800531e:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8005320:	e009      	b.n	8005336 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005322:	f7fe ffd3 	bl	80042cc <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005330:	d901      	bls.n	8005336 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	e0dc      	b.n	80054f0 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800533e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d0ed      	beq.n	8005322 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	4b69      	ldr	r3, [pc, #420]	; (80054f8 <HAL_DSI_Init+0x230>)
 8005354:	400b      	ands	r3, r1
 8005356:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800536e:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8005376:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8005382:	2300      	movs	r3, #0
 8005384:	60fb      	str	r3, [r7, #12]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0201 	orr.w	r2, r2, #1
 8005396:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 80053aa:	2001      	movs	r0, #1
 80053ac:	f7fe ff9a 	bl	80042e4 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 80053b0:	f7fe ff8c 	bl	80042cc <HAL_GetTick>
 80053b4:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80053b6:	e009      	b.n	80053cc <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80053b8:	f7fe ff88 	bl	80042cc <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053c6:	d901      	bls.n	80053cc <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e091      	b.n	80054f0 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80053d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d0ed      	beq.n	80053b8 <HAL_DSI_Init+0xf0>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f042 0206 	orr.w	r2, r2, #6
 80053ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f022 0203 	bic.w	r2, r2, #3
 8005400:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	431a      	orrs	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0201 	orr.w	r2, r2, #1
 800541a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0203 	bic.w	r2, r2, #3
 800542e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689a      	ldr	r2, [r3, #8]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005456:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6899      	ldr	r1, [r3, #8]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <HAL_DSI_Init+0x1b0>
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	e000      	b.n	800547a <HAL_DSI_Init+0x1b2>
 8005478:	2301      	movs	r3, #1
 800547a:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	4a1f      	ldr	r2, [pc, #124]	; (80054fc <HAL_DSI_Init+0x234>)
 8005480:	fb03 f202 	mul.w	r2, r3, r2
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f003 0303 	and.w	r3, r3, #3
 800548c:	409a      	lsls	r2, r3
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8005496:	fb01 f303 	mul.w	r3, r1, r3
 800549a:	fbb2 f3f3 	udiv	r3, r2, r3
 800549e:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80054b0:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3720      	adds	r7, #32
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	fffc8603 	.word	0xfffc8603
 80054fc:	003d0900 	.word	0x003d0900

08005500 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e066      	b.n	80055e0 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2203      	movs	r2, #3
 8005516:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8005518:	2300      	movs	r3, #0
 800551a:	617b      	str	r3, [r7, #20]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 0208 	bic.w	r2, r2, #8
 800552c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005538:	f003 0308 	and.w	r3, r3, #8
 800553c:	617b      	str	r3, [r7, #20]
 800553e:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8005540:	2300      	movs	r3, #0
 8005542:	613b      	str	r3, [r7, #16]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 0201 	bic.w	r2, r2, #1
 8005552:	605a      	str	r2, [r3, #4]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	613b      	str	r3, [r7, #16]
 8005560:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0206 	bic.w	r2, r2, #6
 8005572:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8005576:	2300      	movs	r3, #0
 8005578:	60fb      	str	r3, [r7, #12]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 0201 	bic.w	r2, r2, #1
 800558a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 800559e:	2300      	movs	r3, #0
 80055a0:	60bb      	str	r3, [r7, #8]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80055b2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80055be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055c2:	60bb      	str	r3, [r7, #8]
 80055c4:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7fc fbc2 	bl	8001d50 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3718      	adds	r7, #24
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00f      	beq.n	8005620 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b00      	cmp	r3, #0
 800560e:	d007      	beq.n	8005620 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2201      	movs	r2, #1
 8005616:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f8ad 	bl	800577a <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00f      	beq.n	8005650 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d007      	beq.n	8005650 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2202      	movs	r2, #2
 8005646:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f89f 	bl	800578e <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 808c 	beq.w	8005772 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005662:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	4013      	ands	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800567a:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	4013      	ands	r3, r2
 8005688:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	b29b      	uxth	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d005      	beq.n	800569e <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	f043 0201 	orr.w	r2, r3, #1
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d005      	beq.n	80056b4 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	f043 0202 	orr.w	r2, r3, #2
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d005      	beq.n	80056ca <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	f043 0204 	orr.w	r2, r3, #4
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d005      	beq.n	80056e0 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	f043 0208 	orr.w	r2, r3, #8
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f003 030c 	and.w	r3, r3, #12
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d005      	beq.n	80056f6 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	f043 0210 	orr.w	r2, r3, #16
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	f003 0310 	and.w	r3, r3, #16
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d005      	beq.n	800570c <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	695b      	ldr	r3, [r3, #20]
 8005704:	f043 0220 	orr.w	r2, r3, #32
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	f003 0320 	and.w	r3, r3, #32
 8005712:	2b00      	cmp	r3, #0
 8005714:	d005      	beq.n	8005722 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005728:	2b00      	cmp	r3, #0
 800572a:	d005      	beq.n	8005738 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573e:	2b00      	cmp	r3, #0
 8005740:	d005      	beq.n	800574e <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8005754:	2b00      	cmp	r3, #0
 8005756:	d005      	beq.n	8005764 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f818 	bl	80057a2 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8005772:	bf00      	nop
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 800577a:	b480      	push	{r7}
 800577c:	b083      	sub	sp, #12
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8005782:	bf00      	nop
 8005784:	370c      	adds	r7, #12
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 800578e:	b480      	push	{r7}
 8005790:	b083      	sub	sp, #12
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8005796:	bf00      	nop
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 80057aa:	bf00      	nop
 80057ac:	370c      	adds	r7, #12
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
	...

080057b8 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	7c1b      	ldrb	r3, [r3, #16]
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d101      	bne.n	80057ce <HAL_DSI_ConfigVideoMode+0x16>
 80057ca:	2302      	movs	r3, #2
 80057cc:	e1ee      	b.n	8005bac <HAL_DSI_ConfigVideoMode+0x3f4>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0201 	bic.w	r2, r2, #1
 80057e2:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0201 	bic.w	r2, r2, #1
 80057f4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0203 	bic.w	r2, r2, #3
 8005806:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	68da      	ldr	r2, [r3, #12]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	4b8b      	ldr	r3, [pc, #556]	; (8005a54 <HAL_DSI_ConfigVideoMode+0x29c>)
 8005826:	400b      	ands	r3, r1
 8005828:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	691a      	ldr	r2, [r3, #16]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	430a      	orrs	r2, r1
 800583a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	4b84      	ldr	r3, [pc, #528]	; (8005a58 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8005848:	400b      	ands	r3, r1
 800584a:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	695a      	ldr	r2, [r3, #20]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	430a      	orrs	r2, r1
 800585c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	4b7b      	ldr	r3, [pc, #492]	; (8005a58 <HAL_DSI_ConfigVideoMode+0x2a0>)
 800586a:	400b      	ands	r3, r1
 800586c:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	699a      	ldr	r2, [r3, #24]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	430a      	orrs	r2, r1
 800587e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	68da      	ldr	r2, [r3, #12]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0203 	bic.w	r2, r2, #3
 800588e:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68d9      	ldr	r1, [r3, #12]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	695a      	ldr	r2, [r3, #20]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 0207 	bic.w	r2, r2, #7
 80058b0:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	6959      	ldr	r1, [r3, #20]
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	431a      	orrs	r2, r3
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	69db      	ldr	r3, [r3, #28]
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	691a      	ldr	r2, [r3, #16]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 020f 	bic.w	r2, r2, #15
 80058de:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6919      	ldr	r1, [r3, #16]
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f022 020e 	bic.w	r2, r2, #14
 8005902:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	005a      	lsls	r2, r3, #1
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	2b03      	cmp	r3, #3
 8005924:	d110      	bne.n	8005948 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	691a      	ldr	r2, [r3, #16]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005934:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6919      	ldr	r1, [r3, #16]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	4b42      	ldr	r3, [pc, #264]	; (8005a5c <HAL_DSI_ConfigVideoMode+0x2a4>)
 8005954:	400b      	ands	r3, r1
 8005956:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	4b39      	ldr	r3, [pc, #228]	; (8005a5c <HAL_DSI_ConfigVideoMode+0x2a4>)
 8005976:	400b      	ands	r3, r1
 8005978:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	4b32      	ldr	r3, [pc, #200]	; (8005a60 <HAL_DSI_ConfigVideoMode+0x2a8>)
 8005998:	400b      	ands	r3, r1
 800599a:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	4b2a      	ldr	r3, [pc, #168]	; (8005a64 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80059ba:	400b      	ands	r3, r1
 80059bc:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	4b22      	ldr	r3, [pc, #136]	; (8005a64 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80059dc:	400b      	ands	r3, r1
 80059de:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	4b19      	ldr	r3, [pc, #100]	; (8005a64 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80059fe:	400b      	ands	r3, r1
 8005a00:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	4b0d      	ldr	r3, [pc, #52]	; (8005a54 <HAL_DSI_ConfigVideoMode+0x29c>)
 8005a20:	400b      	ands	r3, r1
 8005a22:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a44:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a50:	e00a      	b.n	8005a68 <HAL_DSI_ConfigVideoMode+0x2b0>
 8005a52:	bf00      	nop
 8005a54:	ffffc000 	.word	0xffffc000
 8005a58:	ffffe000 	.word	0xffffe000
 8005a5c:	fffff000 	.word	0xfffff000
 8005a60:	ffff8000 	.word	0xffff8000
 8005a64:	fffffc00 	.word	0xfffffc00
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	699a      	ldr	r2, [r3, #24]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8005a7e:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6999      	ldr	r1, [r3, #24]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a8a:	041a      	lsls	r2, r3, #16
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	699a      	ldr	r2, [r3, #24]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005aa2:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6999      	ldr	r1, [r3, #24]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ac4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ae6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b08:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	430a      	orrs	r2, r1
 8005b1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b2a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005b4c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b6e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b90:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	7c1b      	ldrb	r3, [r3, #16]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d101      	bne.n	8005bcc <HAL_DSI_Start+0x14>
 8005bc8:	2302      	movs	r3, #2
 8005bca:	e02b      	b.n	8005c24 <HAL_DSI_Start+0x6c>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60fb      	str	r3, [r7, #12]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f042 0201 	orr.w	r2, r2, #1
 8005be4:	605a      	str	r2, [r3, #4]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	60bb      	str	r3, [r7, #8]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f042 0208 	orr.w	r2, r2, #8
 8005c08:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005c14:	f003 0308 	and.w	r3, r3, #8
 8005c18:	60bb      	str	r3, [r7, #8]
 8005c1a:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af02      	add	r7, sp, #8
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
 8005c3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	7c1b      	ldrb	r3, [r3, #16]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d101      	bne.n	8005c4a <HAL_DSI_ShortWrite+0x1a>
 8005c46:	2302      	movs	r3, #2
 8005c48:	e010      	b.n	8005c6c <HAL_DSI_ShortWrite+0x3c>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8005c50:	6a3b      	ldr	r3, [r7, #32]
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	68b9      	ldr	r1, [r7, #8]
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f7ff fb05 	bl	800526a <DSI_ShortWrite>
 8005c60:	4603      	mov	r3, r0
 8005c62:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	741a      	strb	r2, [r3, #16]

  return status;
 8005c6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3718      	adds	r7, #24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b08c      	sub	sp, #48	; 0x30
 8005c78:	af02      	add	r7, sp, #8
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
 8005c80:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8005c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c84:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	7c1b      	ldrb	r3, [r3, #16]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d101      	bne.n	8005c92 <HAL_DSI_LongWrite+0x1e>
 8005c8e:	2302      	movs	r3, #2
 8005c90:	e084      	b.n	8005d9c <HAL_DSI_LongWrite+0x128>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2201      	movs	r2, #1
 8005c96:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8005c98:	f7fe fb18 	bl	80042cc <HAL_GetTick>
 8005c9c:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8005c9e:	e00c      	b.n	8005cba <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005ca0:	f7fe fb14 	bl	80042cc <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cae:	d904      	bls.n	8005cba <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e070      	b.n	8005d9c <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d0eb      	beq.n	8005ca0 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8005cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cca:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	2b03      	cmp	r3, #3
 8005cd0:	bf28      	it	cs
 8005cd2:	2303      	movcs	r3, #3
 8005cd4:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	623b      	str	r3, [r7, #32]
 8005cda:	e00f      	b.n	8005cfc <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	6a3b      	ldr	r3, [r7, #32]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	00db      	lsls	r3, r3, #3
 8005cec:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf0:	69fa      	ldr	r2, [r7, #28]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	623b      	str	r3, [r7, #32]
 8005cfc:	6a3a      	ldr	r2, [r7, #32]
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d3eb      	bcc.n	8005cdc <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	69fa      	ldr	r2, [r7, #28]
 8005d0a:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8005d14:	69ba      	ldr	r2, [r7, #24]
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	4413      	add	r3, r2
 8005d1a:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8005d1c:	e028      	b.n	8005d70 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	2b04      	cmp	r3, #4
 8005d22:	bf28      	it	cs
 8005d24:	2304      	movcs	r3, #4
 8005d26:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	623b      	str	r3, [r7, #32]
 8005d30:	e00e      	b.n	8005d50 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	4413      	add	r3, r2
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	6a3b      	ldr	r3, [r7, #32]
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	fa02 f303 	lsl.w	r3, r2, r3
 8005d44:	69fa      	ldr	r2, [r7, #28]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	623b      	str	r3, [r7, #32]
 8005d50:	6a3a      	ldr	r2, [r7, #32]
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d3ec      	bcc.n	8005d32 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	69fa      	ldr	r2, [r7, #28]
 8005d5e:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8005d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1d3      	bne.n	8005d1e <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8005d7e:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	3301      	adds	r3, #1
 8005d84:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	9300      	str	r3, [sp, #0]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	68b9      	ldr	r1, [r7, #8]
 8005d90:	f7ff fa52 	bl	8005238 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3728      	adds	r7, #40	; 0x28
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b089      	sub	sp, #36	; 0x24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005dae:	2300      	movs	r3, #0
 8005db0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005db2:	2300      	movs	r3, #0
 8005db4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005db6:	2300      	movs	r3, #0
 8005db8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	61fb      	str	r3, [r7, #28]
 8005dc2:	e175      	b.n	80060b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	f040 8164 	bne.w	80060aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f003 0303 	and.w	r3, r3, #3
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d005      	beq.n	8005dfa <HAL_GPIO_Init+0x56>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	f003 0303 	and.w	r3, r3, #3
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d130      	bne.n	8005e5c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	005b      	lsls	r3, r3, #1
 8005e04:	2203      	movs	r2, #3
 8005e06:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0a:	43db      	mvns	r3, r3
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	4013      	ands	r3, r2
 8005e10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	68da      	ldr	r2, [r3, #12]
 8005e16:	69fb      	ldr	r3, [r7, #28]
 8005e18:	005b      	lsls	r3, r3, #1
 8005e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1e:	69ba      	ldr	r2, [r7, #24]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e30:	2201      	movs	r2, #1
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	fa02 f303 	lsl.w	r3, r2, r3
 8005e38:	43db      	mvns	r3, r3
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	091b      	lsrs	r3, r3, #4
 8005e46:	f003 0201 	and.w	r2, r3, #1
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e50:	69ba      	ldr	r2, [r7, #24]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	69ba      	ldr	r2, [r7, #24]
 8005e5a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f003 0303 	and.w	r3, r3, #3
 8005e64:	2b03      	cmp	r3, #3
 8005e66:	d017      	beq.n	8005e98 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	2203      	movs	r2, #3
 8005e74:	fa02 f303 	lsl.w	r3, r2, r3
 8005e78:	43db      	mvns	r3, r3
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	689a      	ldr	r2, [r3, #8]
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	005b      	lsls	r3, r3, #1
 8005e88:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	f003 0303 	and.w	r3, r3, #3
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d123      	bne.n	8005eec <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	08da      	lsrs	r2, r3, #3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3208      	adds	r2, #8
 8005eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	f003 0307 	and.w	r3, r3, #7
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	220f      	movs	r2, #15
 8005ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec0:	43db      	mvns	r3, r3
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	691a      	ldr	r2, [r3, #16]
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	f003 0307 	and.w	r3, r3, #7
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	08da      	lsrs	r2, r3, #3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	3208      	adds	r2, #8
 8005ee6:	69b9      	ldr	r1, [r7, #24]
 8005ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	005b      	lsls	r3, r3, #1
 8005ef6:	2203      	movs	r2, #3
 8005ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8005efc:	43db      	mvns	r3, r3
 8005efe:	69ba      	ldr	r2, [r7, #24]
 8005f00:	4013      	ands	r3, r2
 8005f02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f003 0203 	and.w	r2, r3, #3
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	005b      	lsls	r3, r3, #1
 8005f10:	fa02 f303 	lsl.w	r3, r2, r3
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 80be 	beq.w	80060aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f2e:	4b66      	ldr	r3, [pc, #408]	; (80060c8 <HAL_GPIO_Init+0x324>)
 8005f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f32:	4a65      	ldr	r2, [pc, #404]	; (80060c8 <HAL_GPIO_Init+0x324>)
 8005f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f38:	6453      	str	r3, [r2, #68]	; 0x44
 8005f3a:	4b63      	ldr	r3, [pc, #396]	; (80060c8 <HAL_GPIO_Init+0x324>)
 8005f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f42:	60fb      	str	r3, [r7, #12]
 8005f44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005f46:	4a61      	ldr	r2, [pc, #388]	; (80060cc <HAL_GPIO_Init+0x328>)
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	089b      	lsrs	r3, r3, #2
 8005f4c:	3302      	adds	r3, #2
 8005f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	f003 0303 	and.w	r3, r3, #3
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	220f      	movs	r2, #15
 8005f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f62:	43db      	mvns	r3, r3
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	4013      	ands	r3, r2
 8005f68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a58      	ldr	r2, [pc, #352]	; (80060d0 <HAL_GPIO_Init+0x32c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d037      	beq.n	8005fe2 <HAL_GPIO_Init+0x23e>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a57      	ldr	r2, [pc, #348]	; (80060d4 <HAL_GPIO_Init+0x330>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d031      	beq.n	8005fde <HAL_GPIO_Init+0x23a>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a56      	ldr	r2, [pc, #344]	; (80060d8 <HAL_GPIO_Init+0x334>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d02b      	beq.n	8005fda <HAL_GPIO_Init+0x236>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a55      	ldr	r2, [pc, #340]	; (80060dc <HAL_GPIO_Init+0x338>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d025      	beq.n	8005fd6 <HAL_GPIO_Init+0x232>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a54      	ldr	r2, [pc, #336]	; (80060e0 <HAL_GPIO_Init+0x33c>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d01f      	beq.n	8005fd2 <HAL_GPIO_Init+0x22e>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a53      	ldr	r2, [pc, #332]	; (80060e4 <HAL_GPIO_Init+0x340>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d019      	beq.n	8005fce <HAL_GPIO_Init+0x22a>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a52      	ldr	r2, [pc, #328]	; (80060e8 <HAL_GPIO_Init+0x344>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d013      	beq.n	8005fca <HAL_GPIO_Init+0x226>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a51      	ldr	r2, [pc, #324]	; (80060ec <HAL_GPIO_Init+0x348>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d00d      	beq.n	8005fc6 <HAL_GPIO_Init+0x222>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a50      	ldr	r2, [pc, #320]	; (80060f0 <HAL_GPIO_Init+0x34c>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d007      	beq.n	8005fc2 <HAL_GPIO_Init+0x21e>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a4f      	ldr	r2, [pc, #316]	; (80060f4 <HAL_GPIO_Init+0x350>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d101      	bne.n	8005fbe <HAL_GPIO_Init+0x21a>
 8005fba:	2309      	movs	r3, #9
 8005fbc:	e012      	b.n	8005fe4 <HAL_GPIO_Init+0x240>
 8005fbe:	230a      	movs	r3, #10
 8005fc0:	e010      	b.n	8005fe4 <HAL_GPIO_Init+0x240>
 8005fc2:	2308      	movs	r3, #8
 8005fc4:	e00e      	b.n	8005fe4 <HAL_GPIO_Init+0x240>
 8005fc6:	2307      	movs	r3, #7
 8005fc8:	e00c      	b.n	8005fe4 <HAL_GPIO_Init+0x240>
 8005fca:	2306      	movs	r3, #6
 8005fcc:	e00a      	b.n	8005fe4 <HAL_GPIO_Init+0x240>
 8005fce:	2305      	movs	r3, #5
 8005fd0:	e008      	b.n	8005fe4 <HAL_GPIO_Init+0x240>
 8005fd2:	2304      	movs	r3, #4
 8005fd4:	e006      	b.n	8005fe4 <HAL_GPIO_Init+0x240>
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e004      	b.n	8005fe4 <HAL_GPIO_Init+0x240>
 8005fda:	2302      	movs	r3, #2
 8005fdc:	e002      	b.n	8005fe4 <HAL_GPIO_Init+0x240>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e000      	b.n	8005fe4 <HAL_GPIO_Init+0x240>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	69fa      	ldr	r2, [r7, #28]
 8005fe6:	f002 0203 	and.w	r2, r2, #3
 8005fea:	0092      	lsls	r2, r2, #2
 8005fec:	4093      	lsls	r3, r2
 8005fee:	69ba      	ldr	r2, [r7, #24]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005ff4:	4935      	ldr	r1, [pc, #212]	; (80060cc <HAL_GPIO_Init+0x328>)
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	089b      	lsrs	r3, r3, #2
 8005ffa:	3302      	adds	r3, #2
 8005ffc:	69ba      	ldr	r2, [r7, #24]
 8005ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006002:	4b3d      	ldr	r3, [pc, #244]	; (80060f8 <HAL_GPIO_Init+0x354>)
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	43db      	mvns	r3, r3
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	4013      	ands	r3, r2
 8006010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	4313      	orrs	r3, r2
 8006024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006026:	4a34      	ldr	r2, [pc, #208]	; (80060f8 <HAL_GPIO_Init+0x354>)
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800602c:	4b32      	ldr	r3, [pc, #200]	; (80060f8 <HAL_GPIO_Init+0x354>)
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	43db      	mvns	r3, r3
 8006036:	69ba      	ldr	r2, [r7, #24]
 8006038:	4013      	ands	r3, r2
 800603a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d003      	beq.n	8006050 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	4313      	orrs	r3, r2
 800604e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006050:	4a29      	ldr	r2, [pc, #164]	; (80060f8 <HAL_GPIO_Init+0x354>)
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006056:	4b28      	ldr	r3, [pc, #160]	; (80060f8 <HAL_GPIO_Init+0x354>)
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	43db      	mvns	r3, r3
 8006060:	69ba      	ldr	r2, [r7, #24]
 8006062:	4013      	ands	r3, r2
 8006064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006072:	69ba      	ldr	r2, [r7, #24]
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	4313      	orrs	r3, r2
 8006078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800607a:	4a1f      	ldr	r2, [pc, #124]	; (80060f8 <HAL_GPIO_Init+0x354>)
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006080:	4b1d      	ldr	r3, [pc, #116]	; (80060f8 <HAL_GPIO_Init+0x354>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	43db      	mvns	r3, r3
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	4013      	ands	r3, r2
 800608e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d003      	beq.n	80060a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800609c:	69ba      	ldr	r2, [r7, #24]
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80060a4:	4a14      	ldr	r2, [pc, #80]	; (80060f8 <HAL_GPIO_Init+0x354>)
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	3301      	adds	r3, #1
 80060ae:	61fb      	str	r3, [r7, #28]
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	2b0f      	cmp	r3, #15
 80060b4:	f67f ae86 	bls.w	8005dc4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80060b8:	bf00      	nop
 80060ba:	bf00      	nop
 80060bc:	3724      	adds	r7, #36	; 0x24
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	40023800 	.word	0x40023800
 80060cc:	40013800 	.word	0x40013800
 80060d0:	40020000 	.word	0x40020000
 80060d4:	40020400 	.word	0x40020400
 80060d8:	40020800 	.word	0x40020800
 80060dc:	40020c00 	.word	0x40020c00
 80060e0:	40021000 	.word	0x40021000
 80060e4:	40021400 	.word	0x40021400
 80060e8:	40021800 	.word	0x40021800
 80060ec:	40021c00 	.word	0x40021c00
 80060f0:	40022000 	.word	0x40022000
 80060f4:	40022400 	.word	0x40022400
 80060f8:	40013c00 	.word	0x40013c00

080060fc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b087      	sub	sp, #28
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8006106:	2300      	movs	r3, #0
 8006108:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800610a:	2300      	movs	r3, #0
 800610c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800610e:	2300      	movs	r3, #0
 8006110:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006112:	2300      	movs	r3, #0
 8006114:	617b      	str	r3, [r7, #20]
 8006116:	e0d9      	b.n	80062cc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006118:	2201      	movs	r2, #1
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	fa02 f303 	lsl.w	r3, r2, r3
 8006120:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	4013      	ands	r3, r2
 8006128:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	429a      	cmp	r2, r3
 8006130:	f040 80c9 	bne.w	80062c6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8006134:	4a6b      	ldr	r2, [pc, #428]	; (80062e4 <HAL_GPIO_DeInit+0x1e8>)
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	089b      	lsrs	r3, r3, #2
 800613a:	3302      	adds	r3, #2
 800613c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006140:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f003 0303 	and.w	r3, r3, #3
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	220f      	movs	r2, #15
 800614c:	fa02 f303 	lsl.w	r3, r2, r3
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	4013      	ands	r3, r2
 8006154:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a63      	ldr	r2, [pc, #396]	; (80062e8 <HAL_GPIO_DeInit+0x1ec>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d037      	beq.n	80061ce <HAL_GPIO_DeInit+0xd2>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a62      	ldr	r2, [pc, #392]	; (80062ec <HAL_GPIO_DeInit+0x1f0>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d031      	beq.n	80061ca <HAL_GPIO_DeInit+0xce>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a61      	ldr	r2, [pc, #388]	; (80062f0 <HAL_GPIO_DeInit+0x1f4>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d02b      	beq.n	80061c6 <HAL_GPIO_DeInit+0xca>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a60      	ldr	r2, [pc, #384]	; (80062f4 <HAL_GPIO_DeInit+0x1f8>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d025      	beq.n	80061c2 <HAL_GPIO_DeInit+0xc6>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a5f      	ldr	r2, [pc, #380]	; (80062f8 <HAL_GPIO_DeInit+0x1fc>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d01f      	beq.n	80061be <HAL_GPIO_DeInit+0xc2>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a5e      	ldr	r2, [pc, #376]	; (80062fc <HAL_GPIO_DeInit+0x200>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d019      	beq.n	80061ba <HAL_GPIO_DeInit+0xbe>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a5d      	ldr	r2, [pc, #372]	; (8006300 <HAL_GPIO_DeInit+0x204>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d013      	beq.n	80061b6 <HAL_GPIO_DeInit+0xba>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a5c      	ldr	r2, [pc, #368]	; (8006304 <HAL_GPIO_DeInit+0x208>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d00d      	beq.n	80061b2 <HAL_GPIO_DeInit+0xb6>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a5b      	ldr	r2, [pc, #364]	; (8006308 <HAL_GPIO_DeInit+0x20c>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d007      	beq.n	80061ae <HAL_GPIO_DeInit+0xb2>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a5a      	ldr	r2, [pc, #360]	; (800630c <HAL_GPIO_DeInit+0x210>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d101      	bne.n	80061aa <HAL_GPIO_DeInit+0xae>
 80061a6:	2309      	movs	r3, #9
 80061a8:	e012      	b.n	80061d0 <HAL_GPIO_DeInit+0xd4>
 80061aa:	230a      	movs	r3, #10
 80061ac:	e010      	b.n	80061d0 <HAL_GPIO_DeInit+0xd4>
 80061ae:	2308      	movs	r3, #8
 80061b0:	e00e      	b.n	80061d0 <HAL_GPIO_DeInit+0xd4>
 80061b2:	2307      	movs	r3, #7
 80061b4:	e00c      	b.n	80061d0 <HAL_GPIO_DeInit+0xd4>
 80061b6:	2306      	movs	r3, #6
 80061b8:	e00a      	b.n	80061d0 <HAL_GPIO_DeInit+0xd4>
 80061ba:	2305      	movs	r3, #5
 80061bc:	e008      	b.n	80061d0 <HAL_GPIO_DeInit+0xd4>
 80061be:	2304      	movs	r3, #4
 80061c0:	e006      	b.n	80061d0 <HAL_GPIO_DeInit+0xd4>
 80061c2:	2303      	movs	r3, #3
 80061c4:	e004      	b.n	80061d0 <HAL_GPIO_DeInit+0xd4>
 80061c6:	2302      	movs	r3, #2
 80061c8:	e002      	b.n	80061d0 <HAL_GPIO_DeInit+0xd4>
 80061ca:	2301      	movs	r3, #1
 80061cc:	e000      	b.n	80061d0 <HAL_GPIO_DeInit+0xd4>
 80061ce:	2300      	movs	r3, #0
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	f002 0203 	and.w	r2, r2, #3
 80061d6:	0092      	lsls	r2, r2, #2
 80061d8:	4093      	lsls	r3, r2
 80061da:	68ba      	ldr	r2, [r7, #8]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d132      	bne.n	8006246 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80061e0:	4b4b      	ldr	r3, [pc, #300]	; (8006310 <HAL_GPIO_DeInit+0x214>)
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	43db      	mvns	r3, r3
 80061e8:	4949      	ldr	r1, [pc, #292]	; (8006310 <HAL_GPIO_DeInit+0x214>)
 80061ea:	4013      	ands	r3, r2
 80061ec:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80061ee:	4b48      	ldr	r3, [pc, #288]	; (8006310 <HAL_GPIO_DeInit+0x214>)
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	43db      	mvns	r3, r3
 80061f6:	4946      	ldr	r1, [pc, #280]	; (8006310 <HAL_GPIO_DeInit+0x214>)
 80061f8:	4013      	ands	r3, r2
 80061fa:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80061fc:	4b44      	ldr	r3, [pc, #272]	; (8006310 <HAL_GPIO_DeInit+0x214>)
 80061fe:	68da      	ldr	r2, [r3, #12]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	43db      	mvns	r3, r3
 8006204:	4942      	ldr	r1, [pc, #264]	; (8006310 <HAL_GPIO_DeInit+0x214>)
 8006206:	4013      	ands	r3, r2
 8006208:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800620a:	4b41      	ldr	r3, [pc, #260]	; (8006310 <HAL_GPIO_DeInit+0x214>)
 800620c:	689a      	ldr	r2, [r3, #8]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	43db      	mvns	r3, r3
 8006212:	493f      	ldr	r1, [pc, #252]	; (8006310 <HAL_GPIO_DeInit+0x214>)
 8006214:	4013      	ands	r3, r2
 8006216:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	f003 0303 	and.w	r3, r3, #3
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	220f      	movs	r2, #15
 8006222:	fa02 f303 	lsl.w	r3, r2, r3
 8006226:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006228:	4a2e      	ldr	r2, [pc, #184]	; (80062e4 <HAL_GPIO_DeInit+0x1e8>)
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	089b      	lsrs	r3, r3, #2
 800622e:	3302      	adds	r3, #2
 8006230:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	43da      	mvns	r2, r3
 8006238:	482a      	ldr	r0, [pc, #168]	; (80062e4 <HAL_GPIO_DeInit+0x1e8>)
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	089b      	lsrs	r3, r3, #2
 800623e:	400a      	ands	r2, r1
 8006240:	3302      	adds	r3, #2
 8006242:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	2103      	movs	r1, #3
 8006250:	fa01 f303 	lsl.w	r3, r1, r3
 8006254:	43db      	mvns	r3, r3
 8006256:	401a      	ands	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	08da      	lsrs	r2, r3, #3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	3208      	adds	r2, #8
 8006264:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f003 0307 	and.w	r3, r3, #7
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	220f      	movs	r2, #15
 8006272:	fa02 f303 	lsl.w	r3, r2, r3
 8006276:	43db      	mvns	r3, r3
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	08d2      	lsrs	r2, r2, #3
 800627c:	4019      	ands	r1, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	3208      	adds	r2, #8
 8006282:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	005b      	lsls	r3, r3, #1
 800628e:	2103      	movs	r1, #3
 8006290:	fa01 f303 	lsl.w	r3, r1, r3
 8006294:	43db      	mvns	r3, r3
 8006296:	401a      	ands	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	2101      	movs	r1, #1
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	fa01 f303 	lsl.w	r3, r1, r3
 80062a8:	43db      	mvns	r3, r3
 80062aa:	401a      	ands	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	689a      	ldr	r2, [r3, #8]
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	005b      	lsls	r3, r3, #1
 80062b8:	2103      	movs	r1, #3
 80062ba:	fa01 f303 	lsl.w	r3, r1, r3
 80062be:	43db      	mvns	r3, r3
 80062c0:	401a      	ands	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	3301      	adds	r3, #1
 80062ca:	617b      	str	r3, [r7, #20]
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	2b0f      	cmp	r3, #15
 80062d0:	f67f af22 	bls.w	8006118 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80062d4:	bf00      	nop
 80062d6:	bf00      	nop
 80062d8:	371c      	adds	r7, #28
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	40013800 	.word	0x40013800
 80062e8:	40020000 	.word	0x40020000
 80062ec:	40020400 	.word	0x40020400
 80062f0:	40020800 	.word	0x40020800
 80062f4:	40020c00 	.word	0x40020c00
 80062f8:	40021000 	.word	0x40021000
 80062fc:	40021400 	.word	0x40021400
 8006300:	40021800 	.word	0x40021800
 8006304:	40021c00 	.word	0x40021c00
 8006308:	40022000 	.word	0x40022000
 800630c:	40022400 	.word	0x40022400
 8006310:	40013c00 	.word	0x40013c00

08006314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	460b      	mov	r3, r1
 800631e:	807b      	strh	r3, [r7, #2]
 8006320:	4613      	mov	r3, r2
 8006322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006324:	787b      	ldrb	r3, [r7, #1]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800632a:	887a      	ldrh	r2, [r7, #2]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006330:	e003      	b.n	800633a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006332:	887b      	ldrh	r3, [r7, #2]
 8006334:	041a      	lsls	r2, r3, #16
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	619a      	str	r2, [r3, #24]
}
 800633a:	bf00      	nop
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
	...

08006348 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	4603      	mov	r3, r0
 8006350:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006352:	4b08      	ldr	r3, [pc, #32]	; (8006374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006354:	695a      	ldr	r2, [r3, #20]
 8006356:	88fb      	ldrh	r3, [r7, #6]
 8006358:	4013      	ands	r3, r2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d006      	beq.n	800636c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800635e:	4a05      	ldr	r2, [pc, #20]	; (8006374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006360:	88fb      	ldrh	r3, [r7, #6]
 8006362:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006364:	88fb      	ldrh	r3, [r7, #6]
 8006366:	4618      	mov	r0, r3
 8006368:	f000 f806 	bl	8006378 <HAL_GPIO_EXTI_Callback>
  }
}
 800636c:	bf00      	nop
 800636e:	3708      	adds	r7, #8
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	40013c00 	.word	0x40013c00

08006378 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	4603      	mov	r3, r0
 8006380:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006382:	bf00      	nop
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
	...

08006390 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e07f      	b.n	80064a2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d106      	bne.n	80063bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7fb fcea 	bl	8001d90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2224      	movs	r2, #36	; 0x24
 80063c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f022 0201 	bic.w	r2, r2, #1
 80063d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80063e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	689a      	ldr	r2, [r3, #8]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d107      	bne.n	800640a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	689a      	ldr	r2, [r3, #8]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006406:	609a      	str	r2, [r3, #8]
 8006408:	e006      	b.n	8006418 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	689a      	ldr	r2, [r3, #8]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006416:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	2b02      	cmp	r3, #2
 800641e:	d104      	bne.n	800642a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006428:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	6859      	ldr	r1, [r3, #4]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	4b1d      	ldr	r3, [pc, #116]	; (80064ac <HAL_I2C_Init+0x11c>)
 8006436:	430b      	orrs	r3, r1
 8006438:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68da      	ldr	r2, [r3, #12]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006448:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	691a      	ldr	r2, [r3, #16]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	430a      	orrs	r2, r1
 8006462:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	69d9      	ldr	r1, [r3, #28]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a1a      	ldr	r2, [r3, #32]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	430a      	orrs	r2, r1
 8006472:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0201 	orr.w	r2, r2, #1
 8006482:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2220      	movs	r2, #32
 800648e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	02008000 	.word	0x02008000

080064b0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e021      	b.n	8006506 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2224      	movs	r2, #36	; 0x24
 80064c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f022 0201 	bic.w	r2, r2, #1
 80064d8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f7fb fd22 	bl	8001f24 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
	...

08006510 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b088      	sub	sp, #32
 8006514:	af02      	add	r7, sp, #8
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	4608      	mov	r0, r1
 800651a:	4611      	mov	r1, r2
 800651c:	461a      	mov	r2, r3
 800651e:	4603      	mov	r3, r0
 8006520:	817b      	strh	r3, [r7, #10]
 8006522:	460b      	mov	r3, r1
 8006524:	813b      	strh	r3, [r7, #8]
 8006526:	4613      	mov	r3, r2
 8006528:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b20      	cmp	r3, #32
 8006534:	f040 80f9 	bne.w	800672a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006538:	6a3b      	ldr	r3, [r7, #32]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d002      	beq.n	8006544 <HAL_I2C_Mem_Write+0x34>
 800653e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006540:	2b00      	cmp	r3, #0
 8006542:	d105      	bne.n	8006550 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f44f 7200 	mov.w	r2, #512	; 0x200
 800654a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e0ed      	b.n	800672c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006556:	2b01      	cmp	r3, #1
 8006558:	d101      	bne.n	800655e <HAL_I2C_Mem_Write+0x4e>
 800655a:	2302      	movs	r3, #2
 800655c:	e0e6      	b.n	800672c <HAL_I2C_Mem_Write+0x21c>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006566:	f7fd feb1 	bl	80042cc <HAL_GetTick>
 800656a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	2319      	movs	r3, #25
 8006572:	2201      	movs	r2, #1
 8006574:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f000 fad1 	bl	8006b20 <I2C_WaitOnFlagUntilTimeout>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d001      	beq.n	8006588 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e0d1      	b.n	800672c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2221      	movs	r2, #33	; 0x21
 800658c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2240      	movs	r2, #64	; 0x40
 8006594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6a3a      	ldr	r2, [r7, #32]
 80065a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80065a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80065b0:	88f8      	ldrh	r0, [r7, #6]
 80065b2:	893a      	ldrh	r2, [r7, #8]
 80065b4:	8979      	ldrh	r1, [r7, #10]
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	9301      	str	r3, [sp, #4]
 80065ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	4603      	mov	r3, r0
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 f9e1 	bl	8006988 <I2C_RequestMemoryWrite>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d005      	beq.n	80065d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e0a9      	b.n	800672c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065dc:	b29b      	uxth	r3, r3
 80065de:	2bff      	cmp	r3, #255	; 0xff
 80065e0:	d90e      	bls.n	8006600 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	22ff      	movs	r2, #255	; 0xff
 80065e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	8979      	ldrh	r1, [r7, #10]
 80065f0:	2300      	movs	r3, #0
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f000 fc2d 	bl	8006e58 <I2C_TransferConfig>
 80065fe:	e00f      	b.n	8006620 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006604:	b29a      	uxth	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800660e:	b2da      	uxtb	r2, r3
 8006610:	8979      	ldrh	r1, [r7, #10]
 8006612:	2300      	movs	r3, #0
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f000 fc1c 	bl	8006e58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 fabb 	bl	8006ba0 <I2C_WaitOnTXISFlagUntilTimeout>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d001      	beq.n	8006634 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e07b      	b.n	800672c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006638:	781a      	ldrb	r2, [r3, #0]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006644:	1c5a      	adds	r2, r3, #1
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664e:	b29b      	uxth	r3, r3
 8006650:	3b01      	subs	r3, #1
 8006652:	b29a      	uxth	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800665c:	3b01      	subs	r3, #1
 800665e:	b29a      	uxth	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006668:	b29b      	uxth	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d034      	beq.n	80066d8 <HAL_I2C_Mem_Write+0x1c8>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006672:	2b00      	cmp	r3, #0
 8006674:	d130      	bne.n	80066d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	9300      	str	r3, [sp, #0]
 800667a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667c:	2200      	movs	r2, #0
 800667e:	2180      	movs	r1, #128	; 0x80
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 fa4d 	bl	8006b20 <I2C_WaitOnFlagUntilTimeout>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d001      	beq.n	8006690 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e04d      	b.n	800672c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006694:	b29b      	uxth	r3, r3
 8006696:	2bff      	cmp	r3, #255	; 0xff
 8006698:	d90e      	bls.n	80066b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	22ff      	movs	r2, #255	; 0xff
 800669e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	8979      	ldrh	r1, [r7, #10]
 80066a8:	2300      	movs	r3, #0
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f000 fbd1 	bl	8006e58 <I2C_TransferConfig>
 80066b6:	e00f      	b.n	80066d8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066bc:	b29a      	uxth	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	8979      	ldrh	r1, [r7, #10]
 80066ca:	2300      	movs	r3, #0
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f000 fbc0 	bl	8006e58 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066dc:	b29b      	uxth	r3, r3
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d19e      	bne.n	8006620 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066e6:	68f8      	ldr	r0, [r7, #12]
 80066e8:	f000 fa9a 	bl	8006c20 <I2C_WaitOnSTOPFlagUntilTimeout>
 80066ec:	4603      	mov	r3, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d001      	beq.n	80066f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e01a      	b.n	800672c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2220      	movs	r2, #32
 80066fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6859      	ldr	r1, [r3, #4]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	4b0a      	ldr	r3, [pc, #40]	; (8006734 <HAL_I2C_Mem_Write+0x224>)
 800670a:	400b      	ands	r3, r1
 800670c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2220      	movs	r2, #32
 8006712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006726:	2300      	movs	r3, #0
 8006728:	e000      	b.n	800672c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800672a:	2302      	movs	r3, #2
  }
}
 800672c:	4618      	mov	r0, r3
 800672e:	3718      	adds	r7, #24
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	fe00e800 	.word	0xfe00e800

08006738 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b088      	sub	sp, #32
 800673c:	af02      	add	r7, sp, #8
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	4608      	mov	r0, r1
 8006742:	4611      	mov	r1, r2
 8006744:	461a      	mov	r2, r3
 8006746:	4603      	mov	r3, r0
 8006748:	817b      	strh	r3, [r7, #10]
 800674a:	460b      	mov	r3, r1
 800674c:	813b      	strh	r3, [r7, #8]
 800674e:	4613      	mov	r3, r2
 8006750:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b20      	cmp	r3, #32
 800675c:	f040 80fd 	bne.w	800695a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d002      	beq.n	800676c <HAL_I2C_Mem_Read+0x34>
 8006766:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006768:	2b00      	cmp	r3, #0
 800676a:	d105      	bne.n	8006778 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006772:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e0f1      	b.n	800695c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800677e:	2b01      	cmp	r3, #1
 8006780:	d101      	bne.n	8006786 <HAL_I2C_Mem_Read+0x4e>
 8006782:	2302      	movs	r3, #2
 8006784:	e0ea      	b.n	800695c <HAL_I2C_Mem_Read+0x224>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800678e:	f7fd fd9d 	bl	80042cc <HAL_GetTick>
 8006792:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	2319      	movs	r3, #25
 800679a:	2201      	movs	r2, #1
 800679c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 f9bd 	bl	8006b20 <I2C_WaitOnFlagUntilTimeout>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e0d5      	b.n	800695c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2222      	movs	r2, #34	; 0x22
 80067b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2240      	movs	r2, #64	; 0x40
 80067bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6a3a      	ldr	r2, [r7, #32]
 80067ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80067d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80067d8:	88f8      	ldrh	r0, [r7, #6]
 80067da:	893a      	ldrh	r2, [r7, #8]
 80067dc:	8979      	ldrh	r1, [r7, #10]
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	9301      	str	r3, [sp, #4]
 80067e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	4603      	mov	r3, r0
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f000 f921 	bl	8006a30 <I2C_RequestMemoryRead>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d005      	beq.n	8006800 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e0ad      	b.n	800695c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006804:	b29b      	uxth	r3, r3
 8006806:	2bff      	cmp	r3, #255	; 0xff
 8006808:	d90e      	bls.n	8006828 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	22ff      	movs	r2, #255	; 0xff
 800680e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006814:	b2da      	uxtb	r2, r3
 8006816:	8979      	ldrh	r1, [r7, #10]
 8006818:	4b52      	ldr	r3, [pc, #328]	; (8006964 <HAL_I2C_Mem_Read+0x22c>)
 800681a:	9300      	str	r3, [sp, #0]
 800681c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f000 fb19 	bl	8006e58 <I2C_TransferConfig>
 8006826:	e00f      	b.n	8006848 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800682c:	b29a      	uxth	r2, r3
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006836:	b2da      	uxtb	r2, r3
 8006838:	8979      	ldrh	r1, [r7, #10]
 800683a:	4b4a      	ldr	r3, [pc, #296]	; (8006964 <HAL_I2C_Mem_Read+0x22c>)
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f000 fb08 	bl	8006e58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684e:	2200      	movs	r2, #0
 8006850:	2104      	movs	r1, #4
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	f000 f964 	bl	8006b20 <I2C_WaitOnFlagUntilTimeout>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d001      	beq.n	8006862 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e07c      	b.n	800695c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686c:	b2d2      	uxtb	r2, r2
 800686e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800687e:	3b01      	subs	r3, #1
 8006880:	b29a      	uxth	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800688a:	b29b      	uxth	r3, r3
 800688c:	3b01      	subs	r3, #1
 800688e:	b29a      	uxth	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006898:	b29b      	uxth	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d034      	beq.n	8006908 <HAL_I2C_Mem_Read+0x1d0>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d130      	bne.n	8006908 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	9300      	str	r3, [sp, #0]
 80068aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ac:	2200      	movs	r2, #0
 80068ae:	2180      	movs	r1, #128	; 0x80
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f000 f935 	bl	8006b20 <I2C_WaitOnFlagUntilTimeout>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d001      	beq.n	80068c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e04d      	b.n	800695c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	2bff      	cmp	r3, #255	; 0xff
 80068c8:	d90e      	bls.n	80068e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	22ff      	movs	r2, #255	; 0xff
 80068ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	8979      	ldrh	r1, [r7, #10]
 80068d8:	2300      	movs	r3, #0
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f000 fab9 	bl	8006e58 <I2C_TransferConfig>
 80068e6:	e00f      	b.n	8006908 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	8979      	ldrh	r1, [r7, #10]
 80068fa:	2300      	movs	r3, #0
 80068fc:	9300      	str	r3, [sp, #0]
 80068fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f000 faa8 	bl	8006e58 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800690c:	b29b      	uxth	r3, r3
 800690e:	2b00      	cmp	r3, #0
 8006910:	d19a      	bne.n	8006848 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006912:	697a      	ldr	r2, [r7, #20]
 8006914:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f000 f982 	bl	8006c20 <I2C_WaitOnSTOPFlagUntilTimeout>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d001      	beq.n	8006926 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e01a      	b.n	800695c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2220      	movs	r2, #32
 800692c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	6859      	ldr	r1, [r3, #4]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	4b0b      	ldr	r3, [pc, #44]	; (8006968 <HAL_I2C_Mem_Read+0x230>)
 800693a:	400b      	ands	r3, r1
 800693c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2220      	movs	r2, #32
 8006942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006956:	2300      	movs	r3, #0
 8006958:	e000      	b.n	800695c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800695a:	2302      	movs	r3, #2
  }
}
 800695c:	4618      	mov	r0, r3
 800695e:	3718      	adds	r7, #24
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	80002400 	.word	0x80002400
 8006968:	fe00e800 	.word	0xfe00e800

0800696c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800697a:	b2db      	uxtb	r3, r3
}
 800697c:	4618      	mov	r0, r3
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af02      	add	r7, sp, #8
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	4608      	mov	r0, r1
 8006992:	4611      	mov	r1, r2
 8006994:	461a      	mov	r2, r3
 8006996:	4603      	mov	r3, r0
 8006998:	817b      	strh	r3, [r7, #10]
 800699a:	460b      	mov	r3, r1
 800699c:	813b      	strh	r3, [r7, #8]
 800699e:	4613      	mov	r3, r2
 80069a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80069a2:	88fb      	ldrh	r3, [r7, #6]
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	8979      	ldrh	r1, [r7, #10]
 80069a8:	4b20      	ldr	r3, [pc, #128]	; (8006a2c <I2C_RequestMemoryWrite+0xa4>)
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f000 fa51 	bl	8006e58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069b6:	69fa      	ldr	r2, [r7, #28]
 80069b8:	69b9      	ldr	r1, [r7, #24]
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 f8f0 	bl	8006ba0 <I2C_WaitOnTXISFlagUntilTimeout>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e02c      	b.n	8006a24 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80069ca:	88fb      	ldrh	r3, [r7, #6]
 80069cc:	2b01      	cmp	r3, #1
 80069ce:	d105      	bne.n	80069dc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80069d0:	893b      	ldrh	r3, [r7, #8]
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	629a      	str	r2, [r3, #40]	; 0x28
 80069da:	e015      	b.n	8006a08 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80069dc:	893b      	ldrh	r3, [r7, #8]
 80069de:	0a1b      	lsrs	r3, r3, #8
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069ea:	69fa      	ldr	r2, [r7, #28]
 80069ec:	69b9      	ldr	r1, [r7, #24]
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f000 f8d6 	bl	8006ba0 <I2C_WaitOnTXISFlagUntilTimeout>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e012      	b.n	8006a24 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80069fe:	893b      	ldrh	r3, [r7, #8]
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	9300      	str	r3, [sp, #0]
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	2180      	movs	r1, #128	; 0x80
 8006a12:	68f8      	ldr	r0, [r7, #12]
 8006a14:	f000 f884 	bl	8006b20 <I2C_WaitOnFlagUntilTimeout>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d001      	beq.n	8006a22 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e000      	b.n	8006a24 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	80002000 	.word	0x80002000

08006a30 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af02      	add	r7, sp, #8
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	4608      	mov	r0, r1
 8006a3a:	4611      	mov	r1, r2
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	4603      	mov	r3, r0
 8006a40:	817b      	strh	r3, [r7, #10]
 8006a42:	460b      	mov	r3, r1
 8006a44:	813b      	strh	r3, [r7, #8]
 8006a46:	4613      	mov	r3, r2
 8006a48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006a4a:	88fb      	ldrh	r3, [r7, #6]
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	8979      	ldrh	r1, [r7, #10]
 8006a50:	4b20      	ldr	r3, [pc, #128]	; (8006ad4 <I2C_RequestMemoryRead+0xa4>)
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	2300      	movs	r3, #0
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f000 f9fe 	bl	8006e58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a5c:	69fa      	ldr	r2, [r7, #28]
 8006a5e:	69b9      	ldr	r1, [r7, #24]
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f000 f89d 	bl	8006ba0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d001      	beq.n	8006a70 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e02c      	b.n	8006aca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a70:	88fb      	ldrh	r3, [r7, #6]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d105      	bne.n	8006a82 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a76:	893b      	ldrh	r3, [r7, #8]
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	629a      	str	r2, [r3, #40]	; 0x28
 8006a80:	e015      	b.n	8006aae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006a82:	893b      	ldrh	r3, [r7, #8]
 8006a84:	0a1b      	lsrs	r3, r3, #8
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a90:	69fa      	ldr	r2, [r7, #28]
 8006a92:	69b9      	ldr	r1, [r7, #24]
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f000 f883 	bl	8006ba0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e012      	b.n	8006aca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006aa4:	893b      	ldrh	r3, [r7, #8]
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	2140      	movs	r1, #64	; 0x40
 8006ab8:	68f8      	ldr	r0, [r7, #12]
 8006aba:	f000 f831 	bl	8006b20 <I2C_WaitOnFlagUntilTimeout>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e000      	b.n	8006aca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	80002000 	.word	0x80002000

08006ad8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	f003 0302 	and.w	r3, r3, #2
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d103      	bne.n	8006af6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2200      	movs	r2, #0
 8006af4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	699b      	ldr	r3, [r3, #24]
 8006afc:	f003 0301 	and.w	r3, r3, #1
 8006b00:	2b01      	cmp	r3, #1
 8006b02:	d007      	beq.n	8006b14 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	699a      	ldr	r2, [r3, #24]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f042 0201 	orr.w	r2, r2, #1
 8006b12:	619a      	str	r2, [r3, #24]
  }
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	603b      	str	r3, [r7, #0]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b30:	e022      	b.n	8006b78 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b38:	d01e      	beq.n	8006b78 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b3a:	f7fd fbc7 	bl	80042cc <HAL_GetTick>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	683a      	ldr	r2, [r7, #0]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d302      	bcc.n	8006b50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d113      	bne.n	8006b78 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b54:	f043 0220 	orr.w	r2, r3, #32
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2220      	movs	r2, #32
 8006b60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e00f      	b.n	8006b98 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	699a      	ldr	r2, [r3, #24]
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	4013      	ands	r3, r2
 8006b82:	68ba      	ldr	r2, [r7, #8]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	bf0c      	ite	eq
 8006b88:	2301      	moveq	r3, #1
 8006b8a:	2300      	movne	r3, #0
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	461a      	mov	r2, r3
 8006b90:	79fb      	ldrb	r3, [r7, #7]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d0cd      	beq.n	8006b32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006bac:	e02c      	b.n	8006c08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	68b9      	ldr	r1, [r7, #8]
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f000 f870 	bl	8006c98 <I2C_IsErrorOccurred>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e02a      	b.n	8006c18 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bc8:	d01e      	beq.n	8006c08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bca:	f7fd fb7f 	bl	80042cc <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d302      	bcc.n	8006be0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d113      	bne.n	8006c08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be4:	f043 0220 	orr.w	r2, r3, #32
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e007      	b.n	8006c18 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d1cb      	bne.n	8006bae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c2c:	e028      	b.n	8006c80 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	68b9      	ldr	r1, [r7, #8]
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f000 f830 	bl	8006c98 <I2C_IsErrorOccurred>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e026      	b.n	8006c90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c42:	f7fd fb43 	bl	80042cc <HAL_GetTick>
 8006c46:	4602      	mov	r2, r0
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d302      	bcc.n	8006c58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d113      	bne.n	8006c80 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c5c:	f043 0220 	orr.w	r2, r3, #32
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2220      	movs	r2, #32
 8006c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e007      	b.n	8006c90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	f003 0320 	and.w	r3, r3, #32
 8006c8a:	2b20      	cmp	r3, #32
 8006c8c:	d1cf      	bne.n	8006c2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b08a      	sub	sp, #40	; 0x28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	f003 0310 	and.w	r3, r3, #16
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d068      	beq.n	8006d96 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2210      	movs	r2, #16
 8006cca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006ccc:	e049      	b.n	8006d62 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cd4:	d045      	beq.n	8006d62 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006cd6:	f7fd faf9 	bl	80042cc <HAL_GetTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d302      	bcc.n	8006cec <I2C_IsErrorOccurred+0x54>
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d13a      	bne.n	8006d62 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cf6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cfe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d0e:	d121      	bne.n	8006d54 <I2C_IsErrorOccurred+0xbc>
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d16:	d01d      	beq.n	8006d54 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006d18:	7cfb      	ldrb	r3, [r7, #19]
 8006d1a:	2b20      	cmp	r3, #32
 8006d1c:	d01a      	beq.n	8006d54 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	685a      	ldr	r2, [r3, #4]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d2c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006d2e:	f7fd facd 	bl	80042cc <HAL_GetTick>
 8006d32:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d34:	e00e      	b.n	8006d54 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006d36:	f7fd fac9 	bl	80042cc <HAL_GetTick>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	2b19      	cmp	r3, #25
 8006d42:	d907      	bls.n	8006d54 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	f043 0320 	orr.w	r3, r3, #32
 8006d4a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006d52:	e006      	b.n	8006d62 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	f003 0320 	and.w	r3, r3, #32
 8006d5e:	2b20      	cmp	r3, #32
 8006d60:	d1e9      	bne.n	8006d36 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	f003 0320 	and.w	r3, r3, #32
 8006d6c:	2b20      	cmp	r3, #32
 8006d6e:	d003      	beq.n	8006d78 <I2C_IsErrorOccurred+0xe0>
 8006d70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d0aa      	beq.n	8006cce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006d78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d103      	bne.n	8006d88 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2220      	movs	r2, #32
 8006d86:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006d88:	6a3b      	ldr	r3, [r7, #32]
 8006d8a:	f043 0304 	orr.w	r3, r3, #4
 8006d8e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d00b      	beq.n	8006dc0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006da8:	6a3b      	ldr	r3, [r7, #32]
 8006daa:	f043 0301 	orr.w	r3, r3, #1
 8006dae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006db8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d00b      	beq.n	8006de2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	f043 0308 	orr.w	r3, r3, #8
 8006dd0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006dda:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00b      	beq.n	8006e04 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	f043 0302 	orr.w	r3, r3, #2
 8006df2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dfc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d01c      	beq.n	8006e46 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f7ff fe63 	bl	8006ad8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6859      	ldr	r1, [r3, #4]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	4b0d      	ldr	r3, [pc, #52]	; (8006e54 <I2C_IsErrorOccurred+0x1bc>)
 8006e1e:	400b      	ands	r3, r1
 8006e20:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e26:	6a3b      	ldr	r3, [r7, #32]
 8006e28:	431a      	orrs	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2220      	movs	r2, #32
 8006e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006e46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3728      	adds	r7, #40	; 0x28
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	fe00e800 	.word	0xfe00e800

08006e58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b087      	sub	sp, #28
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	607b      	str	r3, [r7, #4]
 8006e62:	460b      	mov	r3, r1
 8006e64:	817b      	strh	r3, [r7, #10]
 8006e66:	4613      	mov	r3, r2
 8006e68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e6a:	897b      	ldrh	r3, [r7, #10]
 8006e6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006e70:	7a7b      	ldrb	r3, [r7, #9]
 8006e72:	041b      	lsls	r3, r3, #16
 8006e74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e78:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e86:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	6a3b      	ldr	r3, [r7, #32]
 8006e90:	0d5b      	lsrs	r3, r3, #21
 8006e92:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006e96:	4b08      	ldr	r3, [pc, #32]	; (8006eb8 <I2C_TransferConfig+0x60>)
 8006e98:	430b      	orrs	r3, r1
 8006e9a:	43db      	mvns	r3, r3
 8006e9c:	ea02 0103 	and.w	r1, r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006eaa:	bf00      	nop
 8006eac:	371c      	adds	r7, #28
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	03ff63ff 	.word	0x03ff63ff

08006ebc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d101      	bne.n	8006ece <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e0bf      	b.n	800704e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d106      	bne.n	8006ee8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f7fb f85a 	bl	8001f9c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2202      	movs	r2, #2
 8006eec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	699a      	ldr	r2, [r3, #24]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006efe:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	6999      	ldr	r1, [r3, #24]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006f14:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	430a      	orrs	r2, r1
 8006f22:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6899      	ldr	r1, [r3, #8]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	4b4a      	ldr	r3, [pc, #296]	; (8007058 <HAL_LTDC_Init+0x19c>)
 8006f30:	400b      	ands	r3, r1
 8006f32:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	695b      	ldr	r3, [r3, #20]
 8006f38:	041b      	lsls	r3, r3, #16
 8006f3a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6899      	ldr	r1, [r3, #8]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	699a      	ldr	r2, [r3, #24]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	431a      	orrs	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68d9      	ldr	r1, [r3, #12]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	4b3e      	ldr	r3, [pc, #248]	; (8007058 <HAL_LTDC_Init+0x19c>)
 8006f5e:	400b      	ands	r3, r1
 8006f60:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	041b      	lsls	r3, r3, #16
 8006f68:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68d9      	ldr	r1, [r3, #12]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6a1a      	ldr	r2, [r3, #32]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	431a      	orrs	r2, r3
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6919      	ldr	r1, [r3, #16]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	4b33      	ldr	r3, [pc, #204]	; (8007058 <HAL_LTDC_Init+0x19c>)
 8006f8c:	400b      	ands	r3, r1
 8006f8e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f94:	041b      	lsls	r3, r3, #16
 8006f96:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6919      	ldr	r1, [r3, #16]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	431a      	orrs	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	6959      	ldr	r1, [r3, #20]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	4b27      	ldr	r3, [pc, #156]	; (8007058 <HAL_LTDC_Init+0x19c>)
 8006fba:	400b      	ands	r3, r1
 8006fbc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc2:	041b      	lsls	r3, r3, #16
 8006fc4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6959      	ldr	r1, [r3, #20]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	431a      	orrs	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fe2:	021b      	lsls	r3, r3, #8
 8006fe4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006fec:	041b      	lsls	r3, r3, #16
 8006fee:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	4313      	orrs	r3, r2
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007012:	431a      	orrs	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	430a      	orrs	r2, r1
 800701a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f042 0206 	orr.w	r2, r2, #6
 800702a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	699a      	ldr	r2, [r3, #24]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f042 0201 	orr.w	r2, r2, #1
 800703a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop
 8007058:	f000f800 	.word	0xf000f800

0800705c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007072:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f003 0304 	and.w	r3, r3, #4
 800707a:	2b00      	cmp	r3, #0
 800707c:	d023      	beq.n	80070c6 <HAL_LTDC_IRQHandler+0x6a>
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	f003 0304 	and.w	r3, r3, #4
 8007084:	2b00      	cmp	r3, #0
 8007086:	d01e      	beq.n	80070c6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f022 0204 	bic.w	r2, r2, #4
 8007096:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2204      	movs	r2, #4
 800709e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80070a6:	f043 0201 	orr.w	r2, r3, #1
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2204      	movs	r2, #4
 80070b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f86f 	bl	80071a4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f003 0302 	and.w	r3, r3, #2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d023      	beq.n	8007118 <HAL_LTDC_IRQHandler+0xbc>
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	f003 0302 	and.w	r3, r3, #2
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d01e      	beq.n	8007118 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f022 0202 	bic.w	r2, r2, #2
 80070e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2202      	movs	r2, #2
 80070f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80070f8:	f043 0202 	orr.w	r2, r3, #2
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2204      	movs	r2, #4
 8007106:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f846 	bl	80071a4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	2b00      	cmp	r3, #0
 8007120:	d01b      	beq.n	800715a <HAL_LTDC_IRQHandler+0xfe>
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	2b00      	cmp	r3, #0
 800712a:	d016      	beq.n	800715a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f022 0201 	bic.w	r2, r2, #1
 800713a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2201      	movs	r2, #1
 8007142:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f82f 	bl	80071b8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f003 0308 	and.w	r3, r3, #8
 8007160:	2b00      	cmp	r3, #0
 8007162:	d01b      	beq.n	800719c <HAL_LTDC_IRQHandler+0x140>
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	f003 0308 	and.w	r3, r3, #8
 800716a:	2b00      	cmp	r3, #0
 800716c:	d016      	beq.n	800719c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f022 0208 	bic.w	r2, r2, #8
 800717c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2208      	movs	r2, #8
 8007184:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f818 	bl	80071cc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800719c:	bf00      	nop
 800719e:	3710      	adds	r7, #16
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80071e0:	b5b0      	push	{r4, r5, r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d101      	bne.n	80071fa <HAL_LTDC_ConfigLayer+0x1a>
 80071f6:	2302      	movs	r3, #2
 80071f8:	e02c      	b.n	8007254 <HAL_LTDC_ConfigLayer+0x74>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2202      	movs	r2, #2
 8007206:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2134      	movs	r1, #52	; 0x34
 8007210:	fb01 f303 	mul.w	r3, r1, r3
 8007214:	4413      	add	r3, r2
 8007216:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	4614      	mov	r4, r2
 800721e:	461d      	mov	r5, r3
 8007220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800722a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800722c:	682b      	ldr	r3, [r5, #0]
 800722e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	68b9      	ldr	r1, [r7, #8]
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f000 f811 	bl	800725c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2201      	movs	r2, #1
 8007240:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bdb0      	pop	{r4, r5, r7, pc}

0800725c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800725c:	b480      	push	{r7}
 800725e:	b089      	sub	sp, #36	; 0x24
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	0c1b      	lsrs	r3, r3, #16
 8007274:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007278:	4413      	add	r3, r2
 800727a:	041b      	lsls	r3, r3, #16
 800727c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	461a      	mov	r2, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	01db      	lsls	r3, r3, #7
 8007288:	4413      	add	r3, r2
 800728a:	3384      	adds	r3, #132	; 0x84
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	6812      	ldr	r2, [r2, #0]
 8007292:	4611      	mov	r1, r2
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	01d2      	lsls	r2, r2, #7
 8007298:	440a      	add	r2, r1
 800729a:	3284      	adds	r2, #132	; 0x84
 800729c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80072a0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	0c1b      	lsrs	r3, r3, #16
 80072ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80072b2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80072b4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4619      	mov	r1, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	01db      	lsls	r3, r3, #7
 80072c0:	440b      	add	r3, r1
 80072c2:	3384      	adds	r3, #132	; 0x84
 80072c4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80072ca:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	68da      	ldr	r2, [r3, #12]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072da:	4413      	add	r3, r2
 80072dc:	041b      	lsls	r3, r3, #16
 80072de:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	461a      	mov	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	01db      	lsls	r3, r3, #7
 80072ea:	4413      	add	r3, r2
 80072ec:	3384      	adds	r3, #132	; 0x84
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	6812      	ldr	r2, [r2, #0]
 80072f4:	4611      	mov	r1, r2
 80072f6:	687a      	ldr	r2, [r7, #4]
 80072f8:	01d2      	lsls	r2, r2, #7
 80072fa:	440a      	add	r2, r1
 80072fc:	3284      	adds	r2, #132	; 0x84
 80072fe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007302:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	689a      	ldr	r2, [r3, #8]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007312:	4413      	add	r3, r2
 8007314:	1c5a      	adds	r2, r3, #1
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4619      	mov	r1, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	01db      	lsls	r3, r3, #7
 8007320:	440b      	add	r3, r1
 8007322:	3384      	adds	r3, #132	; 0x84
 8007324:	4619      	mov	r1, r3
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	4313      	orrs	r3, r2
 800732a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	461a      	mov	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	01db      	lsls	r3, r3, #7
 8007336:	4413      	add	r3, r2
 8007338:	3384      	adds	r3, #132	; 0x84
 800733a:	691b      	ldr	r3, [r3, #16]
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	6812      	ldr	r2, [r2, #0]
 8007340:	4611      	mov	r1, r2
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	01d2      	lsls	r2, r2, #7
 8007346:	440a      	add	r2, r1
 8007348:	3284      	adds	r2, #132	; 0x84
 800734a:	f023 0307 	bic.w	r3, r3, #7
 800734e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	461a      	mov	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	01db      	lsls	r3, r3, #7
 800735a:	4413      	add	r3, r2
 800735c:	3384      	adds	r3, #132	; 0x84
 800735e:	461a      	mov	r2, r3
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800736c:	021b      	lsls	r3, r3, #8
 800736e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007376:	041b      	lsls	r3, r3, #16
 8007378:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	061b      	lsls	r3, r3, #24
 8007380:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	461a      	mov	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	01db      	lsls	r3, r3, #7
 800738c:	4413      	add	r3, r2
 800738e:	3384      	adds	r3, #132	; 0x84
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	461a      	mov	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	01db      	lsls	r3, r3, #7
 800739c:	4413      	add	r3, r2
 800739e:	3384      	adds	r3, #132	; 0x84
 80073a0:	461a      	mov	r2, r3
 80073a2:	2300      	movs	r3, #0
 80073a4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80073ac:	461a      	mov	r2, r3
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	431a      	orrs	r2, r3
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	431a      	orrs	r2, r3
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4619      	mov	r1, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	01db      	lsls	r3, r3, #7
 80073c0:	440b      	add	r3, r1
 80073c2:	3384      	adds	r3, #132	; 0x84
 80073c4:	4619      	mov	r1, r3
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	461a      	mov	r2, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	01db      	lsls	r3, r3, #7
 80073d6:	4413      	add	r3, r2
 80073d8:	3384      	adds	r3, #132	; 0x84
 80073da:	695b      	ldr	r3, [r3, #20]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	6812      	ldr	r2, [r2, #0]
 80073e0:	4611      	mov	r1, r2
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	01d2      	lsls	r2, r2, #7
 80073e6:	440a      	add	r2, r1
 80073e8:	3284      	adds	r2, #132	; 0x84
 80073ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80073ee:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	461a      	mov	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	01db      	lsls	r3, r3, #7
 80073fa:	4413      	add	r3, r2
 80073fc:	3384      	adds	r3, #132	; 0x84
 80073fe:	461a      	mov	r2, r3
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	461a      	mov	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	01db      	lsls	r3, r3, #7
 8007410:	4413      	add	r3, r2
 8007412:	3384      	adds	r3, #132	; 0x84
 8007414:	69da      	ldr	r2, [r3, #28]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4619      	mov	r1, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	01db      	lsls	r3, r3, #7
 8007420:	440b      	add	r3, r1
 8007422:	3384      	adds	r3, #132	; 0x84
 8007424:	4619      	mov	r1, r3
 8007426:	4b58      	ldr	r3, [pc, #352]	; (8007588 <LTDC_SetConfig+0x32c>)
 8007428:	4013      	ands	r3, r2
 800742a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	69da      	ldr	r2, [r3, #28]
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	6a1b      	ldr	r3, [r3, #32]
 8007434:	68f9      	ldr	r1, [r7, #12]
 8007436:	6809      	ldr	r1, [r1, #0]
 8007438:	4608      	mov	r0, r1
 800743a:	6879      	ldr	r1, [r7, #4]
 800743c:	01c9      	lsls	r1, r1, #7
 800743e:	4401      	add	r1, r0
 8007440:	3184      	adds	r1, #132	; 0x84
 8007442:	4313      	orrs	r3, r2
 8007444:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	461a      	mov	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	01db      	lsls	r3, r3, #7
 8007450:	4413      	add	r3, r2
 8007452:	3384      	adds	r3, #132	; 0x84
 8007454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	461a      	mov	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	01db      	lsls	r3, r3, #7
 8007460:	4413      	add	r3, r2
 8007462:	3384      	adds	r3, #132	; 0x84
 8007464:	461a      	mov	r2, r3
 8007466:	2300      	movs	r3, #0
 8007468:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	461a      	mov	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	01db      	lsls	r3, r3, #7
 8007474:	4413      	add	r3, r2
 8007476:	3384      	adds	r3, #132	; 0x84
 8007478:	461a      	mov	r2, r3
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800747e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d102      	bne.n	800748e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007488:	2304      	movs	r3, #4
 800748a:	61fb      	str	r3, [r7, #28]
 800748c:	e01b      	b.n	80074c6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d102      	bne.n	800749c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007496:	2303      	movs	r3, #3
 8007498:	61fb      	str	r3, [r7, #28]
 800749a:	e014      	b.n	80074c6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	2b04      	cmp	r3, #4
 80074a2:	d00b      	beq.n	80074bc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d007      	beq.n	80074bc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80074b0:	2b03      	cmp	r3, #3
 80074b2:	d003      	beq.n	80074bc <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80074b8:	2b07      	cmp	r3, #7
 80074ba:	d102      	bne.n	80074c2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80074bc:	2302      	movs	r3, #2
 80074be:	61fb      	str	r3, [r7, #28]
 80074c0:	e001      	b.n	80074c6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80074c2:	2301      	movs	r3, #1
 80074c4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	461a      	mov	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	01db      	lsls	r3, r3, #7
 80074d0:	4413      	add	r3, r2
 80074d2:	3384      	adds	r3, #132	; 0x84
 80074d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	6812      	ldr	r2, [r2, #0]
 80074da:	4611      	mov	r1, r2
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	01d2      	lsls	r2, r2, #7
 80074e0:	440a      	add	r2, r1
 80074e2:	3284      	adds	r2, #132	; 0x84
 80074e4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80074e8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ee:	69fa      	ldr	r2, [r7, #28]
 80074f0:	fb02 f303 	mul.w	r3, r2, r3
 80074f4:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	6859      	ldr	r1, [r3, #4]
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	1acb      	subs	r3, r1, r3
 8007500:	69f9      	ldr	r1, [r7, #28]
 8007502:	fb01 f303 	mul.w	r3, r1, r3
 8007506:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007508:	68f9      	ldr	r1, [r7, #12]
 800750a:	6809      	ldr	r1, [r1, #0]
 800750c:	4608      	mov	r0, r1
 800750e:	6879      	ldr	r1, [r7, #4]
 8007510:	01c9      	lsls	r1, r1, #7
 8007512:	4401      	add	r1, r0
 8007514:	3184      	adds	r1, #132	; 0x84
 8007516:	4313      	orrs	r3, r2
 8007518:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	01db      	lsls	r3, r3, #7
 8007524:	4413      	add	r3, r2
 8007526:	3384      	adds	r3, #132	; 0x84
 8007528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4619      	mov	r1, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	01db      	lsls	r3, r3, #7
 8007534:	440b      	add	r3, r1
 8007536:	3384      	adds	r3, #132	; 0x84
 8007538:	4619      	mov	r1, r3
 800753a:	4b14      	ldr	r3, [pc, #80]	; (800758c <LTDC_SetConfig+0x330>)
 800753c:	4013      	ands	r3, r2
 800753e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	461a      	mov	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	01db      	lsls	r3, r3, #7
 800754a:	4413      	add	r3, r2
 800754c:	3384      	adds	r3, #132	; 0x84
 800754e:	461a      	mov	r2, r3
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007554:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	461a      	mov	r2, r3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	01db      	lsls	r3, r3, #7
 8007560:	4413      	add	r3, r2
 8007562:	3384      	adds	r3, #132	; 0x84
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	6812      	ldr	r2, [r2, #0]
 800756a:	4611      	mov	r1, r2
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	01d2      	lsls	r2, r2, #7
 8007570:	440a      	add	r2, r1
 8007572:	3284      	adds	r2, #132	; 0x84
 8007574:	f043 0301 	orr.w	r3, r3, #1
 8007578:	6013      	str	r3, [r2, #0]
}
 800757a:	bf00      	nop
 800757c:	3724      	adds	r7, #36	; 0x24
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	fffff8f8 	.word	0xfffff8f8
 800758c:	fffff800 	.word	0xfffff800

08007590 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                            DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 80075a2:	2200      	movs	r2, #0
 80075a4:	e001      	b.n	80075aa <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 80075a6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	6a1b      	ldr	r3, [r3, #32]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d102      	bne.n	80075bc <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 80075b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80075ba:	e000      	b.n	80075be <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 80075bc:	2200      	movs	r2, #0
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	69db      	ldr	r3, [r3, #28]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d102      	bne.n	80075d0 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 80075ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80075ce:	e000      	b.n	80075d2 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 80075d0:	2200      	movs	r2, #0
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075da:	1e5a      	subs	r2, r3, #1
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e8:	4413      	add	r3, r2
 80075ea:	1e5a      	subs	r2, r3, #1
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f8:	441a      	add	r2, r3
                                   VidCfg->VerticalActive - 1U;
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80075fe:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 8007600:	1e5a      	subs	r2, r3, #1
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760e:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8007614:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800761a:	4413      	add	r3, r2
 800761c:	1e5a      	subs	r2, r3, #1
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007630:	b590      	push	{r4, r7, lr}
 8007632:	b08d      	sub	sp, #52	; 0x34
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800763e:	6a3b      	ldr	r3, [r7, #32]
 8007640:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4618      	mov	r0, r3
 8007648:	f003 f800 	bl	800a64c <USB_GetMode>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	f040 84b7 	bne.w	8007fc2 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4618      	mov	r0, r3
 800765a:	f002 ff64 	bl	800a526 <USB_ReadInterrupts>
 800765e:	4603      	mov	r3, r0
 8007660:	2b00      	cmp	r3, #0
 8007662:	f000 84ad 	beq.w	8007fc0 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	0a1b      	lsrs	r3, r3, #8
 8007670:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4618      	mov	r0, r3
 8007680:	f002 ff51 	bl	800a526 <USB_ReadInterrupts>
 8007684:	4603      	mov	r3, r0
 8007686:	f003 0302 	and.w	r3, r3, #2
 800768a:	2b02      	cmp	r3, #2
 800768c:	d107      	bne.n	800769e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	695a      	ldr	r2, [r3, #20]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f002 0202 	and.w	r2, r2, #2
 800769c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f002 ff3f 	bl	800a526 <USB_ReadInterrupts>
 80076a8:	4603      	mov	r3, r0
 80076aa:	f003 0310 	and.w	r3, r3, #16
 80076ae:	2b10      	cmp	r3, #16
 80076b0:	d161      	bne.n	8007776 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	699a      	ldr	r2, [r3, #24]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f022 0210 	bic.w	r2, r2, #16
 80076c0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80076c2:	6a3b      	ldr	r3, [r7, #32]
 80076c4:	6a1b      	ldr	r3, [r3, #32]
 80076c6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	f003 020f 	and.w	r2, r3, #15
 80076ce:	4613      	mov	r3, r2
 80076d0:	00db      	lsls	r3, r3, #3
 80076d2:	4413      	add	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	4413      	add	r3, r2
 80076de:	3304      	adds	r3, #4
 80076e0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	0c5b      	lsrs	r3, r3, #17
 80076e6:	f003 030f 	and.w	r3, r3, #15
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d124      	bne.n	8007738 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80076ee:	69ba      	ldr	r2, [r7, #24]
 80076f0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80076f4:	4013      	ands	r3, r2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d035      	beq.n	8007766 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	091b      	lsrs	r3, r3, #4
 8007702:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007704:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007708:	b29b      	uxth	r3, r3
 800770a:	461a      	mov	r2, r3
 800770c:	6a38      	ldr	r0, [r7, #32]
 800770e:	f002 feb2 	bl	800a476 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	691a      	ldr	r2, [r3, #16]
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	091b      	lsrs	r3, r3, #4
 800771a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800771e:	441a      	add	r2, r3
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	6a1a      	ldr	r2, [r3, #32]
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	091b      	lsrs	r3, r3, #4
 800772c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007730:	441a      	add	r2, r3
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	621a      	str	r2, [r3, #32]
 8007736:	e016      	b.n	8007766 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	0c5b      	lsrs	r3, r3, #17
 800773c:	f003 030f 	and.w	r3, r3, #15
 8007740:	2b06      	cmp	r3, #6
 8007742:	d110      	bne.n	8007766 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800774a:	2208      	movs	r2, #8
 800774c:	4619      	mov	r1, r3
 800774e:	6a38      	ldr	r0, [r7, #32]
 8007750:	f002 fe91 	bl	800a476 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	6a1a      	ldr	r2, [r3, #32]
 8007758:	69bb      	ldr	r3, [r7, #24]
 800775a:	091b      	lsrs	r3, r3, #4
 800775c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007760:	441a      	add	r2, r3
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	699a      	ldr	r2, [r3, #24]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f042 0210 	orr.w	r2, r2, #16
 8007774:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4618      	mov	r0, r3
 800777c:	f002 fed3 	bl	800a526 <USB_ReadInterrupts>
 8007780:	4603      	mov	r3, r0
 8007782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007786:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800778a:	f040 80a7 	bne.w	80078dc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800778e:	2300      	movs	r3, #0
 8007790:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4618      	mov	r0, r3
 8007798:	f002 fed8 	bl	800a54c <USB_ReadDevAllOutEpInterrupt>
 800779c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800779e:	e099      	b.n	80078d4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80077a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	f000 808e 	beq.w	80078c8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077b2:	b2d2      	uxtb	r2, r2
 80077b4:	4611      	mov	r1, r2
 80077b6:	4618      	mov	r0, r3
 80077b8:	f002 fefc 	bl	800a5b4 <USB_ReadDevOutEPInterrupt>
 80077bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	f003 0301 	and.w	r3, r3, #1
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00c      	beq.n	80077e2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80077c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ca:	015a      	lsls	r2, r3, #5
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	4413      	add	r3, r2
 80077d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d4:	461a      	mov	r2, r3
 80077d6:	2301      	movs	r3, #1
 80077d8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80077da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fd27 	bl	8008230 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	f003 0308 	and.w	r3, r3, #8
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00c      	beq.n	8007806 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80077ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ee:	015a      	lsls	r2, r3, #5
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	4413      	add	r3, r2
 80077f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f8:	461a      	mov	r2, r3
 80077fa:	2308      	movs	r3, #8
 80077fc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80077fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 fdfd 	bl	8008400 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	f003 0310 	and.w	r3, r3, #16
 800780c:	2b00      	cmp	r3, #0
 800780e:	d008      	beq.n	8007822 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	4413      	add	r3, r2
 8007818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800781c:	461a      	mov	r2, r3
 800781e:	2310      	movs	r3, #16
 8007820:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	f003 0302 	and.w	r3, r3, #2
 8007828:	2b00      	cmp	r3, #0
 800782a:	d030      	beq.n	800788e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	695b      	ldr	r3, [r3, #20]
 8007830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007834:	2b80      	cmp	r3, #128	; 0x80
 8007836:	d109      	bne.n	800784c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	69fa      	ldr	r2, [r7, #28]
 8007842:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007846:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800784a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800784c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800784e:	4613      	mov	r3, r2
 8007850:	00db      	lsls	r3, r3, #3
 8007852:	4413      	add	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	4413      	add	r3, r2
 800785e:	3304      	adds	r3, #4
 8007860:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	78db      	ldrb	r3, [r3, #3]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d108      	bne.n	800787c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	2200      	movs	r2, #0
 800786e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007872:	b2db      	uxtb	r3, r3
 8007874:	4619      	mov	r1, r3
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fbf0 	bl	800805c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800787c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787e:	015a      	lsls	r2, r3, #5
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	4413      	add	r3, r2
 8007884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007888:	461a      	mov	r2, r3
 800788a:	2302      	movs	r3, #2
 800788c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	f003 0320 	and.w	r3, r3, #32
 8007894:	2b00      	cmp	r3, #0
 8007896:	d008      	beq.n	80078aa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	015a      	lsls	r2, r3, #5
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	4413      	add	r3, r2
 80078a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a4:	461a      	mov	r2, r3
 80078a6:	2320      	movs	r3, #32
 80078a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d009      	beq.n	80078c8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80078b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b6:	015a      	lsls	r2, r3, #5
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	4413      	add	r3, r2
 80078bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c0:	461a      	mov	r2, r3
 80078c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80078c6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80078c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ca:	3301      	adds	r3, #1
 80078cc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80078ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d0:	085b      	lsrs	r3, r3, #1
 80078d2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f47f af62 	bne.w	80077a0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f002 fe20 	bl	800a526 <USB_ReadInterrupts>
 80078e6:	4603      	mov	r3, r0
 80078e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80078f0:	f040 80db 	bne.w	8007aaa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4618      	mov	r0, r3
 80078fa:	f002 fe41 	bl	800a580 <USB_ReadDevAllInEpInterrupt>
 80078fe:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007900:	2300      	movs	r3, #0
 8007902:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007904:	e0cd      	b.n	8007aa2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007908:	f003 0301 	and.w	r3, r3, #1
 800790c:	2b00      	cmp	r3, #0
 800790e:	f000 80c2 	beq.w	8007a96 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007918:	b2d2      	uxtb	r2, r2
 800791a:	4611      	mov	r1, r2
 800791c:	4618      	mov	r0, r3
 800791e:	f002 fe67 	bl	800a5f0 <USB_ReadDevInEPInterrupt>
 8007922:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	f003 0301 	and.w	r3, r3, #1
 800792a:	2b00      	cmp	r3, #0
 800792c:	d057      	beq.n	80079de <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007930:	f003 030f 	and.w	r3, r3, #15
 8007934:	2201      	movs	r2, #1
 8007936:	fa02 f303 	lsl.w	r3, r2, r3
 800793a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	43db      	mvns	r3, r3
 8007948:	69f9      	ldr	r1, [r7, #28]
 800794a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800794e:	4013      	ands	r3, r2
 8007950:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	015a      	lsls	r2, r3, #5
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	4413      	add	r3, r2
 800795a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800795e:	461a      	mov	r2, r3
 8007960:	2301      	movs	r3, #1
 8007962:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d132      	bne.n	80079d2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800796c:	6879      	ldr	r1, [r7, #4]
 800796e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007970:	4613      	mov	r3, r2
 8007972:	00db      	lsls	r3, r3, #3
 8007974:	4413      	add	r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	440b      	add	r3, r1
 800797a:	334c      	adds	r3, #76	; 0x4c
 800797c:	6819      	ldr	r1, [r3, #0]
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007982:	4613      	mov	r3, r2
 8007984:	00db      	lsls	r3, r3, #3
 8007986:	4413      	add	r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4403      	add	r3, r0
 800798c:	3348      	adds	r3, #72	; 0x48
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4419      	add	r1, r3
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007996:	4613      	mov	r3, r2
 8007998:	00db      	lsls	r3, r3, #3
 800799a:	4413      	add	r3, r2
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	4403      	add	r3, r0
 80079a0:	334c      	adds	r3, #76	; 0x4c
 80079a2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80079a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d113      	bne.n	80079d2 <HAL_PCD_IRQHandler+0x3a2>
 80079aa:	6879      	ldr	r1, [r7, #4]
 80079ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ae:	4613      	mov	r3, r2
 80079b0:	00db      	lsls	r3, r3, #3
 80079b2:	4413      	add	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	440b      	add	r3, r1
 80079b8:	3354      	adds	r3, #84	; 0x54
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d108      	bne.n	80079d2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6818      	ldr	r0, [r3, #0]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80079ca:	461a      	mov	r2, r3
 80079cc:	2101      	movs	r1, #1
 80079ce:	f002 fe6f 	bl	800a6b0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	4619      	mov	r1, r3
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 fb01 	bl	8007fe0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	f003 0308 	and.w	r3, r3, #8
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d008      	beq.n	80079fa <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80079e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ea:	015a      	lsls	r2, r3, #5
 80079ec:	69fb      	ldr	r3, [r7, #28]
 80079ee:	4413      	add	r3, r2
 80079f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079f4:	461a      	mov	r2, r3
 80079f6:	2308      	movs	r3, #8
 80079f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	f003 0310 	and.w	r3, r3, #16
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d008      	beq.n	8007a16 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a06:	015a      	lsls	r2, r3, #5
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a10:	461a      	mov	r2, r3
 8007a12:	2310      	movs	r3, #16
 8007a14:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d008      	beq.n	8007a32 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	015a      	lsls	r2, r3, #5
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	4413      	add	r3, r2
 8007a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	2340      	movs	r3, #64	; 0x40
 8007a30:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	f003 0302 	and.w	r3, r3, #2
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d023      	beq.n	8007a84 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007a3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a3e:	6a38      	ldr	r0, [r7, #32]
 8007a40:	f002 fbd8 	bl	800a1f4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a46:	4613      	mov	r3, r2
 8007a48:	00db      	lsls	r3, r3, #3
 8007a4a:	4413      	add	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	3338      	adds	r3, #56	; 0x38
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	4413      	add	r3, r2
 8007a54:	3304      	adds	r3, #4
 8007a56:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	78db      	ldrb	r3, [r3, #3]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d108      	bne.n	8007a72 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	2200      	movs	r2, #0
 8007a64:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fb01 	bl	8008074 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a74:	015a      	lsls	r2, r3, #5
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	4413      	add	r3, r2
 8007a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a7e:	461a      	mov	r2, r3
 8007a80:	2302      	movs	r3, #2
 8007a82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007a8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fb40 	bl	8008116 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a98:	3301      	adds	r3, #1
 8007a9a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9e:	085b      	lsrs	r3, r3, #1
 8007aa0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f47f af2e 	bne.w	8007906 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f002 fd39 	bl	800a526 <USB_ReadInterrupts>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007aba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007abe:	d122      	bne.n	8007b06 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	69fa      	ldr	r2, [r7, #28]
 8007aca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ace:	f023 0301 	bic.w	r3, r3, #1
 8007ad2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d108      	bne.n	8007af0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fccf 	bl	800848c <HAL_PCDEx_LPM_Callback>
 8007aee:	e002      	b.n	8007af6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 faa9 	bl	8008048 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	695a      	ldr	r2, [r3, #20]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007b04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f002 fd0b 	bl	800a526 <USB_ReadInterrupts>
 8007b10:	4603      	mov	r3, r0
 8007b12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b1a:	d112      	bne.n	8007b42 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007b1c:	69fb      	ldr	r3, [r7, #28]
 8007b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	f003 0301 	and.w	r3, r3, #1
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d102      	bne.n	8007b32 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 fa81 	bl	8008034 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	695a      	ldr	r2, [r3, #20]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007b40:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4618      	mov	r0, r3
 8007b48:	f002 fced 	bl	800a526 <USB_ReadInterrupts>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b56:	d121      	bne.n	8007b9c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	695a      	ldr	r2, [r3, #20]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8007b66:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d111      	bne.n	8007b96 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b80:	089b      	lsrs	r3, r3, #2
 8007b82:	f003 020f 	and.w	r2, r3, #15
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007b8c:	2101      	movs	r1, #1
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 fc7c 	bl	800848c <HAL_PCDEx_LPM_Callback>
 8007b94:	e002      	b.n	8007b9c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 fa4c 	bl	8008034 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f002 fcc0 	bl	800a526 <USB_ReadInterrupts>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bb0:	f040 80b7 	bne.w	8007d22 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	69fa      	ldr	r2, [r7, #28]
 8007bbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bc2:	f023 0301 	bic.w	r3, r3, #1
 8007bc6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2110      	movs	r1, #16
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f002 fb10 	bl	800a1f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007bd8:	e046      	b.n	8007c68 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bdc:	015a      	lsls	r2, r3, #5
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	4413      	add	r3, r2
 8007be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007be6:	461a      	mov	r2, r3
 8007be8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007bec:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf0:	015a      	lsls	r2, r3, #5
 8007bf2:	69fb      	ldr	r3, [r7, #28]
 8007bf4:	4413      	add	r3, r2
 8007bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bfe:	0151      	lsls	r1, r2, #5
 8007c00:	69fa      	ldr	r2, [r7, #28]
 8007c02:	440a      	add	r2, r1
 8007c04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c0c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c10:	015a      	lsls	r2, r3, #5
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	4413      	add	r3, r2
 8007c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007c20:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c24:	015a      	lsls	r2, r3, #5
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	4413      	add	r3, r2
 8007c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c32:	0151      	lsls	r1, r2, #5
 8007c34:	69fa      	ldr	r2, [r7, #28]
 8007c36:	440a      	add	r2, r1
 8007c38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c40:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c44:	015a      	lsls	r2, r3, #5
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	4413      	add	r3, r2
 8007c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c52:	0151      	lsls	r1, r2, #5
 8007c54:	69fa      	ldr	r2, [r7, #28]
 8007c56:	440a      	add	r2, r1
 8007c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007c60:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c64:	3301      	adds	r3, #1
 8007c66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d3b3      	bcc.n	8007bda <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c78:	69db      	ldr	r3, [r3, #28]
 8007c7a:	69fa      	ldr	r2, [r7, #28]
 8007c7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c80:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007c84:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d016      	beq.n	8007cbc <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c98:	69fa      	ldr	r2, [r7, #28]
 8007c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c9e:	f043 030b 	orr.w	r3, r3, #11
 8007ca2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cae:	69fa      	ldr	r2, [r7, #28]
 8007cb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cb4:	f043 030b 	orr.w	r3, r3, #11
 8007cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8007cba:	e015      	b.n	8007ce8 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cc2:	695a      	ldr	r2, [r3, #20]
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cca:	4619      	mov	r1, r3
 8007ccc:	f242 032b 	movw	r3, #8235	; 0x202b
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	69fa      	ldr	r2, [r7, #28]
 8007cde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ce2:	f043 030b 	orr.w	r3, r3, #11
 8007ce6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	69fa      	ldr	r2, [r7, #28]
 8007cf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cf6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007cfa:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6818      	ldr	r0, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	f002 fccf 	bl	800a6b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	695a      	ldr	r2, [r3, #20]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007d20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4618      	mov	r0, r3
 8007d28:	f002 fbfd 	bl	800a526 <USB_ReadInterrupts>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d36:	d124      	bne.n	8007d82 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f002 fc93 	bl	800a668 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4618      	mov	r0, r3
 8007d48:	f002 fa88 	bl	800a25c <USB_GetDevSpeed>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	461a      	mov	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681c      	ldr	r4, [r3, #0]
 8007d58:	f001 f8c8 	bl	8008eec <HAL_RCC_GetHCLKFreq>
 8007d5c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	461a      	mov	r2, r3
 8007d66:	4620      	mov	r0, r4
 8007d68:	f002 f9a2 	bl	800a0b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f957 	bl	8008020 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	695a      	ldr	r2, [r3, #20]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007d80:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f002 fbcd 	bl	800a526 <USB_ReadInterrupts>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	f003 0308 	and.w	r3, r3, #8
 8007d92:	2b08      	cmp	r3, #8
 8007d94:	d10a      	bne.n	8007dac <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f000 f938 	bl	800800c <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	695a      	ldr	r2, [r3, #20]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f002 0208 	and.w	r2, r2, #8
 8007daa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f002 fbb8 	bl	800a526 <USB_ReadInterrupts>
 8007db6:	4603      	mov	r3, r0
 8007db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dbc:	2b80      	cmp	r3, #128	; 0x80
 8007dbe:	d122      	bne.n	8007e06 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007dc0:	6a3b      	ldr	r3, [r7, #32]
 8007dc2:	699b      	ldr	r3, [r3, #24]
 8007dc4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007dc8:	6a3b      	ldr	r3, [r7, #32]
 8007dca:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007dcc:	2301      	movs	r3, #1
 8007dce:	627b      	str	r3, [r7, #36]	; 0x24
 8007dd0:	e014      	b.n	8007dfc <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007dd2:	6879      	ldr	r1, [r7, #4]
 8007dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dd6:	4613      	mov	r3, r2
 8007dd8:	00db      	lsls	r3, r3, #3
 8007dda:	4413      	add	r3, r2
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	440b      	add	r3, r1
 8007de0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d105      	bne.n	8007df6 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	4619      	mov	r1, r3
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f95f 	bl	80080b4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df8:	3301      	adds	r3, #1
 8007dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d3e5      	bcc.n	8007dd2 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f002 fb8b 	bl	800a526 <USB_ReadInterrupts>
 8007e10:	4603      	mov	r3, r0
 8007e12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e1a:	d13b      	bne.n	8007e94 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8007e20:	e02b      	b.n	8007e7a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e24:	015a      	lsls	r2, r3, #5
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	4413      	add	r3, r2
 8007e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007e32:	6879      	ldr	r1, [r7, #4]
 8007e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e36:	4613      	mov	r3, r2
 8007e38:	00db      	lsls	r3, r3, #3
 8007e3a:	4413      	add	r3, r2
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	440b      	add	r3, r1
 8007e40:	3340      	adds	r3, #64	; 0x40
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d115      	bne.n	8007e74 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007e48:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	da12      	bge.n	8007e74 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007e4e:	6879      	ldr	r1, [r7, #4]
 8007e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e52:	4613      	mov	r3, r2
 8007e54:	00db      	lsls	r3, r3, #3
 8007e56:	4413      	add	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	440b      	add	r3, r1
 8007e5c:	333f      	adds	r3, #63	; 0x3f
 8007e5e:	2201      	movs	r2, #1
 8007e60:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f920 	bl	80080b4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e76:	3301      	adds	r3, #1
 8007e78:	627b      	str	r3, [r7, #36]	; 0x24
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d3ce      	bcc.n	8007e22 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	695a      	ldr	r2, [r3, #20]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007e92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f002 fb44 	bl	800a526 <USB_ReadInterrupts>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ea4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ea8:	d155      	bne.n	8007f56 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007eaa:	2301      	movs	r3, #1
 8007eac:	627b      	str	r3, [r7, #36]	; 0x24
 8007eae:	e045      	b.n	8007f3c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb2:	015a      	lsls	r2, r3, #5
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007ec0:	6879      	ldr	r1, [r7, #4]
 8007ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	00db      	lsls	r3, r3, #3
 8007ec8:	4413      	add	r3, r2
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	440b      	add	r3, r1
 8007ece:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d12e      	bne.n	8007f36 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007ed8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	da2b      	bge.n	8007f36 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8007eea:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d121      	bne.n	8007f36 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007ef2:	6879      	ldr	r1, [r7, #4]
 8007ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	00db      	lsls	r3, r3, #3
 8007efa:	4413      	add	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	440b      	add	r3, r1
 8007f00:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007f04:	2201      	movs	r2, #1
 8007f06:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	699b      	ldr	r3, [r3, #24]
 8007f0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007f14:	6a3b      	ldr	r3, [r7, #32]
 8007f16:	695b      	ldr	r3, [r3, #20]
 8007f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10a      	bne.n	8007f36 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	69fa      	ldr	r2, [r7, #28]
 8007f2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007f32:	6053      	str	r3, [r2, #4]
            break;
 8007f34:	e007      	b.n	8007f46 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f38:	3301      	adds	r3, #1
 8007f3a:	627b      	str	r3, [r7, #36]	; 0x24
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d3b4      	bcc.n	8007eb0 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	695a      	ldr	r2, [r3, #20]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007f54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f002 fae3 	bl	800a526 <USB_ReadInterrupts>
 8007f60:	4603      	mov	r3, r0
 8007f62:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f6a:	d10a      	bne.n	8007f82 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f88d 	bl	800808c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	695a      	ldr	r2, [r3, #20]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007f80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4618      	mov	r0, r3
 8007f88:	f002 facd 	bl	800a526 <USB_ReadInterrupts>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	f003 0304 	and.w	r3, r3, #4
 8007f92:	2b04      	cmp	r3, #4
 8007f94:	d115      	bne.n	8007fc2 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	f003 0304 	and.w	r3, r3, #4
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d002      	beq.n	8007fae <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 f879 	bl	80080a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	6859      	ldr	r1, [r3, #4]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	69ba      	ldr	r2, [r7, #24]
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	605a      	str	r2, [r3, #4]
 8007fbe:	e000      	b.n	8007fc2 <HAL_PCD_IRQHandler+0x992>
      return;
 8007fc0:	bf00      	nop
    }
  }
}
 8007fc2:	3734      	adds	r7, #52	; 0x34
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd90      	pop	{r4, r7, pc}

08007fc8 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8007fd4:	bf00      	nop
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	460b      	mov	r3, r1
 8007fea:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8007fec:	bf00      	nop
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr

08008020 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8008020:	b480      	push	{r7}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8008028:	bf00      	nop
 800802a:	370c      	adds	r7, #12
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8008034:	b480      	push	{r7}
 8008036:	b083      	sub	sp, #12
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800803c:	bf00      	nop
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr

08008048 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	460b      	mov	r3, r1
 8008066:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8008068:	bf00      	nop
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	460b      	mov	r3, r1
 800807e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8008094:	bf00      	nop
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 80080a8:	bf00      	nop
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	460b      	mov	r3, r1
 80080be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80080c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	da0c      	bge.n	80080e2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80080c8:	78fb      	ldrb	r3, [r7, #3]
 80080ca:	f003 020f 	and.w	r2, r3, #15
 80080ce:	4613      	mov	r3, r2
 80080d0:	00db      	lsls	r3, r3, #3
 80080d2:	4413      	add	r3, r2
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	3338      	adds	r3, #56	; 0x38
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	4413      	add	r3, r2
 80080dc:	3304      	adds	r3, #4
 80080de:	60fb      	str	r3, [r7, #12]
 80080e0:	e00c      	b.n	80080fc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80080e2:	78fb      	ldrb	r3, [r7, #3]
 80080e4:	f003 020f 	and.w	r2, r3, #15
 80080e8:	4613      	mov	r3, r2
 80080ea:	00db      	lsls	r3, r3, #3
 80080ec:	4413      	add	r3, r2
 80080ee:	009b      	lsls	r3, r3, #2
 80080f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	4413      	add	r3, r2
 80080f8:	3304      	adds	r3, #4
 80080fa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68f9      	ldr	r1, [r7, #12]
 8008102:	4618      	mov	r0, r3
 8008104:	f002 f8cf 	bl	800a2a6 <USB_EPStopXfer>
 8008108:	4603      	mov	r3, r0
 800810a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800810c:	7afb      	ldrb	r3, [r7, #11]
}
 800810e:	4618      	mov	r0, r3
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b08a      	sub	sp, #40	; 0x28
 800811a:	af02      	add	r7, sp, #8
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	4613      	mov	r3, r2
 800812e:	00db      	lsls	r3, r3, #3
 8008130:	4413      	add	r3, r2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	3338      	adds	r3, #56	; 0x38
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	4413      	add	r3, r2
 800813a:	3304      	adds	r3, #4
 800813c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6a1a      	ldr	r2, [r3, #32]
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	699b      	ldr	r3, [r3, #24]
 8008146:	429a      	cmp	r2, r3
 8008148:	d901      	bls.n	800814e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	e06c      	b.n	8008228 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	699a      	ldr	r2, [r3, #24]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6a1b      	ldr	r3, [r3, #32]
 8008156:	1ad3      	subs	r3, r2, r3
 8008158:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	69fa      	ldr	r2, [r7, #28]
 8008160:	429a      	cmp	r2, r3
 8008162:	d902      	bls.n	800816a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	3303      	adds	r3, #3
 800816e:	089b      	lsrs	r3, r3, #2
 8008170:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008172:	e02b      	b.n	80081cc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	699a      	ldr	r2, [r3, #24]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6a1b      	ldr	r3, [r3, #32]
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	69fa      	ldr	r2, [r7, #28]
 8008186:	429a      	cmp	r2, r3
 8008188:	d902      	bls.n	8008190 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	3303      	adds	r3, #3
 8008194:	089b      	lsrs	r3, r3, #2
 8008196:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6919      	ldr	r1, [r3, #16]
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	b2da      	uxtb	r2, r3
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	4603      	mov	r3, r0
 80081ae:	6978      	ldr	r0, [r7, #20]
 80081b0:	f002 f923 	bl	800a3fa <USB_WritePacket>

    ep->xfer_buff  += len;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	691a      	ldr	r2, [r3, #16]
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	441a      	add	r2, r3
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6a1a      	ldr	r2, [r3, #32]
 80081c4:	69fb      	ldr	r3, [r7, #28]
 80081c6:	441a      	add	r2, r3
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	015a      	lsls	r2, r3, #5
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	4413      	add	r3, r2
 80081d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	b29b      	uxth	r3, r3
 80081dc:	69ba      	ldr	r2, [r7, #24]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d809      	bhi.n	80081f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	6a1a      	ldr	r2, [r3, #32]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d203      	bcs.n	80081f6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1be      	bne.n	8008174 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	699a      	ldr	r2, [r3, #24]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6a1b      	ldr	r3, [r3, #32]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d811      	bhi.n	8008226 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	f003 030f 	and.w	r3, r3, #15
 8008208:	2201      	movs	r2, #1
 800820a:	fa02 f303 	lsl.w	r3, r2, r3
 800820e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	43db      	mvns	r3, r3
 800821c:	6939      	ldr	r1, [r7, #16]
 800821e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008222:	4013      	ands	r3, r2
 8008224:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3720      	adds	r7, #32
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b088      	sub	sp, #32
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	333c      	adds	r3, #60	; 0x3c
 8008248:	3304      	adds	r3, #4
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	015a      	lsls	r2, r3, #5
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	4413      	add	r3, r2
 8008256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	2b01      	cmp	r3, #1
 8008264:	d17b      	bne.n	800835e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008266:	693b      	ldr	r3, [r7, #16]
 8008268:	f003 0308 	and.w	r3, r3, #8
 800826c:	2b00      	cmp	r3, #0
 800826e:	d015      	beq.n	800829c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	4a61      	ldr	r2, [pc, #388]	; (80083f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008274:	4293      	cmp	r3, r2
 8008276:	f240 80b9 	bls.w	80083ec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008280:	2b00      	cmp	r3, #0
 8008282:	f000 80b3 	beq.w	80083ec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	015a      	lsls	r2, r3, #5
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	4413      	add	r3, r2
 800828e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008292:	461a      	mov	r2, r3
 8008294:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008298:	6093      	str	r3, [r2, #8]
 800829a:	e0a7      	b.n	80083ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	f003 0320 	and.w	r3, r3, #32
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d009      	beq.n	80082ba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	015a      	lsls	r2, r3, #5
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	4413      	add	r3, r2
 80082ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b2:	461a      	mov	r2, r3
 80082b4:	2320      	movs	r3, #32
 80082b6:	6093      	str	r3, [r2, #8]
 80082b8:	e098      	b.n	80083ec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f040 8093 	bne.w	80083ec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	4a4b      	ldr	r2, [pc, #300]	; (80083f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d90f      	bls.n	80082ee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d00a      	beq.n	80082ee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	015a      	lsls	r2, r3, #5
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	4413      	add	r3, r2
 80082e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e4:	461a      	mov	r2, r3
 80082e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082ea:	6093      	str	r3, [r2, #8]
 80082ec:	e07e      	b.n	80083ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80082ee:	683a      	ldr	r2, [r7, #0]
 80082f0:	4613      	mov	r3, r2
 80082f2:	00db      	lsls	r3, r3, #3
 80082f4:	4413      	add	r3, r2
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	4413      	add	r3, r2
 8008300:	3304      	adds	r3, #4
 8008302:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	69da      	ldr	r2, [r3, #28]
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	0159      	lsls	r1, r3, #5
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	440b      	add	r3, r1
 8008310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800831a:	1ad2      	subs	r2, r2, r3
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d114      	bne.n	8008350 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	699b      	ldr	r3, [r3, #24]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d109      	bne.n	8008342 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6818      	ldr	r0, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008338:	461a      	mov	r2, r3
 800833a:	2101      	movs	r1, #1
 800833c:	f002 f9b8 	bl	800a6b0 <USB_EP0_OutStart>
 8008340:	e006      	b.n	8008350 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	691a      	ldr	r2, [r3, #16]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6a1b      	ldr	r3, [r3, #32]
 800834a:	441a      	add	r2, r3
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	b2db      	uxtb	r3, r3
 8008354:	4619      	mov	r1, r3
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f7ff fe36 	bl	8007fc8 <HAL_PCD_DataOutStageCallback>
 800835c:	e046      	b.n	80083ec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	4a26      	ldr	r2, [pc, #152]	; (80083fc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d124      	bne.n	80083b0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00a      	beq.n	8008386 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	015a      	lsls	r2, r3, #5
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	4413      	add	r3, r2
 8008378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800837c:	461a      	mov	r2, r3
 800837e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008382:	6093      	str	r3, [r2, #8]
 8008384:	e032      	b.n	80083ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	f003 0320 	and.w	r3, r3, #32
 800838c:	2b00      	cmp	r3, #0
 800838e:	d008      	beq.n	80083a2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	015a      	lsls	r2, r3, #5
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	4413      	add	r3, r2
 8008398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800839c:	461a      	mov	r2, r3
 800839e:	2320      	movs	r3, #32
 80083a0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	4619      	mov	r1, r3
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f7ff fe0d 	bl	8007fc8 <HAL_PCD_DataOutStageCallback>
 80083ae:	e01d      	b.n	80083ec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d114      	bne.n	80083e0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80083b6:	6879      	ldr	r1, [r7, #4]
 80083b8:	683a      	ldr	r2, [r7, #0]
 80083ba:	4613      	mov	r3, r2
 80083bc:	00db      	lsls	r3, r3, #3
 80083be:	4413      	add	r3, r2
 80083c0:	009b      	lsls	r3, r3, #2
 80083c2:	440b      	add	r3, r1
 80083c4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d108      	bne.n	80083e0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6818      	ldr	r0, [r3, #0]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80083d8:	461a      	mov	r2, r3
 80083da:	2100      	movs	r1, #0
 80083dc:	f002 f968 	bl	800a6b0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	4619      	mov	r1, r3
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f7ff fdee 	bl	8007fc8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3720      	adds	r7, #32
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	4f54300a 	.word	0x4f54300a
 80083fc:	4f54310a 	.word	0x4f54310a

08008400 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	333c      	adds	r3, #60	; 0x3c
 8008418:	3304      	adds	r3, #4
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	015a      	lsls	r2, r3, #5
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	4413      	add	r3, r2
 8008426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800842a:	689b      	ldr	r3, [r3, #8]
 800842c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	4a15      	ldr	r2, [pc, #84]	; (8008488 <PCD_EP_OutSetupPacket_int+0x88>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d90e      	bls.n	8008454 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800843c:	2b00      	cmp	r3, #0
 800843e:	d009      	beq.n	8008454 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	015a      	lsls	r2, r3, #5
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	4413      	add	r3, r2
 8008448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800844c:	461a      	mov	r2, r3
 800844e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008452:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f7ff fdcf 	bl	8007ff8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	4a0a      	ldr	r2, [pc, #40]	; (8008488 <PCD_EP_OutSetupPacket_int+0x88>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d90c      	bls.n	800847c <PCD_EP_OutSetupPacket_int+0x7c>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d108      	bne.n	800847c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6818      	ldr	r0, [r3, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008474:	461a      	mov	r2, r3
 8008476:	2101      	movs	r1, #1
 8008478:	f002 f91a 	bl	800a6b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3718      	adds	r7, #24
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	4f54300a 	.word	0x4f54300a

0800848c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800848c:	b480      	push	{r7}
 800848e:	b083      	sub	sp, #12
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	460b      	mov	r3, r1
 8008496:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80084a4:	b480      	push	{r7}
 80084a6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80084a8:	4b05      	ldr	r3, [pc, #20]	; (80084c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a04      	ldr	r2, [pc, #16]	; (80084c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80084ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084b2:	6013      	str	r3, [r2, #0]
}
 80084b4:	bf00      	nop
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	40007000 	.word	0x40007000

080084c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80084ca:	2300      	movs	r3, #0
 80084cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80084ce:	4b23      	ldr	r3, [pc, #140]	; (800855c <HAL_PWREx_EnableOverDrive+0x98>)
 80084d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d2:	4a22      	ldr	r2, [pc, #136]	; (800855c <HAL_PWREx_EnableOverDrive+0x98>)
 80084d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084d8:	6413      	str	r3, [r2, #64]	; 0x40
 80084da:	4b20      	ldr	r3, [pc, #128]	; (800855c <HAL_PWREx_EnableOverDrive+0x98>)
 80084dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084e2:	603b      	str	r3, [r7, #0]
 80084e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80084e6:	4b1e      	ldr	r3, [pc, #120]	; (8008560 <HAL_PWREx_EnableOverDrive+0x9c>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a1d      	ldr	r2, [pc, #116]	; (8008560 <HAL_PWREx_EnableOverDrive+0x9c>)
 80084ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084f0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80084f2:	f7fb feeb 	bl	80042cc <HAL_GetTick>
 80084f6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80084f8:	e009      	b.n	800850e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80084fa:	f7fb fee7 	bl	80042cc <HAL_GetTick>
 80084fe:	4602      	mov	r2, r0
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	1ad3      	subs	r3, r2, r3
 8008504:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008508:	d901      	bls.n	800850e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800850a:	2303      	movs	r3, #3
 800850c:	e022      	b.n	8008554 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800850e:	4b14      	ldr	r3, [pc, #80]	; (8008560 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800851a:	d1ee      	bne.n	80084fa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800851c:	4b10      	ldr	r3, [pc, #64]	; (8008560 <HAL_PWREx_EnableOverDrive+0x9c>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a0f      	ldr	r2, [pc, #60]	; (8008560 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008522:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008526:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008528:	f7fb fed0 	bl	80042cc <HAL_GetTick>
 800852c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800852e:	e009      	b.n	8008544 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008530:	f7fb fecc 	bl	80042cc <HAL_GetTick>
 8008534:	4602      	mov	r2, r0
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800853e:	d901      	bls.n	8008544 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008540:	2303      	movs	r3, #3
 8008542:	e007      	b.n	8008554 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008544:	4b06      	ldr	r3, [pc, #24]	; (8008560 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800854c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008550:	d1ee      	bne.n	8008530 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3708      	adds	r7, #8
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	40023800 	.word	0x40023800
 8008560:	40007000 	.word	0x40007000

08008564 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b086      	sub	sp, #24
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800856c:	2300      	movs	r3, #0
 800856e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d101      	bne.n	800857a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e29b      	b.n	8008ab2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 0301 	and.w	r3, r3, #1
 8008582:	2b00      	cmp	r3, #0
 8008584:	f000 8087 	beq.w	8008696 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008588:	4b96      	ldr	r3, [pc, #600]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	f003 030c 	and.w	r3, r3, #12
 8008590:	2b04      	cmp	r3, #4
 8008592:	d00c      	beq.n	80085ae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008594:	4b93      	ldr	r3, [pc, #588]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	f003 030c 	and.w	r3, r3, #12
 800859c:	2b08      	cmp	r3, #8
 800859e:	d112      	bne.n	80085c6 <HAL_RCC_OscConfig+0x62>
 80085a0:	4b90      	ldr	r3, [pc, #576]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085ac:	d10b      	bne.n	80085c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085ae:	4b8d      	ldr	r3, [pc, #564]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d06c      	beq.n	8008694 <HAL_RCC_OscConfig+0x130>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d168      	bne.n	8008694 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e275      	b.n	8008ab2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085ce:	d106      	bne.n	80085de <HAL_RCC_OscConfig+0x7a>
 80085d0:	4b84      	ldr	r3, [pc, #528]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a83      	ldr	r2, [pc, #524]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 80085d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085da:	6013      	str	r3, [r2, #0]
 80085dc:	e02e      	b.n	800863c <HAL_RCC_OscConfig+0xd8>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d10c      	bne.n	8008600 <HAL_RCC_OscConfig+0x9c>
 80085e6:	4b7f      	ldr	r3, [pc, #508]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a7e      	ldr	r2, [pc, #504]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 80085ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085f0:	6013      	str	r3, [r2, #0]
 80085f2:	4b7c      	ldr	r3, [pc, #496]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a7b      	ldr	r2, [pc, #492]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 80085f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085fc:	6013      	str	r3, [r2, #0]
 80085fe:	e01d      	b.n	800863c <HAL_RCC_OscConfig+0xd8>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008608:	d10c      	bne.n	8008624 <HAL_RCC_OscConfig+0xc0>
 800860a:	4b76      	ldr	r3, [pc, #472]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a75      	ldr	r2, [pc, #468]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 8008610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008614:	6013      	str	r3, [r2, #0]
 8008616:	4b73      	ldr	r3, [pc, #460]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a72      	ldr	r2, [pc, #456]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 800861c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008620:	6013      	str	r3, [r2, #0]
 8008622:	e00b      	b.n	800863c <HAL_RCC_OscConfig+0xd8>
 8008624:	4b6f      	ldr	r3, [pc, #444]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a6e      	ldr	r2, [pc, #440]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 800862a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800862e:	6013      	str	r3, [r2, #0]
 8008630:	4b6c      	ldr	r3, [pc, #432]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a6b      	ldr	r2, [pc, #428]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 8008636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800863a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d013      	beq.n	800866c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008644:	f7fb fe42 	bl	80042cc <HAL_GetTick>
 8008648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800864a:	e008      	b.n	800865e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800864c:	f7fb fe3e 	bl	80042cc <HAL_GetTick>
 8008650:	4602      	mov	r2, r0
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	2b64      	cmp	r3, #100	; 0x64
 8008658:	d901      	bls.n	800865e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	e229      	b.n	8008ab2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800865e:	4b61      	ldr	r3, [pc, #388]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d0f0      	beq.n	800864c <HAL_RCC_OscConfig+0xe8>
 800866a:	e014      	b.n	8008696 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800866c:	f7fb fe2e 	bl	80042cc <HAL_GetTick>
 8008670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008672:	e008      	b.n	8008686 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008674:	f7fb fe2a 	bl	80042cc <HAL_GetTick>
 8008678:	4602      	mov	r2, r0
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	2b64      	cmp	r3, #100	; 0x64
 8008680:	d901      	bls.n	8008686 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008682:	2303      	movs	r3, #3
 8008684:	e215      	b.n	8008ab2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008686:	4b57      	ldr	r3, [pc, #348]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1f0      	bne.n	8008674 <HAL_RCC_OscConfig+0x110>
 8008692:	e000      	b.n	8008696 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 0302 	and.w	r3, r3, #2
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d069      	beq.n	8008776 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80086a2:	4b50      	ldr	r3, [pc, #320]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	f003 030c 	and.w	r3, r3, #12
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d00b      	beq.n	80086c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80086ae:	4b4d      	ldr	r3, [pc, #308]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	f003 030c 	and.w	r3, r3, #12
 80086b6:	2b08      	cmp	r3, #8
 80086b8:	d11c      	bne.n	80086f4 <HAL_RCC_OscConfig+0x190>
 80086ba:	4b4a      	ldr	r3, [pc, #296]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d116      	bne.n	80086f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086c6:	4b47      	ldr	r3, [pc, #284]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 0302 	and.w	r3, r3, #2
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d005      	beq.n	80086de <HAL_RCC_OscConfig+0x17a>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d001      	beq.n	80086de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	e1e9      	b.n	8008ab2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086de:	4b41      	ldr	r3, [pc, #260]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	00db      	lsls	r3, r3, #3
 80086ec:	493d      	ldr	r1, [pc, #244]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 80086ee:	4313      	orrs	r3, r2
 80086f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086f2:	e040      	b.n	8008776 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d023      	beq.n	8008744 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80086fc:	4b39      	ldr	r3, [pc, #228]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a38      	ldr	r2, [pc, #224]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 8008702:	f043 0301 	orr.w	r3, r3, #1
 8008706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008708:	f7fb fde0 	bl	80042cc <HAL_GetTick>
 800870c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800870e:	e008      	b.n	8008722 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008710:	f7fb fddc 	bl	80042cc <HAL_GetTick>
 8008714:	4602      	mov	r2, r0
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	1ad3      	subs	r3, r2, r3
 800871a:	2b02      	cmp	r3, #2
 800871c:	d901      	bls.n	8008722 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800871e:	2303      	movs	r3, #3
 8008720:	e1c7      	b.n	8008ab2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008722:	4b30      	ldr	r3, [pc, #192]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 0302 	and.w	r3, r3, #2
 800872a:	2b00      	cmp	r3, #0
 800872c:	d0f0      	beq.n	8008710 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800872e:	4b2d      	ldr	r3, [pc, #180]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	00db      	lsls	r3, r3, #3
 800873c:	4929      	ldr	r1, [pc, #164]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 800873e:	4313      	orrs	r3, r2
 8008740:	600b      	str	r3, [r1, #0]
 8008742:	e018      	b.n	8008776 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008744:	4b27      	ldr	r3, [pc, #156]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a26      	ldr	r2, [pc, #152]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 800874a:	f023 0301 	bic.w	r3, r3, #1
 800874e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008750:	f7fb fdbc 	bl	80042cc <HAL_GetTick>
 8008754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008756:	e008      	b.n	800876a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008758:	f7fb fdb8 	bl	80042cc <HAL_GetTick>
 800875c:	4602      	mov	r2, r0
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	2b02      	cmp	r3, #2
 8008764:	d901      	bls.n	800876a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008766:	2303      	movs	r3, #3
 8008768:	e1a3      	b.n	8008ab2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800876a:	4b1e      	ldr	r3, [pc, #120]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 0302 	and.w	r3, r3, #2
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1f0      	bne.n	8008758 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f003 0308 	and.w	r3, r3, #8
 800877e:	2b00      	cmp	r3, #0
 8008780:	d038      	beq.n	80087f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d019      	beq.n	80087be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800878a:	4b16      	ldr	r3, [pc, #88]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 800878c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800878e:	4a15      	ldr	r2, [pc, #84]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 8008790:	f043 0301 	orr.w	r3, r3, #1
 8008794:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008796:	f7fb fd99 	bl	80042cc <HAL_GetTick>
 800879a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800879c:	e008      	b.n	80087b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800879e:	f7fb fd95 	bl	80042cc <HAL_GetTick>
 80087a2:	4602      	mov	r2, r0
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	1ad3      	subs	r3, r2, r3
 80087a8:	2b02      	cmp	r3, #2
 80087aa:	d901      	bls.n	80087b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80087ac:	2303      	movs	r3, #3
 80087ae:	e180      	b.n	8008ab2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087b0:	4b0c      	ldr	r3, [pc, #48]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 80087b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087b4:	f003 0302 	and.w	r3, r3, #2
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d0f0      	beq.n	800879e <HAL_RCC_OscConfig+0x23a>
 80087bc:	e01a      	b.n	80087f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087be:	4b09      	ldr	r3, [pc, #36]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 80087c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087c2:	4a08      	ldr	r2, [pc, #32]	; (80087e4 <HAL_RCC_OscConfig+0x280>)
 80087c4:	f023 0301 	bic.w	r3, r3, #1
 80087c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087ca:	f7fb fd7f 	bl	80042cc <HAL_GetTick>
 80087ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087d0:	e00a      	b.n	80087e8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80087d2:	f7fb fd7b 	bl	80042cc <HAL_GetTick>
 80087d6:	4602      	mov	r2, r0
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d903      	bls.n	80087e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80087e0:	2303      	movs	r3, #3
 80087e2:	e166      	b.n	8008ab2 <HAL_RCC_OscConfig+0x54e>
 80087e4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087e8:	4b92      	ldr	r3, [pc, #584]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 80087ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087ec:	f003 0302 	and.w	r3, r3, #2
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d1ee      	bne.n	80087d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 0304 	and.w	r3, r3, #4
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f000 80a4 	beq.w	800894a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008802:	4b8c      	ldr	r3, [pc, #560]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 8008804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800880a:	2b00      	cmp	r3, #0
 800880c:	d10d      	bne.n	800882a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800880e:	4b89      	ldr	r3, [pc, #548]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 8008810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008812:	4a88      	ldr	r2, [pc, #544]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 8008814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008818:	6413      	str	r3, [r2, #64]	; 0x40
 800881a:	4b86      	ldr	r3, [pc, #536]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 800881c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008822:	60bb      	str	r3, [r7, #8]
 8008824:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008826:	2301      	movs	r3, #1
 8008828:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800882a:	4b83      	ldr	r3, [pc, #524]	; (8008a38 <HAL_RCC_OscConfig+0x4d4>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008832:	2b00      	cmp	r3, #0
 8008834:	d118      	bne.n	8008868 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008836:	4b80      	ldr	r3, [pc, #512]	; (8008a38 <HAL_RCC_OscConfig+0x4d4>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a7f      	ldr	r2, [pc, #508]	; (8008a38 <HAL_RCC_OscConfig+0x4d4>)
 800883c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008840:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008842:	f7fb fd43 	bl	80042cc <HAL_GetTick>
 8008846:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008848:	e008      	b.n	800885c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800884a:	f7fb fd3f 	bl	80042cc <HAL_GetTick>
 800884e:	4602      	mov	r2, r0
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	2b64      	cmp	r3, #100	; 0x64
 8008856:	d901      	bls.n	800885c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008858:	2303      	movs	r3, #3
 800885a:	e12a      	b.n	8008ab2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800885c:	4b76      	ldr	r3, [pc, #472]	; (8008a38 <HAL_RCC_OscConfig+0x4d4>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008864:	2b00      	cmp	r3, #0
 8008866:	d0f0      	beq.n	800884a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d106      	bne.n	800887e <HAL_RCC_OscConfig+0x31a>
 8008870:	4b70      	ldr	r3, [pc, #448]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 8008872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008874:	4a6f      	ldr	r2, [pc, #444]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 8008876:	f043 0301 	orr.w	r3, r3, #1
 800887a:	6713      	str	r3, [r2, #112]	; 0x70
 800887c:	e02d      	b.n	80088da <HAL_RCC_OscConfig+0x376>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d10c      	bne.n	80088a0 <HAL_RCC_OscConfig+0x33c>
 8008886:	4b6b      	ldr	r3, [pc, #428]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 8008888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800888a:	4a6a      	ldr	r2, [pc, #424]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 800888c:	f023 0301 	bic.w	r3, r3, #1
 8008890:	6713      	str	r3, [r2, #112]	; 0x70
 8008892:	4b68      	ldr	r3, [pc, #416]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 8008894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008896:	4a67      	ldr	r2, [pc, #412]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 8008898:	f023 0304 	bic.w	r3, r3, #4
 800889c:	6713      	str	r3, [r2, #112]	; 0x70
 800889e:	e01c      	b.n	80088da <HAL_RCC_OscConfig+0x376>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	2b05      	cmp	r3, #5
 80088a6:	d10c      	bne.n	80088c2 <HAL_RCC_OscConfig+0x35e>
 80088a8:	4b62      	ldr	r3, [pc, #392]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 80088aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ac:	4a61      	ldr	r2, [pc, #388]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 80088ae:	f043 0304 	orr.w	r3, r3, #4
 80088b2:	6713      	str	r3, [r2, #112]	; 0x70
 80088b4:	4b5f      	ldr	r3, [pc, #380]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 80088b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088b8:	4a5e      	ldr	r2, [pc, #376]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 80088ba:	f043 0301 	orr.w	r3, r3, #1
 80088be:	6713      	str	r3, [r2, #112]	; 0x70
 80088c0:	e00b      	b.n	80088da <HAL_RCC_OscConfig+0x376>
 80088c2:	4b5c      	ldr	r3, [pc, #368]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 80088c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088c6:	4a5b      	ldr	r2, [pc, #364]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 80088c8:	f023 0301 	bic.w	r3, r3, #1
 80088cc:	6713      	str	r3, [r2, #112]	; 0x70
 80088ce:	4b59      	ldr	r3, [pc, #356]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 80088d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088d2:	4a58      	ldr	r2, [pc, #352]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 80088d4:	f023 0304 	bic.w	r3, r3, #4
 80088d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d015      	beq.n	800890e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088e2:	f7fb fcf3 	bl	80042cc <HAL_GetTick>
 80088e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088e8:	e00a      	b.n	8008900 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088ea:	f7fb fcef 	bl	80042cc <HAL_GetTick>
 80088ee:	4602      	mov	r2, r0
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	1ad3      	subs	r3, r2, r3
 80088f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d901      	bls.n	8008900 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80088fc:	2303      	movs	r3, #3
 80088fe:	e0d8      	b.n	8008ab2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008900:	4b4c      	ldr	r3, [pc, #304]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 8008902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008904:	f003 0302 	and.w	r3, r3, #2
 8008908:	2b00      	cmp	r3, #0
 800890a:	d0ee      	beq.n	80088ea <HAL_RCC_OscConfig+0x386>
 800890c:	e014      	b.n	8008938 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800890e:	f7fb fcdd 	bl	80042cc <HAL_GetTick>
 8008912:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008914:	e00a      	b.n	800892c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008916:	f7fb fcd9 	bl	80042cc <HAL_GetTick>
 800891a:	4602      	mov	r2, r0
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	1ad3      	subs	r3, r2, r3
 8008920:	f241 3288 	movw	r2, #5000	; 0x1388
 8008924:	4293      	cmp	r3, r2
 8008926:	d901      	bls.n	800892c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008928:	2303      	movs	r3, #3
 800892a:	e0c2      	b.n	8008ab2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800892c:	4b41      	ldr	r3, [pc, #260]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 800892e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008930:	f003 0302 	and.w	r3, r3, #2
 8008934:	2b00      	cmp	r3, #0
 8008936:	d1ee      	bne.n	8008916 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008938:	7dfb      	ldrb	r3, [r7, #23]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d105      	bne.n	800894a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800893e:	4b3d      	ldr	r3, [pc, #244]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 8008940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008942:	4a3c      	ldr	r2, [pc, #240]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 8008944:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008948:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	2b00      	cmp	r3, #0
 8008950:	f000 80ae 	beq.w	8008ab0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008954:	4b37      	ldr	r3, [pc, #220]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	f003 030c 	and.w	r3, r3, #12
 800895c:	2b08      	cmp	r3, #8
 800895e:	d06d      	beq.n	8008a3c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	699b      	ldr	r3, [r3, #24]
 8008964:	2b02      	cmp	r3, #2
 8008966:	d14b      	bne.n	8008a00 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008968:	4b32      	ldr	r3, [pc, #200]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a31      	ldr	r2, [pc, #196]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 800896e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008974:	f7fb fcaa 	bl	80042cc <HAL_GetTick>
 8008978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800897a:	e008      	b.n	800898e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800897c:	f7fb fca6 	bl	80042cc <HAL_GetTick>
 8008980:	4602      	mov	r2, r0
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	1ad3      	subs	r3, r2, r3
 8008986:	2b02      	cmp	r3, #2
 8008988:	d901      	bls.n	800898e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800898a:	2303      	movs	r3, #3
 800898c:	e091      	b.n	8008ab2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800898e:	4b29      	ldr	r3, [pc, #164]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008996:	2b00      	cmp	r3, #0
 8008998:	d1f0      	bne.n	800897c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	69da      	ldr	r2, [r3, #28]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a1b      	ldr	r3, [r3, #32]
 80089a2:	431a      	orrs	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a8:	019b      	lsls	r3, r3, #6
 80089aa:	431a      	orrs	r2, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b0:	085b      	lsrs	r3, r3, #1
 80089b2:	3b01      	subs	r3, #1
 80089b4:	041b      	lsls	r3, r3, #16
 80089b6:	431a      	orrs	r2, r3
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089bc:	061b      	lsls	r3, r3, #24
 80089be:	431a      	orrs	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c4:	071b      	lsls	r3, r3, #28
 80089c6:	491b      	ldr	r1, [pc, #108]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 80089c8:	4313      	orrs	r3, r2
 80089ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80089cc:	4b19      	ldr	r3, [pc, #100]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a18      	ldr	r2, [pc, #96]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 80089d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80089d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089d8:	f7fb fc78 	bl	80042cc <HAL_GetTick>
 80089dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089de:	e008      	b.n	80089f2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089e0:	f7fb fc74 	bl	80042cc <HAL_GetTick>
 80089e4:	4602      	mov	r2, r0
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d901      	bls.n	80089f2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80089ee:	2303      	movs	r3, #3
 80089f0:	e05f      	b.n	8008ab2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089f2:	4b10      	ldr	r3, [pc, #64]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d0f0      	beq.n	80089e0 <HAL_RCC_OscConfig+0x47c>
 80089fe:	e057      	b.n	8008ab0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a00:	4b0c      	ldr	r3, [pc, #48]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a0b      	ldr	r2, [pc, #44]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 8008a06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a0c:	f7fb fc5e 	bl	80042cc <HAL_GetTick>
 8008a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a12:	e008      	b.n	8008a26 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a14:	f7fb fc5a 	bl	80042cc <HAL_GetTick>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d901      	bls.n	8008a26 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8008a22:	2303      	movs	r3, #3
 8008a24:	e045      	b.n	8008ab2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a26:	4b03      	ldr	r3, [pc, #12]	; (8008a34 <HAL_RCC_OscConfig+0x4d0>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1f0      	bne.n	8008a14 <HAL_RCC_OscConfig+0x4b0>
 8008a32:	e03d      	b.n	8008ab0 <HAL_RCC_OscConfig+0x54c>
 8008a34:	40023800 	.word	0x40023800
 8008a38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008a3c:	4b1f      	ldr	r3, [pc, #124]	; (8008abc <HAL_RCC_OscConfig+0x558>)
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d030      	beq.n	8008aac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d129      	bne.n	8008aac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d122      	bne.n	8008aac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008a72:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d119      	bne.n	8008aac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a82:	085b      	lsrs	r3, r3, #1
 8008a84:	3b01      	subs	r3, #1
 8008a86:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d10f      	bne.n	8008aac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a96:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d107      	bne.n	8008aac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aa6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d001      	beq.n	8008ab0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	e000      	b.n	8008ab2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3718      	adds	r7, #24
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	40023800 	.word	0x40023800

08008ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008aca:	2300      	movs	r3, #0
 8008acc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d101      	bne.n	8008ad8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	e0d0      	b.n	8008c7a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008ad8:	4b6a      	ldr	r3, [pc, #424]	; (8008c84 <HAL_RCC_ClockConfig+0x1c4>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 030f 	and.w	r3, r3, #15
 8008ae0:	683a      	ldr	r2, [r7, #0]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d910      	bls.n	8008b08 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ae6:	4b67      	ldr	r3, [pc, #412]	; (8008c84 <HAL_RCC_ClockConfig+0x1c4>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f023 020f 	bic.w	r2, r3, #15
 8008aee:	4965      	ldr	r1, [pc, #404]	; (8008c84 <HAL_RCC_ClockConfig+0x1c4>)
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008af6:	4b63      	ldr	r3, [pc, #396]	; (8008c84 <HAL_RCC_ClockConfig+0x1c4>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f003 030f 	and.w	r3, r3, #15
 8008afe:	683a      	ldr	r2, [r7, #0]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d001      	beq.n	8008b08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e0b8      	b.n	8008c7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 0302 	and.w	r3, r3, #2
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d020      	beq.n	8008b56 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f003 0304 	and.w	r3, r3, #4
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d005      	beq.n	8008b2c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b20:	4b59      	ldr	r3, [pc, #356]	; (8008c88 <HAL_RCC_ClockConfig+0x1c8>)
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	4a58      	ldr	r2, [pc, #352]	; (8008c88 <HAL_RCC_ClockConfig+0x1c8>)
 8008b26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008b2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 0308 	and.w	r3, r3, #8
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d005      	beq.n	8008b44 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b38:	4b53      	ldr	r3, [pc, #332]	; (8008c88 <HAL_RCC_ClockConfig+0x1c8>)
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	4a52      	ldr	r2, [pc, #328]	; (8008c88 <HAL_RCC_ClockConfig+0x1c8>)
 8008b3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008b42:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b44:	4b50      	ldr	r3, [pc, #320]	; (8008c88 <HAL_RCC_ClockConfig+0x1c8>)
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	689b      	ldr	r3, [r3, #8]
 8008b50:	494d      	ldr	r1, [pc, #308]	; (8008c88 <HAL_RCC_ClockConfig+0x1c8>)
 8008b52:	4313      	orrs	r3, r2
 8008b54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f003 0301 	and.w	r3, r3, #1
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d040      	beq.n	8008be4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d107      	bne.n	8008b7a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b6a:	4b47      	ldr	r3, [pc, #284]	; (8008c88 <HAL_RCC_ClockConfig+0x1c8>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d115      	bne.n	8008ba2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	e07f      	b.n	8008c7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d107      	bne.n	8008b92 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b82:	4b41      	ldr	r3, [pc, #260]	; (8008c88 <HAL_RCC_ClockConfig+0x1c8>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d109      	bne.n	8008ba2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e073      	b.n	8008c7a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b92:	4b3d      	ldr	r3, [pc, #244]	; (8008c88 <HAL_RCC_ClockConfig+0x1c8>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f003 0302 	and.w	r3, r3, #2
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d101      	bne.n	8008ba2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e06b      	b.n	8008c7a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008ba2:	4b39      	ldr	r3, [pc, #228]	; (8008c88 <HAL_RCC_ClockConfig+0x1c8>)
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	f023 0203 	bic.w	r2, r3, #3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	4936      	ldr	r1, [pc, #216]	; (8008c88 <HAL_RCC_ClockConfig+0x1c8>)
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bb4:	f7fb fb8a 	bl	80042cc <HAL_GetTick>
 8008bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bba:	e00a      	b.n	8008bd2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008bbc:	f7fb fb86 	bl	80042cc <HAL_GetTick>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d901      	bls.n	8008bd2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008bce:	2303      	movs	r3, #3
 8008bd0:	e053      	b.n	8008c7a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bd2:	4b2d      	ldr	r3, [pc, #180]	; (8008c88 <HAL_RCC_ClockConfig+0x1c8>)
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	f003 020c 	and.w	r2, r3, #12
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	009b      	lsls	r3, r3, #2
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d1eb      	bne.n	8008bbc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008be4:	4b27      	ldr	r3, [pc, #156]	; (8008c84 <HAL_RCC_ClockConfig+0x1c4>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 030f 	and.w	r3, r3, #15
 8008bec:	683a      	ldr	r2, [r7, #0]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d210      	bcs.n	8008c14 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bf2:	4b24      	ldr	r3, [pc, #144]	; (8008c84 <HAL_RCC_ClockConfig+0x1c4>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f023 020f 	bic.w	r2, r3, #15
 8008bfa:	4922      	ldr	r1, [pc, #136]	; (8008c84 <HAL_RCC_ClockConfig+0x1c4>)
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c02:	4b20      	ldr	r3, [pc, #128]	; (8008c84 <HAL_RCC_ClockConfig+0x1c4>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 030f 	and.w	r3, r3, #15
 8008c0a:	683a      	ldr	r2, [r7, #0]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d001      	beq.n	8008c14 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e032      	b.n	8008c7a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f003 0304 	and.w	r3, r3, #4
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d008      	beq.n	8008c32 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c20:	4b19      	ldr	r3, [pc, #100]	; (8008c88 <HAL_RCC_ClockConfig+0x1c8>)
 8008c22:	689b      	ldr	r3, [r3, #8]
 8008c24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	4916      	ldr	r1, [pc, #88]	; (8008c88 <HAL_RCC_ClockConfig+0x1c8>)
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f003 0308 	and.w	r3, r3, #8
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d009      	beq.n	8008c52 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008c3e:	4b12      	ldr	r3, [pc, #72]	; (8008c88 <HAL_RCC_ClockConfig+0x1c8>)
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	691b      	ldr	r3, [r3, #16]
 8008c4a:	00db      	lsls	r3, r3, #3
 8008c4c:	490e      	ldr	r1, [pc, #56]	; (8008c88 <HAL_RCC_ClockConfig+0x1c8>)
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008c52:	f000 f885 	bl	8008d60 <HAL_RCC_GetSysClockFreq>
 8008c56:	4602      	mov	r2, r0
 8008c58:	4b0b      	ldr	r3, [pc, #44]	; (8008c88 <HAL_RCC_ClockConfig+0x1c8>)
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	091b      	lsrs	r3, r3, #4
 8008c5e:	f003 030f 	and.w	r3, r3, #15
 8008c62:	490a      	ldr	r1, [pc, #40]	; (8008c8c <HAL_RCC_ClockConfig+0x1cc>)
 8008c64:	5ccb      	ldrb	r3, [r1, r3]
 8008c66:	fa22 f303 	lsr.w	r3, r2, r3
 8008c6a:	4a09      	ldr	r2, [pc, #36]	; (8008c90 <HAL_RCC_ClockConfig+0x1d0>)
 8008c6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008c6e:	4b09      	ldr	r3, [pc, #36]	; (8008c94 <HAL_RCC_ClockConfig+0x1d4>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7f9 fa9c 	bl	80021b0 <HAL_InitTick>

  return HAL_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	40023c00 	.word	0x40023c00
 8008c88:	40023800 	.word	0x40023800
 8008c8c:	0800f1f4 	.word	0x0800f1f4
 8008c90:	20000008 	.word	0x20000008
 8008c94:	20000048 	.word	0x20000048

08008c98 <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b08c      	sub	sp, #48	; 0x30
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d127      	bne.n	8008cfa <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8008caa:	4b2a      	ldr	r3, [pc, #168]	; (8008d54 <HAL_RCC_MCOConfig+0xbc>)
 8008cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cae:	4a29      	ldr	r2, [pc, #164]	; (8008d54 <HAL_RCC_MCOConfig+0xbc>)
 8008cb0:	f043 0301 	orr.w	r3, r3, #1
 8008cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8008cb6:	4b27      	ldr	r3, [pc, #156]	; (8008d54 <HAL_RCC_MCOConfig+0xbc>)
 8008cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cba:	f003 0301 	and.w	r3, r3, #1
 8008cbe:	61bb      	str	r3, [r7, #24]
 8008cc0:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8008cc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cc8:	2302      	movs	r3, #2
 8008cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008cd8:	f107 031c 	add.w	r3, r7, #28
 8008cdc:	4619      	mov	r1, r3
 8008cde:	481e      	ldr	r0, [pc, #120]	; (8008d58 <HAL_RCC_MCOConfig+0xc0>)
 8008ce0:	f7fd f860 	bl	8005da4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8008ce4:	4b1b      	ldr	r3, [pc, #108]	; (8008d54 <HAL_RCC_MCOConfig+0xbc>)
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8008cec:	68b9      	ldr	r1, [r7, #8]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	430b      	orrs	r3, r1
 8008cf2:	4918      	ldr	r1, [pc, #96]	; (8008d54 <HAL_RCC_MCOConfig+0xbc>)
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 8008cf8:	e027      	b.n	8008d4a <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
 8008cfa:	4b16      	ldr	r3, [pc, #88]	; (8008d54 <HAL_RCC_MCOConfig+0xbc>)
 8008cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cfe:	4a15      	ldr	r2, [pc, #84]	; (8008d54 <HAL_RCC_MCOConfig+0xbc>)
 8008d00:	f043 0304 	orr.w	r3, r3, #4
 8008d04:	6313      	str	r3, [r2, #48]	; 0x30
 8008d06:	4b13      	ldr	r3, [pc, #76]	; (8008d54 <HAL_RCC_MCOConfig+0xbc>)
 8008d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d0a:	f003 0304 	and.w	r3, r3, #4
 8008d0e:	617b      	str	r3, [r7, #20]
 8008d10:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8008d12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d18:	2302      	movs	r3, #2
 8008d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008d1c:	2303      	movs	r3, #3
 8008d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d20:	2300      	movs	r3, #0
 8008d22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008d24:	2300      	movs	r3, #0
 8008d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8008d28:	f107 031c 	add.w	r3, r7, #28
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	480b      	ldr	r0, [pc, #44]	; (8008d5c <HAL_RCC_MCOConfig+0xc4>)
 8008d30:	f7fd f838 	bl	8005da4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 8008d34:	4b07      	ldr	r3, [pc, #28]	; (8008d54 <HAL_RCC_MCOConfig+0xbc>)
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	00d9      	lsls	r1, r3, #3
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	430b      	orrs	r3, r1
 8008d44:	4903      	ldr	r1, [pc, #12]	; (8008d54 <HAL_RCC_MCOConfig+0xbc>)
 8008d46:	4313      	orrs	r3, r2
 8008d48:	608b      	str	r3, [r1, #8]
}
 8008d4a:	bf00      	nop
 8008d4c:	3730      	adds	r7, #48	; 0x30
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	40023800 	.word	0x40023800
 8008d58:	40020000 	.word	0x40020000
 8008d5c:	40020800 	.word	0x40020800

08008d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d64:	b090      	sub	sp, #64	; 0x40
 8008d66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d70:	2300      	movs	r3, #0
 8008d72:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8008d74:	2300      	movs	r3, #0
 8008d76:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008d78:	4b59      	ldr	r3, [pc, #356]	; (8008ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	f003 030c 	and.w	r3, r3, #12
 8008d80:	2b08      	cmp	r3, #8
 8008d82:	d00d      	beq.n	8008da0 <HAL_RCC_GetSysClockFreq+0x40>
 8008d84:	2b08      	cmp	r3, #8
 8008d86:	f200 80a1 	bhi.w	8008ecc <HAL_RCC_GetSysClockFreq+0x16c>
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d002      	beq.n	8008d94 <HAL_RCC_GetSysClockFreq+0x34>
 8008d8e:	2b04      	cmp	r3, #4
 8008d90:	d003      	beq.n	8008d9a <HAL_RCC_GetSysClockFreq+0x3a>
 8008d92:	e09b      	b.n	8008ecc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008d94:	4b53      	ldr	r3, [pc, #332]	; (8008ee4 <HAL_RCC_GetSysClockFreq+0x184>)
 8008d96:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008d98:	e09b      	b.n	8008ed2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008d9a:	4b53      	ldr	r3, [pc, #332]	; (8008ee8 <HAL_RCC_GetSysClockFreq+0x188>)
 8008d9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008d9e:	e098      	b.n	8008ed2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008da0:	4b4f      	ldr	r3, [pc, #316]	; (8008ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008da8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008daa:	4b4d      	ldr	r3, [pc, #308]	; (8008ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d028      	beq.n	8008e08 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008db6:	4b4a      	ldr	r3, [pc, #296]	; (8008ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	099b      	lsrs	r3, r3, #6
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	623b      	str	r3, [r7, #32]
 8008dc0:	627a      	str	r2, [r7, #36]	; 0x24
 8008dc2:	6a3b      	ldr	r3, [r7, #32]
 8008dc4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008dc8:	2100      	movs	r1, #0
 8008dca:	4b47      	ldr	r3, [pc, #284]	; (8008ee8 <HAL_RCC_GetSysClockFreq+0x188>)
 8008dcc:	fb03 f201 	mul.w	r2, r3, r1
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	fb00 f303 	mul.w	r3, r0, r3
 8008dd6:	4413      	add	r3, r2
 8008dd8:	4a43      	ldr	r2, [pc, #268]	; (8008ee8 <HAL_RCC_GetSysClockFreq+0x188>)
 8008dda:	fba0 1202 	umull	r1, r2, r0, r2
 8008dde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008de0:	460a      	mov	r2, r1
 8008de2:	62ba      	str	r2, [r7, #40]	; 0x28
 8008de4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008de6:	4413      	add	r3, r2
 8008de8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dec:	2200      	movs	r2, #0
 8008dee:	61bb      	str	r3, [r7, #24]
 8008df0:	61fa      	str	r2, [r7, #28]
 8008df2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008df6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008dfa:	f7f7 fa79 	bl	80002f0 <__aeabi_uldivmod>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	460b      	mov	r3, r1
 8008e02:	4613      	mov	r3, r2
 8008e04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e06:	e053      	b.n	8008eb0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e08:	4b35      	ldr	r3, [pc, #212]	; (8008ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	099b      	lsrs	r3, r3, #6
 8008e0e:	2200      	movs	r2, #0
 8008e10:	613b      	str	r3, [r7, #16]
 8008e12:	617a      	str	r2, [r7, #20]
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008e1a:	f04f 0b00 	mov.w	fp, #0
 8008e1e:	4652      	mov	r2, sl
 8008e20:	465b      	mov	r3, fp
 8008e22:	f04f 0000 	mov.w	r0, #0
 8008e26:	f04f 0100 	mov.w	r1, #0
 8008e2a:	0159      	lsls	r1, r3, #5
 8008e2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e30:	0150      	lsls	r0, r2, #5
 8008e32:	4602      	mov	r2, r0
 8008e34:	460b      	mov	r3, r1
 8008e36:	ebb2 080a 	subs.w	r8, r2, sl
 8008e3a:	eb63 090b 	sbc.w	r9, r3, fp
 8008e3e:	f04f 0200 	mov.w	r2, #0
 8008e42:	f04f 0300 	mov.w	r3, #0
 8008e46:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008e4a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008e4e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008e52:	ebb2 0408 	subs.w	r4, r2, r8
 8008e56:	eb63 0509 	sbc.w	r5, r3, r9
 8008e5a:	f04f 0200 	mov.w	r2, #0
 8008e5e:	f04f 0300 	mov.w	r3, #0
 8008e62:	00eb      	lsls	r3, r5, #3
 8008e64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e68:	00e2      	lsls	r2, r4, #3
 8008e6a:	4614      	mov	r4, r2
 8008e6c:	461d      	mov	r5, r3
 8008e6e:	eb14 030a 	adds.w	r3, r4, sl
 8008e72:	603b      	str	r3, [r7, #0]
 8008e74:	eb45 030b 	adc.w	r3, r5, fp
 8008e78:	607b      	str	r3, [r7, #4]
 8008e7a:	f04f 0200 	mov.w	r2, #0
 8008e7e:	f04f 0300 	mov.w	r3, #0
 8008e82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008e86:	4629      	mov	r1, r5
 8008e88:	028b      	lsls	r3, r1, #10
 8008e8a:	4621      	mov	r1, r4
 8008e8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008e90:	4621      	mov	r1, r4
 8008e92:	028a      	lsls	r2, r1, #10
 8008e94:	4610      	mov	r0, r2
 8008e96:	4619      	mov	r1, r3
 8008e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	60bb      	str	r3, [r7, #8]
 8008e9e:	60fa      	str	r2, [r7, #12]
 8008ea0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ea4:	f7f7 fa24 	bl	80002f0 <__aeabi_uldivmod>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	460b      	mov	r3, r1
 8008eac:	4613      	mov	r3, r2
 8008eae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008eb0:	4b0b      	ldr	r3, [pc, #44]	; (8008ee0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	0c1b      	lsrs	r3, r3, #16
 8008eb6:	f003 0303 	and.w	r3, r3, #3
 8008eba:	3301      	adds	r3, #1
 8008ebc:	005b      	lsls	r3, r3, #1
 8008ebe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8008ec0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ec8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008eca:	e002      	b.n	8008ed2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008ecc:	4b05      	ldr	r3, [pc, #20]	; (8008ee4 <HAL_RCC_GetSysClockFreq+0x184>)
 8008ece:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3740      	adds	r7, #64	; 0x40
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ede:	bf00      	nop
 8008ee0:	40023800 	.word	0x40023800
 8008ee4:	00f42400 	.word	0x00f42400
 8008ee8:	017d7840 	.word	0x017d7840

08008eec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008eec:	b480      	push	{r7}
 8008eee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ef0:	4b03      	ldr	r3, [pc, #12]	; (8008f00 <HAL_RCC_GetHCLKFreq+0x14>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	20000008 	.word	0x20000008

08008f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008f08:	f7ff fff0 	bl	8008eec <HAL_RCC_GetHCLKFreq>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	4b05      	ldr	r3, [pc, #20]	; (8008f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	0a9b      	lsrs	r3, r3, #10
 8008f14:	f003 0307 	and.w	r3, r3, #7
 8008f18:	4903      	ldr	r1, [pc, #12]	; (8008f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f1a:	5ccb      	ldrb	r3, [r1, r3]
 8008f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	40023800 	.word	0x40023800
 8008f28:	0800f204 	.word	0x0800f204

08008f2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	220f      	movs	r2, #15
 8008f3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008f3c:	4b12      	ldr	r3, [pc, #72]	; (8008f88 <HAL_RCC_GetClockConfig+0x5c>)
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	f003 0203 	and.w	r2, r3, #3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008f48:	4b0f      	ldr	r3, [pc, #60]	; (8008f88 <HAL_RCC_GetClockConfig+0x5c>)
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008f54:	4b0c      	ldr	r3, [pc, #48]	; (8008f88 <HAL_RCC_GetClockConfig+0x5c>)
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008f60:	4b09      	ldr	r3, [pc, #36]	; (8008f88 <HAL_RCC_GetClockConfig+0x5c>)
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	08db      	lsrs	r3, r3, #3
 8008f66:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008f6e:	4b07      	ldr	r3, [pc, #28]	; (8008f8c <HAL_RCC_GetClockConfig+0x60>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f003 020f 	and.w	r2, r3, #15
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	601a      	str	r2, [r3, #0]
}
 8008f7a:	bf00      	nop
 8008f7c:	370c      	adds	r7, #12
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	40023800 	.word	0x40023800
 8008f8c:	40023c00 	.word	0x40023c00

08008f90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b088      	sub	sp, #32
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f003 0301 	and.w	r3, r3, #1
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d012      	beq.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008fb8:	4b69      	ldr	r3, [pc, #420]	; (8009160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	4a68      	ldr	r2, [pc, #416]	; (8009160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fbe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008fc2:	6093      	str	r3, [r2, #8]
 8008fc4:	4b66      	ldr	r3, [pc, #408]	; (8009160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fc6:	689a      	ldr	r2, [r3, #8]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fcc:	4964      	ldr	r1, [pc, #400]	; (8009160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d101      	bne.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d017      	beq.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008fea:	4b5d      	ldr	r3, [pc, #372]	; (8009160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ff0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ff8:	4959      	ldr	r1, [pc, #356]	; (8009160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009004:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009008:	d101      	bne.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800900a:	2301      	movs	r3, #1
 800900c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009012:	2b00      	cmp	r3, #0
 8009014:	d101      	bne.n	800901a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8009016:	2301      	movs	r3, #1
 8009018:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009022:	2b00      	cmp	r3, #0
 8009024:	d017      	beq.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8009026:	4b4e      	ldr	r3, [pc, #312]	; (8009160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009028:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800902c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009034:	494a      	ldr	r1, [pc, #296]	; (8009160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009036:	4313      	orrs	r3, r2
 8009038:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009040:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009044:	d101      	bne.n	800904a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8009046:	2301      	movs	r3, #1
 8009048:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904e:	2b00      	cmp	r3, #0
 8009050:	d101      	bne.n	8009056 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8009052:	2301      	movs	r3, #1
 8009054:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800905e:	2b00      	cmp	r3, #0
 8009060:	d001      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8009062:	2301      	movs	r3, #1
 8009064:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f003 0320 	and.w	r3, r3, #32
 800906e:	2b00      	cmp	r3, #0
 8009070:	f000 808b 	beq.w	800918a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009074:	4b3a      	ldr	r3, [pc, #232]	; (8009160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009078:	4a39      	ldr	r2, [pc, #228]	; (8009160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800907a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800907e:	6413      	str	r3, [r2, #64]	; 0x40
 8009080:	4b37      	ldr	r3, [pc, #220]	; (8009160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009088:	60bb      	str	r3, [r7, #8]
 800908a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800908c:	4b35      	ldr	r3, [pc, #212]	; (8009164 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a34      	ldr	r2, [pc, #208]	; (8009164 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009096:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009098:	f7fb f918 	bl	80042cc <HAL_GetTick>
 800909c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800909e:	e008      	b.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090a0:	f7fb f914 	bl	80042cc <HAL_GetTick>
 80090a4:	4602      	mov	r2, r0
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	2b64      	cmp	r3, #100	; 0x64
 80090ac:	d901      	bls.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e38f      	b.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80090b2:	4b2c      	ldr	r3, [pc, #176]	; (8009164 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d0f0      	beq.n	80090a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80090be:	4b28      	ldr	r3, [pc, #160]	; (8009160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090c6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d035      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090d6:	693a      	ldr	r2, [r7, #16]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d02e      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80090dc:	4b20      	ldr	r3, [pc, #128]	; (8009160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090e4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80090e6:	4b1e      	ldr	r3, [pc, #120]	; (8009160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ea:	4a1d      	ldr	r2, [pc, #116]	; (8009160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090f0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80090f2:	4b1b      	ldr	r3, [pc, #108]	; (8009160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090f6:	4a1a      	ldr	r2, [pc, #104]	; (8009160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80090fe:	4a18      	ldr	r2, [pc, #96]	; (8009160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009104:	4b16      	ldr	r3, [pc, #88]	; (8009160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009108:	f003 0301 	and.w	r3, r3, #1
 800910c:	2b01      	cmp	r3, #1
 800910e:	d114      	bne.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009110:	f7fb f8dc 	bl	80042cc <HAL_GetTick>
 8009114:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009116:	e00a      	b.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009118:	f7fb f8d8 	bl	80042cc <HAL_GetTick>
 800911c:	4602      	mov	r2, r0
 800911e:	697b      	ldr	r3, [r7, #20]
 8009120:	1ad3      	subs	r3, r2, r3
 8009122:	f241 3288 	movw	r2, #5000	; 0x1388
 8009126:	4293      	cmp	r3, r2
 8009128:	d901      	bls.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800912a:	2303      	movs	r3, #3
 800912c:	e351      	b.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800912e:	4b0c      	ldr	r3, [pc, #48]	; (8009160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009132:	f003 0302 	and.w	r3, r3, #2
 8009136:	2b00      	cmp	r3, #0
 8009138:	d0ee      	beq.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800913e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009142:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009146:	d111      	bne.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009148:	4b05      	ldr	r3, [pc, #20]	; (8009160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009154:	4b04      	ldr	r3, [pc, #16]	; (8009168 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8009156:	400b      	ands	r3, r1
 8009158:	4901      	ldr	r1, [pc, #4]	; (8009160 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800915a:	4313      	orrs	r3, r2
 800915c:	608b      	str	r3, [r1, #8]
 800915e:	e00b      	b.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009160:	40023800 	.word	0x40023800
 8009164:	40007000 	.word	0x40007000
 8009168:	0ffffcff 	.word	0x0ffffcff
 800916c:	4bac      	ldr	r3, [pc, #688]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	4aab      	ldr	r2, [pc, #684]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009172:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009176:	6093      	str	r3, [r2, #8]
 8009178:	4ba9      	ldr	r3, [pc, #676]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800917a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009184:	49a6      	ldr	r1, [pc, #664]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009186:	4313      	orrs	r3, r2
 8009188:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f003 0310 	and.w	r3, r3, #16
 8009192:	2b00      	cmp	r3, #0
 8009194:	d010      	beq.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009196:	4ba2      	ldr	r3, [pc, #648]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800919c:	4aa0      	ldr	r2, [pc, #640]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800919e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80091a6:	4b9e      	ldr	r3, [pc, #632]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80091a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b0:	499b      	ldr	r1, [pc, #620]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80091b2:	4313      	orrs	r3, r2
 80091b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d00a      	beq.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80091c4:	4b96      	ldr	r3, [pc, #600]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80091c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091d2:	4993      	ldr	r1, [pc, #588]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80091d4:	4313      	orrs	r3, r2
 80091d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00a      	beq.n	80091fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80091e6:	4b8e      	ldr	r3, [pc, #568]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80091e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091f4:	498a      	ldr	r1, [pc, #552]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80091f6:	4313      	orrs	r3, r2
 80091f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00a      	beq.n	800921e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009208:	4b85      	ldr	r3, [pc, #532]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800920a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800920e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009216:	4982      	ldr	r1, [pc, #520]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009218:	4313      	orrs	r3, r2
 800921a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00a      	beq.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800922a:	4b7d      	ldr	r3, [pc, #500]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800922c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009230:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009238:	4979      	ldr	r1, [pc, #484]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800923a:	4313      	orrs	r3, r2
 800923c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00a      	beq.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800924c:	4b74      	ldr	r3, [pc, #464]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800924e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009252:	f023 0203 	bic.w	r2, r3, #3
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800925a:	4971      	ldr	r1, [pc, #452]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800925c:	4313      	orrs	r3, r2
 800925e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800926a:	2b00      	cmp	r3, #0
 800926c:	d00a      	beq.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800926e:	4b6c      	ldr	r3, [pc, #432]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009274:	f023 020c 	bic.w	r2, r3, #12
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800927c:	4968      	ldr	r1, [pc, #416]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800927e:	4313      	orrs	r3, r2
 8009280:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00a      	beq.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009290:	4b63      	ldr	r3, [pc, #396]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009296:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800929e:	4960      	ldr	r1, [pc, #384]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80092a0:	4313      	orrs	r3, r2
 80092a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d00a      	beq.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80092b2:	4b5b      	ldr	r3, [pc, #364]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80092b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092c0:	4957      	ldr	r1, [pc, #348]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80092c2:	4313      	orrs	r3, r2
 80092c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d00a      	beq.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80092d4:	4b52      	ldr	r3, [pc, #328]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80092d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092e2:	494f      	ldr	r1, [pc, #316]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80092e4:	4313      	orrs	r3, r2
 80092e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00a      	beq.n	800930c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80092f6:	4b4a      	ldr	r3, [pc, #296]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80092f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009304:	4946      	ldr	r1, [pc, #280]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009306:	4313      	orrs	r3, r2
 8009308:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009314:	2b00      	cmp	r3, #0
 8009316:	d00a      	beq.n	800932e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009318:	4b41      	ldr	r3, [pc, #260]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800931a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800931e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009326:	493e      	ldr	r1, [pc, #248]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009328:	4313      	orrs	r3, r2
 800932a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009336:	2b00      	cmp	r3, #0
 8009338:	d00a      	beq.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800933a:	4b39      	ldr	r3, [pc, #228]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800933c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009340:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009348:	4935      	ldr	r1, [pc, #212]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800934a:	4313      	orrs	r3, r2
 800934c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009358:	2b00      	cmp	r3, #0
 800935a:	d00a      	beq.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800935c:	4b30      	ldr	r3, [pc, #192]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800935e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009362:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800936a:	492d      	ldr	r1, [pc, #180]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800936c:	4313      	orrs	r3, r2
 800936e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800937a:	2b00      	cmp	r3, #0
 800937c:	d011      	beq.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800937e:	4b28      	ldr	r3, [pc, #160]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009384:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800938c:	4924      	ldr	r1, [pc, #144]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800938e:	4313      	orrs	r3, r2
 8009390:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009398:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800939c:	d101      	bne.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800939e:	2301      	movs	r3, #1
 80093a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f003 0308 	and.w	r3, r3, #8
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d001      	beq.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80093ae:	2301      	movs	r3, #1
 80093b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00a      	beq.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80093be:	4b18      	ldr	r3, [pc, #96]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80093c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093cc:	4914      	ldr	r1, [pc, #80]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80093ce:	4313      	orrs	r3, r2
 80093d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d00b      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80093e0:	4b0f      	ldr	r3, [pc, #60]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80093e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093f0:	490b      	ldr	r1, [pc, #44]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80093f2:	4313      	orrs	r3, r2
 80093f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009400:	2b00      	cmp	r3, #0
 8009402:	d00f      	beq.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8009404:	4b06      	ldr	r3, [pc, #24]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800940a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009414:	4902      	ldr	r1, [pc, #8]	; (8009420 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8009416:	4313      	orrs	r3, r2
 8009418:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800941c:	e002      	b.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800941e:	bf00      	nop
 8009420:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800942c:	2b00      	cmp	r3, #0
 800942e:	d00b      	beq.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009430:	4b8a      	ldr	r3, [pc, #552]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009432:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009436:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009440:	4986      	ldr	r1, [pc, #536]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009442:	4313      	orrs	r3, r2
 8009444:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009450:	2b00      	cmp	r3, #0
 8009452:	d00b      	beq.n	800946c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8009454:	4b81      	ldr	r3, [pc, #516]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009456:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800945a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009464:	497d      	ldr	r1, [pc, #500]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009466:	4313      	orrs	r3, r2
 8009468:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	2b01      	cmp	r3, #1
 8009470:	d006      	beq.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800947a:	2b00      	cmp	r3, #0
 800947c:	f000 80d6 	beq.w	800962c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009480:	4b76      	ldr	r3, [pc, #472]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a75      	ldr	r2, [pc, #468]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009486:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800948a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800948c:	f7fa ff1e 	bl	80042cc <HAL_GetTick>
 8009490:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009492:	e008      	b.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009494:	f7fa ff1a 	bl	80042cc <HAL_GetTick>
 8009498:	4602      	mov	r2, r0
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	1ad3      	subs	r3, r2, r3
 800949e:	2b64      	cmp	r3, #100	; 0x64
 80094a0:	d901      	bls.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80094a2:	2303      	movs	r3, #3
 80094a4:	e195      	b.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80094a6:	4b6d      	ldr	r3, [pc, #436]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d1f0      	bne.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f003 0301 	and.w	r3, r3, #1
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d021      	beq.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d11d      	bne.n	8009502 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80094c6:	4b65      	ldr	r3, [pc, #404]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80094c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094cc:	0c1b      	lsrs	r3, r3, #16
 80094ce:	f003 0303 	and.w	r3, r3, #3
 80094d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80094d4:	4b61      	ldr	r3, [pc, #388]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80094d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094da:	0e1b      	lsrs	r3, r3, #24
 80094dc:	f003 030f 	and.w	r3, r3, #15
 80094e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	019a      	lsls	r2, r3, #6
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	041b      	lsls	r3, r3, #16
 80094ec:	431a      	orrs	r2, r3
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	061b      	lsls	r3, r3, #24
 80094f2:	431a      	orrs	r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	071b      	lsls	r3, r3, #28
 80094fa:	4958      	ldr	r1, [pc, #352]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80094fc:	4313      	orrs	r3, r2
 80094fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800950a:	2b00      	cmp	r3, #0
 800950c:	d004      	beq.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009512:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009516:	d00a      	beq.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009520:	2b00      	cmp	r3, #0
 8009522:	d02e      	beq.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009528:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800952c:	d129      	bne.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800952e:	4b4b      	ldr	r3, [pc, #300]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009534:	0c1b      	lsrs	r3, r3, #16
 8009536:	f003 0303 	and.w	r3, r3, #3
 800953a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800953c:	4b47      	ldr	r3, [pc, #284]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800953e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009542:	0f1b      	lsrs	r3, r3, #28
 8009544:	f003 0307 	and.w	r3, r3, #7
 8009548:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	019a      	lsls	r2, r3, #6
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	041b      	lsls	r3, r3, #16
 8009554:	431a      	orrs	r2, r3
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	68db      	ldr	r3, [r3, #12]
 800955a:	061b      	lsls	r3, r3, #24
 800955c:	431a      	orrs	r2, r3
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	071b      	lsls	r3, r3, #28
 8009562:	493e      	ldr	r1, [pc, #248]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009564:	4313      	orrs	r3, r2
 8009566:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800956a:	4b3c      	ldr	r3, [pc, #240]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800956c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009570:	f023 021f 	bic.w	r2, r3, #31
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009578:	3b01      	subs	r3, #1
 800957a:	4938      	ldr	r1, [pc, #224]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800957c:	4313      	orrs	r3, r2
 800957e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800958a:	2b00      	cmp	r3, #0
 800958c:	d01d      	beq.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800958e:	4b33      	ldr	r3, [pc, #204]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009594:	0e1b      	lsrs	r3, r3, #24
 8009596:	f003 030f 	and.w	r3, r3, #15
 800959a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800959c:	4b2f      	ldr	r3, [pc, #188]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800959e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095a2:	0f1b      	lsrs	r3, r3, #28
 80095a4:	f003 0307 	and.w	r3, r3, #7
 80095a8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	019a      	lsls	r2, r3, #6
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	691b      	ldr	r3, [r3, #16]
 80095b4:	041b      	lsls	r3, r3, #16
 80095b6:	431a      	orrs	r2, r3
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	061b      	lsls	r3, r3, #24
 80095bc:	431a      	orrs	r2, r3
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	071b      	lsls	r3, r3, #28
 80095c2:	4926      	ldr	r1, [pc, #152]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80095c4:	4313      	orrs	r3, r2
 80095c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d011      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	019a      	lsls	r2, r3, #6
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	691b      	ldr	r3, [r3, #16]
 80095e0:	041b      	lsls	r3, r3, #16
 80095e2:	431a      	orrs	r2, r3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	061b      	lsls	r3, r3, #24
 80095ea:	431a      	orrs	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	071b      	lsls	r3, r3, #28
 80095f2:	491a      	ldr	r1, [pc, #104]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80095f4:	4313      	orrs	r3, r2
 80095f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80095fa:	4b18      	ldr	r3, [pc, #96]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a17      	ldr	r2, [pc, #92]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009600:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009604:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009606:	f7fa fe61 	bl	80042cc <HAL_GetTick>
 800960a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800960c:	e008      	b.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800960e:	f7fa fe5d 	bl	80042cc <HAL_GetTick>
 8009612:	4602      	mov	r2, r0
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	1ad3      	subs	r3, r2, r3
 8009618:	2b64      	cmp	r3, #100	; 0x64
 800961a:	d901      	bls.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800961c:	2303      	movs	r3, #3
 800961e:	e0d8      	b.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009620:	4b0e      	ldr	r3, [pc, #56]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009628:	2b00      	cmp	r3, #0
 800962a:	d0f0      	beq.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	2b01      	cmp	r3, #1
 8009630:	f040 80ce 	bne.w	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009634:	4b09      	ldr	r3, [pc, #36]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a08      	ldr	r2, [pc, #32]	; (800965c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800963a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800963e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009640:	f7fa fe44 	bl	80042cc <HAL_GetTick>
 8009644:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009646:	e00b      	b.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009648:	f7fa fe40 	bl	80042cc <HAL_GetTick>
 800964c:	4602      	mov	r2, r0
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	1ad3      	subs	r3, r2, r3
 8009652:	2b64      	cmp	r3, #100	; 0x64
 8009654:	d904      	bls.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009656:	2303      	movs	r3, #3
 8009658:	e0bb      	b.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800965a:	bf00      	nop
 800965c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009660:	4b5e      	ldr	r3, [pc, #376]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800966c:	d0ec      	beq.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009676:	2b00      	cmp	r3, #0
 8009678:	d003      	beq.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800967e:	2b00      	cmp	r3, #0
 8009680:	d009      	beq.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800968a:	2b00      	cmp	r3, #0
 800968c:	d02e      	beq.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009692:	2b00      	cmp	r3, #0
 8009694:	d12a      	bne.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009696:	4b51      	ldr	r3, [pc, #324]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800969c:	0c1b      	lsrs	r3, r3, #16
 800969e:	f003 0303 	and.w	r3, r3, #3
 80096a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80096a4:	4b4d      	ldr	r3, [pc, #308]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80096a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096aa:	0f1b      	lsrs	r3, r3, #28
 80096ac:	f003 0307 	and.w	r3, r3, #7
 80096b0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	695b      	ldr	r3, [r3, #20]
 80096b6:	019a      	lsls	r2, r3, #6
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	041b      	lsls	r3, r3, #16
 80096bc:	431a      	orrs	r2, r3
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	699b      	ldr	r3, [r3, #24]
 80096c2:	061b      	lsls	r3, r3, #24
 80096c4:	431a      	orrs	r2, r3
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	071b      	lsls	r3, r3, #28
 80096ca:	4944      	ldr	r1, [pc, #272]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80096cc:	4313      	orrs	r3, r2
 80096ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80096d2:	4b42      	ldr	r3, [pc, #264]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80096d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096d8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096e0:	3b01      	subs	r3, #1
 80096e2:	021b      	lsls	r3, r3, #8
 80096e4:	493d      	ldr	r1, [pc, #244]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80096e6:	4313      	orrs	r3, r2
 80096e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d022      	beq.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009700:	d11d      	bne.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009702:	4b36      	ldr	r3, [pc, #216]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009708:	0e1b      	lsrs	r3, r3, #24
 800970a:	f003 030f 	and.w	r3, r3, #15
 800970e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009710:	4b32      	ldr	r3, [pc, #200]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009716:	0f1b      	lsrs	r3, r3, #28
 8009718:	f003 0307 	and.w	r3, r3, #7
 800971c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	695b      	ldr	r3, [r3, #20]
 8009722:	019a      	lsls	r2, r3, #6
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6a1b      	ldr	r3, [r3, #32]
 8009728:	041b      	lsls	r3, r3, #16
 800972a:	431a      	orrs	r2, r3
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	061b      	lsls	r3, r3, #24
 8009730:	431a      	orrs	r2, r3
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	071b      	lsls	r3, r3, #28
 8009736:	4929      	ldr	r1, [pc, #164]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009738:	4313      	orrs	r3, r2
 800973a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f003 0308 	and.w	r3, r3, #8
 8009746:	2b00      	cmp	r3, #0
 8009748:	d028      	beq.n	800979c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800974a:	4b24      	ldr	r3, [pc, #144]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800974c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009750:	0e1b      	lsrs	r3, r3, #24
 8009752:	f003 030f 	and.w	r3, r3, #15
 8009756:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009758:	4b20      	ldr	r3, [pc, #128]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800975a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800975e:	0c1b      	lsrs	r3, r3, #16
 8009760:	f003 0303 	and.w	r3, r3, #3
 8009764:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	695b      	ldr	r3, [r3, #20]
 800976a:	019a      	lsls	r2, r3, #6
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	041b      	lsls	r3, r3, #16
 8009770:	431a      	orrs	r2, r3
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	061b      	lsls	r3, r3, #24
 8009776:	431a      	orrs	r2, r3
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	69db      	ldr	r3, [r3, #28]
 800977c:	071b      	lsls	r3, r3, #28
 800977e:	4917      	ldr	r1, [pc, #92]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009780:	4313      	orrs	r3, r2
 8009782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009786:	4b15      	ldr	r3, [pc, #84]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800978c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009794:	4911      	ldr	r1, [pc, #68]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009796:	4313      	orrs	r3, r2
 8009798:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800979c:	4b0f      	ldr	r3, [pc, #60]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a0e      	ldr	r2, [pc, #56]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80097a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097a8:	f7fa fd90 	bl	80042cc <HAL_GetTick>
 80097ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80097ae:	e008      	b.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80097b0:	f7fa fd8c 	bl	80042cc <HAL_GetTick>
 80097b4:	4602      	mov	r2, r0
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	1ad3      	subs	r3, r2, r3
 80097ba:	2b64      	cmp	r3, #100	; 0x64
 80097bc:	d901      	bls.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80097be:	2303      	movs	r3, #3
 80097c0:	e007      	b.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80097c2:	4b06      	ldr	r3, [pc, #24]	; (80097dc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80097ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097ce:	d1ef      	bne.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80097d0:	2300      	movs	r3, #0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3720      	adds	r7, #32
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	40023800 	.word	0x40023800

080097e0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b082      	sub	sp, #8
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d101      	bne.n	80097f4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	e025      	b.n	8009840 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80097fa:	b2db      	uxtb	r3, r3
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d106      	bne.n	800980e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f7f8 fcc7 	bl	800219c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2202      	movs	r2, #2
 8009812:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	3304      	adds	r3, #4
 800981e:	4619      	mov	r1, r3
 8009820:	4610      	mov	r0, r2
 8009822:	f000 fb43 	bl	8009eac <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6818      	ldr	r0, [r3, #0]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	461a      	mov	r2, r3
 8009830:	6839      	ldr	r1, [r7, #0]
 8009832:	f000 fb97 	bl	8009f64 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2201      	movs	r2, #1
 800983a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800983e:	2300      	movs	r3, #0
}
 8009840:	4618      	mov	r0, r3
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b086      	sub	sp, #24
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800985a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800985c:	7dfb      	ldrb	r3, [r7, #23]
 800985e:	2b02      	cmp	r3, #2
 8009860:	d101      	bne.n	8009866 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8009862:	2302      	movs	r3, #2
 8009864:	e021      	b.n	80098aa <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009866:	7dfb      	ldrb	r3, [r7, #23]
 8009868:	2b01      	cmp	r3, #1
 800986a:	d002      	beq.n	8009872 <HAL_SDRAM_SendCommand+0x2a>
 800986c:	7dfb      	ldrb	r3, [r7, #23]
 800986e:	2b05      	cmp	r3, #5
 8009870:	d118      	bne.n	80098a4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2202      	movs	r2, #2
 8009876:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	68b9      	ldr	r1, [r7, #8]
 8009882:	4618      	mov	r0, r3
 8009884:	f000 fbd8 	bl	800a038 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	2b02      	cmp	r3, #2
 800988e:	d104      	bne.n	800989a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2205      	movs	r2, #5
 8009894:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009898:	e006      	b.n	80098a8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2201      	movs	r2, #1
 800989e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80098a2:	e001      	b.n	80098a8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80098a4:	2301      	movs	r3, #1
 80098a6:	e000      	b.n	80098aa <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3718      	adds	r7, #24
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b082      	sub	sp, #8
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	2b02      	cmp	r3, #2
 80098c6:	d101      	bne.n	80098cc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80098c8:	2302      	movs	r3, #2
 80098ca:	e016      	b.n	80098fa <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d10f      	bne.n	80098f8 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2202      	movs	r2, #2
 80098dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	6839      	ldr	r1, [r7, #0]
 80098e6:	4618      	mov	r0, r3
 80098e8:	f000 fbca 	bl	800a080 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2201      	movs	r2, #1
 80098f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80098f4:	2300      	movs	r3, #0
 80098f6:	e000      	b.n	80098fa <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80098f8:	2301      	movs	r3, #1
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3708      	adds	r7, #8
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b082      	sub	sp, #8
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d101      	bne.n	8009914 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009910:	2301      	movs	r3, #1
 8009912:	e049      	b.n	80099a8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800991a:	b2db      	uxtb	r3, r3
 800991c:	2b00      	cmp	r3, #0
 800991e:	d106      	bne.n	800992e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f7f8 fb5d 	bl	8001fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2202      	movs	r2, #2
 8009932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	3304      	adds	r3, #4
 800993e:	4619      	mov	r1, r3
 8009940:	4610      	mov	r0, r2
 8009942:	f000 f9f5 	bl	8009d30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	2201      	movs	r2, #1
 800994a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2201      	movs	r2, #1
 8009952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2201      	movs	r2, #1
 800995a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2201      	movs	r2, #1
 8009962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2201      	movs	r2, #1
 800996a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2201      	movs	r2, #1
 8009972:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2201      	movs	r2, #1
 800997a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2201      	movs	r2, #1
 8009982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2201      	movs	r2, #1
 800998a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2201      	movs	r2, #1
 8009992:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2201      	movs	r2, #1
 800999a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2201      	movs	r2, #1
 80099a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099a6:	2300      	movs	r3, #0
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3708      	adds	r7, #8
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d001      	beq.n	80099c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80099c4:	2301      	movs	r3, #1
 80099c6:	e054      	b.n	8009a72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2202      	movs	r2, #2
 80099cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	68da      	ldr	r2, [r3, #12]
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f042 0201 	orr.w	r2, r2, #1
 80099de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	4a26      	ldr	r2, [pc, #152]	; (8009a80 <HAL_TIM_Base_Start_IT+0xd0>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d022      	beq.n	8009a30 <HAL_TIM_Base_Start_IT+0x80>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099f2:	d01d      	beq.n	8009a30 <HAL_TIM_Base_Start_IT+0x80>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a22      	ldr	r2, [pc, #136]	; (8009a84 <HAL_TIM_Base_Start_IT+0xd4>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d018      	beq.n	8009a30 <HAL_TIM_Base_Start_IT+0x80>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a21      	ldr	r2, [pc, #132]	; (8009a88 <HAL_TIM_Base_Start_IT+0xd8>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d013      	beq.n	8009a30 <HAL_TIM_Base_Start_IT+0x80>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a1f      	ldr	r2, [pc, #124]	; (8009a8c <HAL_TIM_Base_Start_IT+0xdc>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d00e      	beq.n	8009a30 <HAL_TIM_Base_Start_IT+0x80>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a1e      	ldr	r2, [pc, #120]	; (8009a90 <HAL_TIM_Base_Start_IT+0xe0>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d009      	beq.n	8009a30 <HAL_TIM_Base_Start_IT+0x80>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a1c      	ldr	r2, [pc, #112]	; (8009a94 <HAL_TIM_Base_Start_IT+0xe4>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d004      	beq.n	8009a30 <HAL_TIM_Base_Start_IT+0x80>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a1b      	ldr	r2, [pc, #108]	; (8009a98 <HAL_TIM_Base_Start_IT+0xe8>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d115      	bne.n	8009a5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	689a      	ldr	r2, [r3, #8]
 8009a36:	4b19      	ldr	r3, [pc, #100]	; (8009a9c <HAL_TIM_Base_Start_IT+0xec>)
 8009a38:	4013      	ands	r3, r2
 8009a3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2b06      	cmp	r3, #6
 8009a40:	d015      	beq.n	8009a6e <HAL_TIM_Base_Start_IT+0xbe>
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a48:	d011      	beq.n	8009a6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f042 0201 	orr.w	r2, r2, #1
 8009a58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a5a:	e008      	b.n	8009a6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f042 0201 	orr.w	r2, r2, #1
 8009a6a:	601a      	str	r2, [r3, #0]
 8009a6c:	e000      	b.n	8009a70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3714      	adds	r7, #20
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	40010000 	.word	0x40010000
 8009a84:	40000400 	.word	0x40000400
 8009a88:	40000800 	.word	0x40000800
 8009a8c:	40000c00 	.word	0x40000c00
 8009a90:	40010400 	.word	0x40010400
 8009a94:	40014000 	.word	0x40014000
 8009a98:	40001800 	.word	0x40001800
 8009a9c:	00010007 	.word	0x00010007

08009aa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	f003 0302 	and.w	r3, r3, #2
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d122      	bne.n	8009afc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	f003 0302 	and.w	r3, r3, #2
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	d11b      	bne.n	8009afc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f06f 0202 	mvn.w	r2, #2
 8009acc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	699b      	ldr	r3, [r3, #24]
 8009ada:	f003 0303 	and.w	r3, r3, #3
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d003      	beq.n	8009aea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f905 	bl	8009cf2 <HAL_TIM_IC_CaptureCallback>
 8009ae8:	e005      	b.n	8009af6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f000 f8f7 	bl	8009cde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 f908 	bl	8009d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	691b      	ldr	r3, [r3, #16]
 8009b02:	f003 0304 	and.w	r3, r3, #4
 8009b06:	2b04      	cmp	r3, #4
 8009b08:	d122      	bne.n	8009b50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	f003 0304 	and.w	r3, r3, #4
 8009b14:	2b04      	cmp	r3, #4
 8009b16:	d11b      	bne.n	8009b50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f06f 0204 	mvn.w	r2, #4
 8009b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2202      	movs	r2, #2
 8009b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	699b      	ldr	r3, [r3, #24]
 8009b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d003      	beq.n	8009b3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 f8db 	bl	8009cf2 <HAL_TIM_IC_CaptureCallback>
 8009b3c:	e005      	b.n	8009b4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 f8cd 	bl	8009cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 f8de 	bl	8009d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	691b      	ldr	r3, [r3, #16]
 8009b56:	f003 0308 	and.w	r3, r3, #8
 8009b5a:	2b08      	cmp	r3, #8
 8009b5c:	d122      	bne.n	8009ba4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	f003 0308 	and.w	r3, r3, #8
 8009b68:	2b08      	cmp	r3, #8
 8009b6a:	d11b      	bne.n	8009ba4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f06f 0208 	mvn.w	r2, #8
 8009b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2204      	movs	r2, #4
 8009b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	69db      	ldr	r3, [r3, #28]
 8009b82:	f003 0303 	and.w	r3, r3, #3
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d003      	beq.n	8009b92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 f8b1 	bl	8009cf2 <HAL_TIM_IC_CaptureCallback>
 8009b90:	e005      	b.n	8009b9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 f8a3 	bl	8009cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 f8b4 	bl	8009d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	691b      	ldr	r3, [r3, #16]
 8009baa:	f003 0310 	and.w	r3, r3, #16
 8009bae:	2b10      	cmp	r3, #16
 8009bb0:	d122      	bne.n	8009bf8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	f003 0310 	and.w	r3, r3, #16
 8009bbc:	2b10      	cmp	r3, #16
 8009bbe:	d11b      	bne.n	8009bf8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f06f 0210 	mvn.w	r2, #16
 8009bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2208      	movs	r2, #8
 8009bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	69db      	ldr	r3, [r3, #28]
 8009bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d003      	beq.n	8009be6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 f887 	bl	8009cf2 <HAL_TIM_IC_CaptureCallback>
 8009be4:	e005      	b.n	8009bf2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 f879 	bl	8009cde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 f88a 	bl	8009d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	691b      	ldr	r3, [r3, #16]
 8009bfe:	f003 0301 	and.w	r3, r3, #1
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d10e      	bne.n	8009c24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	f003 0301 	and.w	r3, r3, #1
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d107      	bne.n	8009c24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f06f 0201 	mvn.w	r2, #1
 8009c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f7f7 ffe4 	bl	8001bec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	691b      	ldr	r3, [r3, #16]
 8009c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c2e:	2b80      	cmp	r3, #128	; 0x80
 8009c30:	d10e      	bne.n	8009c50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c3c:	2b80      	cmp	r3, #128	; 0x80
 8009c3e:	d107      	bne.n	8009c50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 f91a 	bl	8009e84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c5e:	d10e      	bne.n	8009c7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	68db      	ldr	r3, [r3, #12]
 8009c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c6a:	2b80      	cmp	r3, #128	; 0x80
 8009c6c:	d107      	bne.n	8009c7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 f90d 	bl	8009e98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	691b      	ldr	r3, [r3, #16]
 8009c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c88:	2b40      	cmp	r3, #64	; 0x40
 8009c8a:	d10e      	bne.n	8009caa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	68db      	ldr	r3, [r3, #12]
 8009c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c96:	2b40      	cmp	r3, #64	; 0x40
 8009c98:	d107      	bne.n	8009caa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f000 f838 	bl	8009d1a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	f003 0320 	and.w	r3, r3, #32
 8009cb4:	2b20      	cmp	r3, #32
 8009cb6:	d10e      	bne.n	8009cd6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	f003 0320 	and.w	r3, r3, #32
 8009cc2:	2b20      	cmp	r3, #32
 8009cc4:	d107      	bne.n	8009cd6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f06f 0220 	mvn.w	r2, #32
 8009cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 f8cd 	bl	8009e70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cd6:	bf00      	nop
 8009cd8:	3708      	adds	r7, #8
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009cde:	b480      	push	{r7}
 8009ce0:	b083      	sub	sp, #12
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009ce6:	bf00      	nop
 8009ce8:	370c      	adds	r7, #12
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr

08009cf2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009cf2:	b480      	push	{r7}
 8009cf4:	b083      	sub	sp, #12
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009cfa:	bf00      	nop
 8009cfc:	370c      	adds	r7, #12
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d04:	4770      	bx	lr

08009d06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d06:	b480      	push	{r7}
 8009d08:	b083      	sub	sp, #12
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d0e:	bf00      	nop
 8009d10:	370c      	adds	r7, #12
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr

08009d1a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	b083      	sub	sp, #12
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d22:	bf00      	nop
 8009d24:	370c      	adds	r7, #12
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr
	...

08009d30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b085      	sub	sp, #20
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a40      	ldr	r2, [pc, #256]	; (8009e44 <TIM_Base_SetConfig+0x114>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d013      	beq.n	8009d70 <TIM_Base_SetConfig+0x40>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d4e:	d00f      	beq.n	8009d70 <TIM_Base_SetConfig+0x40>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a3d      	ldr	r2, [pc, #244]	; (8009e48 <TIM_Base_SetConfig+0x118>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d00b      	beq.n	8009d70 <TIM_Base_SetConfig+0x40>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a3c      	ldr	r2, [pc, #240]	; (8009e4c <TIM_Base_SetConfig+0x11c>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d007      	beq.n	8009d70 <TIM_Base_SetConfig+0x40>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a3b      	ldr	r2, [pc, #236]	; (8009e50 <TIM_Base_SetConfig+0x120>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d003      	beq.n	8009d70 <TIM_Base_SetConfig+0x40>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a3a      	ldr	r2, [pc, #232]	; (8009e54 <TIM_Base_SetConfig+0x124>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d108      	bne.n	8009d82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	68fa      	ldr	r2, [r7, #12]
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	4a2f      	ldr	r2, [pc, #188]	; (8009e44 <TIM_Base_SetConfig+0x114>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d02b      	beq.n	8009de2 <TIM_Base_SetConfig+0xb2>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d90:	d027      	beq.n	8009de2 <TIM_Base_SetConfig+0xb2>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4a2c      	ldr	r2, [pc, #176]	; (8009e48 <TIM_Base_SetConfig+0x118>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d023      	beq.n	8009de2 <TIM_Base_SetConfig+0xb2>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	4a2b      	ldr	r2, [pc, #172]	; (8009e4c <TIM_Base_SetConfig+0x11c>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d01f      	beq.n	8009de2 <TIM_Base_SetConfig+0xb2>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4a2a      	ldr	r2, [pc, #168]	; (8009e50 <TIM_Base_SetConfig+0x120>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d01b      	beq.n	8009de2 <TIM_Base_SetConfig+0xb2>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4a29      	ldr	r2, [pc, #164]	; (8009e54 <TIM_Base_SetConfig+0x124>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d017      	beq.n	8009de2 <TIM_Base_SetConfig+0xb2>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4a28      	ldr	r2, [pc, #160]	; (8009e58 <TIM_Base_SetConfig+0x128>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d013      	beq.n	8009de2 <TIM_Base_SetConfig+0xb2>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4a27      	ldr	r2, [pc, #156]	; (8009e5c <TIM_Base_SetConfig+0x12c>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d00f      	beq.n	8009de2 <TIM_Base_SetConfig+0xb2>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a26      	ldr	r2, [pc, #152]	; (8009e60 <TIM_Base_SetConfig+0x130>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d00b      	beq.n	8009de2 <TIM_Base_SetConfig+0xb2>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4a25      	ldr	r2, [pc, #148]	; (8009e64 <TIM_Base_SetConfig+0x134>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d007      	beq.n	8009de2 <TIM_Base_SetConfig+0xb2>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	4a24      	ldr	r2, [pc, #144]	; (8009e68 <TIM_Base_SetConfig+0x138>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d003      	beq.n	8009de2 <TIM_Base_SetConfig+0xb2>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4a23      	ldr	r2, [pc, #140]	; (8009e6c <TIM_Base_SetConfig+0x13c>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d108      	bne.n	8009df4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	68fa      	ldr	r2, [r7, #12]
 8009df0:	4313      	orrs	r3, r2
 8009df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	695b      	ldr	r3, [r3, #20]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	689a      	ldr	r2, [r3, #8]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a0a      	ldr	r2, [pc, #40]	; (8009e44 <TIM_Base_SetConfig+0x114>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d003      	beq.n	8009e28 <TIM_Base_SetConfig+0xf8>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4a0c      	ldr	r2, [pc, #48]	; (8009e54 <TIM_Base_SetConfig+0x124>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d103      	bne.n	8009e30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	691a      	ldr	r2, [r3, #16]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	615a      	str	r2, [r3, #20]
}
 8009e36:	bf00      	nop
 8009e38:	3714      	adds	r7, #20
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr
 8009e42:	bf00      	nop
 8009e44:	40010000 	.word	0x40010000
 8009e48:	40000400 	.word	0x40000400
 8009e4c:	40000800 	.word	0x40000800
 8009e50:	40000c00 	.word	0x40000c00
 8009e54:	40010400 	.word	0x40010400
 8009e58:	40014000 	.word	0x40014000
 8009e5c:	40014400 	.word	0x40014400
 8009e60:	40014800 	.word	0x40014800
 8009e64:	40001800 	.word	0x40001800
 8009e68:	40001c00 	.word	0x40001c00
 8009e6c:	40002000 	.word	0x40002000

08009e70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e78:	bf00      	nop
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e8c:	bf00      	nop
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009ea0:	bf00      	nop
 8009ea2:	370c      	adds	r7, #12
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
 8009eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d121      	bne.n	8009f02 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	4b27      	ldr	r3, [pc, #156]	; (8009f60 <FMC_SDRAM_Init+0xb4>)
 8009ec4:	4013      	ands	r3, r2
 8009ec6:	683a      	ldr	r2, [r7, #0]
 8009ec8:	6851      	ldr	r1, [r2, #4]
 8009eca:	683a      	ldr	r2, [r7, #0]
 8009ecc:	6892      	ldr	r2, [r2, #8]
 8009ece:	4311      	orrs	r1, r2
 8009ed0:	683a      	ldr	r2, [r7, #0]
 8009ed2:	68d2      	ldr	r2, [r2, #12]
 8009ed4:	4311      	orrs	r1, r2
 8009ed6:	683a      	ldr	r2, [r7, #0]
 8009ed8:	6912      	ldr	r2, [r2, #16]
 8009eda:	4311      	orrs	r1, r2
 8009edc:	683a      	ldr	r2, [r7, #0]
 8009ede:	6952      	ldr	r2, [r2, #20]
 8009ee0:	4311      	orrs	r1, r2
 8009ee2:	683a      	ldr	r2, [r7, #0]
 8009ee4:	6992      	ldr	r2, [r2, #24]
 8009ee6:	4311      	orrs	r1, r2
 8009ee8:	683a      	ldr	r2, [r7, #0]
 8009eea:	69d2      	ldr	r2, [r2, #28]
 8009eec:	4311      	orrs	r1, r2
 8009eee:	683a      	ldr	r2, [r7, #0]
 8009ef0:	6a12      	ldr	r2, [r2, #32]
 8009ef2:	4311      	orrs	r1, r2
 8009ef4:	683a      	ldr	r2, [r7, #0]
 8009ef6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009ef8:	430a      	orrs	r2, r1
 8009efa:	431a      	orrs	r2, r3
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	601a      	str	r2, [r3, #0]
 8009f00:	e026      	b.n	8009f50 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	69d9      	ldr	r1, [r3, #28]
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	6a1b      	ldr	r3, [r3, #32]
 8009f12:	4319      	orrs	r1, r3
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f18:	430b      	orrs	r3, r1
 8009f1a:	431a      	orrs	r2, r3
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	685a      	ldr	r2, [r3, #4]
 8009f24:	4b0e      	ldr	r3, [pc, #56]	; (8009f60 <FMC_SDRAM_Init+0xb4>)
 8009f26:	4013      	ands	r3, r2
 8009f28:	683a      	ldr	r2, [r7, #0]
 8009f2a:	6851      	ldr	r1, [r2, #4]
 8009f2c:	683a      	ldr	r2, [r7, #0]
 8009f2e:	6892      	ldr	r2, [r2, #8]
 8009f30:	4311      	orrs	r1, r2
 8009f32:	683a      	ldr	r2, [r7, #0]
 8009f34:	68d2      	ldr	r2, [r2, #12]
 8009f36:	4311      	orrs	r1, r2
 8009f38:	683a      	ldr	r2, [r7, #0]
 8009f3a:	6912      	ldr	r2, [r2, #16]
 8009f3c:	4311      	orrs	r1, r2
 8009f3e:	683a      	ldr	r2, [r7, #0]
 8009f40:	6952      	ldr	r2, [r2, #20]
 8009f42:	4311      	orrs	r1, r2
 8009f44:	683a      	ldr	r2, [r7, #0]
 8009f46:	6992      	ldr	r2, [r2, #24]
 8009f48:	430a      	orrs	r2, r1
 8009f4a:	431a      	orrs	r2, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	370c      	adds	r7, #12
 8009f56:	46bd      	mov	sp, r7
 8009f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5c:	4770      	bx	lr
 8009f5e:	bf00      	nop
 8009f60:	ffff8000 	.word	0xffff8000

08009f64 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d128      	bne.n	8009fc8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	1e59      	subs	r1, r3, #1
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	3b01      	subs	r3, #1
 8009f8a:	011b      	lsls	r3, r3, #4
 8009f8c:	4319      	orrs	r1, r3
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	689b      	ldr	r3, [r3, #8]
 8009f92:	3b01      	subs	r3, #1
 8009f94:	021b      	lsls	r3, r3, #8
 8009f96:	4319      	orrs	r1, r3
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	3b01      	subs	r3, #1
 8009f9e:	031b      	lsls	r3, r3, #12
 8009fa0:	4319      	orrs	r1, r3
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	3b01      	subs	r3, #1
 8009fa8:	041b      	lsls	r3, r3, #16
 8009faa:	4319      	orrs	r1, r3
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	695b      	ldr	r3, [r3, #20]
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	051b      	lsls	r3, r3, #20
 8009fb4:	4319      	orrs	r1, r3
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	699b      	ldr	r3, [r3, #24]
 8009fba:	3b01      	subs	r3, #1
 8009fbc:	061b      	lsls	r3, r3, #24
 8009fbe:	430b      	orrs	r3, r1
 8009fc0:	431a      	orrs	r2, r3
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	609a      	str	r2, [r3, #8]
 8009fc6:	e02d      	b.n	800a024 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	689a      	ldr	r2, [r3, #8]
 8009fcc:	4b19      	ldr	r3, [pc, #100]	; (800a034 <FMC_SDRAM_Timing_Init+0xd0>)
 8009fce:	4013      	ands	r3, r2
 8009fd0:	68ba      	ldr	r2, [r7, #8]
 8009fd2:	68d2      	ldr	r2, [r2, #12]
 8009fd4:	3a01      	subs	r2, #1
 8009fd6:	0311      	lsls	r1, r2, #12
 8009fd8:	68ba      	ldr	r2, [r7, #8]
 8009fda:	6952      	ldr	r2, [r2, #20]
 8009fdc:	3a01      	subs	r2, #1
 8009fde:	0512      	lsls	r2, r2, #20
 8009fe0:	430a      	orrs	r2, r1
 8009fe2:	431a      	orrs	r2, r3
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	1e59      	subs	r1, r3, #1
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	3b01      	subs	r3, #1
 8009ffc:	011b      	lsls	r3, r3, #4
 8009ffe:	4319      	orrs	r1, r3
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	3b01      	subs	r3, #1
 800a006:	021b      	lsls	r3, r3, #8
 800a008:	4319      	orrs	r1, r3
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	691b      	ldr	r3, [r3, #16]
 800a00e:	3b01      	subs	r3, #1
 800a010:	041b      	lsls	r3, r3, #16
 800a012:	4319      	orrs	r1, r3
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	699b      	ldr	r3, [r3, #24]
 800a018:	3b01      	subs	r3, #1
 800a01a:	061b      	lsls	r3, r3, #24
 800a01c:	430b      	orrs	r3, r1
 800a01e:	431a      	orrs	r2, r3
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a024:	2300      	movs	r3, #0
}
 800a026:	4618      	mov	r0, r3
 800a028:	3714      	adds	r7, #20
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr
 800a032:	bf00      	nop
 800a034:	ff0f0fff 	.word	0xff0f0fff

0800a038 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	60f8      	str	r0, [r7, #12]
 800a040:	60b9      	str	r1, [r7, #8]
 800a042:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	691a      	ldr	r2, [r3, #16]
 800a048:	4b0c      	ldr	r3, [pc, #48]	; (800a07c <FMC_SDRAM_SendCommand+0x44>)
 800a04a:	4013      	ands	r3, r2
 800a04c:	68ba      	ldr	r2, [r7, #8]
 800a04e:	6811      	ldr	r1, [r2, #0]
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	6852      	ldr	r2, [r2, #4]
 800a054:	4311      	orrs	r1, r2
 800a056:	68ba      	ldr	r2, [r7, #8]
 800a058:	6892      	ldr	r2, [r2, #8]
 800a05a:	3a01      	subs	r2, #1
 800a05c:	0152      	lsls	r2, r2, #5
 800a05e:	4311      	orrs	r1, r2
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	68d2      	ldr	r2, [r2, #12]
 800a064:	0252      	lsls	r2, r2, #9
 800a066:	430a      	orrs	r2, r1
 800a068:	431a      	orrs	r2, r3
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800a06e:	2300      	movs	r3, #0
}
 800a070:	4618      	mov	r0, r3
 800a072:	3714      	adds	r7, #20
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr
 800a07c:	ffc00000 	.word	0xffc00000

0800a080 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	695a      	ldr	r2, [r3, #20]
 800a08e:	4b07      	ldr	r3, [pc, #28]	; (800a0ac <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800a090:	4013      	ands	r3, r2
 800a092:	683a      	ldr	r2, [r7, #0]
 800a094:	0052      	lsls	r2, r2, #1
 800a096:	431a      	orrs	r2, r3
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a09c:	2300      	movs	r3, #0
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	370c      	adds	r7, #12
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a8:	4770      	bx	lr
 800a0aa:	bf00      	nop
 800a0ac:	ffffc001 	.word	0xffffc001

0800a0b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b087      	sub	sp, #28
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a0be:	79fb      	ldrb	r3, [r7, #7]
 800a0c0:	2b02      	cmp	r3, #2
 800a0c2:	d165      	bne.n	800a190 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	4a41      	ldr	r2, [pc, #260]	; (800a1cc <USB_SetTurnaroundTime+0x11c>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d906      	bls.n	800a0da <USB_SetTurnaroundTime+0x2a>
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	4a40      	ldr	r2, [pc, #256]	; (800a1d0 <USB_SetTurnaroundTime+0x120>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d202      	bcs.n	800a0da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a0d4:	230f      	movs	r3, #15
 800a0d6:	617b      	str	r3, [r7, #20]
 800a0d8:	e062      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	4a3c      	ldr	r2, [pc, #240]	; (800a1d0 <USB_SetTurnaroundTime+0x120>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d306      	bcc.n	800a0f0 <USB_SetTurnaroundTime+0x40>
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	4a3b      	ldr	r2, [pc, #236]	; (800a1d4 <USB_SetTurnaroundTime+0x124>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d202      	bcs.n	800a0f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a0ea:	230e      	movs	r3, #14
 800a0ec:	617b      	str	r3, [r7, #20]
 800a0ee:	e057      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	4a38      	ldr	r2, [pc, #224]	; (800a1d4 <USB_SetTurnaroundTime+0x124>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d306      	bcc.n	800a106 <USB_SetTurnaroundTime+0x56>
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	4a37      	ldr	r2, [pc, #220]	; (800a1d8 <USB_SetTurnaroundTime+0x128>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d202      	bcs.n	800a106 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a100:	230d      	movs	r3, #13
 800a102:	617b      	str	r3, [r7, #20]
 800a104:	e04c      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	4a33      	ldr	r2, [pc, #204]	; (800a1d8 <USB_SetTurnaroundTime+0x128>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d306      	bcc.n	800a11c <USB_SetTurnaroundTime+0x6c>
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	4a32      	ldr	r2, [pc, #200]	; (800a1dc <USB_SetTurnaroundTime+0x12c>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d802      	bhi.n	800a11c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a116:	230c      	movs	r3, #12
 800a118:	617b      	str	r3, [r7, #20]
 800a11a:	e041      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	4a2f      	ldr	r2, [pc, #188]	; (800a1dc <USB_SetTurnaroundTime+0x12c>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d906      	bls.n	800a132 <USB_SetTurnaroundTime+0x82>
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	4a2e      	ldr	r2, [pc, #184]	; (800a1e0 <USB_SetTurnaroundTime+0x130>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d802      	bhi.n	800a132 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a12c:	230b      	movs	r3, #11
 800a12e:	617b      	str	r3, [r7, #20]
 800a130:	e036      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	4a2a      	ldr	r2, [pc, #168]	; (800a1e0 <USB_SetTurnaroundTime+0x130>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d906      	bls.n	800a148 <USB_SetTurnaroundTime+0x98>
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	4a29      	ldr	r2, [pc, #164]	; (800a1e4 <USB_SetTurnaroundTime+0x134>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d802      	bhi.n	800a148 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a142:	230a      	movs	r3, #10
 800a144:	617b      	str	r3, [r7, #20]
 800a146:	e02b      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	4a26      	ldr	r2, [pc, #152]	; (800a1e4 <USB_SetTurnaroundTime+0x134>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d906      	bls.n	800a15e <USB_SetTurnaroundTime+0xae>
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	4a25      	ldr	r2, [pc, #148]	; (800a1e8 <USB_SetTurnaroundTime+0x138>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d202      	bcs.n	800a15e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a158:	2309      	movs	r3, #9
 800a15a:	617b      	str	r3, [r7, #20]
 800a15c:	e020      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	4a21      	ldr	r2, [pc, #132]	; (800a1e8 <USB_SetTurnaroundTime+0x138>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d306      	bcc.n	800a174 <USB_SetTurnaroundTime+0xc4>
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	4a20      	ldr	r2, [pc, #128]	; (800a1ec <USB_SetTurnaroundTime+0x13c>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d802      	bhi.n	800a174 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a16e:	2308      	movs	r3, #8
 800a170:	617b      	str	r3, [r7, #20]
 800a172:	e015      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	4a1d      	ldr	r2, [pc, #116]	; (800a1ec <USB_SetTurnaroundTime+0x13c>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d906      	bls.n	800a18a <USB_SetTurnaroundTime+0xda>
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	4a1c      	ldr	r2, [pc, #112]	; (800a1f0 <USB_SetTurnaroundTime+0x140>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d202      	bcs.n	800a18a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a184:	2307      	movs	r3, #7
 800a186:	617b      	str	r3, [r7, #20]
 800a188:	e00a      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a18a:	2306      	movs	r3, #6
 800a18c:	617b      	str	r3, [r7, #20]
 800a18e:	e007      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a190:	79fb      	ldrb	r3, [r7, #7]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d102      	bne.n	800a19c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a196:	2309      	movs	r3, #9
 800a198:	617b      	str	r3, [r7, #20]
 800a19a:	e001      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a19c:	2309      	movs	r3, #9
 800a19e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	68da      	ldr	r2, [r3, #12]
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	029b      	lsls	r3, r3, #10
 800a1b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a1b8:	431a      	orrs	r2, r3
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	371c      	adds	r7, #28
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr
 800a1cc:	00d8acbf 	.word	0x00d8acbf
 800a1d0:	00e4e1c0 	.word	0x00e4e1c0
 800a1d4:	00f42400 	.word	0x00f42400
 800a1d8:	01067380 	.word	0x01067380
 800a1dc:	011a499f 	.word	0x011a499f
 800a1e0:	01312cff 	.word	0x01312cff
 800a1e4:	014ca43f 	.word	0x014ca43f
 800a1e8:	016e3600 	.word	0x016e3600
 800a1ec:	01a6ab1f 	.word	0x01a6ab1f
 800a1f0:	01e84800 	.word	0x01e84800

0800a1f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b085      	sub	sp, #20
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a1fe:	2300      	movs	r3, #0
 800a200:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	3301      	adds	r3, #1
 800a206:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	4a13      	ldr	r2, [pc, #76]	; (800a258 <USB_FlushTxFifo+0x64>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d901      	bls.n	800a214 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a210:	2303      	movs	r3, #3
 800a212:	e01b      	b.n	800a24c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	691b      	ldr	r3, [r3, #16]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	daf2      	bge.n	800a202 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a21c:	2300      	movs	r3, #0
 800a21e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	019b      	lsls	r3, r3, #6
 800a224:	f043 0220 	orr.w	r2, r3, #32
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	3301      	adds	r3, #1
 800a230:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	4a08      	ldr	r2, [pc, #32]	; (800a258 <USB_FlushTxFifo+0x64>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d901      	bls.n	800a23e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a23a:	2303      	movs	r3, #3
 800a23c:	e006      	b.n	800a24c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	691b      	ldr	r3, [r3, #16]
 800a242:	f003 0320 	and.w	r3, r3, #32
 800a246:	2b20      	cmp	r3, #32
 800a248:	d0f0      	beq.n	800a22c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a24a:	2300      	movs	r3, #0
}
 800a24c:	4618      	mov	r0, r3
 800a24e:	3714      	adds	r7, #20
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr
 800a258:	00030d40 	.word	0x00030d40

0800a25c <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b087      	sub	sp, #28
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a26e:	689b      	ldr	r3, [r3, #8]
 800a270:	f003 0306 	and.w	r3, r3, #6
 800a274:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d102      	bne.n	800a282 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a27c:	2300      	movs	r3, #0
 800a27e:	75fb      	strb	r3, [r7, #23]
 800a280:	e00a      	b.n	800a298 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2b02      	cmp	r3, #2
 800a286:	d002      	beq.n	800a28e <USB_GetDevSpeed+0x32>
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2b06      	cmp	r3, #6
 800a28c:	d102      	bne.n	800a294 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a28e:	2302      	movs	r3, #2
 800a290:	75fb      	strb	r3, [r7, #23]
 800a292:	e001      	b.n	800a298 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a294:	230f      	movs	r3, #15
 800a296:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a298:	7dfb      	ldrb	r3, [r7, #23]
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	371c      	adds	r7, #28
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr

0800a2a6 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a2a6:	b480      	push	{r7}
 800a2a8:	b087      	sub	sp, #28
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
 800a2ae:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	785b      	ldrb	r3, [r3, #1]
 800a2c0:	2b01      	cmp	r3, #1
 800a2c2:	d14a      	bne.n	800a35a <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	015a      	lsls	r2, r3, #5
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a2d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a2dc:	f040 8086 	bne.w	800a3ec <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	781b      	ldrb	r3, [r3, #0]
 800a2e4:	015a      	lsls	r2, r3, #5
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	4413      	add	r3, r2
 800a2ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	683a      	ldr	r2, [r7, #0]
 800a2f2:	7812      	ldrb	r2, [r2, #0]
 800a2f4:	0151      	lsls	r1, r2, #5
 800a2f6:	693a      	ldr	r2, [r7, #16]
 800a2f8:	440a      	add	r2, r1
 800a2fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a302:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	015a      	lsls	r2, r3, #5
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	4413      	add	r3, r2
 800a30e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	683a      	ldr	r2, [r7, #0]
 800a316:	7812      	ldrb	r2, [r2, #0]
 800a318:	0151      	lsls	r1, r2, #5
 800a31a:	693a      	ldr	r2, [r7, #16]
 800a31c:	440a      	add	r2, r1
 800a31e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a322:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a326:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	3301      	adds	r3, #1
 800a32c:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f242 7210 	movw	r2, #10000	; 0x2710
 800a334:	4293      	cmp	r3, r2
 800a336:	d902      	bls.n	800a33e <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a338:	2301      	movs	r3, #1
 800a33a:	75fb      	strb	r3, [r7, #23]
          break;
 800a33c:	e056      	b.n	800a3ec <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	015a      	lsls	r2, r3, #5
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	4413      	add	r3, r2
 800a348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a352:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a356:	d0e7      	beq.n	800a328 <USB_EPStopXfer+0x82>
 800a358:	e048      	b.n	800a3ec <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	015a      	lsls	r2, r3, #5
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	4413      	add	r3, r2
 800a364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a36e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a372:	d13b      	bne.n	800a3ec <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	015a      	lsls	r2, r3, #5
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	4413      	add	r3, r2
 800a37e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	683a      	ldr	r2, [r7, #0]
 800a386:	7812      	ldrb	r2, [r2, #0]
 800a388:	0151      	lsls	r1, r2, #5
 800a38a:	693a      	ldr	r2, [r7, #16]
 800a38c:	440a      	add	r2, r1
 800a38e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a392:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a396:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	015a      	lsls	r2, r3, #5
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	683a      	ldr	r2, [r7, #0]
 800a3aa:	7812      	ldrb	r2, [r2, #0]
 800a3ac:	0151      	lsls	r1, r2, #5
 800a3ae:	693a      	ldr	r2, [r7, #16]
 800a3b0:	440a      	add	r2, r1
 800a3b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a3ba:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	3301      	adds	r3, #1
 800a3c0:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f242 7210 	movw	r2, #10000	; 0x2710
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d902      	bls.n	800a3d2 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	75fb      	strb	r3, [r7, #23]
          break;
 800a3d0:	e00c      	b.n	800a3ec <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	015a      	lsls	r2, r3, #5
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	4413      	add	r3, r2
 800a3dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a3e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a3ea:	d0e7      	beq.n	800a3bc <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a3ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	371c      	adds	r7, #28
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a3fa:	b480      	push	{r7}
 800a3fc:	b089      	sub	sp, #36	; 0x24
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	60f8      	str	r0, [r7, #12]
 800a402:	60b9      	str	r1, [r7, #8]
 800a404:	4611      	mov	r1, r2
 800a406:	461a      	mov	r2, r3
 800a408:	460b      	mov	r3, r1
 800a40a:	71fb      	strb	r3, [r7, #7]
 800a40c:	4613      	mov	r3, r2
 800a40e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a418:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d123      	bne.n	800a468 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a420:	88bb      	ldrh	r3, [r7, #4]
 800a422:	3303      	adds	r3, #3
 800a424:	089b      	lsrs	r3, r3, #2
 800a426:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a428:	2300      	movs	r3, #0
 800a42a:	61bb      	str	r3, [r7, #24]
 800a42c:	e018      	b.n	800a460 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a42e:	79fb      	ldrb	r3, [r7, #7]
 800a430:	031a      	lsls	r2, r3, #12
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	4413      	add	r3, r2
 800a436:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a43a:	461a      	mov	r2, r3
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a442:	69fb      	ldr	r3, [r7, #28]
 800a444:	3301      	adds	r3, #1
 800a446:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a448:	69fb      	ldr	r3, [r7, #28]
 800a44a:	3301      	adds	r3, #1
 800a44c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a44e:	69fb      	ldr	r3, [r7, #28]
 800a450:	3301      	adds	r3, #1
 800a452:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a454:	69fb      	ldr	r3, [r7, #28]
 800a456:	3301      	adds	r3, #1
 800a458:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	3301      	adds	r3, #1
 800a45e:	61bb      	str	r3, [r7, #24]
 800a460:	69ba      	ldr	r2, [r7, #24]
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	429a      	cmp	r2, r3
 800a466:	d3e2      	bcc.n	800a42e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a468:	2300      	movs	r3, #0
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3724      	adds	r7, #36	; 0x24
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr

0800a476 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a476:	b480      	push	{r7}
 800a478:	b08b      	sub	sp, #44	; 0x2c
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	60f8      	str	r0, [r7, #12]
 800a47e:	60b9      	str	r1, [r7, #8]
 800a480:	4613      	mov	r3, r2
 800a482:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a48c:	88fb      	ldrh	r3, [r7, #6]
 800a48e:	089b      	lsrs	r3, r3, #2
 800a490:	b29b      	uxth	r3, r3
 800a492:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a494:	88fb      	ldrh	r3, [r7, #6]
 800a496:	f003 0303 	and.w	r3, r3, #3
 800a49a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a49c:	2300      	movs	r3, #0
 800a49e:	623b      	str	r3, [r7, #32]
 800a4a0:	e014      	b.n	800a4cc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a4a2:	69bb      	ldr	r3, [r7, #24]
 800a4a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ac:	601a      	str	r2, [r3, #0]
    pDest++;
 800a4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4bc:	3301      	adds	r3, #1
 800a4be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a4c6:	6a3b      	ldr	r3, [r7, #32]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	623b      	str	r3, [r7, #32]
 800a4cc:	6a3a      	ldr	r2, [r7, #32]
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d3e6      	bcc.n	800a4a2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a4d4:	8bfb      	ldrh	r3, [r7, #30]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d01e      	beq.n	800a518 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	f107 0310 	add.w	r3, r7, #16
 800a4ea:	6812      	ldr	r2, [r2, #0]
 800a4ec:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a4ee:	693a      	ldr	r2, [r7, #16]
 800a4f0:	6a3b      	ldr	r3, [r7, #32]
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	00db      	lsls	r3, r3, #3
 800a4f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a4fa:	b2da      	uxtb	r2, r3
 800a4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fe:	701a      	strb	r2, [r3, #0]
      i++;
 800a500:	6a3b      	ldr	r3, [r7, #32]
 800a502:	3301      	adds	r3, #1
 800a504:	623b      	str	r3, [r7, #32]
      pDest++;
 800a506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a508:	3301      	adds	r3, #1
 800a50a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a50c:	8bfb      	ldrh	r3, [r7, #30]
 800a50e:	3b01      	subs	r3, #1
 800a510:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a512:	8bfb      	ldrh	r3, [r7, #30]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d1ea      	bne.n	800a4ee <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	372c      	adds	r7, #44	; 0x2c
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr

0800a526 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a526:	b480      	push	{r7}
 800a528:	b085      	sub	sp, #20
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	695b      	ldr	r3, [r3, #20]
 800a532:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	699b      	ldr	r3, [r3, #24]
 800a538:	68fa      	ldr	r2, [r7, #12]
 800a53a:	4013      	ands	r3, r2
 800a53c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a53e:	68fb      	ldr	r3, [r7, #12]
}
 800a540:	4618      	mov	r0, r3
 800a542:	3714      	adds	r7, #20
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a55e:	699b      	ldr	r3, [r3, #24]
 800a560:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a568:	69db      	ldr	r3, [r3, #28]
 800a56a:	68ba      	ldr	r2, [r7, #8]
 800a56c:	4013      	ands	r3, r2
 800a56e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	0c1b      	lsrs	r3, r3, #16
}
 800a574:	4618      	mov	r0, r3
 800a576:	3714      	adds	r7, #20
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr

0800a580 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a580:	b480      	push	{r7}
 800a582:	b085      	sub	sp, #20
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a592:	699b      	ldr	r3, [r3, #24]
 800a594:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a59c:	69db      	ldr	r3, [r3, #28]
 800a59e:	68ba      	ldr	r2, [r7, #8]
 800a5a0:	4013      	ands	r3, r2
 800a5a2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	b29b      	uxth	r3, r3
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3714      	adds	r7, #20
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	460b      	mov	r3, r1
 800a5be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a5c4:	78fb      	ldrb	r3, [r7, #3]
 800a5c6:	015a      	lsls	r2, r3, #5
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	4413      	add	r3, r2
 800a5cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5da:	695b      	ldr	r3, [r3, #20]
 800a5dc:	68ba      	ldr	r2, [r7, #8]
 800a5de:	4013      	ands	r3, r2
 800a5e0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a5e2:	68bb      	ldr	r3, [r7, #8]
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3714      	adds	r7, #20
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b087      	sub	sp, #28
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a606:	691b      	ldr	r3, [r3, #16]
 800a608:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a612:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a614:	78fb      	ldrb	r3, [r7, #3]
 800a616:	f003 030f 	and.w	r3, r3, #15
 800a61a:	68fa      	ldr	r2, [r7, #12]
 800a61c:	fa22 f303 	lsr.w	r3, r2, r3
 800a620:	01db      	lsls	r3, r3, #7
 800a622:	b2db      	uxtb	r3, r3
 800a624:	693a      	ldr	r2, [r7, #16]
 800a626:	4313      	orrs	r3, r2
 800a628:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a62a:	78fb      	ldrb	r3, [r7, #3]
 800a62c:	015a      	lsls	r2, r3, #5
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	4413      	add	r3, r2
 800a632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	693a      	ldr	r2, [r7, #16]
 800a63a:	4013      	ands	r3, r2
 800a63c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a63e:	68bb      	ldr	r3, [r7, #8]
}
 800a640:	4618      	mov	r0, r3
 800a642:	371c      	adds	r7, #28
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	695b      	ldr	r3, [r3, #20]
 800a658:	f003 0301 	and.w	r3, r3, #1
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	370c      	adds	r7, #12
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a682:	4619      	mov	r1, r3
 800a684:	4b09      	ldr	r3, [pc, #36]	; (800a6ac <USB_ActivateSetup+0x44>)
 800a686:	4013      	ands	r3, r2
 800a688:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	68fa      	ldr	r2, [r7, #12]
 800a694:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a69c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a69e:	2300      	movs	r3, #0
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3714      	adds	r7, #20
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr
 800a6ac:	fffff800 	.word	0xfffff800

0800a6b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b087      	sub	sp, #28
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	460b      	mov	r3, r1
 800a6ba:	607a      	str	r2, [r7, #4]
 800a6bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	333c      	adds	r3, #60	; 0x3c
 800a6c6:	3304      	adds	r3, #4
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	4a26      	ldr	r2, [pc, #152]	; (800a768 <USB_EP0_OutStart+0xb8>)
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d90a      	bls.n	800a6ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a6e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a6e4:	d101      	bne.n	800a6ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	e037      	b.n	800a75a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6fc:	691b      	ldr	r3, [r3, #16]
 800a6fe:	697a      	ldr	r2, [r7, #20]
 800a700:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a704:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a708:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a710:	691b      	ldr	r3, [r3, #16]
 800a712:	697a      	ldr	r2, [r7, #20]
 800a714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a718:	f043 0318 	orr.w	r3, r3, #24
 800a71c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a724:	691b      	ldr	r3, [r3, #16]
 800a726:	697a      	ldr	r2, [r7, #20]
 800a728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a72c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a730:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a732:	7afb      	ldrb	r3, [r7, #11]
 800a734:	2b01      	cmp	r3, #1
 800a736:	d10f      	bne.n	800a758 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a73e:	461a      	mov	r2, r3
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	697a      	ldr	r2, [r7, #20]
 800a74e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a752:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a756:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a758:	2300      	movs	r3, #0
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	371c      	adds	r7, #28
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr
 800a766:	bf00      	nop
 800a768:	4f54300a 	.word	0x4f54300a

0800a76c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a76c:	b480      	push	{r7}
 800a76e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800a770:	bf00      	nop
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr
	...

0800a77c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a77c:	b480      	push	{r7}
 800a77e:	b085      	sub	sp, #20
 800a780:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a782:	f3ef 8305 	mrs	r3, IPSR
 800a786:	60bb      	str	r3, [r7, #8]
  return(result);
 800a788:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d10f      	bne.n	800a7ae <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a78e:	f3ef 8310 	mrs	r3, PRIMASK
 800a792:	607b      	str	r3, [r7, #4]
  return(result);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d105      	bne.n	800a7a6 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a79a:	f3ef 8311 	mrs	r3, BASEPRI
 800a79e:	603b      	str	r3, [r7, #0]
  return(result);
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d007      	beq.n	800a7b6 <osKernelInitialize+0x3a>
 800a7a6:	4b0e      	ldr	r3, [pc, #56]	; (800a7e0 <osKernelInitialize+0x64>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	2b02      	cmp	r3, #2
 800a7ac:	d103      	bne.n	800a7b6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a7ae:	f06f 0305 	mvn.w	r3, #5
 800a7b2:	60fb      	str	r3, [r7, #12]
 800a7b4:	e00c      	b.n	800a7d0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a7b6:	4b0a      	ldr	r3, [pc, #40]	; (800a7e0 <osKernelInitialize+0x64>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d105      	bne.n	800a7ca <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a7be:	4b08      	ldr	r3, [pc, #32]	; (800a7e0 <osKernelInitialize+0x64>)
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	60fb      	str	r3, [r7, #12]
 800a7c8:	e002      	b.n	800a7d0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a7ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a7ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3714      	adds	r7, #20
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr
 800a7de:	bf00      	nop
 800a7e0:	20000c98 	.word	0x20000c98

0800a7e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7ea:	f3ef 8305 	mrs	r3, IPSR
 800a7ee:	60bb      	str	r3, [r7, #8]
  return(result);
 800a7f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d10f      	bne.n	800a816 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7f6:	f3ef 8310 	mrs	r3, PRIMASK
 800a7fa:	607b      	str	r3, [r7, #4]
  return(result);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d105      	bne.n	800a80e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a802:	f3ef 8311 	mrs	r3, BASEPRI
 800a806:	603b      	str	r3, [r7, #0]
  return(result);
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d007      	beq.n	800a81e <osKernelStart+0x3a>
 800a80e:	4b0f      	ldr	r3, [pc, #60]	; (800a84c <osKernelStart+0x68>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2b02      	cmp	r3, #2
 800a814:	d103      	bne.n	800a81e <osKernelStart+0x3a>
    stat = osErrorISR;
 800a816:	f06f 0305 	mvn.w	r3, #5
 800a81a:	60fb      	str	r3, [r7, #12]
 800a81c:	e010      	b.n	800a840 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a81e:	4b0b      	ldr	r3, [pc, #44]	; (800a84c <osKernelStart+0x68>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	2b01      	cmp	r3, #1
 800a824:	d109      	bne.n	800a83a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a826:	f7ff ffa1 	bl	800a76c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a82a:	4b08      	ldr	r3, [pc, #32]	; (800a84c <osKernelStart+0x68>)
 800a82c:	2202      	movs	r2, #2
 800a82e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a830:	f002 f862 	bl	800c8f8 <vTaskStartScheduler>
      stat = osOK;
 800a834:	2300      	movs	r3, #0
 800a836:	60fb      	str	r3, [r7, #12]
 800a838:	e002      	b.n	800a840 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800a83a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a83e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a840:	68fb      	ldr	r3, [r7, #12]
}
 800a842:	4618      	mov	r0, r3
 800a844:	3710      	adds	r7, #16
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
 800a84a:	bf00      	nop
 800a84c:	20000c98 	.word	0x20000c98

0800a850 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a850:	b580      	push	{r7, lr}
 800a852:	b090      	sub	sp, #64	; 0x40
 800a854:	af04      	add	r7, sp, #16
 800a856:	60f8      	str	r0, [r7, #12]
 800a858:	60b9      	str	r1, [r7, #8]
 800a85a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a85c:	2300      	movs	r3, #0
 800a85e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a860:	f3ef 8305 	mrs	r3, IPSR
 800a864:	61fb      	str	r3, [r7, #28]
  return(result);
 800a866:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800a868:	2b00      	cmp	r3, #0
 800a86a:	f040 808f 	bne.w	800a98c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a86e:	f3ef 8310 	mrs	r3, PRIMASK
 800a872:	61bb      	str	r3, [r7, #24]
  return(result);
 800a874:	69bb      	ldr	r3, [r7, #24]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d105      	bne.n	800a886 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a87a:	f3ef 8311 	mrs	r3, BASEPRI
 800a87e:	617b      	str	r3, [r7, #20]
  return(result);
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d003      	beq.n	800a88e <osThreadNew+0x3e>
 800a886:	4b44      	ldr	r3, [pc, #272]	; (800a998 <osThreadNew+0x148>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	2b02      	cmp	r3, #2
 800a88c:	d07e      	beq.n	800a98c <osThreadNew+0x13c>
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d07b      	beq.n	800a98c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800a894:	2380      	movs	r3, #128	; 0x80
 800a896:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800a898:	2318      	movs	r3, #24
 800a89a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800a89c:	2300      	movs	r3, #0
 800a89e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800a8a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8a4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d045      	beq.n	800a938 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d002      	beq.n	800a8ba <osThreadNew+0x6a>
        name = attr->name;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	699b      	ldr	r3, [r3, #24]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d002      	beq.n	800a8c8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	699b      	ldr	r3, [r3, #24]
 800a8c6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d008      	beq.n	800a8e0 <osThreadNew+0x90>
 800a8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d0:	2b38      	cmp	r3, #56	; 0x38
 800a8d2:	d805      	bhi.n	800a8e0 <osThreadNew+0x90>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	f003 0301 	and.w	r3, r3, #1
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d001      	beq.n	800a8e4 <osThreadNew+0x94>
        return (NULL);
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	e054      	b.n	800a98e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	695b      	ldr	r3, [r3, #20]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d003      	beq.n	800a8f4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	695b      	ldr	r3, [r3, #20]
 800a8f0:	089b      	lsrs	r3, r3, #2
 800a8f2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d00e      	beq.n	800a91a <osThreadNew+0xca>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	68db      	ldr	r3, [r3, #12]
 800a900:	2b5f      	cmp	r3, #95	; 0x5f
 800a902:	d90a      	bls.n	800a91a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d006      	beq.n	800a91a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	695b      	ldr	r3, [r3, #20]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d002      	beq.n	800a91a <osThreadNew+0xca>
        mem = 1;
 800a914:	2301      	movs	r3, #1
 800a916:	623b      	str	r3, [r7, #32]
 800a918:	e010      	b.n	800a93c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d10c      	bne.n	800a93c <osThreadNew+0xec>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	68db      	ldr	r3, [r3, #12]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d108      	bne.n	800a93c <osThreadNew+0xec>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	691b      	ldr	r3, [r3, #16]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d104      	bne.n	800a93c <osThreadNew+0xec>
          mem = 0;
 800a932:	2300      	movs	r3, #0
 800a934:	623b      	str	r3, [r7, #32]
 800a936:	e001      	b.n	800a93c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800a938:	2300      	movs	r3, #0
 800a93a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a93c:	6a3b      	ldr	r3, [r7, #32]
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d110      	bne.n	800a964 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a94a:	9202      	str	r2, [sp, #8]
 800a94c:	9301      	str	r3, [sp, #4]
 800a94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a950:	9300      	str	r3, [sp, #0]
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a956:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a958:	68f8      	ldr	r0, [r7, #12]
 800a95a:	f001 fd0f 	bl	800c37c <xTaskCreateStatic>
 800a95e:	4603      	mov	r3, r0
 800a960:	613b      	str	r3, [r7, #16]
 800a962:	e013      	b.n	800a98c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800a964:	6a3b      	ldr	r3, [r7, #32]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d110      	bne.n	800a98c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a96c:	b29a      	uxth	r2, r3
 800a96e:	f107 0310 	add.w	r3, r7, #16
 800a972:	9301      	str	r3, [sp, #4]
 800a974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a976:	9300      	str	r3, [sp, #0]
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f001 fd60 	bl	800c442 <xTaskCreate>
 800a982:	4603      	mov	r3, r0
 800a984:	2b01      	cmp	r3, #1
 800a986:	d001      	beq.n	800a98c <osThreadNew+0x13c>
          hTask = NULL;
 800a988:	2300      	movs	r3, #0
 800a98a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a98c:	693b      	ldr	r3, [r7, #16]
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3730      	adds	r7, #48	; 0x30
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop
 800a998:	20000c98 	.word	0x20000c98

0800a99c <osThreadGetStackSpace>:
  }

  return (state);
}

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b088      	sub	sp, #32
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9a8:	f3ef 8305 	mrs	r3, IPSR
 800a9ac:	617b      	str	r3, [r7, #20]
  return(result);
 800a9ae:	697b      	ldr	r3, [r7, #20]
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d112      	bne.n	800a9da <osThreadGetStackSpace+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9b4:	f3ef 8310 	mrs	r3, PRIMASK
 800a9b8:	613b      	str	r3, [r7, #16]
  return(result);
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d105      	bne.n	800a9cc <osThreadGetStackSpace+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a9c0:	f3ef 8311 	mrs	r3, BASEPRI
 800a9c4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d003      	beq.n	800a9d4 <osThreadGetStackSpace+0x38>
 800a9cc:	4b09      	ldr	r3, [pc, #36]	; (800a9f4 <osThreadGetStackSpace+0x58>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	2b02      	cmp	r3, #2
 800a9d2:	d002      	beq.n	800a9da <osThreadGetStackSpace+0x3e>
 800a9d4:	69bb      	ldr	r3, [r7, #24]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d102      	bne.n	800a9e0 <osThreadGetStackSpace+0x44>
    sz = 0U;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	61fb      	str	r3, [r7, #28]
 800a9de:	e003      	b.n	800a9e8 <osThreadGetStackSpace+0x4c>
  } else {
    sz = (uint32_t)uxTaskGetStackHighWaterMark (hTask);
 800a9e0:	69b8      	ldr	r0, [r7, #24]
 800a9e2:	f002 fbe3 	bl	800d1ac <uxTaskGetStackHighWaterMark>
 800a9e6:	61f8      	str	r0, [r7, #28]
  }

  return (sz);
 800a9e8:	69fb      	ldr	r3, [r7, #28]
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3720      	adds	r7, #32
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	20000c98 	.word	0x20000c98

0800a9f8 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b088      	sub	sp, #32
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa04:	f3ef 8305 	mrs	r3, IPSR
 800aa08:	613b      	str	r3, [r7, #16]
  return(result);
 800aa0a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d10f      	bne.n	800aa30 <osThreadTerminate+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa10:	f3ef 8310 	mrs	r3, PRIMASK
 800aa14:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d105      	bne.n	800aa28 <osThreadTerminate+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aa1c:	f3ef 8311 	mrs	r3, BASEPRI
 800aa20:	60bb      	str	r3, [r7, #8]
  return(result);
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d007      	beq.n	800aa38 <osThreadTerminate+0x40>
 800aa28:	4b12      	ldr	r3, [pc, #72]	; (800aa74 <osThreadTerminate+0x7c>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	2b02      	cmp	r3, #2
 800aa2e:	d103      	bne.n	800aa38 <osThreadTerminate+0x40>
    stat = osErrorISR;
 800aa30:	f06f 0305 	mvn.w	r3, #5
 800aa34:	61fb      	str	r3, [r7, #28]
 800aa36:	e017      	b.n	800aa68 <osThreadTerminate+0x70>
  }
  else if (hTask == NULL) {
 800aa38:	69bb      	ldr	r3, [r7, #24]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d103      	bne.n	800aa46 <osThreadTerminate+0x4e>
    stat = osErrorParameter;
 800aa3e:	f06f 0303 	mvn.w	r3, #3
 800aa42:	61fb      	str	r3, [r7, #28]
 800aa44:	e010      	b.n	800aa68 <osThreadTerminate+0x70>
  }
  else {
    tstate = eTaskGetState (hTask);
 800aa46:	69b8      	ldr	r0, [r7, #24]
 800aa48:	f001 feee 	bl	800c828 <eTaskGetState>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	75fb      	strb	r3, [r7, #23]

    if (tstate != eDeleted) {
 800aa50:	7dfb      	ldrb	r3, [r7, #23]
 800aa52:	2b04      	cmp	r3, #4
 800aa54:	d005      	beq.n	800aa62 <osThreadTerminate+0x6a>
      stat = osOK;
 800aa56:	2300      	movs	r3, #0
 800aa58:	61fb      	str	r3, [r7, #28]
      vTaskDelete (hTask);
 800aa5a:	69b8      	ldr	r0, [r7, #24]
 800aa5c:	f001 fe3a 	bl	800c6d4 <vTaskDelete>
 800aa60:	e002      	b.n	800aa68 <osThreadTerminate+0x70>
    } else {
      stat = osErrorResource;
 800aa62:	f06f 0302 	mvn.w	r3, #2
 800aa66:	61fb      	str	r3, [r7, #28]
  }
#else
  stat = osError;
#endif

  return (stat);
 800aa68:	69fb      	ldr	r3, [r7, #28]
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3720      	adds	r7, #32
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	20000c98 	.word	0x20000c98

0800aa78 <osThreadGetCount>:

uint32_t osThreadGetCount (void) {
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b084      	sub	sp, #16
 800aa7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa7e:	f3ef 8305 	mrs	r3, IPSR
 800aa82:	60bb      	str	r3, [r7, #8]
  return(result);
 800aa84:	68bb      	ldr	r3, [r7, #8]
  uint32_t count;

  if (IS_IRQ()) {
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d10f      	bne.n	800aaaa <osThreadGetCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa8a:	f3ef 8310 	mrs	r3, PRIMASK
 800aa8e:	607b      	str	r3, [r7, #4]
  return(result);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d105      	bne.n	800aaa2 <osThreadGetCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aa96:	f3ef 8311 	mrs	r3, BASEPRI
 800aa9a:	603b      	str	r3, [r7, #0]
  return(result);
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d006      	beq.n	800aab0 <osThreadGetCount+0x38>
 800aaa2:	4b07      	ldr	r3, [pc, #28]	; (800aac0 <osThreadGetCount+0x48>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2b02      	cmp	r3, #2
 800aaa8:	d102      	bne.n	800aab0 <osThreadGetCount+0x38>
    count = 0U;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	60fb      	str	r3, [r7, #12]
 800aaae:	e002      	b.n	800aab6 <osThreadGetCount+0x3e>
  } else {
    count = uxTaskGetNumberOfTasks();
 800aab0:	f002 f84a 	bl	800cb48 <uxTaskGetNumberOfTasks>
 800aab4:	60f8      	str	r0, [r7, #12]
  }

  return (count);
 800aab6:	68fb      	ldr	r3, [r7, #12]
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3710      	adds	r7, #16
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	20000c98 	.word	0x20000c98

0800aac4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b086      	sub	sp, #24
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aacc:	f3ef 8305 	mrs	r3, IPSR
 800aad0:	613b      	str	r3, [r7, #16]
  return(result);
 800aad2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d10f      	bne.n	800aaf8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aad8:	f3ef 8310 	mrs	r3, PRIMASK
 800aadc:	60fb      	str	r3, [r7, #12]
  return(result);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d105      	bne.n	800aaf0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aae4:	f3ef 8311 	mrs	r3, BASEPRI
 800aae8:	60bb      	str	r3, [r7, #8]
  return(result);
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d007      	beq.n	800ab00 <osDelay+0x3c>
 800aaf0:	4b0a      	ldr	r3, [pc, #40]	; (800ab1c <osDelay+0x58>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2b02      	cmp	r3, #2
 800aaf6:	d103      	bne.n	800ab00 <osDelay+0x3c>
    stat = osErrorISR;
 800aaf8:	f06f 0305 	mvn.w	r3, #5
 800aafc:	617b      	str	r3, [r7, #20]
 800aafe:	e007      	b.n	800ab10 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800ab00:	2300      	movs	r3, #0
 800ab02:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d002      	beq.n	800ab10 <osDelay+0x4c>
      vTaskDelay(ticks);
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f001 fe56 	bl	800c7bc <vTaskDelay>
    }
  }

  return (stat);
 800ab10:	697b      	ldr	r3, [r7, #20]
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3718      	adds	r7, #24
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	20000c98 	.word	0x20000c98

0800ab20 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b084      	sub	sp, #16
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f003 f99f 	bl	800de6c <pvTimerGetTimerID>
 800ab2e:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d005      	beq.n	800ab42 <TimerCallback+0x22>
    callb->func (callb->arg);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	68fa      	ldr	r2, [r7, #12]
 800ab3c:	6852      	ldr	r2, [r2, #4]
 800ab3e:	4610      	mov	r0, r2
 800ab40:	4798      	blx	r3
  }
}
 800ab42:	bf00      	nop
 800ab44:	3710      	adds	r7, #16
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
	...

0800ab4c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b08e      	sub	sp, #56	; 0x38
 800ab50:	af02      	add	r7, sp, #8
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	607a      	str	r2, [r7, #4]
 800ab56:	603b      	str	r3, [r7, #0]
 800ab58:	460b      	mov	r3, r1
 800ab5a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab60:	f3ef 8305 	mrs	r3, IPSR
 800ab64:	61bb      	str	r3, [r7, #24]
  return(result);
 800ab66:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d16a      	bne.n	800ac42 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab6c:	f3ef 8310 	mrs	r3, PRIMASK
 800ab70:	617b      	str	r3, [r7, #20]
  return(result);
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d105      	bne.n	800ab84 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ab78:	f3ef 8311 	mrs	r3, BASEPRI
 800ab7c:	613b      	str	r3, [r7, #16]
  return(result);
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d003      	beq.n	800ab8c <osTimerNew+0x40>
 800ab84:	4b31      	ldr	r3, [pc, #196]	; (800ac4c <osTimerNew+0x100>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	2b02      	cmp	r3, #2
 800ab8a:	d05a      	beq.n	800ac42 <osTimerNew+0xf6>
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d057      	beq.n	800ac42 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800ab92:	2008      	movs	r0, #8
 800ab94:	f003 fbc6 	bl	800e324 <pvPortMalloc>
 800ab98:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800ab9a:	69fb      	ldr	r3, [r7, #28]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d050      	beq.n	800ac42 <osTimerNew+0xf6>
      callb->func = func;
 800aba0:	69fb      	ldr	r3, [r7, #28]
 800aba2:	68fa      	ldr	r2, [r7, #12]
 800aba4:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	687a      	ldr	r2, [r7, #4]
 800abaa:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800abac:	7afb      	ldrb	r3, [r7, #11]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d102      	bne.n	800abb8 <osTimerNew+0x6c>
        reload = pdFALSE;
 800abb2:	2300      	movs	r3, #0
 800abb4:	627b      	str	r3, [r7, #36]	; 0x24
 800abb6:	e001      	b.n	800abbc <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800abb8:	2301      	movs	r3, #1
 800abba:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800abbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abc0:	623b      	str	r3, [r7, #32]
      name = NULL;
 800abc2:	2300      	movs	r3, #0
 800abc4:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d01c      	beq.n	800ac06 <osTimerNew+0xba>
        if (attr->name != NULL) {
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d002      	beq.n	800abda <osTimerNew+0x8e>
          name = attr->name;
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d006      	beq.n	800abf0 <osTimerNew+0xa4>
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	68db      	ldr	r3, [r3, #12]
 800abe6:	2b2b      	cmp	r3, #43	; 0x2b
 800abe8:	d902      	bls.n	800abf0 <osTimerNew+0xa4>
          mem = 1;
 800abea:	2301      	movs	r3, #1
 800abec:	623b      	str	r3, [r7, #32]
 800abee:	e00c      	b.n	800ac0a <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d108      	bne.n	800ac0a <osTimerNew+0xbe>
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d104      	bne.n	800ac0a <osTimerNew+0xbe>
            mem = 0;
 800ac00:	2300      	movs	r3, #0
 800ac02:	623b      	str	r3, [r7, #32]
 800ac04:	e001      	b.n	800ac0a <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800ac06:	2300      	movs	r3, #0
 800ac08:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800ac0a:	6a3b      	ldr	r3, [r7, #32]
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d10c      	bne.n	800ac2a <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800ac10:	683b      	ldr	r3, [r7, #0]
 800ac12:	689b      	ldr	r3, [r3, #8]
 800ac14:	9301      	str	r3, [sp, #4]
 800ac16:	4b0e      	ldr	r3, [pc, #56]	; (800ac50 <osTimerNew+0x104>)
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	69fb      	ldr	r3, [r7, #28]
 800ac1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac1e:	2101      	movs	r1, #1
 800ac20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac22:	f002 fd92 	bl	800d74a <xTimerCreateStatic>
 800ac26:	62b8      	str	r0, [r7, #40]	; 0x28
 800ac28:	e00b      	b.n	800ac42 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800ac2a:	6a3b      	ldr	r3, [r7, #32]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d108      	bne.n	800ac42 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800ac30:	4b07      	ldr	r3, [pc, #28]	; (800ac50 <osTimerNew+0x104>)
 800ac32:	9300      	str	r3, [sp, #0]
 800ac34:	69fb      	ldr	r3, [r7, #28]
 800ac36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac38:	2101      	movs	r1, #1
 800ac3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac3c:	f002 fd64 	bl	800d708 <xTimerCreate>
 800ac40:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800ac42:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3730      	adds	r7, #48	; 0x30
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}
 800ac4c:	20000c98 	.word	0x20000c98
 800ac50:	0800ab21 	.word	0x0800ab21

0800ac54 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b08a      	sub	sp, #40	; 0x28
 800ac58:	af02      	add	r7, sp, #8
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac62:	f3ef 8305 	mrs	r3, IPSR
 800ac66:	617b      	str	r3, [r7, #20]
  return(result);
 800ac68:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d10f      	bne.n	800ac8e <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac6e:	f3ef 8310 	mrs	r3, PRIMASK
 800ac72:	613b      	str	r3, [r7, #16]
  return(result);
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d105      	bne.n	800ac86 <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ac7a:	f3ef 8311 	mrs	r3, BASEPRI
 800ac7e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d007      	beq.n	800ac96 <osTimerStart+0x42>
 800ac86:	4b12      	ldr	r3, [pc, #72]	; (800acd0 <osTimerStart+0x7c>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	2b02      	cmp	r3, #2
 800ac8c:	d103      	bne.n	800ac96 <osTimerStart+0x42>
    stat = osErrorISR;
 800ac8e:	f06f 0305 	mvn.w	r3, #5
 800ac92:	61fb      	str	r3, [r7, #28]
 800ac94:	e017      	b.n	800acc6 <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 800ac96:	69bb      	ldr	r3, [r7, #24]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d103      	bne.n	800aca4 <osTimerStart+0x50>
    stat = osErrorParameter;
 800ac9c:	f06f 0303 	mvn.w	r3, #3
 800aca0:	61fb      	str	r3, [r7, #28]
 800aca2:	e010      	b.n	800acc6 <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800aca4:	2300      	movs	r3, #0
 800aca6:	9300      	str	r3, [sp, #0]
 800aca8:	2300      	movs	r3, #0
 800acaa:	683a      	ldr	r2, [r7, #0]
 800acac:	2104      	movs	r1, #4
 800acae:	69b8      	ldr	r0, [r7, #24]
 800acb0:	f002 fdca 	bl	800d848 <xTimerGenericCommand>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d102      	bne.n	800acc0 <osTimerStart+0x6c>
      stat = osOK;
 800acba:	2300      	movs	r3, #0
 800acbc:	61fb      	str	r3, [r7, #28]
 800acbe:	e002      	b.n	800acc6 <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 800acc0:	f06f 0302 	mvn.w	r3, #2
 800acc4:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800acc6:	69fb      	ldr	r3, [r7, #28]
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3720      	adds	r7, #32
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	20000c98 	.word	0x20000c98

0800acd4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b08a      	sub	sp, #40	; 0x28
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800acdc:	2300      	movs	r3, #0
 800acde:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ace0:	f3ef 8305 	mrs	r3, IPSR
 800ace4:	613b      	str	r3, [r7, #16]
  return(result);
 800ace6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800ace8:	2b00      	cmp	r3, #0
 800acea:	f040 8085 	bne.w	800adf8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800acee:	f3ef 8310 	mrs	r3, PRIMASK
 800acf2:	60fb      	str	r3, [r7, #12]
  return(result);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d105      	bne.n	800ad06 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800acfa:	f3ef 8311 	mrs	r3, BASEPRI
 800acfe:	60bb      	str	r3, [r7, #8]
  return(result);
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d003      	beq.n	800ad0e <osMutexNew+0x3a>
 800ad06:	4b3f      	ldr	r3, [pc, #252]	; (800ae04 <osMutexNew+0x130>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	2b02      	cmp	r3, #2
 800ad0c:	d074      	beq.n	800adf8 <osMutexNew+0x124>
    if (attr != NULL) {
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d003      	beq.n	800ad1c <osMutexNew+0x48>
      type = attr->attr_bits;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	685b      	ldr	r3, [r3, #4]
 800ad18:	623b      	str	r3, [r7, #32]
 800ad1a:	e001      	b.n	800ad20 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ad20:	6a3b      	ldr	r3, [r7, #32]
 800ad22:	f003 0301 	and.w	r3, r3, #1
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d002      	beq.n	800ad30 <osMutexNew+0x5c>
      rmtx = 1U;
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	61fb      	str	r3, [r7, #28]
 800ad2e:	e001      	b.n	800ad34 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800ad30:	2300      	movs	r3, #0
 800ad32:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ad34:	6a3b      	ldr	r3, [r7, #32]
 800ad36:	f003 0308 	and.w	r3, r3, #8
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d15c      	bne.n	800adf8 <osMutexNew+0x124>
      mem = -1;
 800ad3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad42:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d015      	beq.n	800ad76 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	689b      	ldr	r3, [r3, #8]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d006      	beq.n	800ad60 <osMutexNew+0x8c>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	68db      	ldr	r3, [r3, #12]
 800ad56:	2b4f      	cmp	r3, #79	; 0x4f
 800ad58:	d902      	bls.n	800ad60 <osMutexNew+0x8c>
          mem = 1;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	61bb      	str	r3, [r7, #24]
 800ad5e:	e00c      	b.n	800ad7a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	689b      	ldr	r3, [r3, #8]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d108      	bne.n	800ad7a <osMutexNew+0xa6>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	68db      	ldr	r3, [r3, #12]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d104      	bne.n	800ad7a <osMutexNew+0xa6>
            mem = 0;
 800ad70:	2300      	movs	r3, #0
 800ad72:	61bb      	str	r3, [r7, #24]
 800ad74:	e001      	b.n	800ad7a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800ad76:	2300      	movs	r3, #0
 800ad78:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800ad7a:	69bb      	ldr	r3, [r7, #24]
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d112      	bne.n	800ada6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800ad80:	69fb      	ldr	r3, [r7, #28]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d007      	beq.n	800ad96 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	689b      	ldr	r3, [r3, #8]
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	2004      	movs	r0, #4
 800ad8e:	f000 fcc0 	bl	800b712 <xQueueCreateMutexStatic>
 800ad92:	6278      	str	r0, [r7, #36]	; 0x24
 800ad94:	e016      	b.n	800adc4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	2001      	movs	r0, #1
 800ad9e:	f000 fcb8 	bl	800b712 <xQueueCreateMutexStatic>
 800ada2:	6278      	str	r0, [r7, #36]	; 0x24
 800ada4:	e00e      	b.n	800adc4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800ada6:	69bb      	ldr	r3, [r7, #24]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d10b      	bne.n	800adc4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800adac:	69fb      	ldr	r3, [r7, #28]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d004      	beq.n	800adbc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800adb2:	2004      	movs	r0, #4
 800adb4:	f000 fc95 	bl	800b6e2 <xQueueCreateMutex>
 800adb8:	6278      	str	r0, [r7, #36]	; 0x24
 800adba:	e003      	b.n	800adc4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800adbc:	2001      	movs	r0, #1
 800adbe:	f000 fc90 	bl	800b6e2 <xQueueCreateMutex>
 800adc2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800adc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d00c      	beq.n	800ade4 <osMutexNew+0x110>
        if (attr != NULL) {
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d003      	beq.n	800add8 <osMutexNew+0x104>
          name = attr->name;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	617b      	str	r3, [r7, #20]
 800add6:	e001      	b.n	800addc <osMutexNew+0x108>
        } else {
          name = NULL;
 800add8:	2300      	movs	r3, #0
 800adda:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800addc:	6979      	ldr	r1, [r7, #20]
 800adde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ade0:	f001 fa6e 	bl	800c2c0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ade4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d006      	beq.n	800adf8 <osMutexNew+0x124>
 800adea:	69fb      	ldr	r3, [r7, #28]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d003      	beq.n	800adf8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800adf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf2:	f043 0301 	orr.w	r3, r3, #1
 800adf6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800adf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3728      	adds	r7, #40	; 0x28
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	20000c98 	.word	0x20000c98

0800ae08 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b088      	sub	sp, #32
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f023 0301 	bic.w	r3, r3, #1
 800ae18:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f003 0301 	and.w	r3, r3, #1
 800ae20:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800ae22:	2300      	movs	r3, #0
 800ae24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae26:	f3ef 8305 	mrs	r3, IPSR
 800ae2a:	613b      	str	r3, [r7, #16]
  return(result);
 800ae2c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d10f      	bne.n	800ae52 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ae32:	f3ef 8310 	mrs	r3, PRIMASK
 800ae36:	60fb      	str	r3, [r7, #12]
  return(result);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d105      	bne.n	800ae4a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ae3e:	f3ef 8311 	mrs	r3, BASEPRI
 800ae42:	60bb      	str	r3, [r7, #8]
  return(result);
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d007      	beq.n	800ae5a <osMutexAcquire+0x52>
 800ae4a:	4b1d      	ldr	r3, [pc, #116]	; (800aec0 <osMutexAcquire+0xb8>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	2b02      	cmp	r3, #2
 800ae50:	d103      	bne.n	800ae5a <osMutexAcquire+0x52>
    stat = osErrorISR;
 800ae52:	f06f 0305 	mvn.w	r3, #5
 800ae56:	61fb      	str	r3, [r7, #28]
 800ae58:	e02c      	b.n	800aeb4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800ae5a:	69bb      	ldr	r3, [r7, #24]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d103      	bne.n	800ae68 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800ae60:	f06f 0303 	mvn.w	r3, #3
 800ae64:	61fb      	str	r3, [r7, #28]
 800ae66:	e025      	b.n	800aeb4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d011      	beq.n	800ae92 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ae6e:	6839      	ldr	r1, [r7, #0]
 800ae70:	69b8      	ldr	r0, [r7, #24]
 800ae72:	f000 fc9f 	bl	800b7b4 <xQueueTakeMutexRecursive>
 800ae76:	4603      	mov	r3, r0
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d01b      	beq.n	800aeb4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d003      	beq.n	800ae8a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800ae82:	f06f 0301 	mvn.w	r3, #1
 800ae86:	61fb      	str	r3, [r7, #28]
 800ae88:	e014      	b.n	800aeb4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800ae8a:	f06f 0302 	mvn.w	r3, #2
 800ae8e:	61fb      	str	r3, [r7, #28]
 800ae90:	e010      	b.n	800aeb4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ae92:	6839      	ldr	r1, [r7, #0]
 800ae94:	69b8      	ldr	r0, [r7, #24]
 800ae96:	f000 ff51 	bl	800bd3c <xQueueSemaphoreTake>
 800ae9a:	4603      	mov	r3, r0
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d009      	beq.n	800aeb4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d003      	beq.n	800aeae <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800aea6:	f06f 0301 	mvn.w	r3, #1
 800aeaa:	61fb      	str	r3, [r7, #28]
 800aeac:	e002      	b.n	800aeb4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800aeae:	f06f 0302 	mvn.w	r3, #2
 800aeb2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800aeb4:	69fb      	ldr	r3, [r7, #28]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3720      	adds	r7, #32
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	20000c98 	.word	0x20000c98

0800aec4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b088      	sub	sp, #32
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f023 0301 	bic.w	r3, r3, #1
 800aed2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	f003 0301 	and.w	r3, r3, #1
 800aeda:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800aedc:	2300      	movs	r3, #0
 800aede:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aee0:	f3ef 8305 	mrs	r3, IPSR
 800aee4:	613b      	str	r3, [r7, #16]
  return(result);
 800aee6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d10f      	bne.n	800af0c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aeec:	f3ef 8310 	mrs	r3, PRIMASK
 800aef0:	60fb      	str	r3, [r7, #12]
  return(result);
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d105      	bne.n	800af04 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aef8:	f3ef 8311 	mrs	r3, BASEPRI
 800aefc:	60bb      	str	r3, [r7, #8]
  return(result);
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	2b00      	cmp	r3, #0
 800af02:	d007      	beq.n	800af14 <osMutexRelease+0x50>
 800af04:	4b16      	ldr	r3, [pc, #88]	; (800af60 <osMutexRelease+0x9c>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	2b02      	cmp	r3, #2
 800af0a:	d103      	bne.n	800af14 <osMutexRelease+0x50>
    stat = osErrorISR;
 800af0c:	f06f 0305 	mvn.w	r3, #5
 800af10:	61fb      	str	r3, [r7, #28]
 800af12:	e01f      	b.n	800af54 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800af14:	69bb      	ldr	r3, [r7, #24]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d103      	bne.n	800af22 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800af1a:	f06f 0303 	mvn.w	r3, #3
 800af1e:	61fb      	str	r3, [r7, #28]
 800af20:	e018      	b.n	800af54 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d009      	beq.n	800af3c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800af28:	69b8      	ldr	r0, [r7, #24]
 800af2a:	f000 fc0d 	bl	800b748 <xQueueGiveMutexRecursive>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b01      	cmp	r3, #1
 800af32:	d00f      	beq.n	800af54 <osMutexRelease+0x90>
        stat = osErrorResource;
 800af34:	f06f 0302 	mvn.w	r3, #2
 800af38:	61fb      	str	r3, [r7, #28]
 800af3a:	e00b      	b.n	800af54 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800af3c:	2300      	movs	r3, #0
 800af3e:	2200      	movs	r2, #0
 800af40:	2100      	movs	r1, #0
 800af42:	69b8      	ldr	r0, [r7, #24]
 800af44:	f000 fc6e 	bl	800b824 <xQueueGenericSend>
 800af48:	4603      	mov	r3, r0
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	d002      	beq.n	800af54 <osMutexRelease+0x90>
        stat = osErrorResource;
 800af4e:	f06f 0302 	mvn.w	r3, #2
 800af52:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800af54:	69fb      	ldr	r3, [r7, #28]
}
 800af56:	4618      	mov	r0, r3
 800af58:	3720      	adds	r7, #32
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	20000c98 	.word	0x20000c98

0800af64 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800af64:	b580      	push	{r7, lr}
 800af66:	b08c      	sub	sp, #48	; 0x30
 800af68:	af02      	add	r7, sp, #8
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	60b9      	str	r1, [r7, #8]
 800af6e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800af70:	2300      	movs	r3, #0
 800af72:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800af74:	f3ef 8305 	mrs	r3, IPSR
 800af78:	61bb      	str	r3, [r7, #24]
  return(result);
 800af7a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d16f      	bne.n	800b060 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af80:	f3ef 8310 	mrs	r3, PRIMASK
 800af84:	617b      	str	r3, [r7, #20]
  return(result);
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d105      	bne.n	800af98 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800af8c:	f3ef 8311 	mrs	r3, BASEPRI
 800af90:	613b      	str	r3, [r7, #16]
  return(result);
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d003      	beq.n	800afa0 <osMessageQueueNew+0x3c>
 800af98:	4b34      	ldr	r3, [pc, #208]	; (800b06c <osMessageQueueNew+0x108>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	2b02      	cmp	r3, #2
 800af9e:	d05f      	beq.n	800b060 <osMessageQueueNew+0xfc>
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d05c      	beq.n	800b060 <osMessageQueueNew+0xfc>
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d059      	beq.n	800b060 <osMessageQueueNew+0xfc>
    mem = -1;
 800afac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afb0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d029      	beq.n	800b00c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	689b      	ldr	r3, [r3, #8]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d012      	beq.n	800afe6 <osMessageQueueNew+0x82>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	68db      	ldr	r3, [r3, #12]
 800afc4:	2b4f      	cmp	r3, #79	; 0x4f
 800afc6:	d90e      	bls.n	800afe6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d00a      	beq.n	800afe6 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	695a      	ldr	r2, [r3, #20]
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	68b9      	ldr	r1, [r7, #8]
 800afd8:	fb01 f303 	mul.w	r3, r1, r3
 800afdc:	429a      	cmp	r2, r3
 800afde:	d302      	bcc.n	800afe6 <osMessageQueueNew+0x82>
        mem = 1;
 800afe0:	2301      	movs	r3, #1
 800afe2:	623b      	str	r3, [r7, #32]
 800afe4:	e014      	b.n	800b010 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	689b      	ldr	r3, [r3, #8]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d110      	bne.n	800b010 <osMessageQueueNew+0xac>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	68db      	ldr	r3, [r3, #12]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d10c      	bne.n	800b010 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800affa:	2b00      	cmp	r3, #0
 800affc:	d108      	bne.n	800b010 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	695b      	ldr	r3, [r3, #20]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d104      	bne.n	800b010 <osMessageQueueNew+0xac>
          mem = 0;
 800b006:	2300      	movs	r3, #0
 800b008:	623b      	str	r3, [r7, #32]
 800b00a:	e001      	b.n	800b010 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800b00c:	2300      	movs	r3, #0
 800b00e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800b010:	6a3b      	ldr	r3, [r7, #32]
 800b012:	2b01      	cmp	r3, #1
 800b014:	d10b      	bne.n	800b02e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	691a      	ldr	r2, [r3, #16]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	689b      	ldr	r3, [r3, #8]
 800b01e:	2100      	movs	r1, #0
 800b020:	9100      	str	r1, [sp, #0]
 800b022:	68b9      	ldr	r1, [r7, #8]
 800b024:	68f8      	ldr	r0, [r7, #12]
 800b026:	f000 fa5b 	bl	800b4e0 <xQueueGenericCreateStatic>
 800b02a:	6278      	str	r0, [r7, #36]	; 0x24
 800b02c:	e008      	b.n	800b040 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800b02e:	6a3b      	ldr	r3, [r7, #32]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d105      	bne.n	800b040 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800b034:	2200      	movs	r2, #0
 800b036:	68b9      	ldr	r1, [r7, #8]
 800b038:	68f8      	ldr	r0, [r7, #12]
 800b03a:	f000 fad3 	bl	800b5e4 <xQueueGenericCreate>
 800b03e:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b042:	2b00      	cmp	r3, #0
 800b044:	d00c      	beq.n	800b060 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d003      	beq.n	800b054 <osMessageQueueNew+0xf0>
        name = attr->name;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	61fb      	str	r3, [r7, #28]
 800b052:	e001      	b.n	800b058 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800b054:	2300      	movs	r3, #0
 800b056:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800b058:	69f9      	ldr	r1, [r7, #28]
 800b05a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b05c:	f001 f930 	bl	800c2c0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b062:	4618      	mov	r0, r3
 800b064:	3728      	adds	r7, #40	; 0x28
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	20000c98 	.word	0x20000c98

0800b070 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b070:	b580      	push	{r7, lr}
 800b072:	b08a      	sub	sp, #40	; 0x28
 800b074:	af00      	add	r7, sp, #0
 800b076:	60f8      	str	r0, [r7, #12]
 800b078:	60b9      	str	r1, [r7, #8]
 800b07a:	603b      	str	r3, [r7, #0]
 800b07c:	4613      	mov	r3, r2
 800b07e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b084:	2300      	movs	r3, #0
 800b086:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b088:	f3ef 8305 	mrs	r3, IPSR
 800b08c:	61fb      	str	r3, [r7, #28]
  return(result);
 800b08e:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10f      	bne.n	800b0b4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b094:	f3ef 8310 	mrs	r3, PRIMASK
 800b098:	61bb      	str	r3, [r7, #24]
  return(result);
 800b09a:	69bb      	ldr	r3, [r7, #24]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d105      	bne.n	800b0ac <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b0a0:	f3ef 8311 	mrs	r3, BASEPRI
 800b0a4:	617b      	str	r3, [r7, #20]
  return(result);
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d02c      	beq.n	800b106 <osMessageQueuePut+0x96>
 800b0ac:	4b28      	ldr	r3, [pc, #160]	; (800b150 <osMessageQueuePut+0xe0>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2b02      	cmp	r3, #2
 800b0b2:	d128      	bne.n	800b106 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b0b4:	6a3b      	ldr	r3, [r7, #32]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d005      	beq.n	800b0c6 <osMessageQueuePut+0x56>
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d002      	beq.n	800b0c6 <osMessageQueuePut+0x56>
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d003      	beq.n	800b0ce <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800b0c6:	f06f 0303 	mvn.w	r3, #3
 800b0ca:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b0cc:	e039      	b.n	800b142 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b0d2:	f107 0210 	add.w	r2, r7, #16
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	68b9      	ldr	r1, [r7, #8]
 800b0da:	6a38      	ldr	r0, [r7, #32]
 800b0dc:	f000 fca8 	bl	800ba30 <xQueueGenericSendFromISR>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d003      	beq.n	800b0ee <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800b0e6:	f06f 0302 	mvn.w	r3, #2
 800b0ea:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b0ec:	e029      	b.n	800b142 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d026      	beq.n	800b142 <osMessageQueuePut+0xd2>
 800b0f4:	4b17      	ldr	r3, [pc, #92]	; (800b154 <osMessageQueuePut+0xe4>)
 800b0f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0fa:	601a      	str	r2, [r3, #0]
 800b0fc:	f3bf 8f4f 	dsb	sy
 800b100:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b104:	e01d      	b.n	800b142 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b106:	6a3b      	ldr	r3, [r7, #32]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d002      	beq.n	800b112 <osMessageQueuePut+0xa2>
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d103      	bne.n	800b11a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800b112:	f06f 0303 	mvn.w	r3, #3
 800b116:	627b      	str	r3, [r7, #36]	; 0x24
 800b118:	e014      	b.n	800b144 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b11a:	2300      	movs	r3, #0
 800b11c:	683a      	ldr	r2, [r7, #0]
 800b11e:	68b9      	ldr	r1, [r7, #8]
 800b120:	6a38      	ldr	r0, [r7, #32]
 800b122:	f000 fb7f 	bl	800b824 <xQueueGenericSend>
 800b126:	4603      	mov	r3, r0
 800b128:	2b01      	cmp	r3, #1
 800b12a:	d00b      	beq.n	800b144 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d003      	beq.n	800b13a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800b132:	f06f 0301 	mvn.w	r3, #1
 800b136:	627b      	str	r3, [r7, #36]	; 0x24
 800b138:	e004      	b.n	800b144 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800b13a:	f06f 0302 	mvn.w	r3, #2
 800b13e:	627b      	str	r3, [r7, #36]	; 0x24
 800b140:	e000      	b.n	800b144 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b142:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800b144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b146:	4618      	mov	r0, r3
 800b148:	3728      	adds	r7, #40	; 0x28
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	20000c98 	.word	0x20000c98
 800b154:	e000ed04 	.word	0xe000ed04

0800b158 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b158:	b580      	push	{r7, lr}
 800b15a:	b08a      	sub	sp, #40	; 0x28
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	607a      	str	r2, [r7, #4]
 800b164:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b16a:	2300      	movs	r3, #0
 800b16c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b16e:	f3ef 8305 	mrs	r3, IPSR
 800b172:	61fb      	str	r3, [r7, #28]
  return(result);
 800b174:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800b176:	2b00      	cmp	r3, #0
 800b178:	d10f      	bne.n	800b19a <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b17a:	f3ef 8310 	mrs	r3, PRIMASK
 800b17e:	61bb      	str	r3, [r7, #24]
  return(result);
 800b180:	69bb      	ldr	r3, [r7, #24]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d105      	bne.n	800b192 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b186:	f3ef 8311 	mrs	r3, BASEPRI
 800b18a:	617b      	str	r3, [r7, #20]
  return(result);
 800b18c:	697b      	ldr	r3, [r7, #20]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d02c      	beq.n	800b1ec <osMessageQueueGet+0x94>
 800b192:	4b28      	ldr	r3, [pc, #160]	; (800b234 <osMessageQueueGet+0xdc>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	2b02      	cmp	r3, #2
 800b198:	d128      	bne.n	800b1ec <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b19a:	6a3b      	ldr	r3, [r7, #32]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d005      	beq.n	800b1ac <osMessageQueueGet+0x54>
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d002      	beq.n	800b1ac <osMessageQueueGet+0x54>
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d003      	beq.n	800b1b4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800b1ac:	f06f 0303 	mvn.w	r3, #3
 800b1b0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b1b2:	e038      	b.n	800b226 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b1b8:	f107 0310 	add.w	r3, r7, #16
 800b1bc:	461a      	mov	r2, r3
 800b1be:	68b9      	ldr	r1, [r7, #8]
 800b1c0:	6a38      	ldr	r0, [r7, #32]
 800b1c2:	f000 fecf 	bl	800bf64 <xQueueReceiveFromISR>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d003      	beq.n	800b1d4 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800b1cc:	f06f 0302 	mvn.w	r3, #2
 800b1d0:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b1d2:	e028      	b.n	800b226 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d025      	beq.n	800b226 <osMessageQueueGet+0xce>
 800b1da:	4b17      	ldr	r3, [pc, #92]	; (800b238 <osMessageQueueGet+0xe0>)
 800b1dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1e0:	601a      	str	r2, [r3, #0]
 800b1e2:	f3bf 8f4f 	dsb	sy
 800b1e6:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b1ea:	e01c      	b.n	800b226 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b1ec:	6a3b      	ldr	r3, [r7, #32]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d002      	beq.n	800b1f8 <osMessageQueueGet+0xa0>
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d103      	bne.n	800b200 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800b1f8:	f06f 0303 	mvn.w	r3, #3
 800b1fc:	627b      	str	r3, [r7, #36]	; 0x24
 800b1fe:	e013      	b.n	800b228 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b200:	683a      	ldr	r2, [r7, #0]
 800b202:	68b9      	ldr	r1, [r7, #8]
 800b204:	6a38      	ldr	r0, [r7, #32]
 800b206:	f000 fcb3 	bl	800bb70 <xQueueReceive>
 800b20a:	4603      	mov	r3, r0
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d00b      	beq.n	800b228 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d003      	beq.n	800b21e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800b216:	f06f 0301 	mvn.w	r3, #1
 800b21a:	627b      	str	r3, [r7, #36]	; 0x24
 800b21c:	e004      	b.n	800b228 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800b21e:	f06f 0302 	mvn.w	r3, #2
 800b222:	627b      	str	r3, [r7, #36]	; 0x24
 800b224:	e000      	b.n	800b228 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b226:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800b228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3728      	adds	r7, #40	; 0x28
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
 800b232:	bf00      	nop
 800b234:	20000c98 	.word	0x20000c98
 800b238:	e000ed04 	.word	0xe000ed04

0800b23c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b23c:	b480      	push	{r7}
 800b23e:	b085      	sub	sp, #20
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	4a07      	ldr	r2, [pc, #28]	; (800b268 <vApplicationGetIdleTaskMemory+0x2c>)
 800b24c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	4a06      	ldr	r2, [pc, #24]	; (800b26c <vApplicationGetIdleTaskMemory+0x30>)
 800b252:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2280      	movs	r2, #128	; 0x80
 800b258:	601a      	str	r2, [r3, #0]
}
 800b25a:	bf00      	nop
 800b25c:	3714      	adds	r7, #20
 800b25e:	46bd      	mov	sp, r7
 800b260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop
 800b268:	20000c9c 	.word	0x20000c9c
 800b26c:	20000cfc 	.word	0x20000cfc

0800b270 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b270:	b480      	push	{r7}
 800b272:	b085      	sub	sp, #20
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	4a07      	ldr	r2, [pc, #28]	; (800b29c <vApplicationGetTimerTaskMemory+0x2c>)
 800b280:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	4a06      	ldr	r2, [pc, #24]	; (800b2a0 <vApplicationGetTimerTaskMemory+0x30>)
 800b286:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b28e:	601a      	str	r2, [r3, #0]
}
 800b290:	bf00      	nop
 800b292:	3714      	adds	r7, #20
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr
 800b29c:	20000efc 	.word	0x20000efc
 800b2a0:	20000f5c 	.word	0x20000f5c

0800b2a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b083      	sub	sp, #12
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f103 0208 	add.w	r2, r3, #8
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f103 0208 	add.w	r2, r3, #8
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f103 0208 	add.w	r2, r3, #8
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b2d8:	bf00      	nop
 800b2da:	370c      	adds	r7, #12
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr

0800b2e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b083      	sub	sp, #12
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b2f2:	bf00      	nop
 800b2f4:	370c      	adds	r7, #12
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr

0800b2fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b2fe:	b480      	push	{r7}
 800b300:	b085      	sub	sp, #20
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
 800b306:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	68fa      	ldr	r2, [r7, #12]
 800b312:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	689a      	ldr	r2, [r3, #8]
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	683a      	ldr	r2, [r7, #0]
 800b322:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	683a      	ldr	r2, [r7, #0]
 800b328:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	687a      	ldr	r2, [r7, #4]
 800b32e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	1c5a      	adds	r2, r3, #1
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	601a      	str	r2, [r3, #0]
}
 800b33a:	bf00      	nop
 800b33c:	3714      	adds	r7, #20
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr

0800b346 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b346:	b480      	push	{r7}
 800b348:	b085      	sub	sp, #20
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
 800b34e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b35c:	d103      	bne.n	800b366 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	691b      	ldr	r3, [r3, #16]
 800b362:	60fb      	str	r3, [r7, #12]
 800b364:	e00c      	b.n	800b380 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	3308      	adds	r3, #8
 800b36a:	60fb      	str	r3, [r7, #12]
 800b36c:	e002      	b.n	800b374 <vListInsert+0x2e>
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	685b      	ldr	r3, [r3, #4]
 800b372:	60fb      	str	r3, [r7, #12]
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	68ba      	ldr	r2, [r7, #8]
 800b37c:	429a      	cmp	r2, r3
 800b37e:	d2f6      	bcs.n	800b36e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	685a      	ldr	r2, [r3, #4]
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	683a      	ldr	r2, [r7, #0]
 800b38e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	68fa      	ldr	r2, [r7, #12]
 800b394:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	683a      	ldr	r2, [r7, #0]
 800b39a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	1c5a      	adds	r2, r3, #1
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	601a      	str	r2, [r3, #0]
}
 800b3ac:	bf00      	nop
 800b3ae:	3714      	adds	r7, #20
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr

0800b3b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b085      	sub	sp, #20
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	691b      	ldr	r3, [r3, #16]
 800b3c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	687a      	ldr	r2, [r7, #4]
 800b3cc:	6892      	ldr	r2, [r2, #8]
 800b3ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	687a      	ldr	r2, [r7, #4]
 800b3d6:	6852      	ldr	r2, [r2, #4]
 800b3d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d103      	bne.n	800b3ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	689a      	ldr	r2, [r3, #8]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	1e5a      	subs	r2, r3, #1
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
}
 800b400:	4618      	mov	r0, r3
 800b402:	3714      	adds	r7, #20
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d10c      	bne.n	800b43a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b424:	b672      	cpsid	i
 800b426:	f383 8811 	msr	BASEPRI, r3
 800b42a:	f3bf 8f6f 	isb	sy
 800b42e:	f3bf 8f4f 	dsb	sy
 800b432:	b662      	cpsie	i
 800b434:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b436:	bf00      	nop
 800b438:	e7fe      	b.n	800b438 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b43a:	f002 fe47 	bl	800e0cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b446:	68f9      	ldr	r1, [r7, #12]
 800b448:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b44a:	fb01 f303 	mul.w	r3, r1, r3
 800b44e:	441a      	add	r2, r3
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2200      	movs	r2, #0
 800b458:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	681a      	ldr	r2, [r3, #0]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b46a:	3b01      	subs	r3, #1
 800b46c:	68f9      	ldr	r1, [r7, #12]
 800b46e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b470:	fb01 f303 	mul.w	r3, r1, r3
 800b474:	441a      	add	r2, r3
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	22ff      	movs	r2, #255	; 0xff
 800b47e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	22ff      	movs	r2, #255	; 0xff
 800b486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d114      	bne.n	800b4ba <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	691b      	ldr	r3, [r3, #16]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d01a      	beq.n	800b4ce <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	3310      	adds	r3, #16
 800b49c:	4618      	mov	r0, r3
 800b49e:	f001 fcf3 	bl	800ce88 <xTaskRemoveFromEventList>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d012      	beq.n	800b4ce <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b4a8:	4b0c      	ldr	r3, [pc, #48]	; (800b4dc <xQueueGenericReset+0xd0>)
 800b4aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4ae:	601a      	str	r2, [r3, #0]
 800b4b0:	f3bf 8f4f 	dsb	sy
 800b4b4:	f3bf 8f6f 	isb	sy
 800b4b8:	e009      	b.n	800b4ce <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	3310      	adds	r3, #16
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f7ff fef0 	bl	800b2a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	3324      	adds	r3, #36	; 0x24
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7ff feeb 	bl	800b2a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b4ce:	f002 fe31 	bl	800e134 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b4d2:	2301      	movs	r3, #1
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3710      	adds	r7, #16
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}
 800b4dc:	e000ed04 	.word	0xe000ed04

0800b4e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b08e      	sub	sp, #56	; 0x38
 800b4e4:	af02      	add	r7, sp, #8
 800b4e6:	60f8      	str	r0, [r7, #12]
 800b4e8:	60b9      	str	r1, [r7, #8]
 800b4ea:	607a      	str	r2, [r7, #4]
 800b4ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d10c      	bne.n	800b50e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800b4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4f8:	b672      	cpsid	i
 800b4fa:	f383 8811 	msr	BASEPRI, r3
 800b4fe:	f3bf 8f6f 	isb	sy
 800b502:	f3bf 8f4f 	dsb	sy
 800b506:	b662      	cpsie	i
 800b508:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b50a:	bf00      	nop
 800b50c:	e7fe      	b.n	800b50c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d10c      	bne.n	800b52e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800b514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b518:	b672      	cpsid	i
 800b51a:	f383 8811 	msr	BASEPRI, r3
 800b51e:	f3bf 8f6f 	isb	sy
 800b522:	f3bf 8f4f 	dsb	sy
 800b526:	b662      	cpsie	i
 800b528:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b52a:	bf00      	nop
 800b52c:	e7fe      	b.n	800b52c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d002      	beq.n	800b53a <xQueueGenericCreateStatic+0x5a>
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d001      	beq.n	800b53e <xQueueGenericCreateStatic+0x5e>
 800b53a:	2301      	movs	r3, #1
 800b53c:	e000      	b.n	800b540 <xQueueGenericCreateStatic+0x60>
 800b53e:	2300      	movs	r3, #0
 800b540:	2b00      	cmp	r3, #0
 800b542:	d10c      	bne.n	800b55e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800b544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b548:	b672      	cpsid	i
 800b54a:	f383 8811 	msr	BASEPRI, r3
 800b54e:	f3bf 8f6f 	isb	sy
 800b552:	f3bf 8f4f 	dsb	sy
 800b556:	b662      	cpsie	i
 800b558:	623b      	str	r3, [r7, #32]
}
 800b55a:	bf00      	nop
 800b55c:	e7fe      	b.n	800b55c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d102      	bne.n	800b56a <xQueueGenericCreateStatic+0x8a>
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d101      	bne.n	800b56e <xQueueGenericCreateStatic+0x8e>
 800b56a:	2301      	movs	r3, #1
 800b56c:	e000      	b.n	800b570 <xQueueGenericCreateStatic+0x90>
 800b56e:	2300      	movs	r3, #0
 800b570:	2b00      	cmp	r3, #0
 800b572:	d10c      	bne.n	800b58e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800b574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b578:	b672      	cpsid	i
 800b57a:	f383 8811 	msr	BASEPRI, r3
 800b57e:	f3bf 8f6f 	isb	sy
 800b582:	f3bf 8f4f 	dsb	sy
 800b586:	b662      	cpsie	i
 800b588:	61fb      	str	r3, [r7, #28]
}
 800b58a:	bf00      	nop
 800b58c:	e7fe      	b.n	800b58c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b58e:	2350      	movs	r3, #80	; 0x50
 800b590:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	2b50      	cmp	r3, #80	; 0x50
 800b596:	d00c      	beq.n	800b5b2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800b598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b59c:	b672      	cpsid	i
 800b59e:	f383 8811 	msr	BASEPRI, r3
 800b5a2:	f3bf 8f6f 	isb	sy
 800b5a6:	f3bf 8f4f 	dsb	sy
 800b5aa:	b662      	cpsie	i
 800b5ac:	61bb      	str	r3, [r7, #24]
}
 800b5ae:	bf00      	nop
 800b5b0:	e7fe      	b.n	800b5b0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b5b2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00d      	beq.n	800b5da <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c0:	2201      	movs	r2, #1
 800b5c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b5c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b5ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5cc:	9300      	str	r3, [sp, #0]
 800b5ce:	4613      	mov	r3, r2
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	68b9      	ldr	r1, [r7, #8]
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f000 f847 	bl	800b668 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3730      	adds	r7, #48	; 0x30
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	bd80      	pop	{r7, pc}

0800b5e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b08a      	sub	sp, #40	; 0x28
 800b5e8:	af02      	add	r7, sp, #8
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	60b9      	str	r1, [r7, #8]
 800b5ee:	4613      	mov	r3, r2
 800b5f0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d10c      	bne.n	800b612 <xQueueGenericCreate+0x2e>
	__asm volatile
 800b5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5fc:	b672      	cpsid	i
 800b5fe:	f383 8811 	msr	BASEPRI, r3
 800b602:	f3bf 8f6f 	isb	sy
 800b606:	f3bf 8f4f 	dsb	sy
 800b60a:	b662      	cpsie	i
 800b60c:	613b      	str	r3, [r7, #16]
}
 800b60e:	bf00      	nop
 800b610:	e7fe      	b.n	800b610 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d102      	bne.n	800b61e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b618:	2300      	movs	r3, #0
 800b61a:	61fb      	str	r3, [r7, #28]
 800b61c:	e004      	b.n	800b628 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	68ba      	ldr	r2, [r7, #8]
 800b622:	fb02 f303 	mul.w	r3, r2, r3
 800b626:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b628:	69fb      	ldr	r3, [r7, #28]
 800b62a:	3350      	adds	r3, #80	; 0x50
 800b62c:	4618      	mov	r0, r3
 800b62e:	f002 fe79 	bl	800e324 <pvPortMalloc>
 800b632:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b634:	69bb      	ldr	r3, [r7, #24]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d011      	beq.n	800b65e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b63a:	69bb      	ldr	r3, [r7, #24]
 800b63c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	3350      	adds	r3, #80	; 0x50
 800b642:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b644:	69bb      	ldr	r3, [r7, #24]
 800b646:	2200      	movs	r2, #0
 800b648:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b64c:	79fa      	ldrb	r2, [r7, #7]
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	9300      	str	r3, [sp, #0]
 800b652:	4613      	mov	r3, r2
 800b654:	697a      	ldr	r2, [r7, #20]
 800b656:	68b9      	ldr	r1, [r7, #8]
 800b658:	68f8      	ldr	r0, [r7, #12]
 800b65a:	f000 f805 	bl	800b668 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b65e:	69bb      	ldr	r3, [r7, #24]
	}
 800b660:	4618      	mov	r0, r3
 800b662:	3720      	adds	r7, #32
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}

0800b668 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	60f8      	str	r0, [r7, #12]
 800b670:	60b9      	str	r1, [r7, #8]
 800b672:	607a      	str	r2, [r7, #4]
 800b674:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d103      	bne.n	800b684 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b67c:	69bb      	ldr	r3, [r7, #24]
 800b67e:	69ba      	ldr	r2, [r7, #24]
 800b680:	601a      	str	r2, [r3, #0]
 800b682:	e002      	b.n	800b68a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b684:	69bb      	ldr	r3, [r7, #24]
 800b686:	687a      	ldr	r2, [r7, #4]
 800b688:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b68a:	69bb      	ldr	r3, [r7, #24]
 800b68c:	68fa      	ldr	r2, [r7, #12]
 800b68e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	68ba      	ldr	r2, [r7, #8]
 800b694:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b696:	2101      	movs	r1, #1
 800b698:	69b8      	ldr	r0, [r7, #24]
 800b69a:	f7ff feb7 	bl	800b40c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	78fa      	ldrb	r2, [r7, #3]
 800b6a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b6a6:	bf00      	nop
 800b6a8:	3710      	adds	r7, #16
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}

0800b6ae <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b6ae:	b580      	push	{r7, lr}
 800b6b0:	b082      	sub	sp, #8
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d00e      	beq.n	800b6da <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2200      	movs	r2, #0
 800b6c0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	2100      	movs	r1, #0
 800b6d4:	6878      	ldr	r0, [r7, #4]
 800b6d6:	f000 f8a5 	bl	800b824 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b6da:	bf00      	nop
 800b6dc:	3708      	adds	r7, #8
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b6e2:	b580      	push	{r7, lr}
 800b6e4:	b086      	sub	sp, #24
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	617b      	str	r3, [r7, #20]
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b6f4:	79fb      	ldrb	r3, [r7, #7]
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	6939      	ldr	r1, [r7, #16]
 800b6fa:	6978      	ldr	r0, [r7, #20]
 800b6fc:	f7ff ff72 	bl	800b5e4 <xQueueGenericCreate>
 800b700:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b702:	68f8      	ldr	r0, [r7, #12]
 800b704:	f7ff ffd3 	bl	800b6ae <prvInitialiseMutex>

		return xNewQueue;
 800b708:	68fb      	ldr	r3, [r7, #12]
	}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3718      	adds	r7, #24
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}

0800b712 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b712:	b580      	push	{r7, lr}
 800b714:	b088      	sub	sp, #32
 800b716:	af02      	add	r7, sp, #8
 800b718:	4603      	mov	r3, r0
 800b71a:	6039      	str	r1, [r7, #0]
 800b71c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b71e:	2301      	movs	r3, #1
 800b720:	617b      	str	r3, [r7, #20]
 800b722:	2300      	movs	r3, #0
 800b724:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b726:	79fb      	ldrb	r3, [r7, #7]
 800b728:	9300      	str	r3, [sp, #0]
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	2200      	movs	r2, #0
 800b72e:	6939      	ldr	r1, [r7, #16]
 800b730:	6978      	ldr	r0, [r7, #20]
 800b732:	f7ff fed5 	bl	800b4e0 <xQueueGenericCreateStatic>
 800b736:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b738:	68f8      	ldr	r0, [r7, #12]
 800b73a:	f7ff ffb8 	bl	800b6ae <prvInitialiseMutex>

		return xNewQueue;
 800b73e:	68fb      	ldr	r3, [r7, #12]
	}
 800b740:	4618      	mov	r0, r3
 800b742:	3718      	adds	r7, #24
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800b748:	b590      	push	{r4, r7, lr}
 800b74a:	b087      	sub	sp, #28
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d10c      	bne.n	800b774 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 800b75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b75e:	b672      	cpsid	i
 800b760:	f383 8811 	msr	BASEPRI, r3
 800b764:	f3bf 8f6f 	isb	sy
 800b768:	f3bf 8f4f 	dsb	sy
 800b76c:	b662      	cpsie	i
 800b76e:	60fb      	str	r3, [r7, #12]
}
 800b770:	bf00      	nop
 800b772:	e7fe      	b.n	800b772 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	689c      	ldr	r4, [r3, #8]
 800b778:	f001 fd86 	bl	800d288 <xTaskGetCurrentTaskHandle>
 800b77c:	4603      	mov	r3, r0
 800b77e:	429c      	cmp	r4, r3
 800b780:	d111      	bne.n	800b7a6 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	68db      	ldr	r3, [r3, #12]
 800b786:	1e5a      	subs	r2, r3, #1
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b78c:	693b      	ldr	r3, [r7, #16]
 800b78e:	68db      	ldr	r3, [r3, #12]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d105      	bne.n	800b7a0 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b794:	2300      	movs	r3, #0
 800b796:	2200      	movs	r2, #0
 800b798:	2100      	movs	r1, #0
 800b79a:	6938      	ldr	r0, [r7, #16]
 800b79c:	f000 f842 	bl	800b824 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	617b      	str	r3, [r7, #20]
 800b7a4:	e001      	b.n	800b7aa <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800b7aa:	697b      	ldr	r3, [r7, #20]
	}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	371c      	adds	r7, #28
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd90      	pop	{r4, r7, pc}

0800b7b4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800b7b4:	b590      	push	{r4, r7, lr}
 800b7b6:	b087      	sub	sp, #28
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d10c      	bne.n	800b7e2 <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 800b7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7cc:	b672      	cpsid	i
 800b7ce:	f383 8811 	msr	BASEPRI, r3
 800b7d2:	f3bf 8f6f 	isb	sy
 800b7d6:	f3bf 8f4f 	dsb	sy
 800b7da:	b662      	cpsie	i
 800b7dc:	60fb      	str	r3, [r7, #12]
}
 800b7de:	bf00      	nop
 800b7e0:	e7fe      	b.n	800b7e0 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	689c      	ldr	r4, [r3, #8]
 800b7e6:	f001 fd4f 	bl	800d288 <xTaskGetCurrentTaskHandle>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	429c      	cmp	r4, r3
 800b7ee:	d107      	bne.n	800b800 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	68db      	ldr	r3, [r3, #12]
 800b7f4:	1c5a      	adds	r2, r3, #1
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	617b      	str	r3, [r7, #20]
 800b7fe:	e00c      	b.n	800b81a <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b800:	6839      	ldr	r1, [r7, #0]
 800b802:	6938      	ldr	r0, [r7, #16]
 800b804:	f000 fa9a 	bl	800bd3c <xQueueSemaphoreTake>
 800b808:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d004      	beq.n	800b81a <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	1c5a      	adds	r2, r3, #1
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800b81a:	697b      	ldr	r3, [r7, #20]
	}
 800b81c:	4618      	mov	r0, r3
 800b81e:	371c      	adds	r7, #28
 800b820:	46bd      	mov	sp, r7
 800b822:	bd90      	pop	{r4, r7, pc}

0800b824 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b08e      	sub	sp, #56	; 0x38
 800b828:	af00      	add	r7, sp, #0
 800b82a:	60f8      	str	r0, [r7, #12]
 800b82c:	60b9      	str	r1, [r7, #8]
 800b82e:	607a      	str	r2, [r7, #4]
 800b830:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b832:	2300      	movs	r3, #0
 800b834:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d10c      	bne.n	800b85a <xQueueGenericSend+0x36>
	__asm volatile
 800b840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b844:	b672      	cpsid	i
 800b846:	f383 8811 	msr	BASEPRI, r3
 800b84a:	f3bf 8f6f 	isb	sy
 800b84e:	f3bf 8f4f 	dsb	sy
 800b852:	b662      	cpsie	i
 800b854:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b856:	bf00      	nop
 800b858:	e7fe      	b.n	800b858 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d103      	bne.n	800b868 <xQueueGenericSend+0x44>
 800b860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b864:	2b00      	cmp	r3, #0
 800b866:	d101      	bne.n	800b86c <xQueueGenericSend+0x48>
 800b868:	2301      	movs	r3, #1
 800b86a:	e000      	b.n	800b86e <xQueueGenericSend+0x4a>
 800b86c:	2300      	movs	r3, #0
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d10c      	bne.n	800b88c <xQueueGenericSend+0x68>
	__asm volatile
 800b872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b876:	b672      	cpsid	i
 800b878:	f383 8811 	msr	BASEPRI, r3
 800b87c:	f3bf 8f6f 	isb	sy
 800b880:	f3bf 8f4f 	dsb	sy
 800b884:	b662      	cpsie	i
 800b886:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b888:	bf00      	nop
 800b88a:	e7fe      	b.n	800b88a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	2b02      	cmp	r3, #2
 800b890:	d103      	bne.n	800b89a <xQueueGenericSend+0x76>
 800b892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b896:	2b01      	cmp	r3, #1
 800b898:	d101      	bne.n	800b89e <xQueueGenericSend+0x7a>
 800b89a:	2301      	movs	r3, #1
 800b89c:	e000      	b.n	800b8a0 <xQueueGenericSend+0x7c>
 800b89e:	2300      	movs	r3, #0
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d10c      	bne.n	800b8be <xQueueGenericSend+0x9a>
	__asm volatile
 800b8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a8:	b672      	cpsid	i
 800b8aa:	f383 8811 	msr	BASEPRI, r3
 800b8ae:	f3bf 8f6f 	isb	sy
 800b8b2:	f3bf 8f4f 	dsb	sy
 800b8b6:	b662      	cpsie	i
 800b8b8:	623b      	str	r3, [r7, #32]
}
 800b8ba:	bf00      	nop
 800b8bc:	e7fe      	b.n	800b8bc <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b8be:	f001 fcf3 	bl	800d2a8 <xTaskGetSchedulerState>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d102      	bne.n	800b8ce <xQueueGenericSend+0xaa>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d101      	bne.n	800b8d2 <xQueueGenericSend+0xae>
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	e000      	b.n	800b8d4 <xQueueGenericSend+0xb0>
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d10c      	bne.n	800b8f2 <xQueueGenericSend+0xce>
	__asm volatile
 800b8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8dc:	b672      	cpsid	i
 800b8de:	f383 8811 	msr	BASEPRI, r3
 800b8e2:	f3bf 8f6f 	isb	sy
 800b8e6:	f3bf 8f4f 	dsb	sy
 800b8ea:	b662      	cpsie	i
 800b8ec:	61fb      	str	r3, [r7, #28]
}
 800b8ee:	bf00      	nop
 800b8f0:	e7fe      	b.n	800b8f0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b8f2:	f002 fbeb 	bl	800e0cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8fe:	429a      	cmp	r2, r3
 800b900:	d302      	bcc.n	800b908 <xQueueGenericSend+0xe4>
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	2b02      	cmp	r3, #2
 800b906:	d129      	bne.n	800b95c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b908:	683a      	ldr	r2, [r7, #0]
 800b90a:	68b9      	ldr	r1, [r7, #8]
 800b90c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b90e:	f000 fbc7 	bl	800c0a0 <prvCopyDataToQueue>
 800b912:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d010      	beq.n	800b93e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91e:	3324      	adds	r3, #36	; 0x24
 800b920:	4618      	mov	r0, r3
 800b922:	f001 fab1 	bl	800ce88 <xTaskRemoveFromEventList>
 800b926:	4603      	mov	r3, r0
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d013      	beq.n	800b954 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b92c:	4b3f      	ldr	r3, [pc, #252]	; (800ba2c <xQueueGenericSend+0x208>)
 800b92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b932:	601a      	str	r2, [r3, #0]
 800b934:	f3bf 8f4f 	dsb	sy
 800b938:	f3bf 8f6f 	isb	sy
 800b93c:	e00a      	b.n	800b954 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b93e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b940:	2b00      	cmp	r3, #0
 800b942:	d007      	beq.n	800b954 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b944:	4b39      	ldr	r3, [pc, #228]	; (800ba2c <xQueueGenericSend+0x208>)
 800b946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b94a:	601a      	str	r2, [r3, #0]
 800b94c:	f3bf 8f4f 	dsb	sy
 800b950:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b954:	f002 fbee 	bl	800e134 <vPortExitCritical>
				return pdPASS;
 800b958:	2301      	movs	r3, #1
 800b95a:	e063      	b.n	800ba24 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d103      	bne.n	800b96a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b962:	f002 fbe7 	bl	800e134 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b966:	2300      	movs	r3, #0
 800b968:	e05c      	b.n	800ba24 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d106      	bne.n	800b97e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b970:	f107 0314 	add.w	r3, r7, #20
 800b974:	4618      	mov	r0, r3
 800b976:	f001 faed 	bl	800cf54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b97a:	2301      	movs	r3, #1
 800b97c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b97e:	f002 fbd9 	bl	800e134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b982:	f001 f823 	bl	800c9cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b986:	f002 fba1 	bl	800e0cc <vPortEnterCritical>
 800b98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b98c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b990:	b25b      	sxtb	r3, r3
 800b992:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b996:	d103      	bne.n	800b9a0 <xQueueGenericSend+0x17c>
 800b998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99a:	2200      	movs	r2, #0
 800b99c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9a6:	b25b      	sxtb	r3, r3
 800b9a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b9ac:	d103      	bne.n	800b9b6 <xQueueGenericSend+0x192>
 800b9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b9b6:	f002 fbbd 	bl	800e134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b9ba:	1d3a      	adds	r2, r7, #4
 800b9bc:	f107 0314 	add.w	r3, r7, #20
 800b9c0:	4611      	mov	r1, r2
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f001 fadc 	bl	800cf80 <xTaskCheckForTimeOut>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d124      	bne.n	800ba18 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b9ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9d0:	f000 fc5e 	bl	800c290 <prvIsQueueFull>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d018      	beq.n	800ba0c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9dc:	3310      	adds	r3, #16
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	4611      	mov	r1, r2
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f001 f9fc 	bl	800cde0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b9e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9ea:	f000 fbe9 	bl	800c1c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b9ee:	f000 fffb 	bl	800c9e8 <xTaskResumeAll>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f47f af7c 	bne.w	800b8f2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800b9fa:	4b0c      	ldr	r3, [pc, #48]	; (800ba2c <xQueueGenericSend+0x208>)
 800b9fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba00:	601a      	str	r2, [r3, #0]
 800ba02:	f3bf 8f4f 	dsb	sy
 800ba06:	f3bf 8f6f 	isb	sy
 800ba0a:	e772      	b.n	800b8f2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ba0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba0e:	f000 fbd7 	bl	800c1c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ba12:	f000 ffe9 	bl	800c9e8 <xTaskResumeAll>
 800ba16:	e76c      	b.n	800b8f2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ba18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba1a:	f000 fbd1 	bl	800c1c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ba1e:	f000 ffe3 	bl	800c9e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ba22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3738      	adds	r7, #56	; 0x38
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	e000ed04 	.word	0xe000ed04

0800ba30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b08e      	sub	sp, #56	; 0x38
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	607a      	str	r2, [r7, #4]
 800ba3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ba42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d10c      	bne.n	800ba62 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800ba48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba4c:	b672      	cpsid	i
 800ba4e:	f383 8811 	msr	BASEPRI, r3
 800ba52:	f3bf 8f6f 	isb	sy
 800ba56:	f3bf 8f4f 	dsb	sy
 800ba5a:	b662      	cpsie	i
 800ba5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ba5e:	bf00      	nop
 800ba60:	e7fe      	b.n	800ba60 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d103      	bne.n	800ba70 <xQueueGenericSendFromISR+0x40>
 800ba68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d101      	bne.n	800ba74 <xQueueGenericSendFromISR+0x44>
 800ba70:	2301      	movs	r3, #1
 800ba72:	e000      	b.n	800ba76 <xQueueGenericSendFromISR+0x46>
 800ba74:	2300      	movs	r3, #0
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d10c      	bne.n	800ba94 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800ba7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba7e:	b672      	cpsid	i
 800ba80:	f383 8811 	msr	BASEPRI, r3
 800ba84:	f3bf 8f6f 	isb	sy
 800ba88:	f3bf 8f4f 	dsb	sy
 800ba8c:	b662      	cpsie	i
 800ba8e:	623b      	str	r3, [r7, #32]
}
 800ba90:	bf00      	nop
 800ba92:	e7fe      	b.n	800ba92 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	2b02      	cmp	r3, #2
 800ba98:	d103      	bne.n	800baa2 <xQueueGenericSendFromISR+0x72>
 800ba9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba9e:	2b01      	cmp	r3, #1
 800baa0:	d101      	bne.n	800baa6 <xQueueGenericSendFromISR+0x76>
 800baa2:	2301      	movs	r3, #1
 800baa4:	e000      	b.n	800baa8 <xQueueGenericSendFromISR+0x78>
 800baa6:	2300      	movs	r3, #0
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d10c      	bne.n	800bac6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800baac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab0:	b672      	cpsid	i
 800bab2:	f383 8811 	msr	BASEPRI, r3
 800bab6:	f3bf 8f6f 	isb	sy
 800baba:	f3bf 8f4f 	dsb	sy
 800babe:	b662      	cpsie	i
 800bac0:	61fb      	str	r3, [r7, #28]
}
 800bac2:	bf00      	nop
 800bac4:	e7fe      	b.n	800bac4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bac6:	f002 fbe9 	bl	800e29c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800baca:	f3ef 8211 	mrs	r2, BASEPRI
 800bace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad2:	b672      	cpsid	i
 800bad4:	f383 8811 	msr	BASEPRI, r3
 800bad8:	f3bf 8f6f 	isb	sy
 800badc:	f3bf 8f4f 	dsb	sy
 800bae0:	b662      	cpsie	i
 800bae2:	61ba      	str	r2, [r7, #24]
 800bae4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bae6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bae8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800baea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800baee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d302      	bcc.n	800bafc <xQueueGenericSendFromISR+0xcc>
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	2b02      	cmp	r3, #2
 800bafa:	d12c      	bne.n	800bb56 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bafe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bb02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bb06:	683a      	ldr	r2, [r7, #0]
 800bb08:	68b9      	ldr	r1, [r7, #8]
 800bb0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bb0c:	f000 fac8 	bl	800c0a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bb10:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800bb14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb18:	d112      	bne.n	800bb40 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bb1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d016      	beq.n	800bb50 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb24:	3324      	adds	r3, #36	; 0x24
 800bb26:	4618      	mov	r0, r3
 800bb28:	f001 f9ae 	bl	800ce88 <xTaskRemoveFromEventList>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d00e      	beq.n	800bb50 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d00b      	beq.n	800bb50 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	601a      	str	r2, [r3, #0]
 800bb3e:	e007      	b.n	800bb50 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bb40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bb44:	3301      	adds	r3, #1
 800bb46:	b2db      	uxtb	r3, r3
 800bb48:	b25a      	sxtb	r2, r3
 800bb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bb50:	2301      	movs	r3, #1
 800bb52:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800bb54:	e001      	b.n	800bb5a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bb56:	2300      	movs	r3, #0
 800bb58:	637b      	str	r3, [r7, #52]	; 0x34
 800bb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb5c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bb64:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bb66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3738      	adds	r7, #56	; 0x38
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b08c      	sub	sp, #48	; 0x30
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	60b9      	str	r1, [r7, #8]
 800bb7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d10c      	bne.n	800bba4 <xQueueReceive+0x34>
	__asm volatile
 800bb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb8e:	b672      	cpsid	i
 800bb90:	f383 8811 	msr	BASEPRI, r3
 800bb94:	f3bf 8f6f 	isb	sy
 800bb98:	f3bf 8f4f 	dsb	sy
 800bb9c:	b662      	cpsie	i
 800bb9e:	623b      	str	r3, [r7, #32]
}
 800bba0:	bf00      	nop
 800bba2:	e7fe      	b.n	800bba2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d103      	bne.n	800bbb2 <xQueueReceive+0x42>
 800bbaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d101      	bne.n	800bbb6 <xQueueReceive+0x46>
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	e000      	b.n	800bbb8 <xQueueReceive+0x48>
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d10c      	bne.n	800bbd6 <xQueueReceive+0x66>
	__asm volatile
 800bbbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc0:	b672      	cpsid	i
 800bbc2:	f383 8811 	msr	BASEPRI, r3
 800bbc6:	f3bf 8f6f 	isb	sy
 800bbca:	f3bf 8f4f 	dsb	sy
 800bbce:	b662      	cpsie	i
 800bbd0:	61fb      	str	r3, [r7, #28]
}
 800bbd2:	bf00      	nop
 800bbd4:	e7fe      	b.n	800bbd4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bbd6:	f001 fb67 	bl	800d2a8 <xTaskGetSchedulerState>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d102      	bne.n	800bbe6 <xQueueReceive+0x76>
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d101      	bne.n	800bbea <xQueueReceive+0x7a>
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	e000      	b.n	800bbec <xQueueReceive+0x7c>
 800bbea:	2300      	movs	r3, #0
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d10c      	bne.n	800bc0a <xQueueReceive+0x9a>
	__asm volatile
 800bbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf4:	b672      	cpsid	i
 800bbf6:	f383 8811 	msr	BASEPRI, r3
 800bbfa:	f3bf 8f6f 	isb	sy
 800bbfe:	f3bf 8f4f 	dsb	sy
 800bc02:	b662      	cpsie	i
 800bc04:	61bb      	str	r3, [r7, #24]
}
 800bc06:	bf00      	nop
 800bc08:	e7fe      	b.n	800bc08 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bc0a:	f002 fa5f 	bl	800e0cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc12:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d01f      	beq.n	800bc5a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bc1a:	68b9      	ldr	r1, [r7, #8]
 800bc1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc1e:	f000 faa9 	bl	800c174 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc24:	1e5a      	subs	r2, r3, #1
 800bc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc28:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc2c:	691b      	ldr	r3, [r3, #16]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d00f      	beq.n	800bc52 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc34:	3310      	adds	r3, #16
 800bc36:	4618      	mov	r0, r3
 800bc38:	f001 f926 	bl	800ce88 <xTaskRemoveFromEventList>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d007      	beq.n	800bc52 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bc42:	4b3d      	ldr	r3, [pc, #244]	; (800bd38 <xQueueReceive+0x1c8>)
 800bc44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc48:	601a      	str	r2, [r3, #0]
 800bc4a:	f3bf 8f4f 	dsb	sy
 800bc4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bc52:	f002 fa6f 	bl	800e134 <vPortExitCritical>
				return pdPASS;
 800bc56:	2301      	movs	r3, #1
 800bc58:	e069      	b.n	800bd2e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d103      	bne.n	800bc68 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bc60:	f002 fa68 	bl	800e134 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bc64:	2300      	movs	r3, #0
 800bc66:	e062      	b.n	800bd2e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d106      	bne.n	800bc7c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bc6e:	f107 0310 	add.w	r3, r7, #16
 800bc72:	4618      	mov	r0, r3
 800bc74:	f001 f96e 	bl	800cf54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bc78:	2301      	movs	r3, #1
 800bc7a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bc7c:	f002 fa5a 	bl	800e134 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bc80:	f000 fea4 	bl	800c9cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bc84:	f002 fa22 	bl	800e0cc <vPortEnterCritical>
 800bc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc8e:	b25b      	sxtb	r3, r3
 800bc90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc94:	d103      	bne.n	800bc9e <xQueueReceive+0x12e>
 800bc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc98:	2200      	movs	r2, #0
 800bc9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bca4:	b25b      	sxtb	r3, r3
 800bca6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcaa:	d103      	bne.n	800bcb4 <xQueueReceive+0x144>
 800bcac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcae:	2200      	movs	r2, #0
 800bcb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bcb4:	f002 fa3e 	bl	800e134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bcb8:	1d3a      	adds	r2, r7, #4
 800bcba:	f107 0310 	add.w	r3, r7, #16
 800bcbe:	4611      	mov	r1, r2
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f001 f95d 	bl	800cf80 <xTaskCheckForTimeOut>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d123      	bne.n	800bd14 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bcce:	f000 fac9 	bl	800c264 <prvIsQueueEmpty>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d017      	beq.n	800bd08 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bcd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcda:	3324      	adds	r3, #36	; 0x24
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	4611      	mov	r1, r2
 800bce0:	4618      	mov	r0, r3
 800bce2:	f001 f87d 	bl	800cde0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bce6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bce8:	f000 fa6a 	bl	800c1c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bcec:	f000 fe7c 	bl	800c9e8 <xTaskResumeAll>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d189      	bne.n	800bc0a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800bcf6:	4b10      	ldr	r3, [pc, #64]	; (800bd38 <xQueueReceive+0x1c8>)
 800bcf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcfc:	601a      	str	r2, [r3, #0]
 800bcfe:	f3bf 8f4f 	dsb	sy
 800bd02:	f3bf 8f6f 	isb	sy
 800bd06:	e780      	b.n	800bc0a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bd08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd0a:	f000 fa59 	bl	800c1c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd0e:	f000 fe6b 	bl	800c9e8 <xTaskResumeAll>
 800bd12:	e77a      	b.n	800bc0a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bd14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd16:	f000 fa53 	bl	800c1c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd1a:	f000 fe65 	bl	800c9e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd20:	f000 faa0 	bl	800c264 <prvIsQueueEmpty>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	f43f af6f 	beq.w	800bc0a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bd2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3730      	adds	r7, #48	; 0x30
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop
 800bd38:	e000ed04 	.word	0xe000ed04

0800bd3c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b08e      	sub	sp, #56	; 0x38
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bd46:	2300      	movs	r3, #0
 800bd48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d10c      	bne.n	800bd72 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800bd58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5c:	b672      	cpsid	i
 800bd5e:	f383 8811 	msr	BASEPRI, r3
 800bd62:	f3bf 8f6f 	isb	sy
 800bd66:	f3bf 8f4f 	dsb	sy
 800bd6a:	b662      	cpsie	i
 800bd6c:	623b      	str	r3, [r7, #32]
}
 800bd6e:	bf00      	nop
 800bd70:	e7fe      	b.n	800bd70 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bd72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d00c      	beq.n	800bd94 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800bd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd7e:	b672      	cpsid	i
 800bd80:	f383 8811 	msr	BASEPRI, r3
 800bd84:	f3bf 8f6f 	isb	sy
 800bd88:	f3bf 8f4f 	dsb	sy
 800bd8c:	b662      	cpsie	i
 800bd8e:	61fb      	str	r3, [r7, #28]
}
 800bd90:	bf00      	nop
 800bd92:	e7fe      	b.n	800bd92 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd94:	f001 fa88 	bl	800d2a8 <xTaskGetSchedulerState>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d102      	bne.n	800bda4 <xQueueSemaphoreTake+0x68>
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d101      	bne.n	800bda8 <xQueueSemaphoreTake+0x6c>
 800bda4:	2301      	movs	r3, #1
 800bda6:	e000      	b.n	800bdaa <xQueueSemaphoreTake+0x6e>
 800bda8:	2300      	movs	r3, #0
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d10c      	bne.n	800bdc8 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800bdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb2:	b672      	cpsid	i
 800bdb4:	f383 8811 	msr	BASEPRI, r3
 800bdb8:	f3bf 8f6f 	isb	sy
 800bdbc:	f3bf 8f4f 	dsb	sy
 800bdc0:	b662      	cpsie	i
 800bdc2:	61bb      	str	r3, [r7, #24]
}
 800bdc4:	bf00      	nop
 800bdc6:	e7fe      	b.n	800bdc6 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bdc8:	f002 f980 	bl	800e0cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bdcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bdd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d024      	beq.n	800be22 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bdd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdda:	1e5a      	subs	r2, r3, #1
 800bddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdde:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d104      	bne.n	800bdf2 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bde8:	f001 fbdc 	bl	800d5a4 <pvTaskIncrementMutexHeldCount>
 800bdec:	4602      	mov	r2, r0
 800bdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf4:	691b      	ldr	r3, [r3, #16]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d00f      	beq.n	800be1a <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdfc:	3310      	adds	r3, #16
 800bdfe:	4618      	mov	r0, r3
 800be00:	f001 f842 	bl	800ce88 <xTaskRemoveFromEventList>
 800be04:	4603      	mov	r3, r0
 800be06:	2b00      	cmp	r3, #0
 800be08:	d007      	beq.n	800be1a <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800be0a:	4b55      	ldr	r3, [pc, #340]	; (800bf60 <xQueueSemaphoreTake+0x224>)
 800be0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be10:	601a      	str	r2, [r3, #0]
 800be12:	f3bf 8f4f 	dsb	sy
 800be16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800be1a:	f002 f98b 	bl	800e134 <vPortExitCritical>
				return pdPASS;
 800be1e:	2301      	movs	r3, #1
 800be20:	e099      	b.n	800bf56 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d113      	bne.n	800be50 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800be28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d00c      	beq.n	800be48 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800be2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be32:	b672      	cpsid	i
 800be34:	f383 8811 	msr	BASEPRI, r3
 800be38:	f3bf 8f6f 	isb	sy
 800be3c:	f3bf 8f4f 	dsb	sy
 800be40:	b662      	cpsie	i
 800be42:	617b      	str	r3, [r7, #20]
}
 800be44:	bf00      	nop
 800be46:	e7fe      	b.n	800be46 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800be48:	f002 f974 	bl	800e134 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800be4c:	2300      	movs	r3, #0
 800be4e:	e082      	b.n	800bf56 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be52:	2b00      	cmp	r3, #0
 800be54:	d106      	bne.n	800be64 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be56:	f107 030c 	add.w	r3, r7, #12
 800be5a:	4618      	mov	r0, r3
 800be5c:	f001 f87a 	bl	800cf54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be60:	2301      	movs	r3, #1
 800be62:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be64:	f002 f966 	bl	800e134 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be68:	f000 fdb0 	bl	800c9cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be6c:	f002 f92e 	bl	800e0cc <vPortEnterCritical>
 800be70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be76:	b25b      	sxtb	r3, r3
 800be78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be7c:	d103      	bne.n	800be86 <xQueueSemaphoreTake+0x14a>
 800be7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be80:	2200      	movs	r2, #0
 800be82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be8c:	b25b      	sxtb	r3, r3
 800be8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be92:	d103      	bne.n	800be9c <xQueueSemaphoreTake+0x160>
 800be94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be96:	2200      	movs	r2, #0
 800be98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be9c:	f002 f94a 	bl	800e134 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bea0:	463a      	mov	r2, r7
 800bea2:	f107 030c 	add.w	r3, r7, #12
 800bea6:	4611      	mov	r1, r2
 800bea8:	4618      	mov	r0, r3
 800beaa:	f001 f869 	bl	800cf80 <xTaskCheckForTimeOut>
 800beae:	4603      	mov	r3, r0
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d132      	bne.n	800bf1a <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800beb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800beb6:	f000 f9d5 	bl	800c264 <prvIsQueueEmpty>
 800beba:	4603      	mov	r3, r0
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d026      	beq.n	800bf0e <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d109      	bne.n	800bedc <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800bec8:	f002 f900 	bl	800e0cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800becc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bece:	689b      	ldr	r3, [r3, #8]
 800bed0:	4618      	mov	r0, r3
 800bed2:	f001 fa07 	bl	800d2e4 <xTaskPriorityInherit>
 800bed6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bed8:	f002 f92c 	bl	800e134 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bede:	3324      	adds	r3, #36	; 0x24
 800bee0:	683a      	ldr	r2, [r7, #0]
 800bee2:	4611      	mov	r1, r2
 800bee4:	4618      	mov	r0, r3
 800bee6:	f000 ff7b 	bl	800cde0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800beea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800beec:	f000 f968 	bl	800c1c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bef0:	f000 fd7a 	bl	800c9e8 <xTaskResumeAll>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	f47f af66 	bne.w	800bdc8 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800befc:	4b18      	ldr	r3, [pc, #96]	; (800bf60 <xQueueSemaphoreTake+0x224>)
 800befe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf02:	601a      	str	r2, [r3, #0]
 800bf04:	f3bf 8f4f 	dsb	sy
 800bf08:	f3bf 8f6f 	isb	sy
 800bf0c:	e75c      	b.n	800bdc8 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bf0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf10:	f000 f956 	bl	800c1c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf14:	f000 fd68 	bl	800c9e8 <xTaskResumeAll>
 800bf18:	e756      	b.n	800bdc8 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bf1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf1c:	f000 f950 	bl	800c1c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf20:	f000 fd62 	bl	800c9e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf26:	f000 f99d 	bl	800c264 <prvIsQueueEmpty>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	f43f af4b 	beq.w	800bdc8 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bf32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d00d      	beq.n	800bf54 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800bf38:	f002 f8c8 	bl	800e0cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bf3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf3e:	f000 f897 	bl	800c070 <prvGetDisinheritPriorityAfterTimeout>
 800bf42:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bf44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f001 faa4 	bl	800d498 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bf50:	f002 f8f0 	bl	800e134 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bf54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3738      	adds	r7, #56	; 0x38
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	e000ed04 	.word	0xe000ed04

0800bf64 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b08e      	sub	sp, #56	; 0x38
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	60f8      	str	r0, [r7, #12]
 800bf6c:	60b9      	str	r1, [r7, #8]
 800bf6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bf74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d10c      	bne.n	800bf94 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800bf7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7e:	b672      	cpsid	i
 800bf80:	f383 8811 	msr	BASEPRI, r3
 800bf84:	f3bf 8f6f 	isb	sy
 800bf88:	f3bf 8f4f 	dsb	sy
 800bf8c:	b662      	cpsie	i
 800bf8e:	623b      	str	r3, [r7, #32]
}
 800bf90:	bf00      	nop
 800bf92:	e7fe      	b.n	800bf92 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d103      	bne.n	800bfa2 <xQueueReceiveFromISR+0x3e>
 800bf9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d101      	bne.n	800bfa6 <xQueueReceiveFromISR+0x42>
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e000      	b.n	800bfa8 <xQueueReceiveFromISR+0x44>
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d10c      	bne.n	800bfc6 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800bfac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb0:	b672      	cpsid	i
 800bfb2:	f383 8811 	msr	BASEPRI, r3
 800bfb6:	f3bf 8f6f 	isb	sy
 800bfba:	f3bf 8f4f 	dsb	sy
 800bfbe:	b662      	cpsie	i
 800bfc0:	61fb      	str	r3, [r7, #28]
}
 800bfc2:	bf00      	nop
 800bfc4:	e7fe      	b.n	800bfc4 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bfc6:	f002 f969 	bl	800e29c <vPortValidateInterruptPriority>
	__asm volatile
 800bfca:	f3ef 8211 	mrs	r2, BASEPRI
 800bfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd2:	b672      	cpsid	i
 800bfd4:	f383 8811 	msr	BASEPRI, r3
 800bfd8:	f3bf 8f6f 	isb	sy
 800bfdc:	f3bf 8f4f 	dsb	sy
 800bfe0:	b662      	cpsie	i
 800bfe2:	61ba      	str	r2, [r7, #24]
 800bfe4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bfe6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bfe8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d02f      	beq.n	800c056 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c000:	68b9      	ldr	r1, [r7, #8]
 800c002:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c004:	f000 f8b6 	bl	800c174 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c00a:	1e5a      	subs	r2, r3, #1
 800c00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c00e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c010:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c014:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c018:	d112      	bne.n	800c040 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01c:	691b      	ldr	r3, [r3, #16]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d016      	beq.n	800c050 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c024:	3310      	adds	r3, #16
 800c026:	4618      	mov	r0, r3
 800c028:	f000 ff2e 	bl	800ce88 <xTaskRemoveFromEventList>
 800c02c:	4603      	mov	r3, r0
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d00e      	beq.n	800c050 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d00b      	beq.n	800c050 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2201      	movs	r2, #1
 800c03c:	601a      	str	r2, [r3, #0]
 800c03e:	e007      	b.n	800c050 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c044:	3301      	adds	r3, #1
 800c046:	b2db      	uxtb	r3, r3
 800c048:	b25a      	sxtb	r2, r3
 800c04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c050:	2301      	movs	r3, #1
 800c052:	637b      	str	r3, [r7, #52]	; 0x34
 800c054:	e001      	b.n	800c05a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800c056:	2300      	movs	r3, #0
 800c058:	637b      	str	r3, [r7, #52]	; 0x34
 800c05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c05c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	f383 8811 	msr	BASEPRI, r3
}
 800c064:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c068:	4618      	mov	r0, r3
 800c06a:	3738      	adds	r7, #56	; 0x38
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c070:	b480      	push	{r7}
 800c072:	b085      	sub	sp, #20
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d006      	beq.n	800c08e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c08a:	60fb      	str	r3, [r7, #12]
 800c08c:	e001      	b.n	800c092 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c08e:	2300      	movs	r3, #0
 800c090:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c092:	68fb      	ldr	r3, [r7, #12]
	}
 800c094:	4618      	mov	r0, r3
 800c096:	3714      	adds	r7, #20
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr

0800c0a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b086      	sub	sp, #24
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	60f8      	str	r0, [r7, #12]
 800c0a8:	60b9      	str	r1, [r7, #8]
 800c0aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d10d      	bne.n	800c0da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d14d      	bne.n	800c162 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	689b      	ldr	r3, [r3, #8]
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f001 f972 	bl	800d3b4 <xTaskPriorityDisinherit>
 800c0d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	609a      	str	r2, [r3, #8]
 800c0d8:	e043      	b.n	800c162 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d119      	bne.n	800c114 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6858      	ldr	r0, [r3, #4]
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	68b9      	ldr	r1, [r7, #8]
 800c0ec:	f002 fb36 	bl	800e75c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	685a      	ldr	r2, [r3, #4]
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0f8:	441a      	add	r2, r3
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	685a      	ldr	r2, [r3, #4]
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	689b      	ldr	r3, [r3, #8]
 800c106:	429a      	cmp	r2, r3
 800c108:	d32b      	bcc.n	800c162 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681a      	ldr	r2, [r3, #0]
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	605a      	str	r2, [r3, #4]
 800c112:	e026      	b.n	800c162 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	68d8      	ldr	r0, [r3, #12]
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c11c:	461a      	mov	r2, r3
 800c11e:	68b9      	ldr	r1, [r7, #8]
 800c120:	f002 fb1c 	bl	800e75c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	68da      	ldr	r2, [r3, #12]
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c12c:	425b      	negs	r3, r3
 800c12e:	441a      	add	r2, r3
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	68da      	ldr	r2, [r3, #12]
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	429a      	cmp	r2, r3
 800c13e:	d207      	bcs.n	800c150 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	689a      	ldr	r2, [r3, #8]
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c148:	425b      	negs	r3, r3
 800c14a:	441a      	add	r2, r3
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	2b02      	cmp	r3, #2
 800c154:	d105      	bne.n	800c162 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d002      	beq.n	800c162 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	3b01      	subs	r3, #1
 800c160:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	1c5a      	adds	r2, r3, #1
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c16a:	697b      	ldr	r3, [r7, #20]
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3718      	adds	r7, #24
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}

0800c174 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c182:	2b00      	cmp	r3, #0
 800c184:	d018      	beq.n	800c1b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	68da      	ldr	r2, [r3, #12]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c18e:	441a      	add	r2, r3
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	68da      	ldr	r2, [r3, #12]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	689b      	ldr	r3, [r3, #8]
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d303      	bcc.n	800c1a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681a      	ldr	r2, [r3, #0]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	68d9      	ldr	r1, [r3, #12]
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	6838      	ldr	r0, [r7, #0]
 800c1b4:	f002 fad2 	bl	800e75c <memcpy>
	}
}
 800c1b8:	bf00      	nop
 800c1ba:	3708      	adds	r7, #8
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c1c8:	f001 ff80 	bl	800e0cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c1d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c1d4:	e011      	b.n	800c1fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d012      	beq.n	800c204 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	3324      	adds	r3, #36	; 0x24
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f000 fe50 	bl	800ce88 <xTaskRemoveFromEventList>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d001      	beq.n	800c1f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c1ee:	f000 ff2d 	bl	800d04c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c1f2:	7bfb      	ldrb	r3, [r7, #15]
 800c1f4:	3b01      	subs	r3, #1
 800c1f6:	b2db      	uxtb	r3, r3
 800c1f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c1fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	dce9      	bgt.n	800c1d6 <prvUnlockQueue+0x16>
 800c202:	e000      	b.n	800c206 <prvUnlockQueue+0x46>
					break;
 800c204:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	22ff      	movs	r2, #255	; 0xff
 800c20a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c20e:	f001 ff91 	bl	800e134 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c212:	f001 ff5b 	bl	800e0cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c21c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c21e:	e011      	b.n	800c244 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	691b      	ldr	r3, [r3, #16]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d012      	beq.n	800c24e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	3310      	adds	r3, #16
 800c22c:	4618      	mov	r0, r3
 800c22e:	f000 fe2b 	bl	800ce88 <xTaskRemoveFromEventList>
 800c232:	4603      	mov	r3, r0
 800c234:	2b00      	cmp	r3, #0
 800c236:	d001      	beq.n	800c23c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c238:	f000 ff08 	bl	800d04c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c23c:	7bbb      	ldrb	r3, [r7, #14]
 800c23e:	3b01      	subs	r3, #1
 800c240:	b2db      	uxtb	r3, r3
 800c242:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c244:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	dce9      	bgt.n	800c220 <prvUnlockQueue+0x60>
 800c24c:	e000      	b.n	800c250 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c24e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	22ff      	movs	r2, #255	; 0xff
 800c254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c258:	f001 ff6c 	bl	800e134 <vPortExitCritical>
}
 800c25c:	bf00      	nop
 800c25e:	3710      	adds	r7, #16
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b084      	sub	sp, #16
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c26c:	f001 ff2e 	bl	800e0cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c274:	2b00      	cmp	r3, #0
 800c276:	d102      	bne.n	800c27e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c278:	2301      	movs	r3, #1
 800c27a:	60fb      	str	r3, [r7, #12]
 800c27c:	e001      	b.n	800c282 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c27e:	2300      	movs	r3, #0
 800c280:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c282:	f001 ff57 	bl	800e134 <vPortExitCritical>

	return xReturn;
 800c286:	68fb      	ldr	r3, [r7, #12]
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3710      	adds	r7, #16
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b084      	sub	sp, #16
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c298:	f001 ff18 	bl	800e0cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2a4:	429a      	cmp	r2, r3
 800c2a6:	d102      	bne.n	800c2ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	60fb      	str	r3, [r7, #12]
 800c2ac:	e001      	b.n	800c2b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c2b2:	f001 ff3f 	bl	800e134 <vPortExitCritical>

	return xReturn;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3710      	adds	r7, #16
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b085      	sub	sp, #20
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	60fb      	str	r3, [r7, #12]
 800c2ce:	e014      	b.n	800c2fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c2d0:	4a0f      	ldr	r2, [pc, #60]	; (800c310 <vQueueAddToRegistry+0x50>)
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d10b      	bne.n	800c2f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c2dc:	490c      	ldr	r1, [pc, #48]	; (800c310 <vQueueAddToRegistry+0x50>)
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	683a      	ldr	r2, [r7, #0]
 800c2e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c2e6:	4a0a      	ldr	r2, [pc, #40]	; (800c310 <vQueueAddToRegistry+0x50>)
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	00db      	lsls	r3, r3, #3
 800c2ec:	4413      	add	r3, r2
 800c2ee:	687a      	ldr	r2, [r7, #4]
 800c2f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c2f2:	e006      	b.n	800c302 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	60fb      	str	r3, [r7, #12]
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2b07      	cmp	r3, #7
 800c2fe:	d9e7      	bls.n	800c2d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c300:	bf00      	nop
 800c302:	bf00      	nop
 800c304:	3714      	adds	r7, #20
 800c306:	46bd      	mov	sp, r7
 800c308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30c:	4770      	bx	lr
 800c30e:	bf00      	nop
 800c310:	2000135c 	.word	0x2000135c

0800c314 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c314:	b580      	push	{r7, lr}
 800c316:	b086      	sub	sp, #24
 800c318:	af00      	add	r7, sp, #0
 800c31a:	60f8      	str	r0, [r7, #12]
 800c31c:	60b9      	str	r1, [r7, #8]
 800c31e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c324:	f001 fed2 	bl	800e0cc <vPortEnterCritical>
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c32e:	b25b      	sxtb	r3, r3
 800c330:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c334:	d103      	bne.n	800c33e <vQueueWaitForMessageRestricted+0x2a>
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	2200      	movs	r2, #0
 800c33a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c344:	b25b      	sxtb	r3, r3
 800c346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c34a:	d103      	bne.n	800c354 <vQueueWaitForMessageRestricted+0x40>
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	2200      	movs	r2, #0
 800c350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c354:	f001 feee 	bl	800e134 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d106      	bne.n	800c36e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	3324      	adds	r3, #36	; 0x24
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	68b9      	ldr	r1, [r7, #8]
 800c368:	4618      	mov	r0, r3
 800c36a:	f000 fd5f 	bl	800ce2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c36e:	6978      	ldr	r0, [r7, #20]
 800c370:	f7ff ff26 	bl	800c1c0 <prvUnlockQueue>
	}
 800c374:	bf00      	nop
 800c376:	3718      	adds	r7, #24
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b08e      	sub	sp, #56	; 0x38
 800c380:	af04      	add	r7, sp, #16
 800c382:	60f8      	str	r0, [r7, #12]
 800c384:	60b9      	str	r1, [r7, #8]
 800c386:	607a      	str	r2, [r7, #4]
 800c388:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d10c      	bne.n	800c3aa <xTaskCreateStatic+0x2e>
	__asm volatile
 800c390:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c394:	b672      	cpsid	i
 800c396:	f383 8811 	msr	BASEPRI, r3
 800c39a:	f3bf 8f6f 	isb	sy
 800c39e:	f3bf 8f4f 	dsb	sy
 800c3a2:	b662      	cpsie	i
 800c3a4:	623b      	str	r3, [r7, #32]
}
 800c3a6:	bf00      	nop
 800c3a8:	e7fe      	b.n	800c3a8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d10c      	bne.n	800c3ca <xTaskCreateStatic+0x4e>
	__asm volatile
 800c3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b4:	b672      	cpsid	i
 800c3b6:	f383 8811 	msr	BASEPRI, r3
 800c3ba:	f3bf 8f6f 	isb	sy
 800c3be:	f3bf 8f4f 	dsb	sy
 800c3c2:	b662      	cpsie	i
 800c3c4:	61fb      	str	r3, [r7, #28]
}
 800c3c6:	bf00      	nop
 800c3c8:	e7fe      	b.n	800c3c8 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c3ca:	2360      	movs	r3, #96	; 0x60
 800c3cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c3ce:	693b      	ldr	r3, [r7, #16]
 800c3d0:	2b60      	cmp	r3, #96	; 0x60
 800c3d2:	d00c      	beq.n	800c3ee <xTaskCreateStatic+0x72>
	__asm volatile
 800c3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d8:	b672      	cpsid	i
 800c3da:	f383 8811 	msr	BASEPRI, r3
 800c3de:	f3bf 8f6f 	isb	sy
 800c3e2:	f3bf 8f4f 	dsb	sy
 800c3e6:	b662      	cpsie	i
 800c3e8:	61bb      	str	r3, [r7, #24]
}
 800c3ea:	bf00      	nop
 800c3ec:	e7fe      	b.n	800c3ec <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c3ee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d01e      	beq.n	800c434 <xTaskCreateStatic+0xb8>
 800c3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d01b      	beq.n	800c434 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c404:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c408:	2202      	movs	r2, #2
 800c40a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c40e:	2300      	movs	r3, #0
 800c410:	9303      	str	r3, [sp, #12]
 800c412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c414:	9302      	str	r3, [sp, #8]
 800c416:	f107 0314 	add.w	r3, r7, #20
 800c41a:	9301      	str	r3, [sp, #4]
 800c41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41e:	9300      	str	r3, [sp, #0]
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	687a      	ldr	r2, [r7, #4]
 800c424:	68b9      	ldr	r1, [r7, #8]
 800c426:	68f8      	ldr	r0, [r7, #12]
 800c428:	f000 f850 	bl	800c4cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c42c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c42e:	f000 f8e1 	bl	800c5f4 <prvAddNewTaskToReadyList>
 800c432:	e001      	b.n	800c438 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800c434:	2300      	movs	r3, #0
 800c436:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c438:	697b      	ldr	r3, [r7, #20]
	}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3728      	adds	r7, #40	; 0x28
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}

0800c442 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c442:	b580      	push	{r7, lr}
 800c444:	b08c      	sub	sp, #48	; 0x30
 800c446:	af04      	add	r7, sp, #16
 800c448:	60f8      	str	r0, [r7, #12]
 800c44a:	60b9      	str	r1, [r7, #8]
 800c44c:	603b      	str	r3, [r7, #0]
 800c44e:	4613      	mov	r3, r2
 800c450:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c452:	88fb      	ldrh	r3, [r7, #6]
 800c454:	009b      	lsls	r3, r3, #2
 800c456:	4618      	mov	r0, r3
 800c458:	f001 ff64 	bl	800e324 <pvPortMalloc>
 800c45c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d00e      	beq.n	800c482 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c464:	2060      	movs	r0, #96	; 0x60
 800c466:	f001 ff5d 	bl	800e324 <pvPortMalloc>
 800c46a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c46c:	69fb      	ldr	r3, [r7, #28]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d003      	beq.n	800c47a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c472:	69fb      	ldr	r3, [r7, #28]
 800c474:	697a      	ldr	r2, [r7, #20]
 800c476:	631a      	str	r2, [r3, #48]	; 0x30
 800c478:	e005      	b.n	800c486 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c47a:	6978      	ldr	r0, [r7, #20]
 800c47c:	f002 f822 	bl	800e4c4 <vPortFree>
 800c480:	e001      	b.n	800c486 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c482:	2300      	movs	r3, #0
 800c484:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c486:	69fb      	ldr	r3, [r7, #28]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d017      	beq.n	800c4bc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c48c:	69fb      	ldr	r3, [r7, #28]
 800c48e:	2200      	movs	r2, #0
 800c490:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c494:	88fa      	ldrh	r2, [r7, #6]
 800c496:	2300      	movs	r3, #0
 800c498:	9303      	str	r3, [sp, #12]
 800c49a:	69fb      	ldr	r3, [r7, #28]
 800c49c:	9302      	str	r3, [sp, #8]
 800c49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a0:	9301      	str	r3, [sp, #4]
 800c4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a4:	9300      	str	r3, [sp, #0]
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	68b9      	ldr	r1, [r7, #8]
 800c4aa:	68f8      	ldr	r0, [r7, #12]
 800c4ac:	f000 f80e 	bl	800c4cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c4b0:	69f8      	ldr	r0, [r7, #28]
 800c4b2:	f000 f89f 	bl	800c5f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	61bb      	str	r3, [r7, #24]
 800c4ba:	e002      	b.n	800c4c2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c4bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c4c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c4c2:	69bb      	ldr	r3, [r7, #24]
	}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3720      	adds	r7, #32
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b088      	sub	sp, #32
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	60f8      	str	r0, [r7, #12]
 800c4d4:	60b9      	str	r1, [r7, #8]
 800c4d6:	607a      	str	r2, [r7, #4]
 800c4d8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4dc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	009b      	lsls	r3, r3, #2
 800c4e2:	461a      	mov	r2, r3
 800c4e4:	21a5      	movs	r1, #165	; 0xa5
 800c4e6:	f002 f947 	bl	800e778 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c4ee:	6879      	ldr	r1, [r7, #4]
 800c4f0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c4f4:	440b      	add	r3, r1
 800c4f6:	009b      	lsls	r3, r3, #2
 800c4f8:	4413      	add	r3, r2
 800c4fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c4fc:	69bb      	ldr	r3, [r7, #24]
 800c4fe:	f023 0307 	bic.w	r3, r3, #7
 800c502:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c504:	69bb      	ldr	r3, [r7, #24]
 800c506:	f003 0307 	and.w	r3, r3, #7
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d00c      	beq.n	800c528 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800c50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c512:	b672      	cpsid	i
 800c514:	f383 8811 	msr	BASEPRI, r3
 800c518:	f3bf 8f6f 	isb	sy
 800c51c:	f3bf 8f4f 	dsb	sy
 800c520:	b662      	cpsie	i
 800c522:	617b      	str	r3, [r7, #20]
}
 800c524:	bf00      	nop
 800c526:	e7fe      	b.n	800c526 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d01f      	beq.n	800c56e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c52e:	2300      	movs	r3, #0
 800c530:	61fb      	str	r3, [r7, #28]
 800c532:	e012      	b.n	800c55a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c534:	68ba      	ldr	r2, [r7, #8]
 800c536:	69fb      	ldr	r3, [r7, #28]
 800c538:	4413      	add	r3, r2
 800c53a:	7819      	ldrb	r1, [r3, #0]
 800c53c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c53e:	69fb      	ldr	r3, [r7, #28]
 800c540:	4413      	add	r3, r2
 800c542:	3334      	adds	r3, #52	; 0x34
 800c544:	460a      	mov	r2, r1
 800c546:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c548:	68ba      	ldr	r2, [r7, #8]
 800c54a:	69fb      	ldr	r3, [r7, #28]
 800c54c:	4413      	add	r3, r2
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d006      	beq.n	800c562 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c554:	69fb      	ldr	r3, [r7, #28]
 800c556:	3301      	adds	r3, #1
 800c558:	61fb      	str	r3, [r7, #28]
 800c55a:	69fb      	ldr	r3, [r7, #28]
 800c55c:	2b0f      	cmp	r3, #15
 800c55e:	d9e9      	bls.n	800c534 <prvInitialiseNewTask+0x68>
 800c560:	e000      	b.n	800c564 <prvInitialiseNewTask+0x98>
			{
				break;
 800c562:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c566:	2200      	movs	r2, #0
 800c568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c56c:	e003      	b.n	800c576 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c570:	2200      	movs	r2, #0
 800c572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c578:	2b37      	cmp	r3, #55	; 0x37
 800c57a:	d901      	bls.n	800c580 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c57c:	2337      	movs	r3, #55	; 0x37
 800c57e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c584:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c58a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c58c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c58e:	2200      	movs	r2, #0
 800c590:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c594:	3304      	adds	r3, #4
 800c596:	4618      	mov	r0, r3
 800c598:	f7fe fea4 	bl	800b2e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59e:	3318      	adds	r3, #24
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f7fe fe9f 	bl	800b2e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800c5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5be:	2200      	movs	r2, #0
 800c5c0:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c5d0:	683a      	ldr	r2, [r7, #0]
 800c5d2:	68f9      	ldr	r1, [r7, #12]
 800c5d4:	69b8      	ldr	r0, [r7, #24]
 800c5d6:	f001 fc6b 	bl	800deb0 <pxPortInitialiseStack>
 800c5da:	4602      	mov	r2, r0
 800c5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5de:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d002      	beq.n	800c5ec <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5ec:	bf00      	nop
 800c5ee:	3720      	adds	r7, #32
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}

0800c5f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b082      	sub	sp, #8
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c5fc:	f001 fd66 	bl	800e0cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c600:	4b2d      	ldr	r3, [pc, #180]	; (800c6b8 <prvAddNewTaskToReadyList+0xc4>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	3301      	adds	r3, #1
 800c606:	4a2c      	ldr	r2, [pc, #176]	; (800c6b8 <prvAddNewTaskToReadyList+0xc4>)
 800c608:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c60a:	4b2c      	ldr	r3, [pc, #176]	; (800c6bc <prvAddNewTaskToReadyList+0xc8>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d109      	bne.n	800c626 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c612:	4a2a      	ldr	r2, [pc, #168]	; (800c6bc <prvAddNewTaskToReadyList+0xc8>)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c618:	4b27      	ldr	r3, [pc, #156]	; (800c6b8 <prvAddNewTaskToReadyList+0xc4>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	2b01      	cmp	r3, #1
 800c61e:	d110      	bne.n	800c642 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c620:	f000 fd3a 	bl	800d098 <prvInitialiseTaskLists>
 800c624:	e00d      	b.n	800c642 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c626:	4b26      	ldr	r3, [pc, #152]	; (800c6c0 <prvAddNewTaskToReadyList+0xcc>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d109      	bne.n	800c642 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c62e:	4b23      	ldr	r3, [pc, #140]	; (800c6bc <prvAddNewTaskToReadyList+0xc8>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c638:	429a      	cmp	r2, r3
 800c63a:	d802      	bhi.n	800c642 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c63c:	4a1f      	ldr	r2, [pc, #124]	; (800c6bc <prvAddNewTaskToReadyList+0xc8>)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c642:	4b20      	ldr	r3, [pc, #128]	; (800c6c4 <prvAddNewTaskToReadyList+0xd0>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	3301      	adds	r3, #1
 800c648:	4a1e      	ldr	r2, [pc, #120]	; (800c6c4 <prvAddNewTaskToReadyList+0xd0>)
 800c64a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c64c:	4b1d      	ldr	r3, [pc, #116]	; (800c6c4 <prvAddNewTaskToReadyList+0xd0>)
 800c64e:	681a      	ldr	r2, [r3, #0]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c658:	4b1b      	ldr	r3, [pc, #108]	; (800c6c8 <prvAddNewTaskToReadyList+0xd4>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d903      	bls.n	800c668 <prvAddNewTaskToReadyList+0x74>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c664:	4a18      	ldr	r2, [pc, #96]	; (800c6c8 <prvAddNewTaskToReadyList+0xd4>)
 800c666:	6013      	str	r3, [r2, #0]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c66c:	4613      	mov	r3, r2
 800c66e:	009b      	lsls	r3, r3, #2
 800c670:	4413      	add	r3, r2
 800c672:	009b      	lsls	r3, r3, #2
 800c674:	4a15      	ldr	r2, [pc, #84]	; (800c6cc <prvAddNewTaskToReadyList+0xd8>)
 800c676:	441a      	add	r2, r3
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	3304      	adds	r3, #4
 800c67c:	4619      	mov	r1, r3
 800c67e:	4610      	mov	r0, r2
 800c680:	f7fe fe3d 	bl	800b2fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c684:	f001 fd56 	bl	800e134 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c688:	4b0d      	ldr	r3, [pc, #52]	; (800c6c0 <prvAddNewTaskToReadyList+0xcc>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d00e      	beq.n	800c6ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c690:	4b0a      	ldr	r3, [pc, #40]	; (800c6bc <prvAddNewTaskToReadyList+0xc8>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c69a:	429a      	cmp	r2, r3
 800c69c:	d207      	bcs.n	800c6ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c69e:	4b0c      	ldr	r3, [pc, #48]	; (800c6d0 <prvAddNewTaskToReadyList+0xdc>)
 800c6a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6a4:	601a      	str	r2, [r3, #0]
 800c6a6:	f3bf 8f4f 	dsb	sy
 800c6aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6ae:	bf00      	nop
 800c6b0:	3708      	adds	r7, #8
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	20001870 	.word	0x20001870
 800c6bc:	2000139c 	.word	0x2000139c
 800c6c0:	2000187c 	.word	0x2000187c
 800c6c4:	2000188c 	.word	0x2000188c
 800c6c8:	20001878 	.word	0x20001878
 800c6cc:	200013a0 	.word	0x200013a0
 800c6d0:	e000ed04 	.word	0xe000ed04

0800c6d4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b084      	sub	sp, #16
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c6dc:	f001 fcf6 	bl	800e0cc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d102      	bne.n	800c6ec <vTaskDelete+0x18>
 800c6e6:	4b2d      	ldr	r3, [pc, #180]	; (800c79c <vTaskDelete+0xc8>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	e000      	b.n	800c6ee <vTaskDelete+0x1a>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	3304      	adds	r3, #4
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f7fe fe5f 	bl	800b3b8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d004      	beq.n	800c70c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	3318      	adds	r3, #24
 800c706:	4618      	mov	r0, r3
 800c708:	f7fe fe56 	bl	800b3b8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800c70c:	4b24      	ldr	r3, [pc, #144]	; (800c7a0 <vTaskDelete+0xcc>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	3301      	adds	r3, #1
 800c712:	4a23      	ldr	r2, [pc, #140]	; (800c7a0 <vTaskDelete+0xcc>)
 800c714:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800c716:	4b21      	ldr	r3, [pc, #132]	; (800c79c <vTaskDelete+0xc8>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	68fa      	ldr	r2, [r7, #12]
 800c71c:	429a      	cmp	r2, r3
 800c71e:	d10b      	bne.n	800c738 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	3304      	adds	r3, #4
 800c724:	4619      	mov	r1, r3
 800c726:	481f      	ldr	r0, [pc, #124]	; (800c7a4 <vTaskDelete+0xd0>)
 800c728:	f7fe fde9 	bl	800b2fe <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800c72c:	4b1e      	ldr	r3, [pc, #120]	; (800c7a8 <vTaskDelete+0xd4>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	3301      	adds	r3, #1
 800c732:	4a1d      	ldr	r2, [pc, #116]	; (800c7a8 <vTaskDelete+0xd4>)
 800c734:	6013      	str	r3, [r2, #0]
 800c736:	e009      	b.n	800c74c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800c738:	4b1c      	ldr	r3, [pc, #112]	; (800c7ac <vTaskDelete+0xd8>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	3b01      	subs	r3, #1
 800c73e:	4a1b      	ldr	r2, [pc, #108]	; (800c7ac <vTaskDelete+0xd8>)
 800c740:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800c742:	68f8      	ldr	r0, [r7, #12]
 800c744:	f000 fd4e 	bl	800d1e4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800c748:	f000 fd7e 	bl	800d248 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800c74c:	f001 fcf2 	bl	800e134 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800c750:	4b17      	ldr	r3, [pc, #92]	; (800c7b0 <vTaskDelete+0xdc>)
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d01d      	beq.n	800c794 <vTaskDelete+0xc0>
		{
			if( pxTCB == pxCurrentTCB )
 800c758:	4b10      	ldr	r3, [pc, #64]	; (800c79c <vTaskDelete+0xc8>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	68fa      	ldr	r2, [r7, #12]
 800c75e:	429a      	cmp	r2, r3
 800c760:	d118      	bne.n	800c794 <vTaskDelete+0xc0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800c762:	4b14      	ldr	r3, [pc, #80]	; (800c7b4 <vTaskDelete+0xe0>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d00c      	beq.n	800c784 <vTaskDelete+0xb0>
	__asm volatile
 800c76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c76e:	b672      	cpsid	i
 800c770:	f383 8811 	msr	BASEPRI, r3
 800c774:	f3bf 8f6f 	isb	sy
 800c778:	f3bf 8f4f 	dsb	sy
 800c77c:	b662      	cpsie	i
 800c77e:	60bb      	str	r3, [r7, #8]
}
 800c780:	bf00      	nop
 800c782:	e7fe      	b.n	800c782 <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 800c784:	4b0c      	ldr	r3, [pc, #48]	; (800c7b8 <vTaskDelete+0xe4>)
 800c786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c78a:	601a      	str	r2, [r3, #0]
 800c78c:	f3bf 8f4f 	dsb	sy
 800c790:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c794:	bf00      	nop
 800c796:	3710      	adds	r7, #16
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}
 800c79c:	2000139c 	.word	0x2000139c
 800c7a0:	2000188c 	.word	0x2000188c
 800c7a4:	20001844 	.word	0x20001844
 800c7a8:	20001858 	.word	0x20001858
 800c7ac:	20001870 	.word	0x20001870
 800c7b0:	2000187c 	.word	0x2000187c
 800c7b4:	20001898 	.word	0x20001898
 800c7b8:	e000ed04 	.word	0xe000ed04

0800c7bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b084      	sub	sp, #16
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d019      	beq.n	800c802 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c7ce:	4b14      	ldr	r3, [pc, #80]	; (800c820 <vTaskDelay+0x64>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d00c      	beq.n	800c7f0 <vTaskDelay+0x34>
	__asm volatile
 800c7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7da:	b672      	cpsid	i
 800c7dc:	f383 8811 	msr	BASEPRI, r3
 800c7e0:	f3bf 8f6f 	isb	sy
 800c7e4:	f3bf 8f4f 	dsb	sy
 800c7e8:	b662      	cpsie	i
 800c7ea:	60bb      	str	r3, [r7, #8]
}
 800c7ec:	bf00      	nop
 800c7ee:	e7fe      	b.n	800c7ee <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c7f0:	f000 f8ec 	bl	800c9cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c7f4:	2100      	movs	r1, #0
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f000 fee8 	bl	800d5cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c7fc:	f000 f8f4 	bl	800c9e8 <xTaskResumeAll>
 800c800:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d107      	bne.n	800c818 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800c808:	4b06      	ldr	r3, [pc, #24]	; (800c824 <vTaskDelay+0x68>)
 800c80a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c80e:	601a      	str	r2, [r3, #0]
 800c810:	f3bf 8f4f 	dsb	sy
 800c814:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c818:	bf00      	nop
 800c81a:	3710      	adds	r7, #16
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}
 800c820:	20001898 	.word	0x20001898
 800c824:	e000ed04 	.word	0xe000ed04

0800c828 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b088      	sub	sp, #32
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800c834:	69bb      	ldr	r3, [r7, #24]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d10c      	bne.n	800c854 <eTaskGetState+0x2c>
	__asm volatile
 800c83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c83e:	b672      	cpsid	i
 800c840:	f383 8811 	msr	BASEPRI, r3
 800c844:	f3bf 8f6f 	isb	sy
 800c848:	f3bf 8f4f 	dsb	sy
 800c84c:	b662      	cpsie	i
 800c84e:	60bb      	str	r3, [r7, #8]
}
 800c850:	bf00      	nop
 800c852:	e7fe      	b.n	800c852 <eTaskGetState+0x2a>

		if( pxTCB == pxCurrentTCB )
 800c854:	4b23      	ldr	r3, [pc, #140]	; (800c8e4 <eTaskGetState+0xbc>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	69ba      	ldr	r2, [r7, #24]
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d102      	bne.n	800c864 <eTaskGetState+0x3c>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800c85e:	2300      	movs	r3, #0
 800c860:	77fb      	strb	r3, [r7, #31]
 800c862:	e03a      	b.n	800c8da <eTaskGetState+0xb2>
		}
		else
		{
			taskENTER_CRITICAL();
 800c864:	f001 fc32 	bl	800e0cc <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800c868:	69bb      	ldr	r3, [r7, #24]
 800c86a:	695b      	ldr	r3, [r3, #20]
 800c86c:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800c86e:	4b1e      	ldr	r3, [pc, #120]	; (800c8e8 <eTaskGetState+0xc0>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800c874:	4b1d      	ldr	r3, [pc, #116]	; (800c8ec <eTaskGetState+0xc4>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800c87a:	f001 fc5b 	bl	800e134 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800c87e:	697a      	ldr	r2, [r7, #20]
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	429a      	cmp	r2, r3
 800c884:	d003      	beq.n	800c88e <eTaskGetState+0x66>
 800c886:	697a      	ldr	r2, [r7, #20]
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d102      	bne.n	800c894 <eTaskGetState+0x6c>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800c88e:	2302      	movs	r3, #2
 800c890:	77fb      	strb	r3, [r7, #31]
 800c892:	e022      	b.n	800c8da <eTaskGetState+0xb2>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	4a16      	ldr	r2, [pc, #88]	; (800c8f0 <eTaskGetState+0xc8>)
 800c898:	4293      	cmp	r3, r2
 800c89a:	d112      	bne.n	800c8c2 <eTaskGetState+0x9a>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800c89c:	69bb      	ldr	r3, [r7, #24]
 800c89e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d10b      	bne.n	800c8bc <eTaskGetState+0x94>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800c8a4:	69bb      	ldr	r3, [r7, #24]
 800c8a6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c8aa:	b2db      	uxtb	r3, r3
 800c8ac:	2b01      	cmp	r3, #1
 800c8ae:	d102      	bne.n	800c8b6 <eTaskGetState+0x8e>
							{
								eReturn = eBlocked;
 800c8b0:	2302      	movs	r3, #2
 800c8b2:	77fb      	strb	r3, [r7, #31]
 800c8b4:	e011      	b.n	800c8da <eTaskGetState+0xb2>
							}
							else
							{
								eReturn = eSuspended;
 800c8b6:	2303      	movs	r3, #3
 800c8b8:	77fb      	strb	r3, [r7, #31]
 800c8ba:	e00e      	b.n	800c8da <eTaskGetState+0xb2>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800c8bc:	2302      	movs	r3, #2
 800c8be:	77fb      	strb	r3, [r7, #31]
 800c8c0:	e00b      	b.n	800c8da <eTaskGetState+0xb2>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	4a0b      	ldr	r2, [pc, #44]	; (800c8f4 <eTaskGetState+0xcc>)
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d002      	beq.n	800c8d0 <eTaskGetState+0xa8>
 800c8ca:	697b      	ldr	r3, [r7, #20]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d102      	bne.n	800c8d6 <eTaskGetState+0xae>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800c8d0:	2304      	movs	r3, #4
 800c8d2:	77fb      	strb	r3, [r7, #31]
 800c8d4:	e001      	b.n	800c8da <eTaskGetState+0xb2>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800c8da:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3720      	adds	r7, #32
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}
 800c8e4:	2000139c 	.word	0x2000139c
 800c8e8:	20001828 	.word	0x20001828
 800c8ec:	2000182c 	.word	0x2000182c
 800c8f0:	2000185c 	.word	0x2000185c
 800c8f4:	20001844 	.word	0x20001844

0800c8f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b08a      	sub	sp, #40	; 0x28
 800c8fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c8fe:	2300      	movs	r3, #0
 800c900:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c902:	2300      	movs	r3, #0
 800c904:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c906:	463a      	mov	r2, r7
 800c908:	1d39      	adds	r1, r7, #4
 800c90a:	f107 0308 	add.w	r3, r7, #8
 800c90e:	4618      	mov	r0, r3
 800c910:	f7fe fc94 	bl	800b23c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c914:	6839      	ldr	r1, [r7, #0]
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	68ba      	ldr	r2, [r7, #8]
 800c91a:	9202      	str	r2, [sp, #8]
 800c91c:	9301      	str	r3, [sp, #4]
 800c91e:	2300      	movs	r3, #0
 800c920:	9300      	str	r3, [sp, #0]
 800c922:	2300      	movs	r3, #0
 800c924:	460a      	mov	r2, r1
 800c926:	4923      	ldr	r1, [pc, #140]	; (800c9b4 <vTaskStartScheduler+0xbc>)
 800c928:	4823      	ldr	r0, [pc, #140]	; (800c9b8 <vTaskStartScheduler+0xc0>)
 800c92a:	f7ff fd27 	bl	800c37c <xTaskCreateStatic>
 800c92e:	4603      	mov	r3, r0
 800c930:	4a22      	ldr	r2, [pc, #136]	; (800c9bc <vTaskStartScheduler+0xc4>)
 800c932:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c934:	4b21      	ldr	r3, [pc, #132]	; (800c9bc <vTaskStartScheduler+0xc4>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d002      	beq.n	800c942 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c93c:	2301      	movs	r3, #1
 800c93e:	617b      	str	r3, [r7, #20]
 800c940:	e001      	b.n	800c946 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c942:	2300      	movs	r3, #0
 800c944:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d102      	bne.n	800c952 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c94c:	f000 fe92 	bl	800d674 <xTimerCreateTimerTask>
 800c950:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	2b01      	cmp	r3, #1
 800c956:	d118      	bne.n	800c98a <vTaskStartScheduler+0x92>
	__asm volatile
 800c958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c95c:	b672      	cpsid	i
 800c95e:	f383 8811 	msr	BASEPRI, r3
 800c962:	f3bf 8f6f 	isb	sy
 800c966:	f3bf 8f4f 	dsb	sy
 800c96a:	b662      	cpsie	i
 800c96c:	613b      	str	r3, [r7, #16]
}
 800c96e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c970:	4b13      	ldr	r3, [pc, #76]	; (800c9c0 <vTaskStartScheduler+0xc8>)
 800c972:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c976:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c978:	4b12      	ldr	r3, [pc, #72]	; (800c9c4 <vTaskStartScheduler+0xcc>)
 800c97a:	2201      	movs	r2, #1
 800c97c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c97e:	4b12      	ldr	r3, [pc, #72]	; (800c9c8 <vTaskStartScheduler+0xd0>)
 800c980:	2200      	movs	r2, #0
 800c982:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c984:	f001 fb24 	bl	800dfd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c988:	e010      	b.n	800c9ac <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c990:	d10c      	bne.n	800c9ac <vTaskStartScheduler+0xb4>
	__asm volatile
 800c992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c996:	b672      	cpsid	i
 800c998:	f383 8811 	msr	BASEPRI, r3
 800c99c:	f3bf 8f6f 	isb	sy
 800c9a0:	f3bf 8f4f 	dsb	sy
 800c9a4:	b662      	cpsie	i
 800c9a6:	60fb      	str	r3, [r7, #12]
}
 800c9a8:	bf00      	nop
 800c9aa:	e7fe      	b.n	800c9aa <vTaskStartScheduler+0xb2>
}
 800c9ac:	bf00      	nop
 800c9ae:	3718      	adds	r7, #24
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}
 800c9b4:	0800f118 	.word	0x0800f118
 800c9b8:	0800d065 	.word	0x0800d065
 800c9bc:	20001894 	.word	0x20001894
 800c9c0:	20001890 	.word	0x20001890
 800c9c4:	2000187c 	.word	0x2000187c
 800c9c8:	20001874 	.word	0x20001874

0800c9cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c9d0:	4b04      	ldr	r3, [pc, #16]	; (800c9e4 <vTaskSuspendAll+0x18>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	3301      	adds	r3, #1
 800c9d6:	4a03      	ldr	r2, [pc, #12]	; (800c9e4 <vTaskSuspendAll+0x18>)
 800c9d8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c9da:	bf00      	nop
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e2:	4770      	bx	lr
 800c9e4:	20001898 	.word	0x20001898

0800c9e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b084      	sub	sp, #16
 800c9ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c9f6:	4b43      	ldr	r3, [pc, #268]	; (800cb04 <xTaskResumeAll+0x11c>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d10c      	bne.n	800ca18 <xTaskResumeAll+0x30>
	__asm volatile
 800c9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca02:	b672      	cpsid	i
 800ca04:	f383 8811 	msr	BASEPRI, r3
 800ca08:	f3bf 8f6f 	isb	sy
 800ca0c:	f3bf 8f4f 	dsb	sy
 800ca10:	b662      	cpsie	i
 800ca12:	603b      	str	r3, [r7, #0]
}
 800ca14:	bf00      	nop
 800ca16:	e7fe      	b.n	800ca16 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ca18:	f001 fb58 	bl	800e0cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ca1c:	4b39      	ldr	r3, [pc, #228]	; (800cb04 <xTaskResumeAll+0x11c>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	3b01      	subs	r3, #1
 800ca22:	4a38      	ldr	r2, [pc, #224]	; (800cb04 <xTaskResumeAll+0x11c>)
 800ca24:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca26:	4b37      	ldr	r3, [pc, #220]	; (800cb04 <xTaskResumeAll+0x11c>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d162      	bne.n	800caf4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ca2e:	4b36      	ldr	r3, [pc, #216]	; (800cb08 <xTaskResumeAll+0x120>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d05e      	beq.n	800caf4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca36:	e02f      	b.n	800ca98 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca38:	4b34      	ldr	r3, [pc, #208]	; (800cb0c <xTaskResumeAll+0x124>)
 800ca3a:	68db      	ldr	r3, [r3, #12]
 800ca3c:	68db      	ldr	r3, [r3, #12]
 800ca3e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	3318      	adds	r3, #24
 800ca44:	4618      	mov	r0, r3
 800ca46:	f7fe fcb7 	bl	800b3b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	3304      	adds	r3, #4
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7fe fcb2 	bl	800b3b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca58:	4b2d      	ldr	r3, [pc, #180]	; (800cb10 <xTaskResumeAll+0x128>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d903      	bls.n	800ca68 <xTaskResumeAll+0x80>
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca64:	4a2a      	ldr	r2, [pc, #168]	; (800cb10 <xTaskResumeAll+0x128>)
 800ca66:	6013      	str	r3, [r2, #0]
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca6c:	4613      	mov	r3, r2
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	4413      	add	r3, r2
 800ca72:	009b      	lsls	r3, r3, #2
 800ca74:	4a27      	ldr	r2, [pc, #156]	; (800cb14 <xTaskResumeAll+0x12c>)
 800ca76:	441a      	add	r2, r3
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	3304      	adds	r3, #4
 800ca7c:	4619      	mov	r1, r3
 800ca7e:	4610      	mov	r0, r2
 800ca80:	f7fe fc3d 	bl	800b2fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca88:	4b23      	ldr	r3, [pc, #140]	; (800cb18 <xTaskResumeAll+0x130>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca8e:	429a      	cmp	r2, r3
 800ca90:	d302      	bcc.n	800ca98 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800ca92:	4b22      	ldr	r3, [pc, #136]	; (800cb1c <xTaskResumeAll+0x134>)
 800ca94:	2201      	movs	r2, #1
 800ca96:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca98:	4b1c      	ldr	r3, [pc, #112]	; (800cb0c <xTaskResumeAll+0x124>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d1cb      	bne.n	800ca38 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d001      	beq.n	800caaa <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800caa6:	f000 fbcf 	bl	800d248 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800caaa:	4b1d      	ldr	r3, [pc, #116]	; (800cb20 <xTaskResumeAll+0x138>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d010      	beq.n	800cad8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cab6:	f000 f853 	bl	800cb60 <xTaskIncrementTick>
 800caba:	4603      	mov	r3, r0
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d002      	beq.n	800cac6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800cac0:	4b16      	ldr	r3, [pc, #88]	; (800cb1c <xTaskResumeAll+0x134>)
 800cac2:	2201      	movs	r2, #1
 800cac4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	3b01      	subs	r3, #1
 800caca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d1f1      	bne.n	800cab6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800cad2:	4b13      	ldr	r3, [pc, #76]	; (800cb20 <xTaskResumeAll+0x138>)
 800cad4:	2200      	movs	r2, #0
 800cad6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cad8:	4b10      	ldr	r3, [pc, #64]	; (800cb1c <xTaskResumeAll+0x134>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d009      	beq.n	800caf4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cae0:	2301      	movs	r3, #1
 800cae2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cae4:	4b0f      	ldr	r3, [pc, #60]	; (800cb24 <xTaskResumeAll+0x13c>)
 800cae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caea:	601a      	str	r2, [r3, #0]
 800caec:	f3bf 8f4f 	dsb	sy
 800caf0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800caf4:	f001 fb1e 	bl	800e134 <vPortExitCritical>

	return xAlreadyYielded;
 800caf8:	68bb      	ldr	r3, [r7, #8]
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3710      	adds	r7, #16
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
 800cb02:	bf00      	nop
 800cb04:	20001898 	.word	0x20001898
 800cb08:	20001870 	.word	0x20001870
 800cb0c:	20001830 	.word	0x20001830
 800cb10:	20001878 	.word	0x20001878
 800cb14:	200013a0 	.word	0x200013a0
 800cb18:	2000139c 	.word	0x2000139c
 800cb1c:	20001884 	.word	0x20001884
 800cb20:	20001880 	.word	0x20001880
 800cb24:	e000ed04 	.word	0xe000ed04

0800cb28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b083      	sub	sp, #12
 800cb2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cb2e:	4b05      	ldr	r3, [pc, #20]	; (800cb44 <xTaskGetTickCount+0x1c>)
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cb34:	687b      	ldr	r3, [r7, #4]
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	370c      	adds	r7, #12
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb40:	4770      	bx	lr
 800cb42:	bf00      	nop
 800cb44:	20001874 	.word	0x20001874

0800cb48 <uxTaskGetNumberOfTasks>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800cb48:	b480      	push	{r7}
 800cb4a:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 800cb4c:	4b03      	ldr	r3, [pc, #12]	; (800cb5c <uxTaskGetNumberOfTasks+0x14>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	46bd      	mov	sp, r7
 800cb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb58:	4770      	bx	lr
 800cb5a:	bf00      	nop
 800cb5c:	20001870 	.word	0x20001870

0800cb60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b086      	sub	sp, #24
 800cb64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cb66:	2300      	movs	r3, #0
 800cb68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb6a:	4b50      	ldr	r3, [pc, #320]	; (800ccac <xTaskIncrementTick+0x14c>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	f040 808b 	bne.w	800cc8a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cb74:	4b4e      	ldr	r3, [pc, #312]	; (800ccb0 <xTaskIncrementTick+0x150>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	3301      	adds	r3, #1
 800cb7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cb7c:	4a4c      	ldr	r2, [pc, #304]	; (800ccb0 <xTaskIncrementTick+0x150>)
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d122      	bne.n	800cbce <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800cb88:	4b4a      	ldr	r3, [pc, #296]	; (800ccb4 <xTaskIncrementTick+0x154>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d00c      	beq.n	800cbac <xTaskIncrementTick+0x4c>
	__asm volatile
 800cb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb96:	b672      	cpsid	i
 800cb98:	f383 8811 	msr	BASEPRI, r3
 800cb9c:	f3bf 8f6f 	isb	sy
 800cba0:	f3bf 8f4f 	dsb	sy
 800cba4:	b662      	cpsie	i
 800cba6:	603b      	str	r3, [r7, #0]
}
 800cba8:	bf00      	nop
 800cbaa:	e7fe      	b.n	800cbaa <xTaskIncrementTick+0x4a>
 800cbac:	4b41      	ldr	r3, [pc, #260]	; (800ccb4 <xTaskIncrementTick+0x154>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	60fb      	str	r3, [r7, #12]
 800cbb2:	4b41      	ldr	r3, [pc, #260]	; (800ccb8 <xTaskIncrementTick+0x158>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	4a3f      	ldr	r2, [pc, #252]	; (800ccb4 <xTaskIncrementTick+0x154>)
 800cbb8:	6013      	str	r3, [r2, #0]
 800cbba:	4a3f      	ldr	r2, [pc, #252]	; (800ccb8 <xTaskIncrementTick+0x158>)
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	6013      	str	r3, [r2, #0]
 800cbc0:	4b3e      	ldr	r3, [pc, #248]	; (800ccbc <xTaskIncrementTick+0x15c>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	4a3d      	ldr	r2, [pc, #244]	; (800ccbc <xTaskIncrementTick+0x15c>)
 800cbc8:	6013      	str	r3, [r2, #0]
 800cbca:	f000 fb3d 	bl	800d248 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cbce:	4b3c      	ldr	r3, [pc, #240]	; (800ccc0 <xTaskIncrementTick+0x160>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	693a      	ldr	r2, [r7, #16]
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d349      	bcc.n	800cc6c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cbd8:	4b36      	ldr	r3, [pc, #216]	; (800ccb4 <xTaskIncrementTick+0x154>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d104      	bne.n	800cbec <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbe2:	4b37      	ldr	r3, [pc, #220]	; (800ccc0 <xTaskIncrementTick+0x160>)
 800cbe4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cbe8:	601a      	str	r2, [r3, #0]
					break;
 800cbea:	e03f      	b.n	800cc6c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbec:	4b31      	ldr	r3, [pc, #196]	; (800ccb4 <xTaskIncrementTick+0x154>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	68db      	ldr	r3, [r3, #12]
 800cbf2:	68db      	ldr	r3, [r3, #12]
 800cbf4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cbfc:	693a      	ldr	r2, [r7, #16]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	429a      	cmp	r2, r3
 800cc02:	d203      	bcs.n	800cc0c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cc04:	4a2e      	ldr	r2, [pc, #184]	; (800ccc0 <xTaskIncrementTick+0x160>)
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cc0a:	e02f      	b.n	800cc6c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	3304      	adds	r3, #4
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7fe fbd1 	bl	800b3b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d004      	beq.n	800cc28 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	3318      	adds	r3, #24
 800cc22:	4618      	mov	r0, r3
 800cc24:	f7fe fbc8 	bl	800b3b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc2c:	4b25      	ldr	r3, [pc, #148]	; (800ccc4 <xTaskIncrementTick+0x164>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d903      	bls.n	800cc3c <xTaskIncrementTick+0xdc>
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc38:	4a22      	ldr	r2, [pc, #136]	; (800ccc4 <xTaskIncrementTick+0x164>)
 800cc3a:	6013      	str	r3, [r2, #0]
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc40:	4613      	mov	r3, r2
 800cc42:	009b      	lsls	r3, r3, #2
 800cc44:	4413      	add	r3, r2
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	4a1f      	ldr	r2, [pc, #124]	; (800ccc8 <xTaskIncrementTick+0x168>)
 800cc4a:	441a      	add	r2, r3
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	3304      	adds	r3, #4
 800cc50:	4619      	mov	r1, r3
 800cc52:	4610      	mov	r0, r2
 800cc54:	f7fe fb53 	bl	800b2fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc5c:	4b1b      	ldr	r3, [pc, #108]	; (800cccc <xTaskIncrementTick+0x16c>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d3b8      	bcc.n	800cbd8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800cc66:	2301      	movs	r3, #1
 800cc68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc6a:	e7b5      	b.n	800cbd8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cc6c:	4b17      	ldr	r3, [pc, #92]	; (800cccc <xTaskIncrementTick+0x16c>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc72:	4915      	ldr	r1, [pc, #84]	; (800ccc8 <xTaskIncrementTick+0x168>)
 800cc74:	4613      	mov	r3, r2
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	4413      	add	r3, r2
 800cc7a:	009b      	lsls	r3, r3, #2
 800cc7c:	440b      	add	r3, r1
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	2b01      	cmp	r3, #1
 800cc82:	d907      	bls.n	800cc94 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800cc84:	2301      	movs	r3, #1
 800cc86:	617b      	str	r3, [r7, #20]
 800cc88:	e004      	b.n	800cc94 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cc8a:	4b11      	ldr	r3, [pc, #68]	; (800ccd0 <xTaskIncrementTick+0x170>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	3301      	adds	r3, #1
 800cc90:	4a0f      	ldr	r2, [pc, #60]	; (800ccd0 <xTaskIncrementTick+0x170>)
 800cc92:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cc94:	4b0f      	ldr	r3, [pc, #60]	; (800ccd4 <xTaskIncrementTick+0x174>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d001      	beq.n	800cca0 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cca0:	697b      	ldr	r3, [r7, #20]
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3718      	adds	r7, #24
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}
 800ccaa:	bf00      	nop
 800ccac:	20001898 	.word	0x20001898
 800ccb0:	20001874 	.word	0x20001874
 800ccb4:	20001828 	.word	0x20001828
 800ccb8:	2000182c 	.word	0x2000182c
 800ccbc:	20001888 	.word	0x20001888
 800ccc0:	20001890 	.word	0x20001890
 800ccc4:	20001878 	.word	0x20001878
 800ccc8:	200013a0 	.word	0x200013a0
 800cccc:	2000139c 	.word	0x2000139c
 800ccd0:	20001880 	.word	0x20001880
 800ccd4:	20001884 	.word	0x20001884

0800ccd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b086      	sub	sp, #24
 800ccdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ccde:	4b3b      	ldr	r3, [pc, #236]	; (800cdcc <vTaskSwitchContext+0xf4>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d003      	beq.n	800ccee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cce6:	4b3a      	ldr	r3, [pc, #232]	; (800cdd0 <vTaskSwitchContext+0xf8>)
 800cce8:	2201      	movs	r2, #1
 800ccea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ccec:	e06a      	b.n	800cdc4 <vTaskSwitchContext+0xec>
		xYieldPending = pdFALSE;
 800ccee:	4b38      	ldr	r3, [pc, #224]	; (800cdd0 <vTaskSwitchContext+0xf8>)
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800ccf4:	4b37      	ldr	r3, [pc, #220]	; (800cdd4 <vTaskSwitchContext+0xfc>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccfa:	613b      	str	r3, [r7, #16]
 800ccfc:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800cd00:	60fb      	str	r3, [r7, #12]
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	68fa      	ldr	r2, [r7, #12]
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d111      	bne.n	800cd30 <vTaskSwitchContext+0x58>
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	3304      	adds	r3, #4
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	68fa      	ldr	r2, [r7, #12]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d10b      	bne.n	800cd30 <vTaskSwitchContext+0x58>
 800cd18:	693b      	ldr	r3, [r7, #16]
 800cd1a:	3308      	adds	r3, #8
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	68fa      	ldr	r2, [r7, #12]
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d105      	bne.n	800cd30 <vTaskSwitchContext+0x58>
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	330c      	adds	r3, #12
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	68fa      	ldr	r2, [r7, #12]
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d008      	beq.n	800cd42 <vTaskSwitchContext+0x6a>
 800cd30:	4b28      	ldr	r3, [pc, #160]	; (800cdd4 <vTaskSwitchContext+0xfc>)
 800cd32:	681a      	ldr	r2, [r3, #0]
 800cd34:	4b27      	ldr	r3, [pc, #156]	; (800cdd4 <vTaskSwitchContext+0xfc>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	3334      	adds	r3, #52	; 0x34
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	4610      	mov	r0, r2
 800cd3e:	f7f3 fc60 	bl	8000602 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd42:	4b25      	ldr	r3, [pc, #148]	; (800cdd8 <vTaskSwitchContext+0x100>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	617b      	str	r3, [r7, #20]
 800cd48:	e012      	b.n	800cd70 <vTaskSwitchContext+0x98>
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d10c      	bne.n	800cd6a <vTaskSwitchContext+0x92>
	__asm volatile
 800cd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd54:	b672      	cpsid	i
 800cd56:	f383 8811 	msr	BASEPRI, r3
 800cd5a:	f3bf 8f6f 	isb	sy
 800cd5e:	f3bf 8f4f 	dsb	sy
 800cd62:	b662      	cpsie	i
 800cd64:	607b      	str	r3, [r7, #4]
}
 800cd66:	bf00      	nop
 800cd68:	e7fe      	b.n	800cd68 <vTaskSwitchContext+0x90>
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	3b01      	subs	r3, #1
 800cd6e:	617b      	str	r3, [r7, #20]
 800cd70:	491a      	ldr	r1, [pc, #104]	; (800cddc <vTaskSwitchContext+0x104>)
 800cd72:	697a      	ldr	r2, [r7, #20]
 800cd74:	4613      	mov	r3, r2
 800cd76:	009b      	lsls	r3, r3, #2
 800cd78:	4413      	add	r3, r2
 800cd7a:	009b      	lsls	r3, r3, #2
 800cd7c:	440b      	add	r3, r1
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d0e2      	beq.n	800cd4a <vTaskSwitchContext+0x72>
 800cd84:	697a      	ldr	r2, [r7, #20]
 800cd86:	4613      	mov	r3, r2
 800cd88:	009b      	lsls	r3, r3, #2
 800cd8a:	4413      	add	r3, r2
 800cd8c:	009b      	lsls	r3, r3, #2
 800cd8e:	4a13      	ldr	r2, [pc, #76]	; (800cddc <vTaskSwitchContext+0x104>)
 800cd90:	4413      	add	r3, r2
 800cd92:	60bb      	str	r3, [r7, #8]
 800cd94:	68bb      	ldr	r3, [r7, #8]
 800cd96:	685b      	ldr	r3, [r3, #4]
 800cd98:	685a      	ldr	r2, [r3, #4]
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	605a      	str	r2, [r3, #4]
 800cd9e:	68bb      	ldr	r3, [r7, #8]
 800cda0:	685a      	ldr	r2, [r3, #4]
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	3308      	adds	r3, #8
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d104      	bne.n	800cdb4 <vTaskSwitchContext+0xdc>
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	685b      	ldr	r3, [r3, #4]
 800cdae:	685a      	ldr	r2, [r3, #4]
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	605a      	str	r2, [r3, #4]
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	68db      	ldr	r3, [r3, #12]
 800cdba:	4a06      	ldr	r2, [pc, #24]	; (800cdd4 <vTaskSwitchContext+0xfc>)
 800cdbc:	6013      	str	r3, [r2, #0]
 800cdbe:	4a06      	ldr	r2, [pc, #24]	; (800cdd8 <vTaskSwitchContext+0x100>)
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	6013      	str	r3, [r2, #0]
}
 800cdc4:	bf00      	nop
 800cdc6:	3718      	adds	r7, #24
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}
 800cdcc:	20001898 	.word	0x20001898
 800cdd0:	20001884 	.word	0x20001884
 800cdd4:	2000139c 	.word	0x2000139c
 800cdd8:	20001878 	.word	0x20001878
 800cddc:	200013a0 	.word	0x200013a0

0800cde0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b084      	sub	sp, #16
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
 800cde8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d10c      	bne.n	800ce0a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800cdf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf4:	b672      	cpsid	i
 800cdf6:	f383 8811 	msr	BASEPRI, r3
 800cdfa:	f3bf 8f6f 	isb	sy
 800cdfe:	f3bf 8f4f 	dsb	sy
 800ce02:	b662      	cpsie	i
 800ce04:	60fb      	str	r3, [r7, #12]
}
 800ce06:	bf00      	nop
 800ce08:	e7fe      	b.n	800ce08 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce0a:	4b07      	ldr	r3, [pc, #28]	; (800ce28 <vTaskPlaceOnEventList+0x48>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	3318      	adds	r3, #24
 800ce10:	4619      	mov	r1, r3
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f7fe fa97 	bl	800b346 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ce18:	2101      	movs	r1, #1
 800ce1a:	6838      	ldr	r0, [r7, #0]
 800ce1c:	f000 fbd6 	bl	800d5cc <prvAddCurrentTaskToDelayedList>
}
 800ce20:	bf00      	nop
 800ce22:	3710      	adds	r7, #16
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}
 800ce28:	2000139c 	.word	0x2000139c

0800ce2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b086      	sub	sp, #24
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	60f8      	str	r0, [r7, #12]
 800ce34:	60b9      	str	r1, [r7, #8]
 800ce36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d10c      	bne.n	800ce58 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800ce3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce42:	b672      	cpsid	i
 800ce44:	f383 8811 	msr	BASEPRI, r3
 800ce48:	f3bf 8f6f 	isb	sy
 800ce4c:	f3bf 8f4f 	dsb	sy
 800ce50:	b662      	cpsie	i
 800ce52:	617b      	str	r3, [r7, #20]
}
 800ce54:	bf00      	nop
 800ce56:	e7fe      	b.n	800ce56 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce58:	4b0a      	ldr	r3, [pc, #40]	; (800ce84 <vTaskPlaceOnEventListRestricted+0x58>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	3318      	adds	r3, #24
 800ce5e:	4619      	mov	r1, r3
 800ce60:	68f8      	ldr	r0, [r7, #12]
 800ce62:	f7fe fa4c 	bl	800b2fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d002      	beq.n	800ce72 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800ce6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce70:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ce72:	6879      	ldr	r1, [r7, #4]
 800ce74:	68b8      	ldr	r0, [r7, #8]
 800ce76:	f000 fba9 	bl	800d5cc <prvAddCurrentTaskToDelayedList>
	}
 800ce7a:	bf00      	nop
 800ce7c:	3718      	adds	r7, #24
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}
 800ce82:	bf00      	nop
 800ce84:	2000139c 	.word	0x2000139c

0800ce88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b086      	sub	sp, #24
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	68db      	ldr	r3, [r3, #12]
 800ce94:	68db      	ldr	r3, [r3, #12]
 800ce96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d10c      	bne.n	800ceb8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800ce9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea2:	b672      	cpsid	i
 800cea4:	f383 8811 	msr	BASEPRI, r3
 800cea8:	f3bf 8f6f 	isb	sy
 800ceac:	f3bf 8f4f 	dsb	sy
 800ceb0:	b662      	cpsie	i
 800ceb2:	60fb      	str	r3, [r7, #12]
}
 800ceb4:	bf00      	nop
 800ceb6:	e7fe      	b.n	800ceb6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	3318      	adds	r3, #24
 800cebc:	4618      	mov	r0, r3
 800cebe:	f7fe fa7b 	bl	800b3b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cec2:	4b1e      	ldr	r3, [pc, #120]	; (800cf3c <xTaskRemoveFromEventList+0xb4>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d11d      	bne.n	800cf06 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	3304      	adds	r3, #4
 800cece:	4618      	mov	r0, r3
 800ced0:	f7fe fa72 	bl	800b3b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ced4:	693b      	ldr	r3, [r7, #16]
 800ced6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ced8:	4b19      	ldr	r3, [pc, #100]	; (800cf40 <xTaskRemoveFromEventList+0xb8>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	429a      	cmp	r2, r3
 800cede:	d903      	bls.n	800cee8 <xTaskRemoveFromEventList+0x60>
 800cee0:	693b      	ldr	r3, [r7, #16]
 800cee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee4:	4a16      	ldr	r2, [pc, #88]	; (800cf40 <xTaskRemoveFromEventList+0xb8>)
 800cee6:	6013      	str	r3, [r2, #0]
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceec:	4613      	mov	r3, r2
 800ceee:	009b      	lsls	r3, r3, #2
 800cef0:	4413      	add	r3, r2
 800cef2:	009b      	lsls	r3, r3, #2
 800cef4:	4a13      	ldr	r2, [pc, #76]	; (800cf44 <xTaskRemoveFromEventList+0xbc>)
 800cef6:	441a      	add	r2, r3
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	3304      	adds	r3, #4
 800cefc:	4619      	mov	r1, r3
 800cefe:	4610      	mov	r0, r2
 800cf00:	f7fe f9fd 	bl	800b2fe <vListInsertEnd>
 800cf04:	e005      	b.n	800cf12 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cf06:	693b      	ldr	r3, [r7, #16]
 800cf08:	3318      	adds	r3, #24
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	480e      	ldr	r0, [pc, #56]	; (800cf48 <xTaskRemoveFromEventList+0xc0>)
 800cf0e:	f7fe f9f6 	bl	800b2fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf16:	4b0d      	ldr	r3, [pc, #52]	; (800cf4c <xTaskRemoveFromEventList+0xc4>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf1c:	429a      	cmp	r2, r3
 800cf1e:	d905      	bls.n	800cf2c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cf20:	2301      	movs	r3, #1
 800cf22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cf24:	4b0a      	ldr	r3, [pc, #40]	; (800cf50 <xTaskRemoveFromEventList+0xc8>)
 800cf26:	2201      	movs	r2, #1
 800cf28:	601a      	str	r2, [r3, #0]
 800cf2a:	e001      	b.n	800cf30 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cf30:	697b      	ldr	r3, [r7, #20]
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3718      	adds	r7, #24
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}
 800cf3a:	bf00      	nop
 800cf3c:	20001898 	.word	0x20001898
 800cf40:	20001878 	.word	0x20001878
 800cf44:	200013a0 	.word	0x200013a0
 800cf48:	20001830 	.word	0x20001830
 800cf4c:	2000139c 	.word	0x2000139c
 800cf50:	20001884 	.word	0x20001884

0800cf54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cf54:	b480      	push	{r7}
 800cf56:	b083      	sub	sp, #12
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cf5c:	4b06      	ldr	r3, [pc, #24]	; (800cf78 <vTaskInternalSetTimeOutState+0x24>)
 800cf5e:	681a      	ldr	r2, [r3, #0]
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cf64:	4b05      	ldr	r3, [pc, #20]	; (800cf7c <vTaskInternalSetTimeOutState+0x28>)
 800cf66:	681a      	ldr	r2, [r3, #0]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	605a      	str	r2, [r3, #4]
}
 800cf6c:	bf00      	nop
 800cf6e:	370c      	adds	r7, #12
 800cf70:	46bd      	mov	sp, r7
 800cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf76:	4770      	bx	lr
 800cf78:	20001888 	.word	0x20001888
 800cf7c:	20001874 	.word	0x20001874

0800cf80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b088      	sub	sp, #32
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d10c      	bne.n	800cfaa <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800cf90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf94:	b672      	cpsid	i
 800cf96:	f383 8811 	msr	BASEPRI, r3
 800cf9a:	f3bf 8f6f 	isb	sy
 800cf9e:	f3bf 8f4f 	dsb	sy
 800cfa2:	b662      	cpsie	i
 800cfa4:	613b      	str	r3, [r7, #16]
}
 800cfa6:	bf00      	nop
 800cfa8:	e7fe      	b.n	800cfa8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d10c      	bne.n	800cfca <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800cfb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfb4:	b672      	cpsid	i
 800cfb6:	f383 8811 	msr	BASEPRI, r3
 800cfba:	f3bf 8f6f 	isb	sy
 800cfbe:	f3bf 8f4f 	dsb	sy
 800cfc2:	b662      	cpsie	i
 800cfc4:	60fb      	str	r3, [r7, #12]
}
 800cfc6:	bf00      	nop
 800cfc8:	e7fe      	b.n	800cfc8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800cfca:	f001 f87f 	bl	800e0cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cfce:	4b1d      	ldr	r3, [pc, #116]	; (800d044 <xTaskCheckForTimeOut+0xc4>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	685b      	ldr	r3, [r3, #4]
 800cfd8:	69ba      	ldr	r2, [r7, #24]
 800cfda:	1ad3      	subs	r3, r2, r3
 800cfdc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cfe6:	d102      	bne.n	800cfee <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	61fb      	str	r3, [r7, #28]
 800cfec:	e023      	b.n	800d036 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681a      	ldr	r2, [r3, #0]
 800cff2:	4b15      	ldr	r3, [pc, #84]	; (800d048 <xTaskCheckForTimeOut+0xc8>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d007      	beq.n	800d00a <xTaskCheckForTimeOut+0x8a>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	685b      	ldr	r3, [r3, #4]
 800cffe:	69ba      	ldr	r2, [r7, #24]
 800d000:	429a      	cmp	r2, r3
 800d002:	d302      	bcc.n	800d00a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d004:	2301      	movs	r3, #1
 800d006:	61fb      	str	r3, [r7, #28]
 800d008:	e015      	b.n	800d036 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	697a      	ldr	r2, [r7, #20]
 800d010:	429a      	cmp	r2, r3
 800d012:	d20b      	bcs.n	800d02c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	681a      	ldr	r2, [r3, #0]
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	1ad2      	subs	r2, r2, r3
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f7ff ff97 	bl	800cf54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d026:	2300      	movs	r3, #0
 800d028:	61fb      	str	r3, [r7, #28]
 800d02a:	e004      	b.n	800d036 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	2200      	movs	r2, #0
 800d030:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d032:	2301      	movs	r3, #1
 800d034:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d036:	f001 f87d 	bl	800e134 <vPortExitCritical>

	return xReturn;
 800d03a:	69fb      	ldr	r3, [r7, #28]
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3720      	adds	r7, #32
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}
 800d044:	20001874 	.word	0x20001874
 800d048:	20001888 	.word	0x20001888

0800d04c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d04c:	b480      	push	{r7}
 800d04e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d050:	4b03      	ldr	r3, [pc, #12]	; (800d060 <vTaskMissedYield+0x14>)
 800d052:	2201      	movs	r2, #1
 800d054:	601a      	str	r2, [r3, #0]
}
 800d056:	bf00      	nop
 800d058:	46bd      	mov	sp, r7
 800d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05e:	4770      	bx	lr
 800d060:	20001884 	.word	0x20001884

0800d064 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d06c:	f000 f854 	bl	800d118 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d070:	4b07      	ldr	r3, [pc, #28]	; (800d090 <prvIdleTask+0x2c>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	2b01      	cmp	r3, #1
 800d076:	d907      	bls.n	800d088 <prvIdleTask+0x24>
			{
				taskYIELD();
 800d078:	4b06      	ldr	r3, [pc, #24]	; (800d094 <prvIdleTask+0x30>)
 800d07a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d07e:	601a      	str	r2, [r3, #0]
 800d080:	f3bf 8f4f 	dsb	sy
 800d084:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d088:	f7f3 fab4 	bl	80005f4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d08c:	e7ee      	b.n	800d06c <prvIdleTask+0x8>
 800d08e:	bf00      	nop
 800d090:	200013a0 	.word	0x200013a0
 800d094:	e000ed04 	.word	0xe000ed04

0800d098 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b082      	sub	sp, #8
 800d09c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d09e:	2300      	movs	r3, #0
 800d0a0:	607b      	str	r3, [r7, #4]
 800d0a2:	e00c      	b.n	800d0be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d0a4:	687a      	ldr	r2, [r7, #4]
 800d0a6:	4613      	mov	r3, r2
 800d0a8:	009b      	lsls	r3, r3, #2
 800d0aa:	4413      	add	r3, r2
 800d0ac:	009b      	lsls	r3, r3, #2
 800d0ae:	4a12      	ldr	r2, [pc, #72]	; (800d0f8 <prvInitialiseTaskLists+0x60>)
 800d0b0:	4413      	add	r3, r2
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7fe f8f6 	bl	800b2a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	607b      	str	r3, [r7, #4]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2b37      	cmp	r3, #55	; 0x37
 800d0c2:	d9ef      	bls.n	800d0a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d0c4:	480d      	ldr	r0, [pc, #52]	; (800d0fc <prvInitialiseTaskLists+0x64>)
 800d0c6:	f7fe f8ed 	bl	800b2a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d0ca:	480d      	ldr	r0, [pc, #52]	; (800d100 <prvInitialiseTaskLists+0x68>)
 800d0cc:	f7fe f8ea 	bl	800b2a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d0d0:	480c      	ldr	r0, [pc, #48]	; (800d104 <prvInitialiseTaskLists+0x6c>)
 800d0d2:	f7fe f8e7 	bl	800b2a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d0d6:	480c      	ldr	r0, [pc, #48]	; (800d108 <prvInitialiseTaskLists+0x70>)
 800d0d8:	f7fe f8e4 	bl	800b2a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d0dc:	480b      	ldr	r0, [pc, #44]	; (800d10c <prvInitialiseTaskLists+0x74>)
 800d0de:	f7fe f8e1 	bl	800b2a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d0e2:	4b0b      	ldr	r3, [pc, #44]	; (800d110 <prvInitialiseTaskLists+0x78>)
 800d0e4:	4a05      	ldr	r2, [pc, #20]	; (800d0fc <prvInitialiseTaskLists+0x64>)
 800d0e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d0e8:	4b0a      	ldr	r3, [pc, #40]	; (800d114 <prvInitialiseTaskLists+0x7c>)
 800d0ea:	4a05      	ldr	r2, [pc, #20]	; (800d100 <prvInitialiseTaskLists+0x68>)
 800d0ec:	601a      	str	r2, [r3, #0]
}
 800d0ee:	bf00      	nop
 800d0f0:	3708      	adds	r7, #8
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	bf00      	nop
 800d0f8:	200013a0 	.word	0x200013a0
 800d0fc:	20001800 	.word	0x20001800
 800d100:	20001814 	.word	0x20001814
 800d104:	20001830 	.word	0x20001830
 800d108:	20001844 	.word	0x20001844
 800d10c:	2000185c 	.word	0x2000185c
 800d110:	20001828 	.word	0x20001828
 800d114:	2000182c 	.word	0x2000182c

0800d118 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b082      	sub	sp, #8
 800d11c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d11e:	e019      	b.n	800d154 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d120:	f000 ffd4 	bl	800e0cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d124:	4b10      	ldr	r3, [pc, #64]	; (800d168 <prvCheckTasksWaitingTermination+0x50>)
 800d126:	68db      	ldr	r3, [r3, #12]
 800d128:	68db      	ldr	r3, [r3, #12]
 800d12a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	3304      	adds	r3, #4
 800d130:	4618      	mov	r0, r3
 800d132:	f7fe f941 	bl	800b3b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d136:	4b0d      	ldr	r3, [pc, #52]	; (800d16c <prvCheckTasksWaitingTermination+0x54>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	3b01      	subs	r3, #1
 800d13c:	4a0b      	ldr	r2, [pc, #44]	; (800d16c <prvCheckTasksWaitingTermination+0x54>)
 800d13e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d140:	4b0b      	ldr	r3, [pc, #44]	; (800d170 <prvCheckTasksWaitingTermination+0x58>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	3b01      	subs	r3, #1
 800d146:	4a0a      	ldr	r2, [pc, #40]	; (800d170 <prvCheckTasksWaitingTermination+0x58>)
 800d148:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d14a:	f000 fff3 	bl	800e134 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d14e:	6878      	ldr	r0, [r7, #4]
 800d150:	f000 f848 	bl	800d1e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d154:	4b06      	ldr	r3, [pc, #24]	; (800d170 <prvCheckTasksWaitingTermination+0x58>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d1e1      	bne.n	800d120 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d15c:	bf00      	nop
 800d15e:	bf00      	nop
 800d160:	3708      	adds	r7, #8
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}
 800d166:	bf00      	nop
 800d168:	20001844 	.word	0x20001844
 800d16c:	20001870 	.word	0x20001870
 800d170:	20001858 	.word	0x20001858

0800d174 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800d174:	b480      	push	{r7}
 800d176:	b085      	sub	sp, #20
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800d17c:	2300      	movs	r3, #0
 800d17e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d180:	e005      	b.n	800d18e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	3301      	adds	r3, #1
 800d186:	607b      	str	r3, [r7, #4]
			ulCount++;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	3301      	adds	r3, #1
 800d18c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	2ba5      	cmp	r3, #165	; 0xa5
 800d194:	d0f5      	beq.n	800d182 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	089b      	lsrs	r3, r3, #2
 800d19a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	b29b      	uxth	r3, r3
	}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3714      	adds	r7, #20
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr

0800d1ac <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b086      	sub	sp, #24
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d102      	bne.n	800d1c0 <uxTaskGetStackHighWaterMark+0x14>
 800d1ba:	4b09      	ldr	r3, [pc, #36]	; (800d1e0 <uxTaskGetStackHighWaterMark+0x34>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	e000      	b.n	800d1c2 <uxTaskGetStackHighWaterMark+0x16>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1c8:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800d1ca:	6938      	ldr	r0, [r7, #16]
 800d1cc:	f7ff ffd2 	bl	800d174 <prvTaskCheckFreeStackSpace>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
	}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3718      	adds	r7, #24
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}
 800d1de:	bf00      	nop
 800d1e0:	2000139c 	.word	0x2000139c

0800d1e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b084      	sub	sp, #16
 800d1e8:	af00      	add	r7, sp, #0
 800d1ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d108      	bne.n	800d208 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f001 f962 	bl	800e4c4 <vPortFree>
				vPortFree( pxTCB );
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f001 f95f 	bl	800e4c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d206:	e01a      	b.n	800d23e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d20e:	2b01      	cmp	r3, #1
 800d210:	d103      	bne.n	800d21a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f001 f956 	bl	800e4c4 <vPortFree>
	}
 800d218:	e011      	b.n	800d23e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d220:	2b02      	cmp	r3, #2
 800d222:	d00c      	beq.n	800d23e <prvDeleteTCB+0x5a>
	__asm volatile
 800d224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d228:	b672      	cpsid	i
 800d22a:	f383 8811 	msr	BASEPRI, r3
 800d22e:	f3bf 8f6f 	isb	sy
 800d232:	f3bf 8f4f 	dsb	sy
 800d236:	b662      	cpsie	i
 800d238:	60fb      	str	r3, [r7, #12]
}
 800d23a:	bf00      	nop
 800d23c:	e7fe      	b.n	800d23c <prvDeleteTCB+0x58>
	}
 800d23e:	bf00      	nop
 800d240:	3710      	adds	r7, #16
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}
	...

0800d248 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d248:	b480      	push	{r7}
 800d24a:	b083      	sub	sp, #12
 800d24c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d24e:	4b0c      	ldr	r3, [pc, #48]	; (800d280 <prvResetNextTaskUnblockTime+0x38>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d104      	bne.n	800d262 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d258:	4b0a      	ldr	r3, [pc, #40]	; (800d284 <prvResetNextTaskUnblockTime+0x3c>)
 800d25a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d25e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d260:	e008      	b.n	800d274 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d262:	4b07      	ldr	r3, [pc, #28]	; (800d280 <prvResetNextTaskUnblockTime+0x38>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	68db      	ldr	r3, [r3, #12]
 800d268:	68db      	ldr	r3, [r3, #12]
 800d26a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	4a04      	ldr	r2, [pc, #16]	; (800d284 <prvResetNextTaskUnblockTime+0x3c>)
 800d272:	6013      	str	r3, [r2, #0]
}
 800d274:	bf00      	nop
 800d276:	370c      	adds	r7, #12
 800d278:	46bd      	mov	sp, r7
 800d27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27e:	4770      	bx	lr
 800d280:	20001828 	.word	0x20001828
 800d284:	20001890 	.word	0x20001890

0800d288 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d288:	b480      	push	{r7}
 800d28a:	b083      	sub	sp, #12
 800d28c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d28e:	4b05      	ldr	r3, [pc, #20]	; (800d2a4 <xTaskGetCurrentTaskHandle+0x1c>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d294:	687b      	ldr	r3, [r7, #4]
	}
 800d296:	4618      	mov	r0, r3
 800d298:	370c      	adds	r7, #12
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr
 800d2a2:	bf00      	nop
 800d2a4:	2000139c 	.word	0x2000139c

0800d2a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d2a8:	b480      	push	{r7}
 800d2aa:	b083      	sub	sp, #12
 800d2ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d2ae:	4b0b      	ldr	r3, [pc, #44]	; (800d2dc <xTaskGetSchedulerState+0x34>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d102      	bne.n	800d2bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	607b      	str	r3, [r7, #4]
 800d2ba:	e008      	b.n	800d2ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d2bc:	4b08      	ldr	r3, [pc, #32]	; (800d2e0 <xTaskGetSchedulerState+0x38>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d102      	bne.n	800d2ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d2c4:	2302      	movs	r3, #2
 800d2c6:	607b      	str	r3, [r7, #4]
 800d2c8:	e001      	b.n	800d2ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d2ce:	687b      	ldr	r3, [r7, #4]
	}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	370c      	adds	r7, #12
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2da:	4770      	bx	lr
 800d2dc:	2000187c 	.word	0x2000187c
 800d2e0:	20001898 	.word	0x20001898

0800d2e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b084      	sub	sp, #16
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d051      	beq.n	800d39e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2fe:	4b2a      	ldr	r3, [pc, #168]	; (800d3a8 <xTaskPriorityInherit+0xc4>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d304:	429a      	cmp	r2, r3
 800d306:	d241      	bcs.n	800d38c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	699b      	ldr	r3, [r3, #24]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	db06      	blt.n	800d31e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d310:	4b25      	ldr	r3, [pc, #148]	; (800d3a8 <xTaskPriorityInherit+0xc4>)
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d316:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	6959      	ldr	r1, [r3, #20]
 800d322:	68bb      	ldr	r3, [r7, #8]
 800d324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d326:	4613      	mov	r3, r2
 800d328:	009b      	lsls	r3, r3, #2
 800d32a:	4413      	add	r3, r2
 800d32c:	009b      	lsls	r3, r3, #2
 800d32e:	4a1f      	ldr	r2, [pc, #124]	; (800d3ac <xTaskPriorityInherit+0xc8>)
 800d330:	4413      	add	r3, r2
 800d332:	4299      	cmp	r1, r3
 800d334:	d122      	bne.n	800d37c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	3304      	adds	r3, #4
 800d33a:	4618      	mov	r0, r3
 800d33c:	f7fe f83c 	bl	800b3b8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d340:	4b19      	ldr	r3, [pc, #100]	; (800d3a8 <xTaskPriorityInherit+0xc4>)
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d34e:	4b18      	ldr	r3, [pc, #96]	; (800d3b0 <xTaskPriorityInherit+0xcc>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	429a      	cmp	r2, r3
 800d354:	d903      	bls.n	800d35e <xTaskPriorityInherit+0x7a>
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d35a:	4a15      	ldr	r2, [pc, #84]	; (800d3b0 <xTaskPriorityInherit+0xcc>)
 800d35c:	6013      	str	r3, [r2, #0]
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d362:	4613      	mov	r3, r2
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	4413      	add	r3, r2
 800d368:	009b      	lsls	r3, r3, #2
 800d36a:	4a10      	ldr	r2, [pc, #64]	; (800d3ac <xTaskPriorityInherit+0xc8>)
 800d36c:	441a      	add	r2, r3
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	3304      	adds	r3, #4
 800d372:	4619      	mov	r1, r3
 800d374:	4610      	mov	r0, r2
 800d376:	f7fd ffc2 	bl	800b2fe <vListInsertEnd>
 800d37a:	e004      	b.n	800d386 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d37c:	4b0a      	ldr	r3, [pc, #40]	; (800d3a8 <xTaskPriorityInherit+0xc4>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d386:	2301      	movs	r3, #1
 800d388:	60fb      	str	r3, [r7, #12]
 800d38a:	e008      	b.n	800d39e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d390:	4b05      	ldr	r3, [pc, #20]	; (800d3a8 <xTaskPriorityInherit+0xc4>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d396:	429a      	cmp	r2, r3
 800d398:	d201      	bcs.n	800d39e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d39a:	2301      	movs	r3, #1
 800d39c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d39e:	68fb      	ldr	r3, [r7, #12]
	}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3710      	adds	r7, #16
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}
 800d3a8:	2000139c 	.word	0x2000139c
 800d3ac:	200013a0 	.word	0x200013a0
 800d3b0:	20001878 	.word	0x20001878

0800d3b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b086      	sub	sp, #24
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d05a      	beq.n	800d480 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d3ca:	4b30      	ldr	r3, [pc, #192]	; (800d48c <xTaskPriorityDisinherit+0xd8>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	693a      	ldr	r2, [r7, #16]
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d00c      	beq.n	800d3ee <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800d3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d8:	b672      	cpsid	i
 800d3da:	f383 8811 	msr	BASEPRI, r3
 800d3de:	f3bf 8f6f 	isb	sy
 800d3e2:	f3bf 8f4f 	dsb	sy
 800d3e6:	b662      	cpsie	i
 800d3e8:	60fb      	str	r3, [r7, #12]
}
 800d3ea:	bf00      	nop
 800d3ec:	e7fe      	b.n	800d3ec <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d10c      	bne.n	800d410 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800d3f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3fa:	b672      	cpsid	i
 800d3fc:	f383 8811 	msr	BASEPRI, r3
 800d400:	f3bf 8f6f 	isb	sy
 800d404:	f3bf 8f4f 	dsb	sy
 800d408:	b662      	cpsie	i
 800d40a:	60bb      	str	r3, [r7, #8]
}
 800d40c:	bf00      	nop
 800d40e:	e7fe      	b.n	800d40e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800d410:	693b      	ldr	r3, [r7, #16]
 800d412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d414:	1e5a      	subs	r2, r3, #1
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d41a:	693b      	ldr	r3, [r7, #16]
 800d41c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d422:	429a      	cmp	r2, r3
 800d424:	d02c      	beq.n	800d480 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d128      	bne.n	800d480 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	3304      	adds	r3, #4
 800d432:	4618      	mov	r0, r3
 800d434:	f7fd ffc0 	bl	800b3b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d438:	693b      	ldr	r3, [r7, #16]
 800d43a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d444:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d450:	4b0f      	ldr	r3, [pc, #60]	; (800d490 <xTaskPriorityDisinherit+0xdc>)
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	429a      	cmp	r2, r3
 800d456:	d903      	bls.n	800d460 <xTaskPriorityDisinherit+0xac>
 800d458:	693b      	ldr	r3, [r7, #16]
 800d45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d45c:	4a0c      	ldr	r2, [pc, #48]	; (800d490 <xTaskPriorityDisinherit+0xdc>)
 800d45e:	6013      	str	r3, [r2, #0]
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d464:	4613      	mov	r3, r2
 800d466:	009b      	lsls	r3, r3, #2
 800d468:	4413      	add	r3, r2
 800d46a:	009b      	lsls	r3, r3, #2
 800d46c:	4a09      	ldr	r2, [pc, #36]	; (800d494 <xTaskPriorityDisinherit+0xe0>)
 800d46e:	441a      	add	r2, r3
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	3304      	adds	r3, #4
 800d474:	4619      	mov	r1, r3
 800d476:	4610      	mov	r0, r2
 800d478:	f7fd ff41 	bl	800b2fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d47c:	2301      	movs	r3, #1
 800d47e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d480:	697b      	ldr	r3, [r7, #20]
	}
 800d482:	4618      	mov	r0, r3
 800d484:	3718      	adds	r7, #24
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}
 800d48a:	bf00      	nop
 800d48c:	2000139c 	.word	0x2000139c
 800d490:	20001878 	.word	0x20001878
 800d494:	200013a0 	.word	0x200013a0

0800d498 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b088      	sub	sp, #32
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d06e      	beq.n	800d58e <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d4b0:	69bb      	ldr	r3, [r7, #24]
 800d4b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d10c      	bne.n	800d4d2 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800d4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4bc:	b672      	cpsid	i
 800d4be:	f383 8811 	msr	BASEPRI, r3
 800d4c2:	f3bf 8f6f 	isb	sy
 800d4c6:	f3bf 8f4f 	dsb	sy
 800d4ca:	b662      	cpsie	i
 800d4cc:	60fb      	str	r3, [r7, #12]
}
 800d4ce:	bf00      	nop
 800d4d0:	e7fe      	b.n	800d4d0 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d4d2:	69bb      	ldr	r3, [r7, #24]
 800d4d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4d6:	683a      	ldr	r2, [r7, #0]
 800d4d8:	429a      	cmp	r2, r3
 800d4da:	d902      	bls.n	800d4e2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	61fb      	str	r3, [r7, #28]
 800d4e0:	e002      	b.n	800d4e8 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d4e2:	69bb      	ldr	r3, [r7, #24]
 800d4e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4e6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d4e8:	69bb      	ldr	r3, [r7, #24]
 800d4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ec:	69fa      	ldr	r2, [r7, #28]
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d04d      	beq.n	800d58e <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d4f2:	69bb      	ldr	r3, [r7, #24]
 800d4f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4f6:	697a      	ldr	r2, [r7, #20]
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d148      	bne.n	800d58e <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d4fc:	4b26      	ldr	r3, [pc, #152]	; (800d598 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	69ba      	ldr	r2, [r7, #24]
 800d502:	429a      	cmp	r2, r3
 800d504:	d10c      	bne.n	800d520 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800d506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d50a:	b672      	cpsid	i
 800d50c:	f383 8811 	msr	BASEPRI, r3
 800d510:	f3bf 8f6f 	isb	sy
 800d514:	f3bf 8f4f 	dsb	sy
 800d518:	b662      	cpsie	i
 800d51a:	60bb      	str	r3, [r7, #8]
}
 800d51c:	bf00      	nop
 800d51e:	e7fe      	b.n	800d51e <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d520:	69bb      	ldr	r3, [r7, #24]
 800d522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d524:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d526:	69bb      	ldr	r3, [r7, #24]
 800d528:	69fa      	ldr	r2, [r7, #28]
 800d52a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d52c:	69bb      	ldr	r3, [r7, #24]
 800d52e:	699b      	ldr	r3, [r3, #24]
 800d530:	2b00      	cmp	r3, #0
 800d532:	db04      	blt.n	800d53e <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d534:	69fb      	ldr	r3, [r7, #28]
 800d536:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d53a:	69bb      	ldr	r3, [r7, #24]
 800d53c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d53e:	69bb      	ldr	r3, [r7, #24]
 800d540:	6959      	ldr	r1, [r3, #20]
 800d542:	693a      	ldr	r2, [r7, #16]
 800d544:	4613      	mov	r3, r2
 800d546:	009b      	lsls	r3, r3, #2
 800d548:	4413      	add	r3, r2
 800d54a:	009b      	lsls	r3, r3, #2
 800d54c:	4a13      	ldr	r2, [pc, #76]	; (800d59c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d54e:	4413      	add	r3, r2
 800d550:	4299      	cmp	r1, r3
 800d552:	d11c      	bne.n	800d58e <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d554:	69bb      	ldr	r3, [r7, #24]
 800d556:	3304      	adds	r3, #4
 800d558:	4618      	mov	r0, r3
 800d55a:	f7fd ff2d 	bl	800b3b8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d55e:	69bb      	ldr	r3, [r7, #24]
 800d560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d562:	4b0f      	ldr	r3, [pc, #60]	; (800d5a0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	429a      	cmp	r2, r3
 800d568:	d903      	bls.n	800d572 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800d56a:	69bb      	ldr	r3, [r7, #24]
 800d56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d56e:	4a0c      	ldr	r2, [pc, #48]	; (800d5a0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800d570:	6013      	str	r3, [r2, #0]
 800d572:	69bb      	ldr	r3, [r7, #24]
 800d574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d576:	4613      	mov	r3, r2
 800d578:	009b      	lsls	r3, r3, #2
 800d57a:	4413      	add	r3, r2
 800d57c:	009b      	lsls	r3, r3, #2
 800d57e:	4a07      	ldr	r2, [pc, #28]	; (800d59c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800d580:	441a      	add	r2, r3
 800d582:	69bb      	ldr	r3, [r7, #24]
 800d584:	3304      	adds	r3, #4
 800d586:	4619      	mov	r1, r3
 800d588:	4610      	mov	r0, r2
 800d58a:	f7fd feb8 	bl	800b2fe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d58e:	bf00      	nop
 800d590:	3720      	adds	r7, #32
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}
 800d596:	bf00      	nop
 800d598:	2000139c 	.word	0x2000139c
 800d59c:	200013a0 	.word	0x200013a0
 800d5a0:	20001878 	.word	0x20001878

0800d5a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d5a4:	b480      	push	{r7}
 800d5a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d5a8:	4b07      	ldr	r3, [pc, #28]	; (800d5c8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d004      	beq.n	800d5ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d5b0:	4b05      	ldr	r3, [pc, #20]	; (800d5c8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d5b6:	3201      	adds	r2, #1
 800d5b8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800d5ba:	4b03      	ldr	r3, [pc, #12]	; (800d5c8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
	}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c6:	4770      	bx	lr
 800d5c8:	2000139c 	.word	0x2000139c

0800d5cc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b084      	sub	sp, #16
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d5d6:	4b21      	ldr	r3, [pc, #132]	; (800d65c <prvAddCurrentTaskToDelayedList+0x90>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d5dc:	4b20      	ldr	r3, [pc, #128]	; (800d660 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	3304      	adds	r3, #4
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7fd fee8 	bl	800b3b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d5ee:	d10a      	bne.n	800d606 <prvAddCurrentTaskToDelayedList+0x3a>
 800d5f0:	683b      	ldr	r3, [r7, #0]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d007      	beq.n	800d606 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5f6:	4b1a      	ldr	r3, [pc, #104]	; (800d660 <prvAddCurrentTaskToDelayedList+0x94>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	3304      	adds	r3, #4
 800d5fc:	4619      	mov	r1, r3
 800d5fe:	4819      	ldr	r0, [pc, #100]	; (800d664 <prvAddCurrentTaskToDelayedList+0x98>)
 800d600:	f7fd fe7d 	bl	800b2fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d604:	e026      	b.n	800d654 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d606:	68fa      	ldr	r2, [r7, #12]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	4413      	add	r3, r2
 800d60c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d60e:	4b14      	ldr	r3, [pc, #80]	; (800d660 <prvAddCurrentTaskToDelayedList+0x94>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	68ba      	ldr	r2, [r7, #8]
 800d614:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d616:	68ba      	ldr	r2, [r7, #8]
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	429a      	cmp	r2, r3
 800d61c:	d209      	bcs.n	800d632 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d61e:	4b12      	ldr	r3, [pc, #72]	; (800d668 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d620:	681a      	ldr	r2, [r3, #0]
 800d622:	4b0f      	ldr	r3, [pc, #60]	; (800d660 <prvAddCurrentTaskToDelayedList+0x94>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	3304      	adds	r3, #4
 800d628:	4619      	mov	r1, r3
 800d62a:	4610      	mov	r0, r2
 800d62c:	f7fd fe8b 	bl	800b346 <vListInsert>
}
 800d630:	e010      	b.n	800d654 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d632:	4b0e      	ldr	r3, [pc, #56]	; (800d66c <prvAddCurrentTaskToDelayedList+0xa0>)
 800d634:	681a      	ldr	r2, [r3, #0]
 800d636:	4b0a      	ldr	r3, [pc, #40]	; (800d660 <prvAddCurrentTaskToDelayedList+0x94>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	3304      	adds	r3, #4
 800d63c:	4619      	mov	r1, r3
 800d63e:	4610      	mov	r0, r2
 800d640:	f7fd fe81 	bl	800b346 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d644:	4b0a      	ldr	r3, [pc, #40]	; (800d670 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	68ba      	ldr	r2, [r7, #8]
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d202      	bcs.n	800d654 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d64e:	4a08      	ldr	r2, [pc, #32]	; (800d670 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	6013      	str	r3, [r2, #0]
}
 800d654:	bf00      	nop
 800d656:	3710      	adds	r7, #16
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}
 800d65c:	20001874 	.word	0x20001874
 800d660:	2000139c 	.word	0x2000139c
 800d664:	2000185c 	.word	0x2000185c
 800d668:	2000182c 	.word	0x2000182c
 800d66c:	20001828 	.word	0x20001828
 800d670:	20001890 	.word	0x20001890

0800d674 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b08a      	sub	sp, #40	; 0x28
 800d678:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d67a:	2300      	movs	r3, #0
 800d67c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d67e:	f000 fbb5 	bl	800ddec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d682:	4b1d      	ldr	r3, [pc, #116]	; (800d6f8 <xTimerCreateTimerTask+0x84>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d021      	beq.n	800d6ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d68a:	2300      	movs	r3, #0
 800d68c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d68e:	2300      	movs	r3, #0
 800d690:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d692:	1d3a      	adds	r2, r7, #4
 800d694:	f107 0108 	add.w	r1, r7, #8
 800d698:	f107 030c 	add.w	r3, r7, #12
 800d69c:	4618      	mov	r0, r3
 800d69e:	f7fd fde7 	bl	800b270 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d6a2:	6879      	ldr	r1, [r7, #4]
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	68fa      	ldr	r2, [r7, #12]
 800d6a8:	9202      	str	r2, [sp, #8]
 800d6aa:	9301      	str	r3, [sp, #4]
 800d6ac:	2302      	movs	r3, #2
 800d6ae:	9300      	str	r3, [sp, #0]
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	460a      	mov	r2, r1
 800d6b4:	4911      	ldr	r1, [pc, #68]	; (800d6fc <xTimerCreateTimerTask+0x88>)
 800d6b6:	4812      	ldr	r0, [pc, #72]	; (800d700 <xTimerCreateTimerTask+0x8c>)
 800d6b8:	f7fe fe60 	bl	800c37c <xTaskCreateStatic>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	4a11      	ldr	r2, [pc, #68]	; (800d704 <xTimerCreateTimerTask+0x90>)
 800d6c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d6c2:	4b10      	ldr	r3, [pc, #64]	; (800d704 <xTimerCreateTimerTask+0x90>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d001      	beq.n	800d6ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d10c      	bne.n	800d6ee <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800d6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d8:	b672      	cpsid	i
 800d6da:	f383 8811 	msr	BASEPRI, r3
 800d6de:	f3bf 8f6f 	isb	sy
 800d6e2:	f3bf 8f4f 	dsb	sy
 800d6e6:	b662      	cpsie	i
 800d6e8:	613b      	str	r3, [r7, #16]
}
 800d6ea:	bf00      	nop
 800d6ec:	e7fe      	b.n	800d6ec <xTimerCreateTimerTask+0x78>
	return xReturn;
 800d6ee:	697b      	ldr	r3, [r7, #20]
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3718      	adds	r7, #24
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}
 800d6f8:	200018cc 	.word	0x200018cc
 800d6fc:	0800f120 	.word	0x0800f120
 800d700:	0800d985 	.word	0x0800d985
 800d704:	200018d0 	.word	0x200018d0

0800d708 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800d708:	b580      	push	{r7, lr}
 800d70a:	b088      	sub	sp, #32
 800d70c:	af02      	add	r7, sp, #8
 800d70e:	60f8      	str	r0, [r7, #12]
 800d710:	60b9      	str	r1, [r7, #8]
 800d712:	607a      	str	r2, [r7, #4]
 800d714:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800d716:	202c      	movs	r0, #44	; 0x2c
 800d718:	f000 fe04 	bl	800e324 <pvPortMalloc>
 800d71c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800d71e:	697b      	ldr	r3, [r7, #20]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d00d      	beq.n	800d740 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800d724:	697b      	ldr	r3, [r7, #20]
 800d726:	2200      	movs	r2, #0
 800d728:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d72c:	697b      	ldr	r3, [r7, #20]
 800d72e:	9301      	str	r3, [sp, #4]
 800d730:	6a3b      	ldr	r3, [r7, #32]
 800d732:	9300      	str	r3, [sp, #0]
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	687a      	ldr	r2, [r7, #4]
 800d738:	68b9      	ldr	r1, [r7, #8]
 800d73a:	68f8      	ldr	r0, [r7, #12]
 800d73c:	f000 f847 	bl	800d7ce <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d740:	697b      	ldr	r3, [r7, #20]
	}
 800d742:	4618      	mov	r0, r3
 800d744:	3718      	adds	r7, #24
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}

0800d74a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800d74a:	b580      	push	{r7, lr}
 800d74c:	b08a      	sub	sp, #40	; 0x28
 800d74e:	af02      	add	r7, sp, #8
 800d750:	60f8      	str	r0, [r7, #12]
 800d752:	60b9      	str	r1, [r7, #8]
 800d754:	607a      	str	r2, [r7, #4]
 800d756:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800d758:	232c      	movs	r3, #44	; 0x2c
 800d75a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	2b2c      	cmp	r3, #44	; 0x2c
 800d760:	d00c      	beq.n	800d77c <xTimerCreateStatic+0x32>
	__asm volatile
 800d762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d766:	b672      	cpsid	i
 800d768:	f383 8811 	msr	BASEPRI, r3
 800d76c:	f3bf 8f6f 	isb	sy
 800d770:	f3bf 8f4f 	dsb	sy
 800d774:	b662      	cpsie	i
 800d776:	61bb      	str	r3, [r7, #24]
}
 800d778:	bf00      	nop
 800d77a:	e7fe      	b.n	800d77a <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d77c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800d77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d780:	2b00      	cmp	r3, #0
 800d782:	d10c      	bne.n	800d79e <xTimerCreateStatic+0x54>
	__asm volatile
 800d784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d788:	b672      	cpsid	i
 800d78a:	f383 8811 	msr	BASEPRI, r3
 800d78e:	f3bf 8f6f 	isb	sy
 800d792:	f3bf 8f4f 	dsb	sy
 800d796:	b662      	cpsie	i
 800d798:	617b      	str	r3, [r7, #20]
}
 800d79a:	bf00      	nop
 800d79c:	e7fe      	b.n	800d79c <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800d79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800d7a2:	69fb      	ldr	r3, [r7, #28]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d00d      	beq.n	800d7c4 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800d7a8:	69fb      	ldr	r3, [r7, #28]
 800d7aa:	2202      	movs	r2, #2
 800d7ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800d7b0:	69fb      	ldr	r3, [r7, #28]
 800d7b2:	9301      	str	r3, [sp, #4]
 800d7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b6:	9300      	str	r3, [sp, #0]
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	687a      	ldr	r2, [r7, #4]
 800d7bc:	68b9      	ldr	r1, [r7, #8]
 800d7be:	68f8      	ldr	r0, [r7, #12]
 800d7c0:	f000 f805 	bl	800d7ce <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800d7c4:	69fb      	ldr	r3, [r7, #28]
	}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3720      	adds	r7, #32
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}

0800d7ce <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800d7ce:	b580      	push	{r7, lr}
 800d7d0:	b086      	sub	sp, #24
 800d7d2:	af00      	add	r7, sp, #0
 800d7d4:	60f8      	str	r0, [r7, #12]
 800d7d6:	60b9      	str	r1, [r7, #8]
 800d7d8:	607a      	str	r2, [r7, #4]
 800d7da:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d10c      	bne.n	800d7fc <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800d7e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e6:	b672      	cpsid	i
 800d7e8:	f383 8811 	msr	BASEPRI, r3
 800d7ec:	f3bf 8f6f 	isb	sy
 800d7f0:	f3bf 8f4f 	dsb	sy
 800d7f4:	b662      	cpsie	i
 800d7f6:	617b      	str	r3, [r7, #20]
}
 800d7f8:	bf00      	nop
 800d7fa:	e7fe      	b.n	800d7fa <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800d7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d01e      	beq.n	800d840 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800d802:	f000 faf3 	bl	800ddec <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800d806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d808:	68fa      	ldr	r2, [r7, #12]
 800d80a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800d80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d80e:	68ba      	ldr	r2, [r7, #8]
 800d810:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800d812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d814:	683a      	ldr	r2, [r7, #0]
 800d816:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800d818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d81a:	6a3a      	ldr	r2, [r7, #32]
 800d81c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800d81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d820:	3304      	adds	r3, #4
 800d822:	4618      	mov	r0, r3
 800d824:	f7fd fd5e 	bl	800b2e4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d008      	beq.n	800d840 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800d82e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d830:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d834:	f043 0304 	orr.w	r3, r3, #4
 800d838:	b2da      	uxtb	r2, r3
 800d83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800d840:	bf00      	nop
 800d842:	3718      	adds	r7, #24
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b08a      	sub	sp, #40	; 0x28
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	60b9      	str	r1, [r7, #8]
 800d852:	607a      	str	r2, [r7, #4]
 800d854:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d856:	2300      	movs	r3, #0
 800d858:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d10c      	bne.n	800d87a <xTimerGenericCommand+0x32>
	__asm volatile
 800d860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d864:	b672      	cpsid	i
 800d866:	f383 8811 	msr	BASEPRI, r3
 800d86a:	f3bf 8f6f 	isb	sy
 800d86e:	f3bf 8f4f 	dsb	sy
 800d872:	b662      	cpsie	i
 800d874:	623b      	str	r3, [r7, #32]
}
 800d876:	bf00      	nop
 800d878:	e7fe      	b.n	800d878 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d87a:	4b1a      	ldr	r3, [pc, #104]	; (800d8e4 <xTimerGenericCommand+0x9c>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d02a      	beq.n	800d8d8 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d882:	68bb      	ldr	r3, [r7, #8]
 800d884:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	2b05      	cmp	r3, #5
 800d892:	dc18      	bgt.n	800d8c6 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d894:	f7ff fd08 	bl	800d2a8 <xTaskGetSchedulerState>
 800d898:	4603      	mov	r3, r0
 800d89a:	2b02      	cmp	r3, #2
 800d89c:	d109      	bne.n	800d8b2 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d89e:	4b11      	ldr	r3, [pc, #68]	; (800d8e4 <xTimerGenericCommand+0x9c>)
 800d8a0:	6818      	ldr	r0, [r3, #0]
 800d8a2:	f107 0110 	add.w	r1, r7, #16
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8aa:	f7fd ffbb 	bl	800b824 <xQueueGenericSend>
 800d8ae:	6278      	str	r0, [r7, #36]	; 0x24
 800d8b0:	e012      	b.n	800d8d8 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d8b2:	4b0c      	ldr	r3, [pc, #48]	; (800d8e4 <xTimerGenericCommand+0x9c>)
 800d8b4:	6818      	ldr	r0, [r3, #0]
 800d8b6:	f107 0110 	add.w	r1, r7, #16
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	2200      	movs	r2, #0
 800d8be:	f7fd ffb1 	bl	800b824 <xQueueGenericSend>
 800d8c2:	6278      	str	r0, [r7, #36]	; 0x24
 800d8c4:	e008      	b.n	800d8d8 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d8c6:	4b07      	ldr	r3, [pc, #28]	; (800d8e4 <xTimerGenericCommand+0x9c>)
 800d8c8:	6818      	ldr	r0, [r3, #0]
 800d8ca:	f107 0110 	add.w	r1, r7, #16
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	683a      	ldr	r2, [r7, #0]
 800d8d2:	f7fe f8ad 	bl	800ba30 <xQueueGenericSendFromISR>
 800d8d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3728      	adds	r7, #40	; 0x28
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	200018cc 	.word	0x200018cc

0800d8e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b088      	sub	sp, #32
 800d8ec:	af02      	add	r7, sp, #8
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8f2:	4b23      	ldr	r3, [pc, #140]	; (800d980 <prvProcessExpiredTimer+0x98>)
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	68db      	ldr	r3, [r3, #12]
 800d8f8:	68db      	ldr	r3, [r3, #12]
 800d8fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	3304      	adds	r3, #4
 800d900:	4618      	mov	r0, r3
 800d902:	f7fd fd59 	bl	800b3b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d90c:	f003 0304 	and.w	r3, r3, #4
 800d910:	2b00      	cmp	r3, #0
 800d912:	d024      	beq.n	800d95e <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	699a      	ldr	r2, [r3, #24]
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	18d1      	adds	r1, r2, r3
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	683a      	ldr	r2, [r7, #0]
 800d920:	6978      	ldr	r0, [r7, #20]
 800d922:	f000 f8d3 	bl	800dacc <prvInsertTimerInActiveList>
 800d926:	4603      	mov	r3, r0
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d021      	beq.n	800d970 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d92c:	2300      	movs	r3, #0
 800d92e:	9300      	str	r3, [sp, #0]
 800d930:	2300      	movs	r3, #0
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	2100      	movs	r1, #0
 800d936:	6978      	ldr	r0, [r7, #20]
 800d938:	f7ff ff86 	bl	800d848 <xTimerGenericCommand>
 800d93c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d115      	bne.n	800d970 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800d944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d948:	b672      	cpsid	i
 800d94a:	f383 8811 	msr	BASEPRI, r3
 800d94e:	f3bf 8f6f 	isb	sy
 800d952:	f3bf 8f4f 	dsb	sy
 800d956:	b662      	cpsie	i
 800d958:	60fb      	str	r3, [r7, #12]
}
 800d95a:	bf00      	nop
 800d95c:	e7fe      	b.n	800d95c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d964:	f023 0301 	bic.w	r3, r3, #1
 800d968:	b2da      	uxtb	r2, r3
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	6a1b      	ldr	r3, [r3, #32]
 800d974:	6978      	ldr	r0, [r7, #20]
 800d976:	4798      	blx	r3
}
 800d978:	bf00      	nop
 800d97a:	3718      	adds	r7, #24
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}
 800d980:	200018c4 	.word	0x200018c4

0800d984 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b084      	sub	sp, #16
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d98c:	f107 0308 	add.w	r3, r7, #8
 800d990:	4618      	mov	r0, r3
 800d992:	f000 f857 	bl	800da44 <prvGetNextExpireTime>
 800d996:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	4619      	mov	r1, r3
 800d99c:	68f8      	ldr	r0, [r7, #12]
 800d99e:	f000 f803 	bl	800d9a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d9a2:	f000 f8d5 	bl	800db50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d9a6:	e7f1      	b.n	800d98c <prvTimerTask+0x8>

0800d9a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b084      	sub	sp, #16
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d9b2:	f7ff f80b 	bl	800c9cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d9b6:	f107 0308 	add.w	r3, r7, #8
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f000 f866 	bl	800da8c <prvSampleTimeNow>
 800d9c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d130      	bne.n	800da2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d10a      	bne.n	800d9e4 <prvProcessTimerOrBlockTask+0x3c>
 800d9ce:	687a      	ldr	r2, [r7, #4]
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	d806      	bhi.n	800d9e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d9d6:	f7ff f807 	bl	800c9e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d9da:	68f9      	ldr	r1, [r7, #12]
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f7ff ff83 	bl	800d8e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d9e2:	e024      	b.n	800da2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d9e4:	683b      	ldr	r3, [r7, #0]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d008      	beq.n	800d9fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d9ea:	4b13      	ldr	r3, [pc, #76]	; (800da38 <prvProcessTimerOrBlockTask+0x90>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d101      	bne.n	800d9f8 <prvProcessTimerOrBlockTask+0x50>
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	e000      	b.n	800d9fa <prvProcessTimerOrBlockTask+0x52>
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d9fc:	4b0f      	ldr	r3, [pc, #60]	; (800da3c <prvProcessTimerOrBlockTask+0x94>)
 800d9fe:	6818      	ldr	r0, [r3, #0]
 800da00:	687a      	ldr	r2, [r7, #4]
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	1ad3      	subs	r3, r2, r3
 800da06:	683a      	ldr	r2, [r7, #0]
 800da08:	4619      	mov	r1, r3
 800da0a:	f7fe fc83 	bl	800c314 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800da0e:	f7fe ffeb 	bl	800c9e8 <xTaskResumeAll>
 800da12:	4603      	mov	r3, r0
 800da14:	2b00      	cmp	r3, #0
 800da16:	d10a      	bne.n	800da2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800da18:	4b09      	ldr	r3, [pc, #36]	; (800da40 <prvProcessTimerOrBlockTask+0x98>)
 800da1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da1e:	601a      	str	r2, [r3, #0]
 800da20:	f3bf 8f4f 	dsb	sy
 800da24:	f3bf 8f6f 	isb	sy
}
 800da28:	e001      	b.n	800da2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800da2a:	f7fe ffdd 	bl	800c9e8 <xTaskResumeAll>
}
 800da2e:	bf00      	nop
 800da30:	3710      	adds	r7, #16
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}
 800da36:	bf00      	nop
 800da38:	200018c8 	.word	0x200018c8
 800da3c:	200018cc 	.word	0x200018cc
 800da40:	e000ed04 	.word	0xe000ed04

0800da44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800da44:	b480      	push	{r7}
 800da46:	b085      	sub	sp, #20
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800da4c:	4b0e      	ldr	r3, [pc, #56]	; (800da88 <prvGetNextExpireTime+0x44>)
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d101      	bne.n	800da5a <prvGetNextExpireTime+0x16>
 800da56:	2201      	movs	r2, #1
 800da58:	e000      	b.n	800da5c <prvGetNextExpireTime+0x18>
 800da5a:	2200      	movs	r2, #0
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d105      	bne.n	800da74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800da68:	4b07      	ldr	r3, [pc, #28]	; (800da88 <prvGetNextExpireTime+0x44>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	68db      	ldr	r3, [r3, #12]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	60fb      	str	r3, [r7, #12]
 800da72:	e001      	b.n	800da78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800da74:	2300      	movs	r3, #0
 800da76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800da78:	68fb      	ldr	r3, [r7, #12]
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	3714      	adds	r7, #20
 800da7e:	46bd      	mov	sp, r7
 800da80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da84:	4770      	bx	lr
 800da86:	bf00      	nop
 800da88:	200018c4 	.word	0x200018c4

0800da8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b084      	sub	sp, #16
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800da94:	f7ff f848 	bl	800cb28 <xTaskGetTickCount>
 800da98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800da9a:	4b0b      	ldr	r3, [pc, #44]	; (800dac8 <prvSampleTimeNow+0x3c>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	68fa      	ldr	r2, [r7, #12]
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d205      	bcs.n	800dab0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800daa4:	f000 f93c 	bl	800dd20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2201      	movs	r2, #1
 800daac:	601a      	str	r2, [r3, #0]
 800daae:	e002      	b.n	800dab6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2200      	movs	r2, #0
 800dab4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800dab6:	4a04      	ldr	r2, [pc, #16]	; (800dac8 <prvSampleTimeNow+0x3c>)
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800dabc:	68fb      	ldr	r3, [r7, #12]
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3710      	adds	r7, #16
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
 800dac6:	bf00      	nop
 800dac8:	200018d4 	.word	0x200018d4

0800dacc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b086      	sub	sp, #24
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	60f8      	str	r0, [r7, #12]
 800dad4:	60b9      	str	r1, [r7, #8]
 800dad6:	607a      	str	r2, [r7, #4]
 800dad8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800dada:	2300      	movs	r3, #0
 800dadc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	68ba      	ldr	r2, [r7, #8]
 800dae2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	68fa      	ldr	r2, [r7, #12]
 800dae8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800daea:	68ba      	ldr	r2, [r7, #8]
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	429a      	cmp	r2, r3
 800daf0:	d812      	bhi.n	800db18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800daf2:	687a      	ldr	r2, [r7, #4]
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	1ad2      	subs	r2, r2, r3
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	699b      	ldr	r3, [r3, #24]
 800dafc:	429a      	cmp	r2, r3
 800dafe:	d302      	bcc.n	800db06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800db00:	2301      	movs	r3, #1
 800db02:	617b      	str	r3, [r7, #20]
 800db04:	e01b      	b.n	800db3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800db06:	4b10      	ldr	r3, [pc, #64]	; (800db48 <prvInsertTimerInActiveList+0x7c>)
 800db08:	681a      	ldr	r2, [r3, #0]
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	3304      	adds	r3, #4
 800db0e:	4619      	mov	r1, r3
 800db10:	4610      	mov	r0, r2
 800db12:	f7fd fc18 	bl	800b346 <vListInsert>
 800db16:	e012      	b.n	800db3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800db18:	687a      	ldr	r2, [r7, #4]
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d206      	bcs.n	800db2e <prvInsertTimerInActiveList+0x62>
 800db20:	68ba      	ldr	r2, [r7, #8]
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	429a      	cmp	r2, r3
 800db26:	d302      	bcc.n	800db2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800db28:	2301      	movs	r3, #1
 800db2a:	617b      	str	r3, [r7, #20]
 800db2c:	e007      	b.n	800db3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800db2e:	4b07      	ldr	r3, [pc, #28]	; (800db4c <prvInsertTimerInActiveList+0x80>)
 800db30:	681a      	ldr	r2, [r3, #0]
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	3304      	adds	r3, #4
 800db36:	4619      	mov	r1, r3
 800db38:	4610      	mov	r0, r2
 800db3a:	f7fd fc04 	bl	800b346 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800db3e:	697b      	ldr	r3, [r7, #20]
}
 800db40:	4618      	mov	r0, r3
 800db42:	3718      	adds	r7, #24
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}
 800db48:	200018c8 	.word	0x200018c8
 800db4c:	200018c4 	.word	0x200018c4

0800db50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b08e      	sub	sp, #56	; 0x38
 800db54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800db56:	e0d0      	b.n	800dcfa <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	da1a      	bge.n	800db94 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800db5e:	1d3b      	adds	r3, r7, #4
 800db60:	3304      	adds	r3, #4
 800db62:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800db64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db66:	2b00      	cmp	r3, #0
 800db68:	d10c      	bne.n	800db84 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800db6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db6e:	b672      	cpsid	i
 800db70:	f383 8811 	msr	BASEPRI, r3
 800db74:	f3bf 8f6f 	isb	sy
 800db78:	f3bf 8f4f 	dsb	sy
 800db7c:	b662      	cpsie	i
 800db7e:	61fb      	str	r3, [r7, #28]
}
 800db80:	bf00      	nop
 800db82:	e7fe      	b.n	800db82 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800db84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db8a:	6850      	ldr	r0, [r2, #4]
 800db8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db8e:	6892      	ldr	r2, [r2, #8]
 800db90:	4611      	mov	r1, r2
 800db92:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2b00      	cmp	r3, #0
 800db98:	f2c0 80ae 	blt.w	800dcf8 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800dba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba2:	695b      	ldr	r3, [r3, #20]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d004      	beq.n	800dbb2 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbaa:	3304      	adds	r3, #4
 800dbac:	4618      	mov	r0, r3
 800dbae:	f7fd fc03 	bl	800b3b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dbb2:	463b      	mov	r3, r7
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	f7ff ff69 	bl	800da8c <prvSampleTimeNow>
 800dbba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2b09      	cmp	r3, #9
 800dbc0:	f200 809b 	bhi.w	800dcfa <prvProcessReceivedCommands+0x1aa>
 800dbc4:	a201      	add	r2, pc, #4	; (adr r2, 800dbcc <prvProcessReceivedCommands+0x7c>)
 800dbc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbca:	bf00      	nop
 800dbcc:	0800dbf5 	.word	0x0800dbf5
 800dbd0:	0800dbf5 	.word	0x0800dbf5
 800dbd4:	0800dbf5 	.word	0x0800dbf5
 800dbd8:	0800dc6d 	.word	0x0800dc6d
 800dbdc:	0800dc81 	.word	0x0800dc81
 800dbe0:	0800dccf 	.word	0x0800dccf
 800dbe4:	0800dbf5 	.word	0x0800dbf5
 800dbe8:	0800dbf5 	.word	0x0800dbf5
 800dbec:	0800dc6d 	.word	0x0800dc6d
 800dbf0:	0800dc81 	.word	0x0800dc81
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dbfa:	f043 0301 	orr.w	r3, r3, #1
 800dbfe:	b2da      	uxtb	r2, r3
 800dc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dc06:	68ba      	ldr	r2, [r7, #8]
 800dc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc0a:	699b      	ldr	r3, [r3, #24]
 800dc0c:	18d1      	adds	r1, r2, r3
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc14:	f7ff ff5a 	bl	800dacc <prvInsertTimerInActiveList>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d06d      	beq.n	800dcfa <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dc1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc20:	6a1b      	ldr	r3, [r3, #32]
 800dc22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc2c:	f003 0304 	and.w	r3, r3, #4
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d062      	beq.n	800dcfa <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dc34:	68ba      	ldr	r2, [r7, #8]
 800dc36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc38:	699b      	ldr	r3, [r3, #24]
 800dc3a:	441a      	add	r2, r3
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	9300      	str	r3, [sp, #0]
 800dc40:	2300      	movs	r3, #0
 800dc42:	2100      	movs	r1, #0
 800dc44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dc46:	f7ff fdff 	bl	800d848 <xTimerGenericCommand>
 800dc4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dc4c:	6a3b      	ldr	r3, [r7, #32]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d153      	bne.n	800dcfa <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800dc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc56:	b672      	cpsid	i
 800dc58:	f383 8811 	msr	BASEPRI, r3
 800dc5c:	f3bf 8f6f 	isb	sy
 800dc60:	f3bf 8f4f 	dsb	sy
 800dc64:	b662      	cpsie	i
 800dc66:	61bb      	str	r3, [r7, #24]
}
 800dc68:	bf00      	nop
 800dc6a:	e7fe      	b.n	800dc6a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc72:	f023 0301 	bic.w	r3, r3, #1
 800dc76:	b2da      	uxtb	r2, r3
 800dc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800dc7e:	e03c      	b.n	800dcfa <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dc86:	f043 0301 	orr.w	r3, r3, #1
 800dc8a:	b2da      	uxtb	r2, r3
 800dc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800dc92:	68ba      	ldr	r2, [r7, #8]
 800dc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc96:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800dc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc9a:	699b      	ldr	r3, [r3, #24]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d10c      	bne.n	800dcba <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800dca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dca4:	b672      	cpsid	i
 800dca6:	f383 8811 	msr	BASEPRI, r3
 800dcaa:	f3bf 8f6f 	isb	sy
 800dcae:	f3bf 8f4f 	dsb	sy
 800dcb2:	b662      	cpsie	i
 800dcb4:	617b      	str	r3, [r7, #20]
}
 800dcb6:	bf00      	nop
 800dcb8:	e7fe      	b.n	800dcb8 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800dcba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcbc:	699a      	ldr	r2, [r3, #24]
 800dcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc0:	18d1      	adds	r1, r2, r3
 800dcc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcc8:	f7ff ff00 	bl	800dacc <prvInsertTimerInActiveList>
					break;
 800dccc:	e015      	b.n	800dcfa <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dcce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dcd4:	f003 0302 	and.w	r3, r3, #2
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d103      	bne.n	800dce4 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800dcdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dcde:	f000 fbf1 	bl	800e4c4 <vPortFree>
 800dce2:	e00a      	b.n	800dcfa <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dcea:	f023 0301 	bic.w	r3, r3, #1
 800dcee:	b2da      	uxtb	r2, r3
 800dcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800dcf6:	e000      	b.n	800dcfa <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800dcf8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800dcfa:	4b08      	ldr	r3, [pc, #32]	; (800dd1c <prvProcessReceivedCommands+0x1cc>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	1d39      	adds	r1, r7, #4
 800dd00:	2200      	movs	r2, #0
 800dd02:	4618      	mov	r0, r3
 800dd04:	f7fd ff34 	bl	800bb70 <xQueueReceive>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	f47f af24 	bne.w	800db58 <prvProcessReceivedCommands+0x8>
	}
}
 800dd10:	bf00      	nop
 800dd12:	bf00      	nop
 800dd14:	3730      	adds	r7, #48	; 0x30
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}
 800dd1a:	bf00      	nop
 800dd1c:	200018cc 	.word	0x200018cc

0800dd20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b088      	sub	sp, #32
 800dd24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dd26:	e04a      	b.n	800ddbe <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dd28:	4b2e      	ldr	r3, [pc, #184]	; (800dde4 <prvSwitchTimerLists+0xc4>)
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	68db      	ldr	r3, [r3, #12]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd32:	4b2c      	ldr	r3, [pc, #176]	; (800dde4 <prvSwitchTimerLists+0xc4>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	68db      	ldr	r3, [r3, #12]
 800dd38:	68db      	ldr	r3, [r3, #12]
 800dd3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	3304      	adds	r3, #4
 800dd40:	4618      	mov	r0, r3
 800dd42:	f7fd fb39 	bl	800b3b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	6a1b      	ldr	r3, [r3, #32]
 800dd4a:	68f8      	ldr	r0, [r7, #12]
 800dd4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dd54:	f003 0304 	and.w	r3, r3, #4
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d030      	beq.n	800ddbe <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	699b      	ldr	r3, [r3, #24]
 800dd60:	693a      	ldr	r2, [r7, #16]
 800dd62:	4413      	add	r3, r2
 800dd64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800dd66:	68ba      	ldr	r2, [r7, #8]
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	429a      	cmp	r2, r3
 800dd6c:	d90e      	bls.n	800dd8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	68ba      	ldr	r2, [r7, #8]
 800dd72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	68fa      	ldr	r2, [r7, #12]
 800dd78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dd7a:	4b1a      	ldr	r3, [pc, #104]	; (800dde4 <prvSwitchTimerLists+0xc4>)
 800dd7c:	681a      	ldr	r2, [r3, #0]
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	3304      	adds	r3, #4
 800dd82:	4619      	mov	r1, r3
 800dd84:	4610      	mov	r0, r2
 800dd86:	f7fd fade 	bl	800b346 <vListInsert>
 800dd8a:	e018      	b.n	800ddbe <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	9300      	str	r3, [sp, #0]
 800dd90:	2300      	movs	r3, #0
 800dd92:	693a      	ldr	r2, [r7, #16]
 800dd94:	2100      	movs	r1, #0
 800dd96:	68f8      	ldr	r0, [r7, #12]
 800dd98:	f7ff fd56 	bl	800d848 <xTimerGenericCommand>
 800dd9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d10c      	bne.n	800ddbe <prvSwitchTimerLists+0x9e>
	__asm volatile
 800dda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda8:	b672      	cpsid	i
 800ddaa:	f383 8811 	msr	BASEPRI, r3
 800ddae:	f3bf 8f6f 	isb	sy
 800ddb2:	f3bf 8f4f 	dsb	sy
 800ddb6:	b662      	cpsie	i
 800ddb8:	603b      	str	r3, [r7, #0]
}
 800ddba:	bf00      	nop
 800ddbc:	e7fe      	b.n	800ddbc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ddbe:	4b09      	ldr	r3, [pc, #36]	; (800dde4 <prvSwitchTimerLists+0xc4>)
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d1af      	bne.n	800dd28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ddc8:	4b06      	ldr	r3, [pc, #24]	; (800dde4 <prvSwitchTimerLists+0xc4>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ddce:	4b06      	ldr	r3, [pc, #24]	; (800dde8 <prvSwitchTimerLists+0xc8>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	4a04      	ldr	r2, [pc, #16]	; (800dde4 <prvSwitchTimerLists+0xc4>)
 800ddd4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ddd6:	4a04      	ldr	r2, [pc, #16]	; (800dde8 <prvSwitchTimerLists+0xc8>)
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	6013      	str	r3, [r2, #0]
}
 800dddc:	bf00      	nop
 800ddde:	3718      	adds	r7, #24
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}
 800dde4:	200018c4 	.word	0x200018c4
 800dde8:	200018c8 	.word	0x200018c8

0800ddec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ddf2:	f000 f96b 	bl	800e0cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ddf6:	4b15      	ldr	r3, [pc, #84]	; (800de4c <prvCheckForValidListAndQueue+0x60>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d120      	bne.n	800de40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ddfe:	4814      	ldr	r0, [pc, #80]	; (800de50 <prvCheckForValidListAndQueue+0x64>)
 800de00:	f7fd fa50 	bl	800b2a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800de04:	4813      	ldr	r0, [pc, #76]	; (800de54 <prvCheckForValidListAndQueue+0x68>)
 800de06:	f7fd fa4d 	bl	800b2a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800de0a:	4b13      	ldr	r3, [pc, #76]	; (800de58 <prvCheckForValidListAndQueue+0x6c>)
 800de0c:	4a10      	ldr	r2, [pc, #64]	; (800de50 <prvCheckForValidListAndQueue+0x64>)
 800de0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800de10:	4b12      	ldr	r3, [pc, #72]	; (800de5c <prvCheckForValidListAndQueue+0x70>)
 800de12:	4a10      	ldr	r2, [pc, #64]	; (800de54 <prvCheckForValidListAndQueue+0x68>)
 800de14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800de16:	2300      	movs	r3, #0
 800de18:	9300      	str	r3, [sp, #0]
 800de1a:	4b11      	ldr	r3, [pc, #68]	; (800de60 <prvCheckForValidListAndQueue+0x74>)
 800de1c:	4a11      	ldr	r2, [pc, #68]	; (800de64 <prvCheckForValidListAndQueue+0x78>)
 800de1e:	2110      	movs	r1, #16
 800de20:	200a      	movs	r0, #10
 800de22:	f7fd fb5d 	bl	800b4e0 <xQueueGenericCreateStatic>
 800de26:	4603      	mov	r3, r0
 800de28:	4a08      	ldr	r2, [pc, #32]	; (800de4c <prvCheckForValidListAndQueue+0x60>)
 800de2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800de2c:	4b07      	ldr	r3, [pc, #28]	; (800de4c <prvCheckForValidListAndQueue+0x60>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d005      	beq.n	800de40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800de34:	4b05      	ldr	r3, [pc, #20]	; (800de4c <prvCheckForValidListAndQueue+0x60>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	490b      	ldr	r1, [pc, #44]	; (800de68 <prvCheckForValidListAndQueue+0x7c>)
 800de3a:	4618      	mov	r0, r3
 800de3c:	f7fe fa40 	bl	800c2c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800de40:	f000 f978 	bl	800e134 <vPortExitCritical>
}
 800de44:	bf00      	nop
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}
 800de4a:	bf00      	nop
 800de4c:	200018cc 	.word	0x200018cc
 800de50:	2000189c 	.word	0x2000189c
 800de54:	200018b0 	.word	0x200018b0
 800de58:	200018c4 	.word	0x200018c4
 800de5c:	200018c8 	.word	0x200018c8
 800de60:	20001978 	.word	0x20001978
 800de64:	200018d8 	.word	0x200018d8
 800de68:	0800f128 	.word	0x0800f128

0800de6c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b086      	sub	sp, #24
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d10c      	bne.n	800de98 <pvTimerGetTimerID+0x2c>
	__asm volatile
 800de7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de82:	b672      	cpsid	i
 800de84:	f383 8811 	msr	BASEPRI, r3
 800de88:	f3bf 8f6f 	isb	sy
 800de8c:	f3bf 8f4f 	dsb	sy
 800de90:	b662      	cpsie	i
 800de92:	60fb      	str	r3, [r7, #12]
}
 800de94:	bf00      	nop
 800de96:	e7fe      	b.n	800de96 <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800de98:	f000 f918 	bl	800e0cc <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	69db      	ldr	r3, [r3, #28]
 800dea0:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800dea2:	f000 f947 	bl	800e134 <vPortExitCritical>

	return pvReturn;
 800dea6:	693b      	ldr	r3, [r7, #16]
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	3718      	adds	r7, #24
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}

0800deb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800deb0:	b480      	push	{r7}
 800deb2:	b085      	sub	sp, #20
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	60f8      	str	r0, [r7, #12]
 800deb8:	60b9      	str	r1, [r7, #8]
 800deba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	3b04      	subs	r3, #4
 800dec0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dec8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	3b04      	subs	r3, #4
 800dece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	f023 0201 	bic.w	r2, r3, #1
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	3b04      	subs	r3, #4
 800dede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dee0:	4a0c      	ldr	r2, [pc, #48]	; (800df14 <pxPortInitialiseStack+0x64>)
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	3b14      	subs	r3, #20
 800deea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800deec:	687a      	ldr	r2, [r7, #4]
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	3b04      	subs	r3, #4
 800def6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	f06f 0202 	mvn.w	r2, #2
 800defe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	3b20      	subs	r3, #32
 800df04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800df06:	68fb      	ldr	r3, [r7, #12]
}
 800df08:	4618      	mov	r0, r3
 800df0a:	3714      	adds	r7, #20
 800df0c:	46bd      	mov	sp, r7
 800df0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df12:	4770      	bx	lr
 800df14:	0800df19 	.word	0x0800df19

0800df18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800df18:	b480      	push	{r7}
 800df1a:	b085      	sub	sp, #20
 800df1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800df1e:	2300      	movs	r3, #0
 800df20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800df22:	4b14      	ldr	r3, [pc, #80]	; (800df74 <prvTaskExitError+0x5c>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df2a:	d00c      	beq.n	800df46 <prvTaskExitError+0x2e>
	__asm volatile
 800df2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df30:	b672      	cpsid	i
 800df32:	f383 8811 	msr	BASEPRI, r3
 800df36:	f3bf 8f6f 	isb	sy
 800df3a:	f3bf 8f4f 	dsb	sy
 800df3e:	b662      	cpsie	i
 800df40:	60fb      	str	r3, [r7, #12]
}
 800df42:	bf00      	nop
 800df44:	e7fe      	b.n	800df44 <prvTaskExitError+0x2c>
	__asm volatile
 800df46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df4a:	b672      	cpsid	i
 800df4c:	f383 8811 	msr	BASEPRI, r3
 800df50:	f3bf 8f6f 	isb	sy
 800df54:	f3bf 8f4f 	dsb	sy
 800df58:	b662      	cpsie	i
 800df5a:	60bb      	str	r3, [r7, #8]
}
 800df5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800df5e:	bf00      	nop
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d0fc      	beq.n	800df60 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800df66:	bf00      	nop
 800df68:	bf00      	nop
 800df6a:	3714      	adds	r7, #20
 800df6c:	46bd      	mov	sp, r7
 800df6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df72:	4770      	bx	lr
 800df74:	20000050 	.word	0x20000050
	...

0800df80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800df80:	4b07      	ldr	r3, [pc, #28]	; (800dfa0 <pxCurrentTCBConst2>)
 800df82:	6819      	ldr	r1, [r3, #0]
 800df84:	6808      	ldr	r0, [r1, #0]
 800df86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df8a:	f380 8809 	msr	PSP, r0
 800df8e:	f3bf 8f6f 	isb	sy
 800df92:	f04f 0000 	mov.w	r0, #0
 800df96:	f380 8811 	msr	BASEPRI, r0
 800df9a:	4770      	bx	lr
 800df9c:	f3af 8000 	nop.w

0800dfa0 <pxCurrentTCBConst2>:
 800dfa0:	2000139c 	.word	0x2000139c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dfa4:	bf00      	nop
 800dfa6:	bf00      	nop

0800dfa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dfa8:	4808      	ldr	r0, [pc, #32]	; (800dfcc <prvPortStartFirstTask+0x24>)
 800dfaa:	6800      	ldr	r0, [r0, #0]
 800dfac:	6800      	ldr	r0, [r0, #0]
 800dfae:	f380 8808 	msr	MSP, r0
 800dfb2:	f04f 0000 	mov.w	r0, #0
 800dfb6:	f380 8814 	msr	CONTROL, r0
 800dfba:	b662      	cpsie	i
 800dfbc:	b661      	cpsie	f
 800dfbe:	f3bf 8f4f 	dsb	sy
 800dfc2:	f3bf 8f6f 	isb	sy
 800dfc6:	df00      	svc	0
 800dfc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dfca:	bf00      	nop
 800dfcc:	e000ed08 	.word	0xe000ed08

0800dfd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b084      	sub	sp, #16
 800dfd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dfd6:	4b37      	ldr	r3, [pc, #220]	; (800e0b4 <xPortStartScheduler+0xe4>)
 800dfd8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	b2db      	uxtb	r3, r3
 800dfe0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	22ff      	movs	r2, #255	; 0xff
 800dfe6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	781b      	ldrb	r3, [r3, #0]
 800dfec:	b2db      	uxtb	r3, r3
 800dfee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dff0:	78fb      	ldrb	r3, [r7, #3]
 800dff2:	b2db      	uxtb	r3, r3
 800dff4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dff8:	b2da      	uxtb	r2, r3
 800dffa:	4b2f      	ldr	r3, [pc, #188]	; (800e0b8 <xPortStartScheduler+0xe8>)
 800dffc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dffe:	4b2f      	ldr	r3, [pc, #188]	; (800e0bc <xPortStartScheduler+0xec>)
 800e000:	2207      	movs	r2, #7
 800e002:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e004:	e009      	b.n	800e01a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e006:	4b2d      	ldr	r3, [pc, #180]	; (800e0bc <xPortStartScheduler+0xec>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	3b01      	subs	r3, #1
 800e00c:	4a2b      	ldr	r2, [pc, #172]	; (800e0bc <xPortStartScheduler+0xec>)
 800e00e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e010:	78fb      	ldrb	r3, [r7, #3]
 800e012:	b2db      	uxtb	r3, r3
 800e014:	005b      	lsls	r3, r3, #1
 800e016:	b2db      	uxtb	r3, r3
 800e018:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e01a:	78fb      	ldrb	r3, [r7, #3]
 800e01c:	b2db      	uxtb	r3, r3
 800e01e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e022:	2b80      	cmp	r3, #128	; 0x80
 800e024:	d0ef      	beq.n	800e006 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e026:	4b25      	ldr	r3, [pc, #148]	; (800e0bc <xPortStartScheduler+0xec>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	f1c3 0307 	rsb	r3, r3, #7
 800e02e:	2b04      	cmp	r3, #4
 800e030:	d00c      	beq.n	800e04c <xPortStartScheduler+0x7c>
	__asm volatile
 800e032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e036:	b672      	cpsid	i
 800e038:	f383 8811 	msr	BASEPRI, r3
 800e03c:	f3bf 8f6f 	isb	sy
 800e040:	f3bf 8f4f 	dsb	sy
 800e044:	b662      	cpsie	i
 800e046:	60bb      	str	r3, [r7, #8]
}
 800e048:	bf00      	nop
 800e04a:	e7fe      	b.n	800e04a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e04c:	4b1b      	ldr	r3, [pc, #108]	; (800e0bc <xPortStartScheduler+0xec>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	021b      	lsls	r3, r3, #8
 800e052:	4a1a      	ldr	r2, [pc, #104]	; (800e0bc <xPortStartScheduler+0xec>)
 800e054:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e056:	4b19      	ldr	r3, [pc, #100]	; (800e0bc <xPortStartScheduler+0xec>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e05e:	4a17      	ldr	r2, [pc, #92]	; (800e0bc <xPortStartScheduler+0xec>)
 800e060:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	b2da      	uxtb	r2, r3
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e06a:	4b15      	ldr	r3, [pc, #84]	; (800e0c0 <xPortStartScheduler+0xf0>)
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	4a14      	ldr	r2, [pc, #80]	; (800e0c0 <xPortStartScheduler+0xf0>)
 800e070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e074:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e076:	4b12      	ldr	r3, [pc, #72]	; (800e0c0 <xPortStartScheduler+0xf0>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	4a11      	ldr	r2, [pc, #68]	; (800e0c0 <xPortStartScheduler+0xf0>)
 800e07c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e080:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e082:	f000 f8dd 	bl	800e240 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e086:	4b0f      	ldr	r3, [pc, #60]	; (800e0c4 <xPortStartScheduler+0xf4>)
 800e088:	2200      	movs	r2, #0
 800e08a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e08c:	f000 f8fc 	bl	800e288 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e090:	4b0d      	ldr	r3, [pc, #52]	; (800e0c8 <xPortStartScheduler+0xf8>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	4a0c      	ldr	r2, [pc, #48]	; (800e0c8 <xPortStartScheduler+0xf8>)
 800e096:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e09a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e09c:	f7ff ff84 	bl	800dfa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e0a0:	f7fe fe1a 	bl	800ccd8 <vTaskSwitchContext>
	prvTaskExitError();
 800e0a4:	f7ff ff38 	bl	800df18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e0a8:	2300      	movs	r3, #0
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3710      	adds	r7, #16
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
 800e0b2:	bf00      	nop
 800e0b4:	e000e400 	.word	0xe000e400
 800e0b8:	200019c8 	.word	0x200019c8
 800e0bc:	200019cc 	.word	0x200019cc
 800e0c0:	e000ed20 	.word	0xe000ed20
 800e0c4:	20000050 	.word	0x20000050
 800e0c8:	e000ef34 	.word	0xe000ef34

0800e0cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b083      	sub	sp, #12
 800e0d0:	af00      	add	r7, sp, #0
	__asm volatile
 800e0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d6:	b672      	cpsid	i
 800e0d8:	f383 8811 	msr	BASEPRI, r3
 800e0dc:	f3bf 8f6f 	isb	sy
 800e0e0:	f3bf 8f4f 	dsb	sy
 800e0e4:	b662      	cpsie	i
 800e0e6:	607b      	str	r3, [r7, #4]
}
 800e0e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e0ea:	4b10      	ldr	r3, [pc, #64]	; (800e12c <vPortEnterCritical+0x60>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	3301      	adds	r3, #1
 800e0f0:	4a0e      	ldr	r2, [pc, #56]	; (800e12c <vPortEnterCritical+0x60>)
 800e0f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e0f4:	4b0d      	ldr	r3, [pc, #52]	; (800e12c <vPortEnterCritical+0x60>)
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	2b01      	cmp	r3, #1
 800e0fa:	d111      	bne.n	800e120 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e0fc:	4b0c      	ldr	r3, [pc, #48]	; (800e130 <vPortEnterCritical+0x64>)
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	b2db      	uxtb	r3, r3
 800e102:	2b00      	cmp	r3, #0
 800e104:	d00c      	beq.n	800e120 <vPortEnterCritical+0x54>
	__asm volatile
 800e106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e10a:	b672      	cpsid	i
 800e10c:	f383 8811 	msr	BASEPRI, r3
 800e110:	f3bf 8f6f 	isb	sy
 800e114:	f3bf 8f4f 	dsb	sy
 800e118:	b662      	cpsie	i
 800e11a:	603b      	str	r3, [r7, #0]
}
 800e11c:	bf00      	nop
 800e11e:	e7fe      	b.n	800e11e <vPortEnterCritical+0x52>
	}
}
 800e120:	bf00      	nop
 800e122:	370c      	adds	r7, #12
 800e124:	46bd      	mov	sp, r7
 800e126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12a:	4770      	bx	lr
 800e12c:	20000050 	.word	0x20000050
 800e130:	e000ed04 	.word	0xe000ed04

0800e134 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e134:	b480      	push	{r7}
 800e136:	b083      	sub	sp, #12
 800e138:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e13a:	4b13      	ldr	r3, [pc, #76]	; (800e188 <vPortExitCritical+0x54>)
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d10c      	bne.n	800e15c <vPortExitCritical+0x28>
	__asm volatile
 800e142:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e146:	b672      	cpsid	i
 800e148:	f383 8811 	msr	BASEPRI, r3
 800e14c:	f3bf 8f6f 	isb	sy
 800e150:	f3bf 8f4f 	dsb	sy
 800e154:	b662      	cpsie	i
 800e156:	607b      	str	r3, [r7, #4]
}
 800e158:	bf00      	nop
 800e15a:	e7fe      	b.n	800e15a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800e15c:	4b0a      	ldr	r3, [pc, #40]	; (800e188 <vPortExitCritical+0x54>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	3b01      	subs	r3, #1
 800e162:	4a09      	ldr	r2, [pc, #36]	; (800e188 <vPortExitCritical+0x54>)
 800e164:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e166:	4b08      	ldr	r3, [pc, #32]	; (800e188 <vPortExitCritical+0x54>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d105      	bne.n	800e17a <vPortExitCritical+0x46>
 800e16e:	2300      	movs	r3, #0
 800e170:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	f383 8811 	msr	BASEPRI, r3
}
 800e178:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e17a:	bf00      	nop
 800e17c:	370c      	adds	r7, #12
 800e17e:	46bd      	mov	sp, r7
 800e180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e184:	4770      	bx	lr
 800e186:	bf00      	nop
 800e188:	20000050 	.word	0x20000050
 800e18c:	00000000 	.word	0x00000000

0800e190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e190:	f3ef 8009 	mrs	r0, PSP
 800e194:	f3bf 8f6f 	isb	sy
 800e198:	4b15      	ldr	r3, [pc, #84]	; (800e1f0 <pxCurrentTCBConst>)
 800e19a:	681a      	ldr	r2, [r3, #0]
 800e19c:	f01e 0f10 	tst.w	lr, #16
 800e1a0:	bf08      	it	eq
 800e1a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e1a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1aa:	6010      	str	r0, [r2, #0]
 800e1ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e1b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e1b4:	b672      	cpsid	i
 800e1b6:	f380 8811 	msr	BASEPRI, r0
 800e1ba:	f3bf 8f4f 	dsb	sy
 800e1be:	f3bf 8f6f 	isb	sy
 800e1c2:	b662      	cpsie	i
 800e1c4:	f7fe fd88 	bl	800ccd8 <vTaskSwitchContext>
 800e1c8:	f04f 0000 	mov.w	r0, #0
 800e1cc:	f380 8811 	msr	BASEPRI, r0
 800e1d0:	bc09      	pop	{r0, r3}
 800e1d2:	6819      	ldr	r1, [r3, #0]
 800e1d4:	6808      	ldr	r0, [r1, #0]
 800e1d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1da:	f01e 0f10 	tst.w	lr, #16
 800e1de:	bf08      	it	eq
 800e1e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e1e4:	f380 8809 	msr	PSP, r0
 800e1e8:	f3bf 8f6f 	isb	sy
 800e1ec:	4770      	bx	lr
 800e1ee:	bf00      	nop

0800e1f0 <pxCurrentTCBConst>:
 800e1f0:	2000139c 	.word	0x2000139c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e1f4:	bf00      	nop
 800e1f6:	bf00      	nop

0800e1f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b082      	sub	sp, #8
 800e1fc:	af00      	add	r7, sp, #0
	__asm volatile
 800e1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e202:	b672      	cpsid	i
 800e204:	f383 8811 	msr	BASEPRI, r3
 800e208:	f3bf 8f6f 	isb	sy
 800e20c:	f3bf 8f4f 	dsb	sy
 800e210:	b662      	cpsie	i
 800e212:	607b      	str	r3, [r7, #4]
}
 800e214:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e216:	f7fe fca3 	bl	800cb60 <xTaskIncrementTick>
 800e21a:	4603      	mov	r3, r0
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d003      	beq.n	800e228 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e220:	4b06      	ldr	r3, [pc, #24]	; (800e23c <SysTick_Handler+0x44>)
 800e222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e226:	601a      	str	r2, [r3, #0]
 800e228:	2300      	movs	r3, #0
 800e22a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	f383 8811 	msr	BASEPRI, r3
}
 800e232:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e234:	bf00      	nop
 800e236:	3708      	adds	r7, #8
 800e238:	46bd      	mov	sp, r7
 800e23a:	bd80      	pop	{r7, pc}
 800e23c:	e000ed04 	.word	0xe000ed04

0800e240 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e240:	b480      	push	{r7}
 800e242:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e244:	4b0b      	ldr	r3, [pc, #44]	; (800e274 <vPortSetupTimerInterrupt+0x34>)
 800e246:	2200      	movs	r2, #0
 800e248:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e24a:	4b0b      	ldr	r3, [pc, #44]	; (800e278 <vPortSetupTimerInterrupt+0x38>)
 800e24c:	2200      	movs	r2, #0
 800e24e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e250:	4b0a      	ldr	r3, [pc, #40]	; (800e27c <vPortSetupTimerInterrupt+0x3c>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	4a0a      	ldr	r2, [pc, #40]	; (800e280 <vPortSetupTimerInterrupt+0x40>)
 800e256:	fba2 2303 	umull	r2, r3, r2, r3
 800e25a:	099b      	lsrs	r3, r3, #6
 800e25c:	4a09      	ldr	r2, [pc, #36]	; (800e284 <vPortSetupTimerInterrupt+0x44>)
 800e25e:	3b01      	subs	r3, #1
 800e260:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e262:	4b04      	ldr	r3, [pc, #16]	; (800e274 <vPortSetupTimerInterrupt+0x34>)
 800e264:	2207      	movs	r2, #7
 800e266:	601a      	str	r2, [r3, #0]
}
 800e268:	bf00      	nop
 800e26a:	46bd      	mov	sp, r7
 800e26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e270:	4770      	bx	lr
 800e272:	bf00      	nop
 800e274:	e000e010 	.word	0xe000e010
 800e278:	e000e018 	.word	0xe000e018
 800e27c:	20000008 	.word	0x20000008
 800e280:	10624dd3 	.word	0x10624dd3
 800e284:	e000e014 	.word	0xe000e014

0800e288 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e288:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e298 <vPortEnableVFP+0x10>
 800e28c:	6801      	ldr	r1, [r0, #0]
 800e28e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e292:	6001      	str	r1, [r0, #0]
 800e294:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e296:	bf00      	nop
 800e298:	e000ed88 	.word	0xe000ed88

0800e29c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e29c:	b480      	push	{r7}
 800e29e:	b085      	sub	sp, #20
 800e2a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e2a2:	f3ef 8305 	mrs	r3, IPSR
 800e2a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	2b0f      	cmp	r3, #15
 800e2ac:	d916      	bls.n	800e2dc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e2ae:	4a19      	ldr	r2, [pc, #100]	; (800e314 <vPortValidateInterruptPriority+0x78>)
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	4413      	add	r3, r2
 800e2b4:	781b      	ldrb	r3, [r3, #0]
 800e2b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e2b8:	4b17      	ldr	r3, [pc, #92]	; (800e318 <vPortValidateInterruptPriority+0x7c>)
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	7afa      	ldrb	r2, [r7, #11]
 800e2be:	429a      	cmp	r2, r3
 800e2c0:	d20c      	bcs.n	800e2dc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800e2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2c6:	b672      	cpsid	i
 800e2c8:	f383 8811 	msr	BASEPRI, r3
 800e2cc:	f3bf 8f6f 	isb	sy
 800e2d0:	f3bf 8f4f 	dsb	sy
 800e2d4:	b662      	cpsie	i
 800e2d6:	607b      	str	r3, [r7, #4]
}
 800e2d8:	bf00      	nop
 800e2da:	e7fe      	b.n	800e2da <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e2dc:	4b0f      	ldr	r3, [pc, #60]	; (800e31c <vPortValidateInterruptPriority+0x80>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e2e4:	4b0e      	ldr	r3, [pc, #56]	; (800e320 <vPortValidateInterruptPriority+0x84>)
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d90c      	bls.n	800e306 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800e2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2f0:	b672      	cpsid	i
 800e2f2:	f383 8811 	msr	BASEPRI, r3
 800e2f6:	f3bf 8f6f 	isb	sy
 800e2fa:	f3bf 8f4f 	dsb	sy
 800e2fe:	b662      	cpsie	i
 800e300:	603b      	str	r3, [r7, #0]
}
 800e302:	bf00      	nop
 800e304:	e7fe      	b.n	800e304 <vPortValidateInterruptPriority+0x68>
	}
 800e306:	bf00      	nop
 800e308:	3714      	adds	r7, #20
 800e30a:	46bd      	mov	sp, r7
 800e30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e310:	4770      	bx	lr
 800e312:	bf00      	nop
 800e314:	e000e3f0 	.word	0xe000e3f0
 800e318:	200019c8 	.word	0x200019c8
 800e31c:	e000ed0c 	.word	0xe000ed0c
 800e320:	200019cc 	.word	0x200019cc

0800e324 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b08a      	sub	sp, #40	; 0x28
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e32c:	2300      	movs	r3, #0
 800e32e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e330:	f7fe fb4c 	bl	800c9cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e334:	4b5e      	ldr	r3, [pc, #376]	; (800e4b0 <pvPortMalloc+0x18c>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d101      	bne.n	800e340 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e33c:	f000 f920 	bl	800e580 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e340:	4b5c      	ldr	r3, [pc, #368]	; (800e4b4 <pvPortMalloc+0x190>)
 800e342:	681a      	ldr	r2, [r3, #0]
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	4013      	ands	r3, r2
 800e348:	2b00      	cmp	r3, #0
 800e34a:	f040 8092 	bne.w	800e472 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d01f      	beq.n	800e394 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800e354:	2208      	movs	r2, #8
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	4413      	add	r3, r2
 800e35a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f003 0307 	and.w	r3, r3, #7
 800e362:	2b00      	cmp	r3, #0
 800e364:	d016      	beq.n	800e394 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	f023 0307 	bic.w	r3, r3, #7
 800e36c:	3308      	adds	r3, #8
 800e36e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	f003 0307 	and.w	r3, r3, #7
 800e376:	2b00      	cmp	r3, #0
 800e378:	d00c      	beq.n	800e394 <pvPortMalloc+0x70>
	__asm volatile
 800e37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e37e:	b672      	cpsid	i
 800e380:	f383 8811 	msr	BASEPRI, r3
 800e384:	f3bf 8f6f 	isb	sy
 800e388:	f3bf 8f4f 	dsb	sy
 800e38c:	b662      	cpsie	i
 800e38e:	617b      	str	r3, [r7, #20]
}
 800e390:	bf00      	nop
 800e392:	e7fe      	b.n	800e392 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d06b      	beq.n	800e472 <pvPortMalloc+0x14e>
 800e39a:	4b47      	ldr	r3, [pc, #284]	; (800e4b8 <pvPortMalloc+0x194>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	687a      	ldr	r2, [r7, #4]
 800e3a0:	429a      	cmp	r2, r3
 800e3a2:	d866      	bhi.n	800e472 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e3a4:	4b45      	ldr	r3, [pc, #276]	; (800e4bc <pvPortMalloc+0x198>)
 800e3a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e3a8:	4b44      	ldr	r3, [pc, #272]	; (800e4bc <pvPortMalloc+0x198>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e3ae:	e004      	b.n	800e3ba <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800e3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3bc:	685b      	ldr	r3, [r3, #4]
 800e3be:	687a      	ldr	r2, [r7, #4]
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	d903      	bls.n	800e3cc <pvPortMalloc+0xa8>
 800e3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d1f1      	bne.n	800e3b0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e3cc:	4b38      	ldr	r3, [pc, #224]	; (800e4b0 <pvPortMalloc+0x18c>)
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d04d      	beq.n	800e472 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e3d6:	6a3b      	ldr	r3, [r7, #32]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	2208      	movs	r2, #8
 800e3dc:	4413      	add	r3, r2
 800e3de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e2:	681a      	ldr	r2, [r3, #0]
 800e3e4:	6a3b      	ldr	r3, [r7, #32]
 800e3e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ea:	685a      	ldr	r2, [r3, #4]
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	1ad2      	subs	r2, r2, r3
 800e3f0:	2308      	movs	r3, #8
 800e3f2:	005b      	lsls	r3, r3, #1
 800e3f4:	429a      	cmp	r2, r3
 800e3f6:	d921      	bls.n	800e43c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e3f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	4413      	add	r3, r2
 800e3fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e400:	69bb      	ldr	r3, [r7, #24]
 800e402:	f003 0307 	and.w	r3, r3, #7
 800e406:	2b00      	cmp	r3, #0
 800e408:	d00c      	beq.n	800e424 <pvPortMalloc+0x100>
	__asm volatile
 800e40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e40e:	b672      	cpsid	i
 800e410:	f383 8811 	msr	BASEPRI, r3
 800e414:	f3bf 8f6f 	isb	sy
 800e418:	f3bf 8f4f 	dsb	sy
 800e41c:	b662      	cpsie	i
 800e41e:	613b      	str	r3, [r7, #16]
}
 800e420:	bf00      	nop
 800e422:	e7fe      	b.n	800e422 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e426:	685a      	ldr	r2, [r3, #4]
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	1ad2      	subs	r2, r2, r3
 800e42c:	69bb      	ldr	r3, [r7, #24]
 800e42e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e432:	687a      	ldr	r2, [r7, #4]
 800e434:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e436:	69b8      	ldr	r0, [r7, #24]
 800e438:	f000 f904 	bl	800e644 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e43c:	4b1e      	ldr	r3, [pc, #120]	; (800e4b8 <pvPortMalloc+0x194>)
 800e43e:	681a      	ldr	r2, [r3, #0]
 800e440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e442:	685b      	ldr	r3, [r3, #4]
 800e444:	1ad3      	subs	r3, r2, r3
 800e446:	4a1c      	ldr	r2, [pc, #112]	; (800e4b8 <pvPortMalloc+0x194>)
 800e448:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e44a:	4b1b      	ldr	r3, [pc, #108]	; (800e4b8 <pvPortMalloc+0x194>)
 800e44c:	681a      	ldr	r2, [r3, #0]
 800e44e:	4b1c      	ldr	r3, [pc, #112]	; (800e4c0 <pvPortMalloc+0x19c>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	429a      	cmp	r2, r3
 800e454:	d203      	bcs.n	800e45e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e456:	4b18      	ldr	r3, [pc, #96]	; (800e4b8 <pvPortMalloc+0x194>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	4a19      	ldr	r2, [pc, #100]	; (800e4c0 <pvPortMalloc+0x19c>)
 800e45c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e460:	685a      	ldr	r2, [r3, #4]
 800e462:	4b14      	ldr	r3, [pc, #80]	; (800e4b4 <pvPortMalloc+0x190>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	431a      	orrs	r2, r3
 800e468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46e:	2200      	movs	r2, #0
 800e470:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e472:	f7fe fab9 	bl	800c9e8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800e476:	69fb      	ldr	r3, [r7, #28]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d101      	bne.n	800e480 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800e47c:	f7f2 f8cc 	bl	8000618 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e480:	69fb      	ldr	r3, [r7, #28]
 800e482:	f003 0307 	and.w	r3, r3, #7
 800e486:	2b00      	cmp	r3, #0
 800e488:	d00c      	beq.n	800e4a4 <pvPortMalloc+0x180>
	__asm volatile
 800e48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e48e:	b672      	cpsid	i
 800e490:	f383 8811 	msr	BASEPRI, r3
 800e494:	f3bf 8f6f 	isb	sy
 800e498:	f3bf 8f4f 	dsb	sy
 800e49c:	b662      	cpsie	i
 800e49e:	60fb      	str	r3, [r7, #12]
}
 800e4a0:	bf00      	nop
 800e4a2:	e7fe      	b.n	800e4a2 <pvPortMalloc+0x17e>
	return pvReturn;
 800e4a4:	69fb      	ldr	r3, [r7, #28]
}
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	3728      	adds	r7, #40	; 0x28
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	bd80      	pop	{r7, pc}
 800e4ae:	bf00      	nop
 800e4b0:	200099d8 	.word	0x200099d8
 800e4b4:	200099e4 	.word	0x200099e4
 800e4b8:	200099dc 	.word	0x200099dc
 800e4bc:	200099d0 	.word	0x200099d0
 800e4c0:	200099e0 	.word	0x200099e0

0800e4c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b086      	sub	sp, #24
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d04c      	beq.n	800e570 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e4d6:	2308      	movs	r3, #8
 800e4d8:	425b      	negs	r3, r3
 800e4da:	697a      	ldr	r2, [r7, #20]
 800e4dc:	4413      	add	r3, r2
 800e4de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e4e4:	693b      	ldr	r3, [r7, #16]
 800e4e6:	685a      	ldr	r2, [r3, #4]
 800e4e8:	4b23      	ldr	r3, [pc, #140]	; (800e578 <vPortFree+0xb4>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	4013      	ands	r3, r2
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d10c      	bne.n	800e50c <vPortFree+0x48>
	__asm volatile
 800e4f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4f6:	b672      	cpsid	i
 800e4f8:	f383 8811 	msr	BASEPRI, r3
 800e4fc:	f3bf 8f6f 	isb	sy
 800e500:	f3bf 8f4f 	dsb	sy
 800e504:	b662      	cpsie	i
 800e506:	60fb      	str	r3, [r7, #12]
}
 800e508:	bf00      	nop
 800e50a:	e7fe      	b.n	800e50a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e50c:	693b      	ldr	r3, [r7, #16]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d00c      	beq.n	800e52e <vPortFree+0x6a>
	__asm volatile
 800e514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e518:	b672      	cpsid	i
 800e51a:	f383 8811 	msr	BASEPRI, r3
 800e51e:	f3bf 8f6f 	isb	sy
 800e522:	f3bf 8f4f 	dsb	sy
 800e526:	b662      	cpsie	i
 800e528:	60bb      	str	r3, [r7, #8]
}
 800e52a:	bf00      	nop
 800e52c:	e7fe      	b.n	800e52c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e52e:	693b      	ldr	r3, [r7, #16]
 800e530:	685a      	ldr	r2, [r3, #4]
 800e532:	4b11      	ldr	r3, [pc, #68]	; (800e578 <vPortFree+0xb4>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	4013      	ands	r3, r2
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d019      	beq.n	800e570 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e53c:	693b      	ldr	r3, [r7, #16]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d115      	bne.n	800e570 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	685a      	ldr	r2, [r3, #4]
 800e548:	4b0b      	ldr	r3, [pc, #44]	; (800e578 <vPortFree+0xb4>)
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	43db      	mvns	r3, r3
 800e54e:	401a      	ands	r2, r3
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e554:	f7fe fa3a 	bl	800c9cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	685a      	ldr	r2, [r3, #4]
 800e55c:	4b07      	ldr	r3, [pc, #28]	; (800e57c <vPortFree+0xb8>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	4413      	add	r3, r2
 800e562:	4a06      	ldr	r2, [pc, #24]	; (800e57c <vPortFree+0xb8>)
 800e564:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e566:	6938      	ldr	r0, [r7, #16]
 800e568:	f000 f86c 	bl	800e644 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e56c:	f7fe fa3c 	bl	800c9e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e570:	bf00      	nop
 800e572:	3718      	adds	r7, #24
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}
 800e578:	200099e4 	.word	0x200099e4
 800e57c:	200099dc 	.word	0x200099dc

0800e580 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e580:	b480      	push	{r7}
 800e582:	b085      	sub	sp, #20
 800e584:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e58a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e58c:	4b27      	ldr	r3, [pc, #156]	; (800e62c <prvHeapInit+0xac>)
 800e58e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	f003 0307 	and.w	r3, r3, #7
 800e596:	2b00      	cmp	r3, #0
 800e598:	d00c      	beq.n	800e5b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	3307      	adds	r3, #7
 800e59e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	f023 0307 	bic.w	r3, r3, #7
 800e5a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e5a8:	68ba      	ldr	r2, [r7, #8]
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	1ad3      	subs	r3, r2, r3
 800e5ae:	4a1f      	ldr	r2, [pc, #124]	; (800e62c <prvHeapInit+0xac>)
 800e5b0:	4413      	add	r3, r2
 800e5b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e5b8:	4a1d      	ldr	r2, [pc, #116]	; (800e630 <prvHeapInit+0xb0>)
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e5be:	4b1c      	ldr	r3, [pc, #112]	; (800e630 <prvHeapInit+0xb0>)
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	68ba      	ldr	r2, [r7, #8]
 800e5c8:	4413      	add	r3, r2
 800e5ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e5cc:	2208      	movs	r2, #8
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	1a9b      	subs	r3, r3, r2
 800e5d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	f023 0307 	bic.w	r3, r3, #7
 800e5da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	4a15      	ldr	r2, [pc, #84]	; (800e634 <prvHeapInit+0xb4>)
 800e5e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e5e2:	4b14      	ldr	r3, [pc, #80]	; (800e634 <prvHeapInit+0xb4>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e5ea:	4b12      	ldr	r3, [pc, #72]	; (800e634 <prvHeapInit+0xb4>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e5f6:	683b      	ldr	r3, [r7, #0]
 800e5f8:	68fa      	ldr	r2, [r7, #12]
 800e5fa:	1ad2      	subs	r2, r2, r3
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e600:	4b0c      	ldr	r3, [pc, #48]	; (800e634 <prvHeapInit+0xb4>)
 800e602:	681a      	ldr	r2, [r3, #0]
 800e604:	683b      	ldr	r3, [r7, #0]
 800e606:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	685b      	ldr	r3, [r3, #4]
 800e60c:	4a0a      	ldr	r2, [pc, #40]	; (800e638 <prvHeapInit+0xb8>)
 800e60e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	685b      	ldr	r3, [r3, #4]
 800e614:	4a09      	ldr	r2, [pc, #36]	; (800e63c <prvHeapInit+0xbc>)
 800e616:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e618:	4b09      	ldr	r3, [pc, #36]	; (800e640 <prvHeapInit+0xc0>)
 800e61a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e61e:	601a      	str	r2, [r3, #0]
}
 800e620:	bf00      	nop
 800e622:	3714      	adds	r7, #20
 800e624:	46bd      	mov	sp, r7
 800e626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62a:	4770      	bx	lr
 800e62c:	200019d0 	.word	0x200019d0
 800e630:	200099d0 	.word	0x200099d0
 800e634:	200099d8 	.word	0x200099d8
 800e638:	200099e0 	.word	0x200099e0
 800e63c:	200099dc 	.word	0x200099dc
 800e640:	200099e4 	.word	0x200099e4

0800e644 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e644:	b480      	push	{r7}
 800e646:	b085      	sub	sp, #20
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e64c:	4b28      	ldr	r3, [pc, #160]	; (800e6f0 <prvInsertBlockIntoFreeList+0xac>)
 800e64e:	60fb      	str	r3, [r7, #12]
 800e650:	e002      	b.n	800e658 <prvInsertBlockIntoFreeList+0x14>
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	60fb      	str	r3, [r7, #12]
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	687a      	ldr	r2, [r7, #4]
 800e65e:	429a      	cmp	r2, r3
 800e660:	d8f7      	bhi.n	800e652 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	685b      	ldr	r3, [r3, #4]
 800e66a:	68ba      	ldr	r2, [r7, #8]
 800e66c:	4413      	add	r3, r2
 800e66e:	687a      	ldr	r2, [r7, #4]
 800e670:	429a      	cmp	r2, r3
 800e672:	d108      	bne.n	800e686 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	685a      	ldr	r2, [r3, #4]
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	685b      	ldr	r3, [r3, #4]
 800e67c:	441a      	add	r2, r3
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	685b      	ldr	r3, [r3, #4]
 800e68e:	68ba      	ldr	r2, [r7, #8]
 800e690:	441a      	add	r2, r3
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	429a      	cmp	r2, r3
 800e698:	d118      	bne.n	800e6cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	681a      	ldr	r2, [r3, #0]
 800e69e:	4b15      	ldr	r3, [pc, #84]	; (800e6f4 <prvInsertBlockIntoFreeList+0xb0>)
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	429a      	cmp	r2, r3
 800e6a4:	d00d      	beq.n	800e6c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	685a      	ldr	r2, [r3, #4]
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	685b      	ldr	r3, [r3, #4]
 800e6b0:	441a      	add	r2, r3
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	681a      	ldr	r2, [r3, #0]
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	601a      	str	r2, [r3, #0]
 800e6c0:	e008      	b.n	800e6d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e6c2:	4b0c      	ldr	r3, [pc, #48]	; (800e6f4 <prvInsertBlockIntoFreeList+0xb0>)
 800e6c4:	681a      	ldr	r2, [r3, #0]
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	601a      	str	r2, [r3, #0]
 800e6ca:	e003      	b.n	800e6d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	681a      	ldr	r2, [r3, #0]
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e6d4:	68fa      	ldr	r2, [r7, #12]
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	429a      	cmp	r2, r3
 800e6da:	d002      	beq.n	800e6e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	687a      	ldr	r2, [r7, #4]
 800e6e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e6e2:	bf00      	nop
 800e6e4:	3714      	adds	r7, #20
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ec:	4770      	bx	lr
 800e6ee:	bf00      	nop
 800e6f0:	200099d0 	.word	0x200099d0
 800e6f4:	200099d8 	.word	0x200099d8

0800e6f8 <__errno>:
 800e6f8:	4b01      	ldr	r3, [pc, #4]	; (800e700 <__errno+0x8>)
 800e6fa:	6818      	ldr	r0, [r3, #0]
 800e6fc:	4770      	bx	lr
 800e6fe:	bf00      	nop
 800e700:	20000054 	.word	0x20000054

0800e704 <__libc_init_array>:
 800e704:	b570      	push	{r4, r5, r6, lr}
 800e706:	4d0d      	ldr	r5, [pc, #52]	; (800e73c <__libc_init_array+0x38>)
 800e708:	4c0d      	ldr	r4, [pc, #52]	; (800e740 <__libc_init_array+0x3c>)
 800e70a:	1b64      	subs	r4, r4, r5
 800e70c:	10a4      	asrs	r4, r4, #2
 800e70e:	2600      	movs	r6, #0
 800e710:	42a6      	cmp	r6, r4
 800e712:	d109      	bne.n	800e728 <__libc_init_array+0x24>
 800e714:	4d0b      	ldr	r5, [pc, #44]	; (800e744 <__libc_init_array+0x40>)
 800e716:	4c0c      	ldr	r4, [pc, #48]	; (800e748 <__libc_init_array+0x44>)
 800e718:	f000 fc96 	bl	800f048 <_init>
 800e71c:	1b64      	subs	r4, r4, r5
 800e71e:	10a4      	asrs	r4, r4, #2
 800e720:	2600      	movs	r6, #0
 800e722:	42a6      	cmp	r6, r4
 800e724:	d105      	bne.n	800e732 <__libc_init_array+0x2e>
 800e726:	bd70      	pop	{r4, r5, r6, pc}
 800e728:	f855 3b04 	ldr.w	r3, [r5], #4
 800e72c:	4798      	blx	r3
 800e72e:	3601      	adds	r6, #1
 800e730:	e7ee      	b.n	800e710 <__libc_init_array+0xc>
 800e732:	f855 3b04 	ldr.w	r3, [r5], #4
 800e736:	4798      	blx	r3
 800e738:	3601      	adds	r6, #1
 800e73a:	e7f2      	b.n	800e722 <__libc_init_array+0x1e>
 800e73c:	08010f1c 	.word	0x08010f1c
 800e740:	08010f1c 	.word	0x08010f1c
 800e744:	08010f1c 	.word	0x08010f1c
 800e748:	08010f20 	.word	0x08010f20

0800e74c <malloc>:
 800e74c:	4b02      	ldr	r3, [pc, #8]	; (800e758 <malloc+0xc>)
 800e74e:	4601      	mov	r1, r0
 800e750:	6818      	ldr	r0, [r3, #0]
 800e752:	f000 b885 	b.w	800e860 <_malloc_r>
 800e756:	bf00      	nop
 800e758:	20000054 	.word	0x20000054

0800e75c <memcpy>:
 800e75c:	440a      	add	r2, r1
 800e75e:	4291      	cmp	r1, r2
 800e760:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800e764:	d100      	bne.n	800e768 <memcpy+0xc>
 800e766:	4770      	bx	lr
 800e768:	b510      	push	{r4, lr}
 800e76a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e76e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e772:	4291      	cmp	r1, r2
 800e774:	d1f9      	bne.n	800e76a <memcpy+0xe>
 800e776:	bd10      	pop	{r4, pc}

0800e778 <memset>:
 800e778:	4402      	add	r2, r0
 800e77a:	4603      	mov	r3, r0
 800e77c:	4293      	cmp	r3, r2
 800e77e:	d100      	bne.n	800e782 <memset+0xa>
 800e780:	4770      	bx	lr
 800e782:	f803 1b01 	strb.w	r1, [r3], #1
 800e786:	e7f9      	b.n	800e77c <memset+0x4>

0800e788 <_free_r>:
 800e788:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e78a:	2900      	cmp	r1, #0
 800e78c:	d044      	beq.n	800e818 <_free_r+0x90>
 800e78e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e792:	9001      	str	r0, [sp, #4]
 800e794:	2b00      	cmp	r3, #0
 800e796:	f1a1 0404 	sub.w	r4, r1, #4
 800e79a:	bfb8      	it	lt
 800e79c:	18e4      	addlt	r4, r4, r3
 800e79e:	f000 f903 	bl	800e9a8 <__malloc_lock>
 800e7a2:	4a1e      	ldr	r2, [pc, #120]	; (800e81c <_free_r+0x94>)
 800e7a4:	9801      	ldr	r0, [sp, #4]
 800e7a6:	6813      	ldr	r3, [r2, #0]
 800e7a8:	b933      	cbnz	r3, 800e7b8 <_free_r+0x30>
 800e7aa:	6063      	str	r3, [r4, #4]
 800e7ac:	6014      	str	r4, [r2, #0]
 800e7ae:	b003      	add	sp, #12
 800e7b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e7b4:	f000 b8fe 	b.w	800e9b4 <__malloc_unlock>
 800e7b8:	42a3      	cmp	r3, r4
 800e7ba:	d908      	bls.n	800e7ce <_free_r+0x46>
 800e7bc:	6825      	ldr	r5, [r4, #0]
 800e7be:	1961      	adds	r1, r4, r5
 800e7c0:	428b      	cmp	r3, r1
 800e7c2:	bf01      	itttt	eq
 800e7c4:	6819      	ldreq	r1, [r3, #0]
 800e7c6:	685b      	ldreq	r3, [r3, #4]
 800e7c8:	1949      	addeq	r1, r1, r5
 800e7ca:	6021      	streq	r1, [r4, #0]
 800e7cc:	e7ed      	b.n	800e7aa <_free_r+0x22>
 800e7ce:	461a      	mov	r2, r3
 800e7d0:	685b      	ldr	r3, [r3, #4]
 800e7d2:	b10b      	cbz	r3, 800e7d8 <_free_r+0x50>
 800e7d4:	42a3      	cmp	r3, r4
 800e7d6:	d9fa      	bls.n	800e7ce <_free_r+0x46>
 800e7d8:	6811      	ldr	r1, [r2, #0]
 800e7da:	1855      	adds	r5, r2, r1
 800e7dc:	42a5      	cmp	r5, r4
 800e7de:	d10b      	bne.n	800e7f8 <_free_r+0x70>
 800e7e0:	6824      	ldr	r4, [r4, #0]
 800e7e2:	4421      	add	r1, r4
 800e7e4:	1854      	adds	r4, r2, r1
 800e7e6:	42a3      	cmp	r3, r4
 800e7e8:	6011      	str	r1, [r2, #0]
 800e7ea:	d1e0      	bne.n	800e7ae <_free_r+0x26>
 800e7ec:	681c      	ldr	r4, [r3, #0]
 800e7ee:	685b      	ldr	r3, [r3, #4]
 800e7f0:	6053      	str	r3, [r2, #4]
 800e7f2:	4421      	add	r1, r4
 800e7f4:	6011      	str	r1, [r2, #0]
 800e7f6:	e7da      	b.n	800e7ae <_free_r+0x26>
 800e7f8:	d902      	bls.n	800e800 <_free_r+0x78>
 800e7fa:	230c      	movs	r3, #12
 800e7fc:	6003      	str	r3, [r0, #0]
 800e7fe:	e7d6      	b.n	800e7ae <_free_r+0x26>
 800e800:	6825      	ldr	r5, [r4, #0]
 800e802:	1961      	adds	r1, r4, r5
 800e804:	428b      	cmp	r3, r1
 800e806:	bf04      	itt	eq
 800e808:	6819      	ldreq	r1, [r3, #0]
 800e80a:	685b      	ldreq	r3, [r3, #4]
 800e80c:	6063      	str	r3, [r4, #4]
 800e80e:	bf04      	itt	eq
 800e810:	1949      	addeq	r1, r1, r5
 800e812:	6021      	streq	r1, [r4, #0]
 800e814:	6054      	str	r4, [r2, #4]
 800e816:	e7ca      	b.n	800e7ae <_free_r+0x26>
 800e818:	b003      	add	sp, #12
 800e81a:	bd30      	pop	{r4, r5, pc}
 800e81c:	200099e8 	.word	0x200099e8

0800e820 <sbrk_aligned>:
 800e820:	b570      	push	{r4, r5, r6, lr}
 800e822:	4e0e      	ldr	r6, [pc, #56]	; (800e85c <sbrk_aligned+0x3c>)
 800e824:	460c      	mov	r4, r1
 800e826:	6831      	ldr	r1, [r6, #0]
 800e828:	4605      	mov	r5, r0
 800e82a:	b911      	cbnz	r1, 800e832 <sbrk_aligned+0x12>
 800e82c:	f000 f88c 	bl	800e948 <_sbrk_r>
 800e830:	6030      	str	r0, [r6, #0]
 800e832:	4621      	mov	r1, r4
 800e834:	4628      	mov	r0, r5
 800e836:	f000 f887 	bl	800e948 <_sbrk_r>
 800e83a:	1c43      	adds	r3, r0, #1
 800e83c:	d00a      	beq.n	800e854 <sbrk_aligned+0x34>
 800e83e:	1cc4      	adds	r4, r0, #3
 800e840:	f024 0403 	bic.w	r4, r4, #3
 800e844:	42a0      	cmp	r0, r4
 800e846:	d007      	beq.n	800e858 <sbrk_aligned+0x38>
 800e848:	1a21      	subs	r1, r4, r0
 800e84a:	4628      	mov	r0, r5
 800e84c:	f000 f87c 	bl	800e948 <_sbrk_r>
 800e850:	3001      	adds	r0, #1
 800e852:	d101      	bne.n	800e858 <sbrk_aligned+0x38>
 800e854:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e858:	4620      	mov	r0, r4
 800e85a:	bd70      	pop	{r4, r5, r6, pc}
 800e85c:	200099ec 	.word	0x200099ec

0800e860 <_malloc_r>:
 800e860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e864:	1ccd      	adds	r5, r1, #3
 800e866:	f025 0503 	bic.w	r5, r5, #3
 800e86a:	3508      	adds	r5, #8
 800e86c:	2d0c      	cmp	r5, #12
 800e86e:	bf38      	it	cc
 800e870:	250c      	movcc	r5, #12
 800e872:	2d00      	cmp	r5, #0
 800e874:	4607      	mov	r7, r0
 800e876:	db01      	blt.n	800e87c <_malloc_r+0x1c>
 800e878:	42a9      	cmp	r1, r5
 800e87a:	d905      	bls.n	800e888 <_malloc_r+0x28>
 800e87c:	230c      	movs	r3, #12
 800e87e:	603b      	str	r3, [r7, #0]
 800e880:	2600      	movs	r6, #0
 800e882:	4630      	mov	r0, r6
 800e884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e888:	4e2e      	ldr	r6, [pc, #184]	; (800e944 <_malloc_r+0xe4>)
 800e88a:	f000 f88d 	bl	800e9a8 <__malloc_lock>
 800e88e:	6833      	ldr	r3, [r6, #0]
 800e890:	461c      	mov	r4, r3
 800e892:	bb34      	cbnz	r4, 800e8e2 <_malloc_r+0x82>
 800e894:	4629      	mov	r1, r5
 800e896:	4638      	mov	r0, r7
 800e898:	f7ff ffc2 	bl	800e820 <sbrk_aligned>
 800e89c:	1c43      	adds	r3, r0, #1
 800e89e:	4604      	mov	r4, r0
 800e8a0:	d14d      	bne.n	800e93e <_malloc_r+0xde>
 800e8a2:	6834      	ldr	r4, [r6, #0]
 800e8a4:	4626      	mov	r6, r4
 800e8a6:	2e00      	cmp	r6, #0
 800e8a8:	d140      	bne.n	800e92c <_malloc_r+0xcc>
 800e8aa:	6823      	ldr	r3, [r4, #0]
 800e8ac:	4631      	mov	r1, r6
 800e8ae:	4638      	mov	r0, r7
 800e8b0:	eb04 0803 	add.w	r8, r4, r3
 800e8b4:	f000 f848 	bl	800e948 <_sbrk_r>
 800e8b8:	4580      	cmp	r8, r0
 800e8ba:	d13a      	bne.n	800e932 <_malloc_r+0xd2>
 800e8bc:	6821      	ldr	r1, [r4, #0]
 800e8be:	3503      	adds	r5, #3
 800e8c0:	1a6d      	subs	r5, r5, r1
 800e8c2:	f025 0503 	bic.w	r5, r5, #3
 800e8c6:	3508      	adds	r5, #8
 800e8c8:	2d0c      	cmp	r5, #12
 800e8ca:	bf38      	it	cc
 800e8cc:	250c      	movcc	r5, #12
 800e8ce:	4629      	mov	r1, r5
 800e8d0:	4638      	mov	r0, r7
 800e8d2:	f7ff ffa5 	bl	800e820 <sbrk_aligned>
 800e8d6:	3001      	adds	r0, #1
 800e8d8:	d02b      	beq.n	800e932 <_malloc_r+0xd2>
 800e8da:	6823      	ldr	r3, [r4, #0]
 800e8dc:	442b      	add	r3, r5
 800e8de:	6023      	str	r3, [r4, #0]
 800e8e0:	e00e      	b.n	800e900 <_malloc_r+0xa0>
 800e8e2:	6822      	ldr	r2, [r4, #0]
 800e8e4:	1b52      	subs	r2, r2, r5
 800e8e6:	d41e      	bmi.n	800e926 <_malloc_r+0xc6>
 800e8e8:	2a0b      	cmp	r2, #11
 800e8ea:	d916      	bls.n	800e91a <_malloc_r+0xba>
 800e8ec:	1961      	adds	r1, r4, r5
 800e8ee:	42a3      	cmp	r3, r4
 800e8f0:	6025      	str	r5, [r4, #0]
 800e8f2:	bf18      	it	ne
 800e8f4:	6059      	strne	r1, [r3, #4]
 800e8f6:	6863      	ldr	r3, [r4, #4]
 800e8f8:	bf08      	it	eq
 800e8fa:	6031      	streq	r1, [r6, #0]
 800e8fc:	5162      	str	r2, [r4, r5]
 800e8fe:	604b      	str	r3, [r1, #4]
 800e900:	4638      	mov	r0, r7
 800e902:	f104 060b 	add.w	r6, r4, #11
 800e906:	f000 f855 	bl	800e9b4 <__malloc_unlock>
 800e90a:	f026 0607 	bic.w	r6, r6, #7
 800e90e:	1d23      	adds	r3, r4, #4
 800e910:	1af2      	subs	r2, r6, r3
 800e912:	d0b6      	beq.n	800e882 <_malloc_r+0x22>
 800e914:	1b9b      	subs	r3, r3, r6
 800e916:	50a3      	str	r3, [r4, r2]
 800e918:	e7b3      	b.n	800e882 <_malloc_r+0x22>
 800e91a:	6862      	ldr	r2, [r4, #4]
 800e91c:	42a3      	cmp	r3, r4
 800e91e:	bf0c      	ite	eq
 800e920:	6032      	streq	r2, [r6, #0]
 800e922:	605a      	strne	r2, [r3, #4]
 800e924:	e7ec      	b.n	800e900 <_malloc_r+0xa0>
 800e926:	4623      	mov	r3, r4
 800e928:	6864      	ldr	r4, [r4, #4]
 800e92a:	e7b2      	b.n	800e892 <_malloc_r+0x32>
 800e92c:	4634      	mov	r4, r6
 800e92e:	6876      	ldr	r6, [r6, #4]
 800e930:	e7b9      	b.n	800e8a6 <_malloc_r+0x46>
 800e932:	230c      	movs	r3, #12
 800e934:	603b      	str	r3, [r7, #0]
 800e936:	4638      	mov	r0, r7
 800e938:	f000 f83c 	bl	800e9b4 <__malloc_unlock>
 800e93c:	e7a1      	b.n	800e882 <_malloc_r+0x22>
 800e93e:	6025      	str	r5, [r4, #0]
 800e940:	e7de      	b.n	800e900 <_malloc_r+0xa0>
 800e942:	bf00      	nop
 800e944:	200099e8 	.word	0x200099e8

0800e948 <_sbrk_r>:
 800e948:	b538      	push	{r3, r4, r5, lr}
 800e94a:	4d06      	ldr	r5, [pc, #24]	; (800e964 <_sbrk_r+0x1c>)
 800e94c:	2300      	movs	r3, #0
 800e94e:	4604      	mov	r4, r0
 800e950:	4608      	mov	r0, r1
 800e952:	602b      	str	r3, [r5, #0]
 800e954:	f7f3 fd3a 	bl	80023cc <_sbrk>
 800e958:	1c43      	adds	r3, r0, #1
 800e95a:	d102      	bne.n	800e962 <_sbrk_r+0x1a>
 800e95c:	682b      	ldr	r3, [r5, #0]
 800e95e:	b103      	cbz	r3, 800e962 <_sbrk_r+0x1a>
 800e960:	6023      	str	r3, [r4, #0]
 800e962:	bd38      	pop	{r3, r4, r5, pc}
 800e964:	200099f0 	.word	0x200099f0

0800e968 <siprintf>:
 800e968:	b40e      	push	{r1, r2, r3}
 800e96a:	b500      	push	{lr}
 800e96c:	b09c      	sub	sp, #112	; 0x70
 800e96e:	ab1d      	add	r3, sp, #116	; 0x74
 800e970:	9002      	str	r0, [sp, #8]
 800e972:	9006      	str	r0, [sp, #24]
 800e974:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e978:	4809      	ldr	r0, [pc, #36]	; (800e9a0 <siprintf+0x38>)
 800e97a:	9107      	str	r1, [sp, #28]
 800e97c:	9104      	str	r1, [sp, #16]
 800e97e:	4909      	ldr	r1, [pc, #36]	; (800e9a4 <siprintf+0x3c>)
 800e980:	f853 2b04 	ldr.w	r2, [r3], #4
 800e984:	9105      	str	r1, [sp, #20]
 800e986:	6800      	ldr	r0, [r0, #0]
 800e988:	9301      	str	r3, [sp, #4]
 800e98a:	a902      	add	r1, sp, #8
 800e98c:	f000 f874 	bl	800ea78 <_svfiprintf_r>
 800e990:	9b02      	ldr	r3, [sp, #8]
 800e992:	2200      	movs	r2, #0
 800e994:	701a      	strb	r2, [r3, #0]
 800e996:	b01c      	add	sp, #112	; 0x70
 800e998:	f85d eb04 	ldr.w	lr, [sp], #4
 800e99c:	b003      	add	sp, #12
 800e99e:	4770      	bx	lr
 800e9a0:	20000054 	.word	0x20000054
 800e9a4:	ffff0208 	.word	0xffff0208

0800e9a8 <__malloc_lock>:
 800e9a8:	4801      	ldr	r0, [pc, #4]	; (800e9b0 <__malloc_lock+0x8>)
 800e9aa:	f000 baf9 	b.w	800efa0 <__retarget_lock_acquire_recursive>
 800e9ae:	bf00      	nop
 800e9b0:	200099f4 	.word	0x200099f4

0800e9b4 <__malloc_unlock>:
 800e9b4:	4801      	ldr	r0, [pc, #4]	; (800e9bc <__malloc_unlock+0x8>)
 800e9b6:	f000 baf4 	b.w	800efa2 <__retarget_lock_release_recursive>
 800e9ba:	bf00      	nop
 800e9bc:	200099f4 	.word	0x200099f4

0800e9c0 <__ssputs_r>:
 800e9c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9c4:	688e      	ldr	r6, [r1, #8]
 800e9c6:	429e      	cmp	r6, r3
 800e9c8:	4682      	mov	sl, r0
 800e9ca:	460c      	mov	r4, r1
 800e9cc:	4690      	mov	r8, r2
 800e9ce:	461f      	mov	r7, r3
 800e9d0:	d838      	bhi.n	800ea44 <__ssputs_r+0x84>
 800e9d2:	898a      	ldrh	r2, [r1, #12]
 800e9d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e9d8:	d032      	beq.n	800ea40 <__ssputs_r+0x80>
 800e9da:	6825      	ldr	r5, [r4, #0]
 800e9dc:	6909      	ldr	r1, [r1, #16]
 800e9de:	eba5 0901 	sub.w	r9, r5, r1
 800e9e2:	6965      	ldr	r5, [r4, #20]
 800e9e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e9e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e9ec:	3301      	adds	r3, #1
 800e9ee:	444b      	add	r3, r9
 800e9f0:	106d      	asrs	r5, r5, #1
 800e9f2:	429d      	cmp	r5, r3
 800e9f4:	bf38      	it	cc
 800e9f6:	461d      	movcc	r5, r3
 800e9f8:	0553      	lsls	r3, r2, #21
 800e9fa:	d531      	bpl.n	800ea60 <__ssputs_r+0xa0>
 800e9fc:	4629      	mov	r1, r5
 800e9fe:	f7ff ff2f 	bl	800e860 <_malloc_r>
 800ea02:	4606      	mov	r6, r0
 800ea04:	b950      	cbnz	r0, 800ea1c <__ssputs_r+0x5c>
 800ea06:	230c      	movs	r3, #12
 800ea08:	f8ca 3000 	str.w	r3, [sl]
 800ea0c:	89a3      	ldrh	r3, [r4, #12]
 800ea0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea12:	81a3      	strh	r3, [r4, #12]
 800ea14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ea18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea1c:	6921      	ldr	r1, [r4, #16]
 800ea1e:	464a      	mov	r2, r9
 800ea20:	f7ff fe9c 	bl	800e75c <memcpy>
 800ea24:	89a3      	ldrh	r3, [r4, #12]
 800ea26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ea2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea2e:	81a3      	strh	r3, [r4, #12]
 800ea30:	6126      	str	r6, [r4, #16]
 800ea32:	6165      	str	r5, [r4, #20]
 800ea34:	444e      	add	r6, r9
 800ea36:	eba5 0509 	sub.w	r5, r5, r9
 800ea3a:	6026      	str	r6, [r4, #0]
 800ea3c:	60a5      	str	r5, [r4, #8]
 800ea3e:	463e      	mov	r6, r7
 800ea40:	42be      	cmp	r6, r7
 800ea42:	d900      	bls.n	800ea46 <__ssputs_r+0x86>
 800ea44:	463e      	mov	r6, r7
 800ea46:	6820      	ldr	r0, [r4, #0]
 800ea48:	4632      	mov	r2, r6
 800ea4a:	4641      	mov	r1, r8
 800ea4c:	f000 faaa 	bl	800efa4 <memmove>
 800ea50:	68a3      	ldr	r3, [r4, #8]
 800ea52:	1b9b      	subs	r3, r3, r6
 800ea54:	60a3      	str	r3, [r4, #8]
 800ea56:	6823      	ldr	r3, [r4, #0]
 800ea58:	4433      	add	r3, r6
 800ea5a:	6023      	str	r3, [r4, #0]
 800ea5c:	2000      	movs	r0, #0
 800ea5e:	e7db      	b.n	800ea18 <__ssputs_r+0x58>
 800ea60:	462a      	mov	r2, r5
 800ea62:	f000 fab9 	bl	800efd8 <_realloc_r>
 800ea66:	4606      	mov	r6, r0
 800ea68:	2800      	cmp	r0, #0
 800ea6a:	d1e1      	bne.n	800ea30 <__ssputs_r+0x70>
 800ea6c:	6921      	ldr	r1, [r4, #16]
 800ea6e:	4650      	mov	r0, sl
 800ea70:	f7ff fe8a 	bl	800e788 <_free_r>
 800ea74:	e7c7      	b.n	800ea06 <__ssputs_r+0x46>
	...

0800ea78 <_svfiprintf_r>:
 800ea78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea7c:	4698      	mov	r8, r3
 800ea7e:	898b      	ldrh	r3, [r1, #12]
 800ea80:	061b      	lsls	r3, r3, #24
 800ea82:	b09d      	sub	sp, #116	; 0x74
 800ea84:	4607      	mov	r7, r0
 800ea86:	460d      	mov	r5, r1
 800ea88:	4614      	mov	r4, r2
 800ea8a:	d50e      	bpl.n	800eaaa <_svfiprintf_r+0x32>
 800ea8c:	690b      	ldr	r3, [r1, #16]
 800ea8e:	b963      	cbnz	r3, 800eaaa <_svfiprintf_r+0x32>
 800ea90:	2140      	movs	r1, #64	; 0x40
 800ea92:	f7ff fee5 	bl	800e860 <_malloc_r>
 800ea96:	6028      	str	r0, [r5, #0]
 800ea98:	6128      	str	r0, [r5, #16]
 800ea9a:	b920      	cbnz	r0, 800eaa6 <_svfiprintf_r+0x2e>
 800ea9c:	230c      	movs	r3, #12
 800ea9e:	603b      	str	r3, [r7, #0]
 800eaa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eaa4:	e0d1      	b.n	800ec4a <_svfiprintf_r+0x1d2>
 800eaa6:	2340      	movs	r3, #64	; 0x40
 800eaa8:	616b      	str	r3, [r5, #20]
 800eaaa:	2300      	movs	r3, #0
 800eaac:	9309      	str	r3, [sp, #36]	; 0x24
 800eaae:	2320      	movs	r3, #32
 800eab0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eab4:	f8cd 800c 	str.w	r8, [sp, #12]
 800eab8:	2330      	movs	r3, #48	; 0x30
 800eaba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ec64 <_svfiprintf_r+0x1ec>
 800eabe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eac2:	f04f 0901 	mov.w	r9, #1
 800eac6:	4623      	mov	r3, r4
 800eac8:	469a      	mov	sl, r3
 800eaca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eace:	b10a      	cbz	r2, 800ead4 <_svfiprintf_r+0x5c>
 800ead0:	2a25      	cmp	r2, #37	; 0x25
 800ead2:	d1f9      	bne.n	800eac8 <_svfiprintf_r+0x50>
 800ead4:	ebba 0b04 	subs.w	fp, sl, r4
 800ead8:	d00b      	beq.n	800eaf2 <_svfiprintf_r+0x7a>
 800eada:	465b      	mov	r3, fp
 800eadc:	4622      	mov	r2, r4
 800eade:	4629      	mov	r1, r5
 800eae0:	4638      	mov	r0, r7
 800eae2:	f7ff ff6d 	bl	800e9c0 <__ssputs_r>
 800eae6:	3001      	adds	r0, #1
 800eae8:	f000 80aa 	beq.w	800ec40 <_svfiprintf_r+0x1c8>
 800eaec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eaee:	445a      	add	r2, fp
 800eaf0:	9209      	str	r2, [sp, #36]	; 0x24
 800eaf2:	f89a 3000 	ldrb.w	r3, [sl]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	f000 80a2 	beq.w	800ec40 <_svfiprintf_r+0x1c8>
 800eafc:	2300      	movs	r3, #0
 800eafe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eb02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb06:	f10a 0a01 	add.w	sl, sl, #1
 800eb0a:	9304      	str	r3, [sp, #16]
 800eb0c:	9307      	str	r3, [sp, #28]
 800eb0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb12:	931a      	str	r3, [sp, #104]	; 0x68
 800eb14:	4654      	mov	r4, sl
 800eb16:	2205      	movs	r2, #5
 800eb18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb1c:	4851      	ldr	r0, [pc, #324]	; (800ec64 <_svfiprintf_r+0x1ec>)
 800eb1e:	f7f1 fb97 	bl	8000250 <memchr>
 800eb22:	9a04      	ldr	r2, [sp, #16]
 800eb24:	b9d8      	cbnz	r0, 800eb5e <_svfiprintf_r+0xe6>
 800eb26:	06d0      	lsls	r0, r2, #27
 800eb28:	bf44      	itt	mi
 800eb2a:	2320      	movmi	r3, #32
 800eb2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb30:	0711      	lsls	r1, r2, #28
 800eb32:	bf44      	itt	mi
 800eb34:	232b      	movmi	r3, #43	; 0x2b
 800eb36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb3a:	f89a 3000 	ldrb.w	r3, [sl]
 800eb3e:	2b2a      	cmp	r3, #42	; 0x2a
 800eb40:	d015      	beq.n	800eb6e <_svfiprintf_r+0xf6>
 800eb42:	9a07      	ldr	r2, [sp, #28]
 800eb44:	4654      	mov	r4, sl
 800eb46:	2000      	movs	r0, #0
 800eb48:	f04f 0c0a 	mov.w	ip, #10
 800eb4c:	4621      	mov	r1, r4
 800eb4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb52:	3b30      	subs	r3, #48	; 0x30
 800eb54:	2b09      	cmp	r3, #9
 800eb56:	d94e      	bls.n	800ebf6 <_svfiprintf_r+0x17e>
 800eb58:	b1b0      	cbz	r0, 800eb88 <_svfiprintf_r+0x110>
 800eb5a:	9207      	str	r2, [sp, #28]
 800eb5c:	e014      	b.n	800eb88 <_svfiprintf_r+0x110>
 800eb5e:	eba0 0308 	sub.w	r3, r0, r8
 800eb62:	fa09 f303 	lsl.w	r3, r9, r3
 800eb66:	4313      	orrs	r3, r2
 800eb68:	9304      	str	r3, [sp, #16]
 800eb6a:	46a2      	mov	sl, r4
 800eb6c:	e7d2      	b.n	800eb14 <_svfiprintf_r+0x9c>
 800eb6e:	9b03      	ldr	r3, [sp, #12]
 800eb70:	1d19      	adds	r1, r3, #4
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	9103      	str	r1, [sp, #12]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	bfbb      	ittet	lt
 800eb7a:	425b      	neglt	r3, r3
 800eb7c:	f042 0202 	orrlt.w	r2, r2, #2
 800eb80:	9307      	strge	r3, [sp, #28]
 800eb82:	9307      	strlt	r3, [sp, #28]
 800eb84:	bfb8      	it	lt
 800eb86:	9204      	strlt	r2, [sp, #16]
 800eb88:	7823      	ldrb	r3, [r4, #0]
 800eb8a:	2b2e      	cmp	r3, #46	; 0x2e
 800eb8c:	d10c      	bne.n	800eba8 <_svfiprintf_r+0x130>
 800eb8e:	7863      	ldrb	r3, [r4, #1]
 800eb90:	2b2a      	cmp	r3, #42	; 0x2a
 800eb92:	d135      	bne.n	800ec00 <_svfiprintf_r+0x188>
 800eb94:	9b03      	ldr	r3, [sp, #12]
 800eb96:	1d1a      	adds	r2, r3, #4
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	9203      	str	r2, [sp, #12]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	bfb8      	it	lt
 800eba0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800eba4:	3402      	adds	r4, #2
 800eba6:	9305      	str	r3, [sp, #20]
 800eba8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ec74 <_svfiprintf_r+0x1fc>
 800ebac:	7821      	ldrb	r1, [r4, #0]
 800ebae:	2203      	movs	r2, #3
 800ebb0:	4650      	mov	r0, sl
 800ebb2:	f7f1 fb4d 	bl	8000250 <memchr>
 800ebb6:	b140      	cbz	r0, 800ebca <_svfiprintf_r+0x152>
 800ebb8:	2340      	movs	r3, #64	; 0x40
 800ebba:	eba0 000a 	sub.w	r0, r0, sl
 800ebbe:	fa03 f000 	lsl.w	r0, r3, r0
 800ebc2:	9b04      	ldr	r3, [sp, #16]
 800ebc4:	4303      	orrs	r3, r0
 800ebc6:	3401      	adds	r4, #1
 800ebc8:	9304      	str	r3, [sp, #16]
 800ebca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebce:	4826      	ldr	r0, [pc, #152]	; (800ec68 <_svfiprintf_r+0x1f0>)
 800ebd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ebd4:	2206      	movs	r2, #6
 800ebd6:	f7f1 fb3b 	bl	8000250 <memchr>
 800ebda:	2800      	cmp	r0, #0
 800ebdc:	d038      	beq.n	800ec50 <_svfiprintf_r+0x1d8>
 800ebde:	4b23      	ldr	r3, [pc, #140]	; (800ec6c <_svfiprintf_r+0x1f4>)
 800ebe0:	bb1b      	cbnz	r3, 800ec2a <_svfiprintf_r+0x1b2>
 800ebe2:	9b03      	ldr	r3, [sp, #12]
 800ebe4:	3307      	adds	r3, #7
 800ebe6:	f023 0307 	bic.w	r3, r3, #7
 800ebea:	3308      	adds	r3, #8
 800ebec:	9303      	str	r3, [sp, #12]
 800ebee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebf0:	4433      	add	r3, r6
 800ebf2:	9309      	str	r3, [sp, #36]	; 0x24
 800ebf4:	e767      	b.n	800eac6 <_svfiprintf_r+0x4e>
 800ebf6:	fb0c 3202 	mla	r2, ip, r2, r3
 800ebfa:	460c      	mov	r4, r1
 800ebfc:	2001      	movs	r0, #1
 800ebfe:	e7a5      	b.n	800eb4c <_svfiprintf_r+0xd4>
 800ec00:	2300      	movs	r3, #0
 800ec02:	3401      	adds	r4, #1
 800ec04:	9305      	str	r3, [sp, #20]
 800ec06:	4619      	mov	r1, r3
 800ec08:	f04f 0c0a 	mov.w	ip, #10
 800ec0c:	4620      	mov	r0, r4
 800ec0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec12:	3a30      	subs	r2, #48	; 0x30
 800ec14:	2a09      	cmp	r2, #9
 800ec16:	d903      	bls.n	800ec20 <_svfiprintf_r+0x1a8>
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d0c5      	beq.n	800eba8 <_svfiprintf_r+0x130>
 800ec1c:	9105      	str	r1, [sp, #20]
 800ec1e:	e7c3      	b.n	800eba8 <_svfiprintf_r+0x130>
 800ec20:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec24:	4604      	mov	r4, r0
 800ec26:	2301      	movs	r3, #1
 800ec28:	e7f0      	b.n	800ec0c <_svfiprintf_r+0x194>
 800ec2a:	ab03      	add	r3, sp, #12
 800ec2c:	9300      	str	r3, [sp, #0]
 800ec2e:	462a      	mov	r2, r5
 800ec30:	4b0f      	ldr	r3, [pc, #60]	; (800ec70 <_svfiprintf_r+0x1f8>)
 800ec32:	a904      	add	r1, sp, #16
 800ec34:	4638      	mov	r0, r7
 800ec36:	f3af 8000 	nop.w
 800ec3a:	1c42      	adds	r2, r0, #1
 800ec3c:	4606      	mov	r6, r0
 800ec3e:	d1d6      	bne.n	800ebee <_svfiprintf_r+0x176>
 800ec40:	89ab      	ldrh	r3, [r5, #12]
 800ec42:	065b      	lsls	r3, r3, #25
 800ec44:	f53f af2c 	bmi.w	800eaa0 <_svfiprintf_r+0x28>
 800ec48:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec4a:	b01d      	add	sp, #116	; 0x74
 800ec4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec50:	ab03      	add	r3, sp, #12
 800ec52:	9300      	str	r3, [sp, #0]
 800ec54:	462a      	mov	r2, r5
 800ec56:	4b06      	ldr	r3, [pc, #24]	; (800ec70 <_svfiprintf_r+0x1f8>)
 800ec58:	a904      	add	r1, sp, #16
 800ec5a:	4638      	mov	r0, r7
 800ec5c:	f000 f87a 	bl	800ed54 <_printf_i>
 800ec60:	e7eb      	b.n	800ec3a <_svfiprintf_r+0x1c2>
 800ec62:	bf00      	nop
 800ec64:	08010ee0 	.word	0x08010ee0
 800ec68:	08010eea 	.word	0x08010eea
 800ec6c:	00000000 	.word	0x00000000
 800ec70:	0800e9c1 	.word	0x0800e9c1
 800ec74:	08010ee6 	.word	0x08010ee6

0800ec78 <_printf_common>:
 800ec78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec7c:	4616      	mov	r6, r2
 800ec7e:	4699      	mov	r9, r3
 800ec80:	688a      	ldr	r2, [r1, #8]
 800ec82:	690b      	ldr	r3, [r1, #16]
 800ec84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ec88:	4293      	cmp	r3, r2
 800ec8a:	bfb8      	it	lt
 800ec8c:	4613      	movlt	r3, r2
 800ec8e:	6033      	str	r3, [r6, #0]
 800ec90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ec94:	4607      	mov	r7, r0
 800ec96:	460c      	mov	r4, r1
 800ec98:	b10a      	cbz	r2, 800ec9e <_printf_common+0x26>
 800ec9a:	3301      	adds	r3, #1
 800ec9c:	6033      	str	r3, [r6, #0]
 800ec9e:	6823      	ldr	r3, [r4, #0]
 800eca0:	0699      	lsls	r1, r3, #26
 800eca2:	bf42      	ittt	mi
 800eca4:	6833      	ldrmi	r3, [r6, #0]
 800eca6:	3302      	addmi	r3, #2
 800eca8:	6033      	strmi	r3, [r6, #0]
 800ecaa:	6825      	ldr	r5, [r4, #0]
 800ecac:	f015 0506 	ands.w	r5, r5, #6
 800ecb0:	d106      	bne.n	800ecc0 <_printf_common+0x48>
 800ecb2:	f104 0a19 	add.w	sl, r4, #25
 800ecb6:	68e3      	ldr	r3, [r4, #12]
 800ecb8:	6832      	ldr	r2, [r6, #0]
 800ecba:	1a9b      	subs	r3, r3, r2
 800ecbc:	42ab      	cmp	r3, r5
 800ecbe:	dc26      	bgt.n	800ed0e <_printf_common+0x96>
 800ecc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ecc4:	1e13      	subs	r3, r2, #0
 800ecc6:	6822      	ldr	r2, [r4, #0]
 800ecc8:	bf18      	it	ne
 800ecca:	2301      	movne	r3, #1
 800eccc:	0692      	lsls	r2, r2, #26
 800ecce:	d42b      	bmi.n	800ed28 <_printf_common+0xb0>
 800ecd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ecd4:	4649      	mov	r1, r9
 800ecd6:	4638      	mov	r0, r7
 800ecd8:	47c0      	blx	r8
 800ecda:	3001      	adds	r0, #1
 800ecdc:	d01e      	beq.n	800ed1c <_printf_common+0xa4>
 800ecde:	6823      	ldr	r3, [r4, #0]
 800ece0:	68e5      	ldr	r5, [r4, #12]
 800ece2:	6832      	ldr	r2, [r6, #0]
 800ece4:	f003 0306 	and.w	r3, r3, #6
 800ece8:	2b04      	cmp	r3, #4
 800ecea:	bf08      	it	eq
 800ecec:	1aad      	subeq	r5, r5, r2
 800ecee:	68a3      	ldr	r3, [r4, #8]
 800ecf0:	6922      	ldr	r2, [r4, #16]
 800ecf2:	bf0c      	ite	eq
 800ecf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ecf8:	2500      	movne	r5, #0
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	bfc4      	itt	gt
 800ecfe:	1a9b      	subgt	r3, r3, r2
 800ed00:	18ed      	addgt	r5, r5, r3
 800ed02:	2600      	movs	r6, #0
 800ed04:	341a      	adds	r4, #26
 800ed06:	42b5      	cmp	r5, r6
 800ed08:	d11a      	bne.n	800ed40 <_printf_common+0xc8>
 800ed0a:	2000      	movs	r0, #0
 800ed0c:	e008      	b.n	800ed20 <_printf_common+0xa8>
 800ed0e:	2301      	movs	r3, #1
 800ed10:	4652      	mov	r2, sl
 800ed12:	4649      	mov	r1, r9
 800ed14:	4638      	mov	r0, r7
 800ed16:	47c0      	blx	r8
 800ed18:	3001      	adds	r0, #1
 800ed1a:	d103      	bne.n	800ed24 <_printf_common+0xac>
 800ed1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed24:	3501      	adds	r5, #1
 800ed26:	e7c6      	b.n	800ecb6 <_printf_common+0x3e>
 800ed28:	18e1      	adds	r1, r4, r3
 800ed2a:	1c5a      	adds	r2, r3, #1
 800ed2c:	2030      	movs	r0, #48	; 0x30
 800ed2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ed32:	4422      	add	r2, r4
 800ed34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ed38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ed3c:	3302      	adds	r3, #2
 800ed3e:	e7c7      	b.n	800ecd0 <_printf_common+0x58>
 800ed40:	2301      	movs	r3, #1
 800ed42:	4622      	mov	r2, r4
 800ed44:	4649      	mov	r1, r9
 800ed46:	4638      	mov	r0, r7
 800ed48:	47c0      	blx	r8
 800ed4a:	3001      	adds	r0, #1
 800ed4c:	d0e6      	beq.n	800ed1c <_printf_common+0xa4>
 800ed4e:	3601      	adds	r6, #1
 800ed50:	e7d9      	b.n	800ed06 <_printf_common+0x8e>
	...

0800ed54 <_printf_i>:
 800ed54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed58:	7e0f      	ldrb	r7, [r1, #24]
 800ed5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ed5c:	2f78      	cmp	r7, #120	; 0x78
 800ed5e:	4691      	mov	r9, r2
 800ed60:	4680      	mov	r8, r0
 800ed62:	460c      	mov	r4, r1
 800ed64:	469a      	mov	sl, r3
 800ed66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ed6a:	d807      	bhi.n	800ed7c <_printf_i+0x28>
 800ed6c:	2f62      	cmp	r7, #98	; 0x62
 800ed6e:	d80a      	bhi.n	800ed86 <_printf_i+0x32>
 800ed70:	2f00      	cmp	r7, #0
 800ed72:	f000 80d8 	beq.w	800ef26 <_printf_i+0x1d2>
 800ed76:	2f58      	cmp	r7, #88	; 0x58
 800ed78:	f000 80a3 	beq.w	800eec2 <_printf_i+0x16e>
 800ed7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ed84:	e03a      	b.n	800edfc <_printf_i+0xa8>
 800ed86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ed8a:	2b15      	cmp	r3, #21
 800ed8c:	d8f6      	bhi.n	800ed7c <_printf_i+0x28>
 800ed8e:	a101      	add	r1, pc, #4	; (adr r1, 800ed94 <_printf_i+0x40>)
 800ed90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ed94:	0800eded 	.word	0x0800eded
 800ed98:	0800ee01 	.word	0x0800ee01
 800ed9c:	0800ed7d 	.word	0x0800ed7d
 800eda0:	0800ed7d 	.word	0x0800ed7d
 800eda4:	0800ed7d 	.word	0x0800ed7d
 800eda8:	0800ed7d 	.word	0x0800ed7d
 800edac:	0800ee01 	.word	0x0800ee01
 800edb0:	0800ed7d 	.word	0x0800ed7d
 800edb4:	0800ed7d 	.word	0x0800ed7d
 800edb8:	0800ed7d 	.word	0x0800ed7d
 800edbc:	0800ed7d 	.word	0x0800ed7d
 800edc0:	0800ef0d 	.word	0x0800ef0d
 800edc4:	0800ee31 	.word	0x0800ee31
 800edc8:	0800eeef 	.word	0x0800eeef
 800edcc:	0800ed7d 	.word	0x0800ed7d
 800edd0:	0800ed7d 	.word	0x0800ed7d
 800edd4:	0800ef2f 	.word	0x0800ef2f
 800edd8:	0800ed7d 	.word	0x0800ed7d
 800eddc:	0800ee31 	.word	0x0800ee31
 800ede0:	0800ed7d 	.word	0x0800ed7d
 800ede4:	0800ed7d 	.word	0x0800ed7d
 800ede8:	0800eef7 	.word	0x0800eef7
 800edec:	682b      	ldr	r3, [r5, #0]
 800edee:	1d1a      	adds	r2, r3, #4
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	602a      	str	r2, [r5, #0]
 800edf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800edf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800edfc:	2301      	movs	r3, #1
 800edfe:	e0a3      	b.n	800ef48 <_printf_i+0x1f4>
 800ee00:	6820      	ldr	r0, [r4, #0]
 800ee02:	6829      	ldr	r1, [r5, #0]
 800ee04:	0606      	lsls	r6, r0, #24
 800ee06:	f101 0304 	add.w	r3, r1, #4
 800ee0a:	d50a      	bpl.n	800ee22 <_printf_i+0xce>
 800ee0c:	680e      	ldr	r6, [r1, #0]
 800ee0e:	602b      	str	r3, [r5, #0]
 800ee10:	2e00      	cmp	r6, #0
 800ee12:	da03      	bge.n	800ee1c <_printf_i+0xc8>
 800ee14:	232d      	movs	r3, #45	; 0x2d
 800ee16:	4276      	negs	r6, r6
 800ee18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee1c:	485e      	ldr	r0, [pc, #376]	; (800ef98 <_printf_i+0x244>)
 800ee1e:	230a      	movs	r3, #10
 800ee20:	e019      	b.n	800ee56 <_printf_i+0x102>
 800ee22:	680e      	ldr	r6, [r1, #0]
 800ee24:	602b      	str	r3, [r5, #0]
 800ee26:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ee2a:	bf18      	it	ne
 800ee2c:	b236      	sxthne	r6, r6
 800ee2e:	e7ef      	b.n	800ee10 <_printf_i+0xbc>
 800ee30:	682b      	ldr	r3, [r5, #0]
 800ee32:	6820      	ldr	r0, [r4, #0]
 800ee34:	1d19      	adds	r1, r3, #4
 800ee36:	6029      	str	r1, [r5, #0]
 800ee38:	0601      	lsls	r1, r0, #24
 800ee3a:	d501      	bpl.n	800ee40 <_printf_i+0xec>
 800ee3c:	681e      	ldr	r6, [r3, #0]
 800ee3e:	e002      	b.n	800ee46 <_printf_i+0xf2>
 800ee40:	0646      	lsls	r6, r0, #25
 800ee42:	d5fb      	bpl.n	800ee3c <_printf_i+0xe8>
 800ee44:	881e      	ldrh	r6, [r3, #0]
 800ee46:	4854      	ldr	r0, [pc, #336]	; (800ef98 <_printf_i+0x244>)
 800ee48:	2f6f      	cmp	r7, #111	; 0x6f
 800ee4a:	bf0c      	ite	eq
 800ee4c:	2308      	moveq	r3, #8
 800ee4e:	230a      	movne	r3, #10
 800ee50:	2100      	movs	r1, #0
 800ee52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ee56:	6865      	ldr	r5, [r4, #4]
 800ee58:	60a5      	str	r5, [r4, #8]
 800ee5a:	2d00      	cmp	r5, #0
 800ee5c:	bfa2      	ittt	ge
 800ee5e:	6821      	ldrge	r1, [r4, #0]
 800ee60:	f021 0104 	bicge.w	r1, r1, #4
 800ee64:	6021      	strge	r1, [r4, #0]
 800ee66:	b90e      	cbnz	r6, 800ee6c <_printf_i+0x118>
 800ee68:	2d00      	cmp	r5, #0
 800ee6a:	d04d      	beq.n	800ef08 <_printf_i+0x1b4>
 800ee6c:	4615      	mov	r5, r2
 800ee6e:	fbb6 f1f3 	udiv	r1, r6, r3
 800ee72:	fb03 6711 	mls	r7, r3, r1, r6
 800ee76:	5dc7      	ldrb	r7, [r0, r7]
 800ee78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ee7c:	4637      	mov	r7, r6
 800ee7e:	42bb      	cmp	r3, r7
 800ee80:	460e      	mov	r6, r1
 800ee82:	d9f4      	bls.n	800ee6e <_printf_i+0x11a>
 800ee84:	2b08      	cmp	r3, #8
 800ee86:	d10b      	bne.n	800eea0 <_printf_i+0x14c>
 800ee88:	6823      	ldr	r3, [r4, #0]
 800ee8a:	07de      	lsls	r6, r3, #31
 800ee8c:	d508      	bpl.n	800eea0 <_printf_i+0x14c>
 800ee8e:	6923      	ldr	r3, [r4, #16]
 800ee90:	6861      	ldr	r1, [r4, #4]
 800ee92:	4299      	cmp	r1, r3
 800ee94:	bfde      	ittt	le
 800ee96:	2330      	movle	r3, #48	; 0x30
 800ee98:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ee9c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800eea0:	1b52      	subs	r2, r2, r5
 800eea2:	6122      	str	r2, [r4, #16]
 800eea4:	f8cd a000 	str.w	sl, [sp]
 800eea8:	464b      	mov	r3, r9
 800eeaa:	aa03      	add	r2, sp, #12
 800eeac:	4621      	mov	r1, r4
 800eeae:	4640      	mov	r0, r8
 800eeb0:	f7ff fee2 	bl	800ec78 <_printf_common>
 800eeb4:	3001      	adds	r0, #1
 800eeb6:	d14c      	bne.n	800ef52 <_printf_i+0x1fe>
 800eeb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eebc:	b004      	add	sp, #16
 800eebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eec2:	4835      	ldr	r0, [pc, #212]	; (800ef98 <_printf_i+0x244>)
 800eec4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800eec8:	6829      	ldr	r1, [r5, #0]
 800eeca:	6823      	ldr	r3, [r4, #0]
 800eecc:	f851 6b04 	ldr.w	r6, [r1], #4
 800eed0:	6029      	str	r1, [r5, #0]
 800eed2:	061d      	lsls	r5, r3, #24
 800eed4:	d514      	bpl.n	800ef00 <_printf_i+0x1ac>
 800eed6:	07df      	lsls	r7, r3, #31
 800eed8:	bf44      	itt	mi
 800eeda:	f043 0320 	orrmi.w	r3, r3, #32
 800eede:	6023      	strmi	r3, [r4, #0]
 800eee0:	b91e      	cbnz	r6, 800eeea <_printf_i+0x196>
 800eee2:	6823      	ldr	r3, [r4, #0]
 800eee4:	f023 0320 	bic.w	r3, r3, #32
 800eee8:	6023      	str	r3, [r4, #0]
 800eeea:	2310      	movs	r3, #16
 800eeec:	e7b0      	b.n	800ee50 <_printf_i+0xfc>
 800eeee:	6823      	ldr	r3, [r4, #0]
 800eef0:	f043 0320 	orr.w	r3, r3, #32
 800eef4:	6023      	str	r3, [r4, #0]
 800eef6:	2378      	movs	r3, #120	; 0x78
 800eef8:	4828      	ldr	r0, [pc, #160]	; (800ef9c <_printf_i+0x248>)
 800eefa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eefe:	e7e3      	b.n	800eec8 <_printf_i+0x174>
 800ef00:	0659      	lsls	r1, r3, #25
 800ef02:	bf48      	it	mi
 800ef04:	b2b6      	uxthmi	r6, r6
 800ef06:	e7e6      	b.n	800eed6 <_printf_i+0x182>
 800ef08:	4615      	mov	r5, r2
 800ef0a:	e7bb      	b.n	800ee84 <_printf_i+0x130>
 800ef0c:	682b      	ldr	r3, [r5, #0]
 800ef0e:	6826      	ldr	r6, [r4, #0]
 800ef10:	6961      	ldr	r1, [r4, #20]
 800ef12:	1d18      	adds	r0, r3, #4
 800ef14:	6028      	str	r0, [r5, #0]
 800ef16:	0635      	lsls	r5, r6, #24
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	d501      	bpl.n	800ef20 <_printf_i+0x1cc>
 800ef1c:	6019      	str	r1, [r3, #0]
 800ef1e:	e002      	b.n	800ef26 <_printf_i+0x1d2>
 800ef20:	0670      	lsls	r0, r6, #25
 800ef22:	d5fb      	bpl.n	800ef1c <_printf_i+0x1c8>
 800ef24:	8019      	strh	r1, [r3, #0]
 800ef26:	2300      	movs	r3, #0
 800ef28:	6123      	str	r3, [r4, #16]
 800ef2a:	4615      	mov	r5, r2
 800ef2c:	e7ba      	b.n	800eea4 <_printf_i+0x150>
 800ef2e:	682b      	ldr	r3, [r5, #0]
 800ef30:	1d1a      	adds	r2, r3, #4
 800ef32:	602a      	str	r2, [r5, #0]
 800ef34:	681d      	ldr	r5, [r3, #0]
 800ef36:	6862      	ldr	r2, [r4, #4]
 800ef38:	2100      	movs	r1, #0
 800ef3a:	4628      	mov	r0, r5
 800ef3c:	f7f1 f988 	bl	8000250 <memchr>
 800ef40:	b108      	cbz	r0, 800ef46 <_printf_i+0x1f2>
 800ef42:	1b40      	subs	r0, r0, r5
 800ef44:	6060      	str	r0, [r4, #4]
 800ef46:	6863      	ldr	r3, [r4, #4]
 800ef48:	6123      	str	r3, [r4, #16]
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef50:	e7a8      	b.n	800eea4 <_printf_i+0x150>
 800ef52:	6923      	ldr	r3, [r4, #16]
 800ef54:	462a      	mov	r2, r5
 800ef56:	4649      	mov	r1, r9
 800ef58:	4640      	mov	r0, r8
 800ef5a:	47d0      	blx	sl
 800ef5c:	3001      	adds	r0, #1
 800ef5e:	d0ab      	beq.n	800eeb8 <_printf_i+0x164>
 800ef60:	6823      	ldr	r3, [r4, #0]
 800ef62:	079b      	lsls	r3, r3, #30
 800ef64:	d413      	bmi.n	800ef8e <_printf_i+0x23a>
 800ef66:	68e0      	ldr	r0, [r4, #12]
 800ef68:	9b03      	ldr	r3, [sp, #12]
 800ef6a:	4298      	cmp	r0, r3
 800ef6c:	bfb8      	it	lt
 800ef6e:	4618      	movlt	r0, r3
 800ef70:	e7a4      	b.n	800eebc <_printf_i+0x168>
 800ef72:	2301      	movs	r3, #1
 800ef74:	4632      	mov	r2, r6
 800ef76:	4649      	mov	r1, r9
 800ef78:	4640      	mov	r0, r8
 800ef7a:	47d0      	blx	sl
 800ef7c:	3001      	adds	r0, #1
 800ef7e:	d09b      	beq.n	800eeb8 <_printf_i+0x164>
 800ef80:	3501      	adds	r5, #1
 800ef82:	68e3      	ldr	r3, [r4, #12]
 800ef84:	9903      	ldr	r1, [sp, #12]
 800ef86:	1a5b      	subs	r3, r3, r1
 800ef88:	42ab      	cmp	r3, r5
 800ef8a:	dcf2      	bgt.n	800ef72 <_printf_i+0x21e>
 800ef8c:	e7eb      	b.n	800ef66 <_printf_i+0x212>
 800ef8e:	2500      	movs	r5, #0
 800ef90:	f104 0619 	add.w	r6, r4, #25
 800ef94:	e7f5      	b.n	800ef82 <_printf_i+0x22e>
 800ef96:	bf00      	nop
 800ef98:	08010ef1 	.word	0x08010ef1
 800ef9c:	08010f02 	.word	0x08010f02

0800efa0 <__retarget_lock_acquire_recursive>:
 800efa0:	4770      	bx	lr

0800efa2 <__retarget_lock_release_recursive>:
 800efa2:	4770      	bx	lr

0800efa4 <memmove>:
 800efa4:	4288      	cmp	r0, r1
 800efa6:	b510      	push	{r4, lr}
 800efa8:	eb01 0402 	add.w	r4, r1, r2
 800efac:	d902      	bls.n	800efb4 <memmove+0x10>
 800efae:	4284      	cmp	r4, r0
 800efb0:	4623      	mov	r3, r4
 800efb2:	d807      	bhi.n	800efc4 <memmove+0x20>
 800efb4:	1e43      	subs	r3, r0, #1
 800efb6:	42a1      	cmp	r1, r4
 800efb8:	d008      	beq.n	800efcc <memmove+0x28>
 800efba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800efbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800efc2:	e7f8      	b.n	800efb6 <memmove+0x12>
 800efc4:	4402      	add	r2, r0
 800efc6:	4601      	mov	r1, r0
 800efc8:	428a      	cmp	r2, r1
 800efca:	d100      	bne.n	800efce <memmove+0x2a>
 800efcc:	bd10      	pop	{r4, pc}
 800efce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800efd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800efd6:	e7f7      	b.n	800efc8 <memmove+0x24>

0800efd8 <_realloc_r>:
 800efd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efdc:	4680      	mov	r8, r0
 800efde:	4614      	mov	r4, r2
 800efe0:	460e      	mov	r6, r1
 800efe2:	b921      	cbnz	r1, 800efee <_realloc_r+0x16>
 800efe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efe8:	4611      	mov	r1, r2
 800efea:	f7ff bc39 	b.w	800e860 <_malloc_r>
 800efee:	b92a      	cbnz	r2, 800effc <_realloc_r+0x24>
 800eff0:	f7ff fbca 	bl	800e788 <_free_r>
 800eff4:	4625      	mov	r5, r4
 800eff6:	4628      	mov	r0, r5
 800eff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800effc:	f000 f81b 	bl	800f036 <_malloc_usable_size_r>
 800f000:	4284      	cmp	r4, r0
 800f002:	4607      	mov	r7, r0
 800f004:	d802      	bhi.n	800f00c <_realloc_r+0x34>
 800f006:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f00a:	d812      	bhi.n	800f032 <_realloc_r+0x5a>
 800f00c:	4621      	mov	r1, r4
 800f00e:	4640      	mov	r0, r8
 800f010:	f7ff fc26 	bl	800e860 <_malloc_r>
 800f014:	4605      	mov	r5, r0
 800f016:	2800      	cmp	r0, #0
 800f018:	d0ed      	beq.n	800eff6 <_realloc_r+0x1e>
 800f01a:	42bc      	cmp	r4, r7
 800f01c:	4622      	mov	r2, r4
 800f01e:	4631      	mov	r1, r6
 800f020:	bf28      	it	cs
 800f022:	463a      	movcs	r2, r7
 800f024:	f7ff fb9a 	bl	800e75c <memcpy>
 800f028:	4631      	mov	r1, r6
 800f02a:	4640      	mov	r0, r8
 800f02c:	f7ff fbac 	bl	800e788 <_free_r>
 800f030:	e7e1      	b.n	800eff6 <_realloc_r+0x1e>
 800f032:	4635      	mov	r5, r6
 800f034:	e7df      	b.n	800eff6 <_realloc_r+0x1e>

0800f036 <_malloc_usable_size_r>:
 800f036:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f03a:	1f18      	subs	r0, r3, #4
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	bfbc      	itt	lt
 800f040:	580b      	ldrlt	r3, [r1, r0]
 800f042:	18c0      	addlt	r0, r0, r3
 800f044:	4770      	bx	lr
	...

0800f048 <_init>:
 800f048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f04a:	bf00      	nop
 800f04c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f04e:	bc08      	pop	{r3}
 800f050:	469e      	mov	lr, r3
 800f052:	4770      	bx	lr

0800f054 <_fini>:
 800f054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f056:	bf00      	nop
 800f058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f05a:	bc08      	pop	{r3}
 800f05c:	469e      	mov	lr, r3
 800f05e:	4770      	bx	lr
