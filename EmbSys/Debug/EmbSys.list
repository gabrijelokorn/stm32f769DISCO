
EmbSys.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb90  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e14  0800cd90  0800cd90  0001cd90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eba4  0800eba4  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800eba4  0800eba4  0001eba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ebac  0800ebac  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ebac  0800ebac  0001ebac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ebb0  0800ebb0  0001ebb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800ebb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000097d0  200000b0  0800ec64  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009880  0800ec64  00029880  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035e68  00000000  00000000  000200de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ce2  00000000  00000000  00055f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002680  00000000  00000000  0005bc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023e8  00000000  00000000  0005e2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a650  00000000  00000000  00060690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003065e  00000000  00000000  0009ace0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001571f0  00000000  00000000  000cb33e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0022252e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a740  00000000  00000000  00222580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000b0 	.word	0x200000b0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800cd78 	.word	0x0800cd78

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000b4 	.word	0x200000b4
 800023c:	0800cd78 	.word	0x0800cd78

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr

080005f2 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005f2:	b480      	push	{r7}
 80005f4:	b083      	sub	sp, #12
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
 80005fa:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005fc:	bf00      	nop
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
	...

08000618 <integer_length>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int integer_length(int num) {
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
	int result = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
	if (num == 0) {
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d10c      	bne.n	8000644 <integer_length+0x2c>
		return 1;
 800062a:	2301      	movs	r3, #1
 800062c:	e00e      	b.n	800064c <integer_length+0x34>
	}

	while (num > 0) {
		num /= 10;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4a09      	ldr	r2, [pc, #36]	; (8000658 <integer_length+0x40>)
 8000632:	fb82 1203 	smull	r1, r2, r2, r3
 8000636:	1092      	asrs	r2, r2, #2
 8000638:	17db      	asrs	r3, r3, #31
 800063a:	1ad3      	subs	r3, r2, r3
 800063c:	607b      	str	r3, [r7, #4]
		result++;
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	3301      	adds	r3, #1
 8000642:	60fb      	str	r3, [r7, #12]
	while (num > 0) {
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b00      	cmp	r3, #0
 8000648:	dcf1      	bgt.n	800062e <integer_length+0x16>
	}
	return result;
 800064a:	68fb      	ldr	r3, [r7, #12]
}
 800064c:	4618      	mov	r0, r3
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	66666667 	.word	0x66666667

0800065c <fibonnaci_f>:

int fibonnaci_f (int num) {
 800065c:	b480      	push	{r7}
 800065e:	b089      	sub	sp, #36	; 0x24
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]

	int result = 1;
 8000664:	2301      	movs	r3, #1
 8000666:	61fb      	str	r3, [r7, #28]
	if (num <= 0) {
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b00      	cmp	r3, #0
 800066c:	dc02      	bgt.n	8000674 <fibonnaci_f+0x18>
		result = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
 8000672:	e01d      	b.n	80006b0 <fibonnaci_f+0x54>
	} else if (num == 1) {
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d102      	bne.n	8000680 <fibonnaci_f+0x24>
		result = 1;
 800067a:	2301      	movs	r3, #1
 800067c:	61fb      	str	r3, [r7, #28]
 800067e:	e017      	b.n	80006b0 <fibonnaci_f+0x54>
	} else {
		int prev = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	61bb      	str	r3, [r7, #24]
		int curr = 1;
 8000684:	2301      	movs	r3, #1
 8000686:	617b      	str	r3, [r7, #20]
		int next;
		int i;

		for (i = 2; i <= num; i++) {
 8000688:	2302      	movs	r3, #2
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	e00a      	b.n	80006a4 <fibonnaci_f+0x48>
			next = prev + curr;
 800068e:	69ba      	ldr	r2, [r7, #24]
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	4413      	add	r3, r2
 8000694:	60fb      	str	r3, [r7, #12]
			prev = curr;
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	61bb      	str	r3, [r7, #24]
			curr = next;
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	617b      	str	r3, [r7, #20]
		for (i = 2; i <= num; i++) {
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	3301      	adds	r3, #1
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693a      	ldr	r2, [r7, #16]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	ddf0      	ble.n	800068e <fibonnaci_f+0x32>
		}
		result = curr;
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	61fb      	str	r3, [r7, #28]
	}
	return result;
 80006b0:	69fb      	ldr	r3, [r7, #28]
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3724      	adds	r7, #36	; 0x24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
	...

080006c0 <fibonacci_t>:

void fibonacci_t (void* args) {
 80006c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80006c4:	b087      	sub	sp, #28
 80006c6:	af00      	add	r7, sp, #0
 80006c8:	6078      	str	r0, [r7, #4]

	while (1) {
 80006ca:	466b      	mov	r3, sp
 80006cc:	461e      	mov	r6, r3
		fibonnaci_f(20);
 80006ce:	2014      	movs	r0, #20
 80006d0:	f7ff ffc4 	bl	800065c <fibonnaci_f>

		int stack_space = osThreadGetStackSpace(fibonacci_taskHandle);
 80006d4:	4b20      	ldr	r3, [pc, #128]	; (8000758 <fibonacci_t+0x98>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4618      	mov	r0, r3
 80006da:	f009 f929 	bl	8009930 <osThreadGetStackSpace>
 80006de:	4603      	mov	r3, r0
 80006e0:	617b      	str	r3, [r7, #20]
		int stack_space_strlen = integer_length(stack_space);
 80006e2:	6978      	ldr	r0, [r7, #20]
 80006e4:	f7ff ff98 	bl	8000618 <integer_length>
 80006e8:	6138      	str	r0, [r7, #16]
		char stack_size_str[stack_space_strlen];
 80006ea:	6939      	ldr	r1, [r7, #16]
 80006ec:	1e4b      	subs	r3, r1, #1
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	460a      	mov	r2, r1
 80006f2:	2300      	movs	r3, #0
 80006f4:	4690      	mov	r8, r2
 80006f6:	4699      	mov	r9, r3
 80006f8:	f04f 0200 	mov.w	r2, #0
 80006fc:	f04f 0300 	mov.w	r3, #0
 8000700:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000704:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000708:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800070c:	460a      	mov	r2, r1
 800070e:	2300      	movs	r3, #0
 8000710:	4614      	mov	r4, r2
 8000712:	461d      	mov	r5, r3
 8000714:	f04f 0200 	mov.w	r2, #0
 8000718:	f04f 0300 	mov.w	r3, #0
 800071c:	00eb      	lsls	r3, r5, #3
 800071e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000722:	00e2      	lsls	r2, r4, #3
 8000724:	460b      	mov	r3, r1
 8000726:	3307      	adds	r3, #7
 8000728:	08db      	lsrs	r3, r3, #3
 800072a:	00db      	lsls	r3, r3, #3
 800072c:	ebad 0d03 	sub.w	sp, sp, r3
 8000730:	466b      	mov	r3, sp
 8000732:	3300      	adds	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
		sprintf(stack_size_str, "%d", stack_space);
 8000736:	697a      	ldr	r2, [r7, #20]
 8000738:	4908      	ldr	r1, [pc, #32]	; (800075c <fibonacci_t+0x9c>)
 800073a:	68b8      	ldr	r0, [r7, #8]
 800073c:	f00b febc 	bl	800c4b8 <siprintf>

		BSP_LCD_DisplayStringAt(50, 100, (uint8_t*) stack_size_str, CENTER_MODE);
 8000740:	2301      	movs	r3, #1
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	2164      	movs	r1, #100	; 0x64
 8000746:	2032      	movs	r0, #50	; 0x32
 8000748:	f001 feea 	bl	8002520 <BSP_LCD_DisplayStringAt>
		osDelay(50);
 800074c:	2032      	movs	r0, #50	; 0x32
 800074e:	f009 f943 	bl	80099d8 <osDelay>
 8000752:	46b5      	mov	sp, r6
	while (1) {
 8000754:	e7b9      	b.n	80006ca <fibonacci_t+0xa>
 8000756:	bf00      	nop
 8000758:	20000734 	.word	0x20000734
 800075c:	0800cdb0 	.word	0x0800cdb0

08000760 <game_of_life_t>:
	}
}

void game_of_life_t (void* args) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]

	while(1) {

		osDelay(50);
 8000768:	2032      	movs	r0, #50	; 0x32
 800076a:	f009 f935 	bl	80099d8 <osDelay>
 800076e:	e7fb      	b.n	8000768 <game_of_life_t+0x8>

08000770 <wireworld_t>:
	}
}

void wireworld_t (void* args) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]

	while(1) {

		osDelay(50);
 8000778:	2032      	movs	r0, #50	; 0x32
 800077a:	f009 f92d 	bl	80099d8 <osDelay>
 800077e:	e7fb      	b.n	8000778 <wireworld_t+0x8>

08000780 <LCD_manager_t>:
	}
}

void LCD_manager_t (void* args) {
 8000780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000784:	b091      	sub	sp, #68	; 0x44
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
	char Fibonacci_str[] = "Fibonacci";
 800078a:	4a89      	ldr	r2, [pc, #548]	; (80009b0 <LCD_manager_t+0x230>)
 800078c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000790:	ca07      	ldmia	r2, {r0, r1, r2}
 8000792:	c303      	stmia	r3!, {r0, r1}
 8000794:	801a      	strh	r2, [r3, #0]
	char Game_of_life_str[] = "Game Of Life";
 8000796:	4b87      	ldr	r3, [pc, #540]	; (80009b4 <LCD_manager_t+0x234>)
 8000798:	f107 0614 	add.w	r6, r7, #20
 800079c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800079e:	c607      	stmia	r6!, {r0, r1, r2}
 80007a0:	7033      	strb	r3, [r6, #0]
	char Worldwire_str[] = "Worldwire";
 80007a2:	4a85      	ldr	r2, [pc, #532]	; (80009b8 <LCD_manager_t+0x238>)
 80007a4:	f107 0308 	add.w	r3, r7, #8
 80007a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80007aa:	c303      	stmia	r3!, {r0, r1}
 80007ac:	801a      	strh	r2, [r3, #0]

	BSP_LCD_DisplayStringAt(50, 20, (uint8_t*) Fibonacci_str, LEFT_MODE);
 80007ae:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80007b2:	2303      	movs	r3, #3
 80007b4:	2114      	movs	r1, #20
 80007b6:	2032      	movs	r0, #50	; 0x32
 80007b8:	f001 feb2 	bl	8002520 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(300, 20, (uint8_t*) Game_of_life_str, LEFT_MODE);
 80007bc:	f107 0214 	add.w	r2, r7, #20
 80007c0:	2303      	movs	r3, #3
 80007c2:	2114      	movs	r1, #20
 80007c4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007c8:	f001 feaa 	bl	8002520 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(580, 20, (uint8_t*) Worldwire_str, LEFT_MODE);
 80007cc:	f107 0208 	add.w	r2, r7, #8
 80007d0:	2303      	movs	r3, #3
 80007d2:	2114      	movs	r1, #20
 80007d4:	f44f 7011 	mov.w	r0, #580	; 0x244
 80007d8:	f001 fea2 	bl	8002520 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80007dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007e0:	f001 fde6 	bl	80023b0 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80007e4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80007e8:	f001 fdfa 	bl	80023e0 <BSP_LCD_SetBackColor>
	if (APP_PAGE == FIB) {
 80007ec:	4b73      	ldr	r3, [pc, #460]	; (80009bc <LCD_manager_t+0x23c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d107      	bne.n	8000804 <LCD_manager_t+0x84>
		BSP_LCD_DisplayStringAt(50, 20, (uint8_t*) Fibonacci_str, LEFT_MODE);
 80007f4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80007f8:	2303      	movs	r3, #3
 80007fa:	2114      	movs	r1, #20
 80007fc:	2032      	movs	r0, #50	; 0x32
 80007fe:	f001 fe8f 	bl	8002520 <BSP_LCD_DisplayStringAt>
 8000802:	e014      	b.n	800082e <LCD_manager_t+0xae>
	} else if (APP_PAGE == GOL) {
 8000804:	4b6d      	ldr	r3, [pc, #436]	; (80009bc <LCD_manager_t+0x23c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d108      	bne.n	800081e <LCD_manager_t+0x9e>
		BSP_LCD_DisplayStringAt(300, 20, (uint8_t*) Game_of_life_str, LEFT_MODE);
 800080c:	f107 0214 	add.w	r2, r7, #20
 8000810:	2303      	movs	r3, #3
 8000812:	2114      	movs	r1, #20
 8000814:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000818:	f001 fe82 	bl	8002520 <BSP_LCD_DisplayStringAt>
 800081c:	e007      	b.n	800082e <LCD_manager_t+0xae>
	} else {
		BSP_LCD_DisplayStringAt(580, 20, (uint8_t*) Worldwire_str, LEFT_MODE);
 800081e:	f107 0208 	add.w	r2, r7, #8
 8000822:	2303      	movs	r3, #3
 8000824:	2114      	movs	r1, #20
 8000826:	f44f 7011 	mov.w	r0, #580	; 0x244
 800082a:	f001 fe79 	bl	8002520 <BSP_LCD_DisplayStringAt>
	}

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800082e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000832:	f001 fdbd 	bl	80023b0 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000836:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800083a:	f001 fdd1 	bl	80023e0 <BSP_LCD_SetBackColor>

	while(1) {
 800083e:	466b      	mov	r3, sp
 8000840:	461e      	mov	r6, r3
		int number_of_active_threads = osThreadGetCount() - 2;
 8000842:	f009 f8a3 	bl	800998c <osThreadGetCount>
 8000846:	4603      	mov	r3, r0
 8000848:	3b02      	subs	r3, #2
 800084a:	63fb      	str	r3, [r7, #60]	; 0x3c
		int number_of_active_threads_strlen = integer_length(number_of_active_threads);
 800084c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800084e:	f7ff fee3 	bl	8000618 <integer_length>
 8000852:	63b8      	str	r0, [r7, #56]	; 0x38
		char number_of_active_threads_str[number_of_active_threads_strlen];
 8000854:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000856:	1e4b      	subs	r3, r1, #1
 8000858:	637b      	str	r3, [r7, #52]	; 0x34
 800085a:	460a      	mov	r2, r1
 800085c:	2300      	movs	r3, #0
 800085e:	4614      	mov	r4, r2
 8000860:	461d      	mov	r5, r3
 8000862:	f04f 0200 	mov.w	r2, #0
 8000866:	f04f 0300 	mov.w	r3, #0
 800086a:	00eb      	lsls	r3, r5, #3
 800086c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000870:	00e2      	lsls	r2, r4, #3
 8000872:	460a      	mov	r2, r1
 8000874:	2300      	movs	r3, #0
 8000876:	4690      	mov	r8, r2
 8000878:	4699      	mov	r9, r3
 800087a:	f04f 0200 	mov.w	r2, #0
 800087e:	f04f 0300 	mov.w	r3, #0
 8000882:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000886:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800088a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800088e:	460b      	mov	r3, r1
 8000890:	3307      	adds	r3, #7
 8000892:	08db      	lsrs	r3, r3, #3
 8000894:	00db      	lsls	r3, r3, #3
 8000896:	ebad 0d03 	sub.w	sp, sp, r3
 800089a:	466b      	mov	r3, sp
 800089c:	3300      	adds	r3, #0
 800089e:	633b      	str	r3, [r7, #48]	; 0x30
		sprintf(number_of_active_threads_str, "%d", number_of_active_threads);
 80008a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80008a2:	4947      	ldr	r1, [pc, #284]	; (80009c0 <LCD_manager_t+0x240>)
 80008a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80008a6:	f00b fe07 	bl	800c4b8 <siprintf>
		BSP_LCD_DisplayStringAt(10, 100, (uint8_t*) number_of_active_threads_str, LEFT_MODE);
 80008aa:	2303      	movs	r3, #3
 80008ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80008ae:	2164      	movs	r1, #100	; 0x64
 80008b0:	200a      	movs	r0, #10
 80008b2:	f001 fe35 	bl	8002520 <BSP_LCD_DisplayStringAt>

		BSP_TS_GetState(&TS_State);
 80008b6:	4843      	ldr	r0, [pc, #268]	; (80009c4 <LCD_manager_t+0x244>)
 80008b8:	f002 fb76 	bl	8002fa8 <BSP_TS_GetState>
		if (TS_State.touchDetected > 0) {
 80008bc:	4b41      	ldr	r3, [pc, #260]	; (80009c4 <LCD_manager_t+0x244>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d01d      	beq.n	8000900 <LCD_manager_t+0x180>
			if (TS_State.touchY[0] < 75) {
 80008c4:	4b3f      	ldr	r3, [pc, #252]	; (80009c4 <LCD_manager_t+0x244>)
 80008c6:	88db      	ldrh	r3, [r3, #6]
 80008c8:	2b4a      	cmp	r3, #74	; 0x4a
 80008ca:	d819      	bhi.n	8000900 <LCD_manager_t+0x180>
				if (TS_State.touchX[0] < 267) {
 80008cc:	4b3d      	ldr	r3, [pc, #244]	; (80009c4 <LCD_manager_t+0x244>)
 80008ce:	885b      	ldrh	r3, [r3, #2]
 80008d0:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 80008d4:	d803      	bhi.n	80008de <LCD_manager_t+0x15e>
					APP_PAGE = FIB;
 80008d6:	4b39      	ldr	r3, [pc, #228]	; (80009bc <LCD_manager_t+0x23c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	e010      	b.n	8000900 <LCD_manager_t+0x180>
				} else if (TS_State.touchX[0] > 267 && TS_State.touchX[0] < 533) {
 80008de:	4b39      	ldr	r3, [pc, #228]	; (80009c4 <LCD_manager_t+0x244>)
 80008e0:	885b      	ldrh	r3, [r3, #2]
 80008e2:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 80008e6:	d308      	bcc.n	80008fa <LCD_manager_t+0x17a>
 80008e8:	4b36      	ldr	r3, [pc, #216]	; (80009c4 <LCD_manager_t+0x244>)
 80008ea:	885b      	ldrh	r3, [r3, #2]
 80008ec:	f5b3 7f05 	cmp.w	r3, #532	; 0x214
 80008f0:	d803      	bhi.n	80008fa <LCD_manager_t+0x17a>
					APP_PAGE = GOL;
 80008f2:	4b32      	ldr	r3, [pc, #200]	; (80009bc <LCD_manager_t+0x23c>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	e002      	b.n	8000900 <LCD_manager_t+0x180>
				} else {
					APP_PAGE = WW;
 80008fa:	4b30      	ldr	r3, [pc, #192]	; (80009bc <LCD_manager_t+0x23c>)
 80008fc:	2202      	movs	r2, #2
 80008fe:	601a      	str	r2, [r3, #0]
				}
			}
		}

		if (prev_page != APP_PAGE) {
 8000900:	4b31      	ldr	r3, [pc, #196]	; (80009c8 <LCD_manager_t+0x248>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	4b2d      	ldr	r3, [pc, #180]	; (80009bc <LCD_manager_t+0x23c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	429a      	cmp	r2, r3
 800090a:	d04b      	beq.n	80009a4 <LCD_manager_t+0x224>
			BSP_LCD_DisplayStringAt(50, 20, (uint8_t*) Fibonacci_str, LEFT_MODE);
 800090c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000910:	2303      	movs	r3, #3
 8000912:	2114      	movs	r1, #20
 8000914:	2032      	movs	r0, #50	; 0x32
 8000916:	f001 fe03 	bl	8002520 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(300, 20, (uint8_t*) Game_of_life_str, LEFT_MODE);
 800091a:	f107 0214 	add.w	r2, r7, #20
 800091e:	2303      	movs	r3, #3
 8000920:	2114      	movs	r1, #20
 8000922:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000926:	f001 fdfb 	bl	8002520 <BSP_LCD_DisplayStringAt>
			BSP_LCD_DisplayStringAt(580, 20, (uint8_t*) Worldwire_str, LEFT_MODE);
 800092a:	f107 0208 	add.w	r2, r7, #8
 800092e:	2303      	movs	r3, #3
 8000930:	2114      	movs	r1, #20
 8000932:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000936:	f001 fdf3 	bl	8002520 <BSP_LCD_DisplayStringAt>

			BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800093a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800093e:	f001 fd37 	bl	80023b0 <BSP_LCD_SetTextColor>
			BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000942:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000946:	f001 fd4b 	bl	80023e0 <BSP_LCD_SetBackColor>
			if (APP_PAGE == FIB) {
 800094a:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <LCD_manager_t+0x23c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d107      	bne.n	8000962 <LCD_manager_t+0x1e2>
				BSP_LCD_DisplayStringAt(50, 20, (uint8_t*) Fibonacci_str, LEFT_MODE);
 8000952:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000956:	2303      	movs	r3, #3
 8000958:	2114      	movs	r1, #20
 800095a:	2032      	movs	r0, #50	; 0x32
 800095c:	f001 fde0 	bl	8002520 <BSP_LCD_DisplayStringAt>
 8000960:	e014      	b.n	800098c <LCD_manager_t+0x20c>
			} else if (APP_PAGE == GOL) {
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <LCD_manager_t+0x23c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d108      	bne.n	800097c <LCD_manager_t+0x1fc>
				BSP_LCD_DisplayStringAt(300, 20, (uint8_t*) Game_of_life_str, LEFT_MODE);
 800096a:	f107 0214 	add.w	r2, r7, #20
 800096e:	2303      	movs	r3, #3
 8000970:	2114      	movs	r1, #20
 8000972:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000976:	f001 fdd3 	bl	8002520 <BSP_LCD_DisplayStringAt>
 800097a:	e007      	b.n	800098c <LCD_manager_t+0x20c>
			} else {
				BSP_LCD_DisplayStringAt(580, 20, (uint8_t*) Worldwire_str, LEFT_MODE);
 800097c:	f107 0208 	add.w	r2, r7, #8
 8000980:	2303      	movs	r3, #3
 8000982:	2114      	movs	r1, #20
 8000984:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000988:	f001 fdca 	bl	8002520 <BSP_LCD_DisplayStringAt>
			}
			prev_page = APP_PAGE;
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <LCD_manager_t+0x23c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a0d      	ldr	r2, [pc, #52]	; (80009c8 <LCD_manager_t+0x248>)
 8000992:	6013      	str	r3, [r2, #0]

			BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000994:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000998:	f001 fd0a 	bl	80023b0 <BSP_LCD_SetTextColor>
			BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800099c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009a0:	f001 fd1e 	bl	80023e0 <BSP_LCD_SetBackColor>
		}

		osDelay(50);
 80009a4:	2032      	movs	r0, #50	; 0x32
 80009a6:	f009 f817 	bl	80099d8 <osDelay>
 80009aa:	46b5      	mov	sp, r6
	while(1) {
 80009ac:	e747      	b.n	800083e <LCD_manager_t+0xbe>
 80009ae:	bf00      	nop
 80009b0:	0800cdb4 	.word	0x0800cdb4
 80009b4:	0800cdc0 	.word	0x0800cdc0
 80009b8:	0800cdd0 	.word	0x0800cdd0
 80009bc:	20000754 	.word	0x20000754
 80009c0:	0800cdb0 	.word	0x0800cdb0
 80009c4:	20000748 	.word	0x20000748
 80009c8:	20000758 	.word	0x20000758

080009cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009cc:	b590      	push	{r4, r7, lr}
 80009ce:	b087      	sub	sp, #28
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	extern int APP_PAGE;
	APP_PAGE = FIB;
 80009d2:	4b49      	ldr	r3, [pc, #292]	; (8000af8 <main+0x12c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
	prev_page = APP_PAGE;
 80009d8:	4b47      	ldr	r3, [pc, #284]	; (8000af8 <main+0x12c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a47      	ldr	r2, [pc, #284]	; (8000afc <main+0x130>)
 80009de:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e0:	f002 fc1c 	bl	800321c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e4:	f000 f8aa 	bl	8000b3c <SystemClock_Config>

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

	GPIO_InitTypeDef gumb_a;
	gumb_a.Pin = GPIO_PIN_0;
 80009e8:	2301      	movs	r3, #1
 80009ea:	607b      	str	r3, [r7, #4]
	gumb_a.Mode = GPIO_MODE_IT_RISING_FALLING;
 80009ec:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80009f0:	60bb      	str	r3, [r7, #8]
	gumb_a.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
	gumb_a.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &gumb_a);
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	4619      	mov	r1, r3
 80009fe:	4840      	ldr	r0, [pc, #256]	; (8000b00 <main+0x134>)
 8000a00:	f004 f99a 	bl	8004d38 <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 2);
 8000a04:	2202      	movs	r2, #2
 8000a06:	2101      	movs	r1, #1
 8000a08:	2006      	movs	r0, #6
 8000a0a:	f002 fe31 	bl	8003670 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a0e:	2006      	movs	r0, #6
 8000a10:	f002 fe4a 	bl	80036a8 <HAL_NVIC_EnableIRQ>

  BSP_LCD_Init();
 8000a14:	f001 facf 	bl	8001fb6 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000a18:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f001 fc67 	bl	80022f0 <BSP_LCD_LayerDefaultInit>

  ts_status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000a22:	f001 fc4d 	bl	80022c0 <BSP_LCD_GetXSize>
 8000a26:	4603      	mov	r3, r0
 8000a28:	b29c      	uxth	r4, r3
 8000a2a:	f001 fc55 	bl	80022d8 <BSP_LCD_GetYSize>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	4619      	mov	r1, r3
 8000a34:	4620      	mov	r0, r4
 8000a36:	f002 fa25 	bl	8002e84 <BSP_TS_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b31      	ldr	r3, [pc, #196]	; (8000b04 <main+0x138>)
 8000a40:	601a      	str	r2, [r3, #0]
  while(ts_status != TS_OK);
 8000a42:	bf00      	nop
 8000a44:	4b2f      	ldr	r3, [pc, #188]	; (8000b04 <main+0x138>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d1fb      	bne.n	8000a44 <main+0x78>

  ts_status = BSP_TS_ITConfig();
 8000a4c:	f002 fa7a 	bl	8002f44 <BSP_TS_ITConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	461a      	mov	r2, r3
 8000a54:	4b2b      	ldr	r3, [pc, #172]	; (8000b04 <main+0x138>)
 8000a56:	601a      	str	r2, [r3, #0]
  while(ts_status != TS_OK);
 8000a58:	bf00      	nop
 8000a5a:	4b2a      	ldr	r3, [pc, #168]	; (8000b04 <main+0x138>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d1fb      	bne.n	8000a5a <main+0x8e>

  BSP_TS_INT_MspInit();
 8000a62:	f002 fbb5 	bl	80031d0 <BSP_TS_INT_MspInit>

	BSP_LCD_Clear(LCD_COLOR_DARKMAGENTA);
 8000a66:	4828      	ldr	r0, [pc, #160]	; (8000b08 <main+0x13c>)
 8000a68:	f001 fcee 	bl	8002448 <BSP_LCD_Clear>
	BSP_LCD_DrawVLine(267, 0, 75);
 8000a6c:	224b      	movs	r2, #75	; 0x4b
 8000a6e:	2100      	movs	r1, #0
 8000a70:	f240 100b 	movw	r0, #267	; 0x10b
 8000a74:	f001 fe5a 	bl	800272c <BSP_LCD_DrawVLine>
	BSP_LCD_DrawVLine(534, 0, 75);
 8000a78:	224b      	movs	r2, #75	; 0x4b
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	f240 2016 	movw	r0, #534	; 0x216
 8000a80:	f001 fe54 	bl	800272c <BSP_LCD_DrawVLine>

	BSP_LCD_DrawHLine(0, 75, BSP_LCD_GetXSize());
 8000a84:	f001 fc1c 	bl	80022c0 <BSP_LCD_GetXSize>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	214b      	movs	r1, #75	; 0x4b
 8000a90:	2000      	movs	r0, #0
 8000a92:	f001 fe0d 	bl	80026b0 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawVLine(100, 75, BSP_LCD_GetYSize() - 75);
 8000a96:	f001 fc1f 	bl	80022d8 <BSP_LCD_GetYSize>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	3b4b      	subs	r3, #75	; 0x4b
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	214b      	movs	r1, #75	; 0x4b
 8000aa6:	2064      	movs	r0, #100	; 0x64
 8000aa8:	f001 fe40 	bl	800272c <BSP_LCD_DrawVLine>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000aac:	f008 fe30 	bl	8009710 <osKernelInitialize>
  /* creation of defaultTask */
//  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	fibonacci_taskHandle = osThreadNew(fibonacci_t, NULL, &fibonacci_Task_attributes);
 8000ab0:	4a16      	ldr	r2, [pc, #88]	; (8000b0c <main+0x140>)
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4816      	ldr	r0, [pc, #88]	; (8000b10 <main+0x144>)
 8000ab6:	f008 fe95 	bl	80097e4 <osThreadNew>
 8000aba:	4603      	mov	r3, r0
 8000abc:	4a15      	ldr	r2, [pc, #84]	; (8000b14 <main+0x148>)
 8000abe:	6013      	str	r3, [r2, #0]
	game_of_life_taskHandle = osThreadNew(game_of_life_t, NULL, &game_of_life_Task_attributes);
 8000ac0:	4a15      	ldr	r2, [pc, #84]	; (8000b18 <main+0x14c>)
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4815      	ldr	r0, [pc, #84]	; (8000b1c <main+0x150>)
 8000ac6:	f008 fe8d 	bl	80097e4 <osThreadNew>
 8000aca:	4603      	mov	r3, r0
 8000acc:	4a14      	ldr	r2, [pc, #80]	; (8000b20 <main+0x154>)
 8000ace:	6013      	str	r3, [r2, #0]
	wirewolrd_taskHandle = osThreadNew(wireworld_t, NULL, &wirewolrd_Task_attributes);
 8000ad0:	4a14      	ldr	r2, [pc, #80]	; (8000b24 <main+0x158>)
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4814      	ldr	r0, [pc, #80]	; (8000b28 <main+0x15c>)
 8000ad6:	f008 fe85 	bl	80097e4 <osThreadNew>
 8000ada:	4603      	mov	r3, r0
 8000adc:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <main+0x160>)
 8000ade:	6013      	str	r3, [r2, #0]
	LCD_manager_taskHandle = osThreadNew(LCD_manager_t, NULL, &LCD_manager_Task_attributes);
 8000ae0:	4a13      	ldr	r2, [pc, #76]	; (8000b30 <main+0x164>)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4813      	ldr	r0, [pc, #76]	; (8000b34 <main+0x168>)
 8000ae6:	f008 fe7d 	bl	80097e4 <osThreadNew>
 8000aea:	4603      	mov	r3, r0
 8000aec:	4a12      	ldr	r2, [pc, #72]	; (8000b38 <main+0x16c>)
 8000aee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000af0:	f008 fe42 	bl	8009778 <osKernelStart>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <main+0x128>
 8000af6:	bf00      	nop
 8000af8:	20000754 	.word	0x20000754
 8000afc:	20000758 	.word	0x20000758
 8000b00:	40020000 	.word	0x40020000
 8000b04:	20000744 	.word	0x20000744
 8000b08:	ff800080 	.word	0xff800080
 8000b0c:	0800cdf4 	.word	0x0800cdf4
 8000b10:	080006c1 	.word	0x080006c1
 8000b14:	20000734 	.word	0x20000734
 8000b18:	0800ce18 	.word	0x0800ce18
 8000b1c:	08000761 	.word	0x08000761
 8000b20:	20000738 	.word	0x20000738
 8000b24:	0800ce3c 	.word	0x0800ce3c
 8000b28:	08000771 	.word	0x08000771
 8000b2c:	2000073c 	.word	0x2000073c
 8000b30:	0800ce60 	.word	0x0800ce60
 8000b34:	08000781 	.word	0x08000781
 8000b38:	20000740 	.word	0x20000740

08000b3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b094      	sub	sp, #80	; 0x50
 8000b40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b42:	f107 031c 	add.w	r3, r7, #28
 8000b46:	2234      	movs	r2, #52	; 0x34
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f00b fcac 	bl	800c4a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b50:	f107 0308 	add.w	r3, r7, #8
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b60:	f006 fc6a 	bl	8007438 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b64:	4b31      	ldr	r3, [pc, #196]	; (8000c2c <SystemClock_Config+0xf0>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	4a30      	ldr	r2, [pc, #192]	; (8000c2c <SystemClock_Config+0xf0>)
 8000b6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b70:	4b2e      	ldr	r3, [pc, #184]	; (8000c2c <SystemClock_Config+0xf0>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b7c:	4b2c      	ldr	r3, [pc, #176]	; (8000c30 <SystemClock_Config+0xf4>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a2b      	ldr	r2, [pc, #172]	; (8000c30 <SystemClock_Config+0xf4>)
 8000b82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b86:	6013      	str	r3, [r2, #0]
 8000b88:	4b29      	ldr	r3, [pc, #164]	; (8000c30 <SystemClock_Config+0xf4>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b90:	603b      	str	r3, [r7, #0]
 8000b92:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000b94:	230b      	movs	r3, #11
 8000b96:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b9c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba2:	2310      	movs	r3, #16
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000baa:	2302      	movs	r3, #2
 8000bac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bb2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000bb4:	2319      	movs	r3, #25
 8000bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000bb8:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000bbc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f006 fc92 	bl	80074f8 <HAL_RCC_OscConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000bda:	f000 f83d 	bl	8000c58 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000bde:	f006 fc3b 	bl	8007458 <HAL_PWREx_EnableOverDrive>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000be8:	f000 f836 	bl	8000c58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bec:	230f      	movs	r3, #15
 8000bee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bf8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bfc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c02:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000c04:	f107 0308 	add.w	r3, r7, #8
 8000c08:	2107      	movs	r1, #7
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f006 ff22 	bl	8007a54 <HAL_RCC_ClockConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8000c16:	f000 f81f 	bl	8000c58 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f007 f804 	bl	8007c2c <HAL_RCC_MCOConfig>
}
 8000c24:	bf00      	nop
 8000c26:	3750      	adds	r7, #80	; 0x50
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40007000 	.word	0x40007000

08000c34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d101      	bne.n	8000c4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c46:	f002 faf7 	bl	8003238 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40001000 	.word	0x40001000

08000c58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c5c:	b672      	cpsid	i
}
 8000c5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <Error_Handler+0x8>
	...

08000c64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6e:	4a10      	ldr	r2, [pc, #64]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c74:	6413      	str	r3, [r2, #64]	; 0x40
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <HAL_MspInit+0x4c>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	210f      	movs	r1, #15
 8000c9e:	f06f 0001 	mvn.w	r0, #1
 8000ca2:	f002 fce5 	bl	8003670 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <HAL_DMA2D_MspInit+0x44>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d113      	bne.n	8000cee <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <HAL_DMA2D_MspInit+0x48>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a0c      	ldr	r2, [pc, #48]	; (8000cfc <HAL_DMA2D_MspInit+0x48>)
 8000ccc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <HAL_DMA2D_MspInit+0x48>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2105      	movs	r1, #5
 8000ce2:	205a      	movs	r0, #90	; 0x5a
 8000ce4:	f002 fcc4 	bl	8003670 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000ce8:	205a      	movs	r0, #90	; 0x5a
 8000cea:	f002 fcdd 	bl	80036a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	4002b000 	.word	0x4002b000
 8000cfc:	40023800 	.word	0x40023800

08000d00 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08a      	sub	sp, #40	; 0x28
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a1b      	ldr	r2, [pc, #108]	; (8000d8c <HAL_DSI_MspInit+0x8c>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d12f      	bne.n	8000d82 <HAL_DSI_MspInit+0x82>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8000d22:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <HAL_DSI_MspInit+0x90>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	4a1a      	ldr	r2, [pc, #104]	; (8000d90 <HAL_DSI_MspInit+0x90>)
 8000d28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <HAL_DSI_MspInit+0x90>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <HAL_DSI_MspInit+0x90>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a14      	ldr	r2, [pc, #80]	; (8000d90 <HAL_DSI_MspInit+0x90>)
 8000d40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_DSI_MspInit+0x90>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSIHOST_TE_Pin;
 8000d52:	2304      	movs	r3, #4
 8000d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8000d62:	230d      	movs	r3, #13
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4809      	ldr	r0, [pc, #36]	; (8000d94 <HAL_DSI_MspInit+0x94>)
 8000d6e:	f003 ffe3 	bl	8004d38 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2105      	movs	r1, #5
 8000d76:	2062      	movs	r0, #98	; 0x62
 8000d78:	f002 fc7a 	bl	8003670 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8000d7c:	2062      	movs	r0, #98	; 0x62
 8000d7e:	f002 fc93 	bl	80036a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 8000d82:	bf00      	nop
 8000d84:	3728      	adds	r7, #40	; 0x28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40016c00 	.word	0x40016c00
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40022400 	.word	0x40022400

08000d98 <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a09      	ldr	r2, [pc, #36]	; (8000dcc <HAL_DSI_MspDeInit+0x34>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d10c      	bne.n	8000dc4 <HAL_DSI_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <HAL_DSI_MspDeInit+0x38>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <HAL_DSI_MspDeInit+0x38>)
 8000db0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000db4:	6453      	str	r3, [r2, #68]	; 0x44

    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    HAL_GPIO_DeInit(DSIHOST_TE_GPIO_Port, DSIHOST_TE_Pin);
 8000db6:	2104      	movs	r1, #4
 8000db8:	4806      	ldr	r0, [pc, #24]	; (8000dd4 <HAL_DSI_MspDeInit+0x3c>)
 8000dba:	f004 f969 	bl	8005090 <HAL_GPIO_DeInit>

    /* DSI interrupt DeInit */
    HAL_NVIC_DisableIRQ(DSI_IRQn);
 8000dbe:	2062      	movs	r0, #98	; 0x62
 8000dc0:	f002 fc80 	bl	80036c4 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 8000dc4:	bf00      	nop
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40016c00 	.word	0x40016c00
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40022400 	.word	0x40022400

08000dd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b0b0      	sub	sp, #192	; 0xc0
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	2290      	movs	r2, #144	; 0x90
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f00b fb55 	bl	800c4a8 <memset>
  if(hi2c->Instance==I2C1)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a55      	ldr	r2, [pc, #340]	; (8000f58 <HAL_I2C_MspInit+0x180>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d13e      	bne.n	8000e86 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e0c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f007 f883 	bl	8007f24 <HAL_RCCEx_PeriphCLKConfig>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000e24:	f7ff ff18 	bl	8000c58 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e28:	4b4c      	ldr	r3, [pc, #304]	; (8000f5c <HAL_I2C_MspInit+0x184>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	4a4b      	ldr	r2, [pc, #300]	; (8000f5c <HAL_I2C_MspInit+0x184>)
 8000e2e:	f043 0302 	orr.w	r3, r3, #2
 8000e32:	6313      	str	r3, [r2, #48]	; 0x30
 8000e34:	4b49      	ldr	r3, [pc, #292]	; (8000f5c <HAL_I2C_MspInit+0x184>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	f003 0302 	and.w	r3, r3, #2
 8000e3c:	61bb      	str	r3, [r7, #24]
 8000e3e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8000e40:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e48:	2312      	movs	r3, #18
 8000e4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e60:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e64:	4619      	mov	r1, r3
 8000e66:	483e      	ldr	r0, [pc, #248]	; (8000f60 <HAL_I2C_MspInit+0x188>)
 8000e68:	f003 ff66 	bl	8004d38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e6c:	4b3b      	ldr	r3, [pc, #236]	; (8000f5c <HAL_I2C_MspInit+0x184>)
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e70:	4a3a      	ldr	r2, [pc, #232]	; (8000f5c <HAL_I2C_MspInit+0x184>)
 8000e72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e76:	6413      	str	r3, [r2, #64]	; 0x40
 8000e78:	4b38      	ldr	r3, [pc, #224]	; (8000f5c <HAL_I2C_MspInit+0x184>)
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e80:	617b      	str	r3, [r7, #20]
 8000e82:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000e84:	e063      	b.n	8000f4e <HAL_I2C_MspInit+0x176>
  else if(hi2c->Instance==I2C4)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a36      	ldr	r2, [pc, #216]	; (8000f64 <HAL_I2C_MspInit+0x18c>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d15e      	bne.n	8000f4e <HAL_I2C_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000e90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e94:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e9c:	f107 031c 	add.w	r3, r7, #28
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f007 f83f 	bl	8007f24 <HAL_RCCEx_PeriphCLKConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8000eac:	f7ff fed4 	bl	8000c58 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb0:	4b2a      	ldr	r3, [pc, #168]	; (8000f5c <HAL_I2C_MspInit+0x184>)
 8000eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb4:	4a29      	ldr	r2, [pc, #164]	; (8000f5c <HAL_I2C_MspInit+0x184>)
 8000eb6:	f043 0302 	orr.w	r3, r3, #2
 8000eba:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebc:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <HAL_I2C_MspInit+0x184>)
 8000ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec8:	4b24      	ldr	r3, [pc, #144]	; (8000f5c <HAL_I2C_MspInit+0x184>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ecc:	4a23      	ldr	r2, [pc, #140]	; (8000f5c <HAL_I2C_MspInit+0x184>)
 8000ece:	f043 0308 	orr.w	r3, r3, #8
 8000ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed4:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <HAL_I2C_MspInit+0x184>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed8:	f003 0308 	and.w	r3, r3, #8
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 8000ee0:	2380      	movs	r3, #128	; 0x80
 8000ee2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ee6:	2312      	movs	r3, #18
 8000ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8000ef8:	230b      	movs	r3, #11
 8000efa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8000efe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f02:	4619      	mov	r1, r3
 8000f04:	4816      	ldr	r0, [pc, #88]	; (8000f60 <HAL_I2C_MspInit+0x188>)
 8000f06:	f003 ff17 	bl	8004d38 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 8000f0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f12:	2312      	movs	r3, #18
 8000f14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000f24:	2304      	movs	r3, #4
 8000f26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f2e:	4619      	mov	r1, r3
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <HAL_I2C_MspInit+0x190>)
 8000f32:	f003 ff01 	bl	8004d38 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <HAL_I2C_MspInit+0x184>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	4a08      	ldr	r2, [pc, #32]	; (8000f5c <HAL_I2C_MspInit+0x184>)
 8000f3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f40:	6413      	str	r3, [r2, #64]	; 0x40
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_I2C_MspInit+0x184>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
}
 8000f4e:	bf00      	nop
 8000f50:	37c0      	adds	r7, #192	; 0xc0
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40005400 	.word	0x40005400
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40020400 	.word	0x40020400
 8000f64:	40006000 	.word	0x40006000
 8000f68:	40020c00 	.word	0x40020c00

08000f6c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a15      	ldr	r2, [pc, #84]	; (8000fd0 <HAL_I2C_MspDeInit+0x64>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d110      	bne.n	8000fa0 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <HAL_I2C_MspDeInit+0x68>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	4a14      	ldr	r2, [pc, #80]	; (8000fd4 <HAL_I2C_MspDeInit+0x68>)
 8000f84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000f88:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8000f8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f8e:	4812      	ldr	r0, [pc, #72]	; (8000fd8 <HAL_I2C_MspDeInit+0x6c>)
 8000f90:	f004 f87e 	bl	8005090 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8000f94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f98:	480f      	ldr	r0, [pc, #60]	; (8000fd8 <HAL_I2C_MspDeInit+0x6c>)
 8000f9a:	f004 f879 	bl	8005090 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8000f9e:	e013      	b.n	8000fc8 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C4)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <HAL_I2C_MspDeInit+0x70>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d10e      	bne.n	8000fc8 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C4_CLK_DISABLE();
 8000faa:	4b0a      	ldr	r3, [pc, #40]	; (8000fd4 <HAL_I2C_MspDeInit+0x68>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	4a09      	ldr	r2, [pc, #36]	; (8000fd4 <HAL_I2C_MspDeInit+0x68>)
 8000fb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fb4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(AUDIO_SDA_GPIO_Port, AUDIO_SDA_Pin);
 8000fb6:	2180      	movs	r1, #128	; 0x80
 8000fb8:	4807      	ldr	r0, [pc, #28]	; (8000fd8 <HAL_I2C_MspDeInit+0x6c>)
 8000fba:	f004 f869 	bl	8005090 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_SCL_GPIO_Port, AUDIO_SCL_Pin);
 8000fbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc2:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <HAL_I2C_MspDeInit+0x74>)
 8000fc4:	f004 f864 	bl	8005090 <HAL_GPIO_DeInit>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40005400 	.word	0x40005400
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	40006000 	.word	0x40006000
 8000fe0:	40020c00 	.word	0x40020c00

08000fe4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <HAL_LTDC_MspInit+0x44>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d113      	bne.n	800101e <HAL_LTDC_MspInit+0x3a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000ff6:	4b0d      	ldr	r3, [pc, #52]	; (800102c <HAL_LTDC_MspInit+0x48>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	4a0c      	ldr	r2, [pc, #48]	; (800102c <HAL_LTDC_MspInit+0x48>)
 8000ffc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001000:	6453      	str	r3, [r2, #68]	; 0x44
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <HAL_LTDC_MspInit+0x48>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2105      	movs	r1, #5
 8001012:	2058      	movs	r0, #88	; 0x58
 8001014:	f002 fb2c 	bl	8003670 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001018:	2058      	movs	r0, #88	; 0x58
 800101a:	f002 fb45 	bl	80036a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40016800 	.word	0x40016800
 800102c:	40023800 	.word	0x40023800

08001030 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001030:	b480      	push	{r7}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a1c      	ldr	r2, [pc, #112]	; (80010b0 <HAL_TIM_Base_MspInit+0x80>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d10c      	bne.n	800105c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001042:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <HAL_TIM_Base_MspInit+0x84>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	4a1b      	ldr	r2, [pc, #108]	; (80010b4 <HAL_TIM_Base_MspInit+0x84>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6453      	str	r3, [r2, #68]	; 0x44
 800104e:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <HAL_TIM_Base_MspInit+0x84>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800105a:	e022      	b.n	80010a2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM10)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a15      	ldr	r2, [pc, #84]	; (80010b8 <HAL_TIM_Base_MspInit+0x88>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d10c      	bne.n	8001080 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001066:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <HAL_TIM_Base_MspInit+0x84>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <HAL_TIM_Base_MspInit+0x84>)
 800106c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001070:	6453      	str	r3, [r2, #68]	; 0x44
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <HAL_TIM_Base_MspInit+0x84>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]
}
 800107e:	e010      	b.n	80010a2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM11)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <HAL_TIM_Base_MspInit+0x8c>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d10b      	bne.n	80010a2 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <HAL_TIM_Base_MspInit+0x84>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	4a09      	ldr	r2, [pc, #36]	; (80010b4 <HAL_TIM_Base_MspInit+0x84>)
 8001090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001094:	6453      	str	r3, [r2, #68]	; 0x44
 8001096:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <HAL_TIM_Base_MspInit+0x84>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
}
 80010a2:	bf00      	nop
 80010a4:	371c      	adds	r7, #28
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	40010000 	.word	0x40010000
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40014400 	.word	0x40014400
 80010bc:	40014800 	.word	0x40014800

080010c0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80010d4:	4b3b      	ldr	r3, [pc, #236]	; (80011c4 <HAL_FMC_MspInit+0x104>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d16f      	bne.n	80011bc <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80010dc:	4b39      	ldr	r3, [pc, #228]	; (80011c4 <HAL_FMC_MspInit+0x104>)
 80010de:	2201      	movs	r2, #1
 80010e0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80010e2:	4b39      	ldr	r3, [pc, #228]	; (80011c8 <HAL_FMC_MspInit+0x108>)
 80010e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010e6:	4a38      	ldr	r2, [pc, #224]	; (80011c8 <HAL_FMC_MspInit+0x108>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6393      	str	r3, [r2, #56]	; 0x38
 80010ee:	4b36      	ldr	r3, [pc, #216]	; (80011c8 <HAL_FMC_MspInit+0x108>)
 80010f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80010fa:	f64f 7383 	movw	r3, #65411	; 0xff83
 80010fe:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2302      	movs	r3, #2
 8001102:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001108:	2303      	movs	r3, #3
 800110a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800110c:	230c      	movs	r3, #12
 800110e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001110:	1d3b      	adds	r3, r7, #4
 8001112:	4619      	mov	r1, r3
 8001114:	482d      	ldr	r0, [pc, #180]	; (80011cc <HAL_FMC_MspInit+0x10c>)
 8001116:	f003 fe0f 	bl	8004d38 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin
 800111a:	f248 1337 	movw	r3, #33079	; 0x8137
 800111e:	607b      	str	r3, [r7, #4]
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001120:	2302      	movs	r3, #2
 8001122:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800112c:	230c      	movs	r3, #12
 800112e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4619      	mov	r1, r3
 8001134:	4826      	ldr	r0, [pc, #152]	; (80011d0 <HAL_FMC_MspInit+0x110>)
 8001136:	f003 fdff 	bl	8004d38 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800113a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800113e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800114c:	230c      	movs	r3, #12
 800114e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	4619      	mov	r1, r3
 8001154:	481f      	ldr	r0, [pc, #124]	; (80011d4 <HAL_FMC_MspInit+0x114>)
 8001156:	f003 fdef 	bl	8004d38 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 800115a:	f240 63ff 	movw	r3, #1791	; 0x6ff
 800115e:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001168:	2303      	movs	r3, #3
 800116a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800116c:	230c      	movs	r3, #12
 800116e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	4619      	mov	r1, r3
 8001174:	4818      	ldr	r0, [pc, #96]	; (80011d8 <HAL_FMC_MspInit+0x118>)
 8001176:	f003 fddf 	bl	8004d38 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800117a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800117e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001188:	2303      	movs	r3, #3
 800118a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800118c:	230c      	movs	r3, #12
 800118e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	4619      	mov	r1, r3
 8001194:	4811      	ldr	r0, [pc, #68]	; (80011dc <HAL_FMC_MspInit+0x11c>)
 8001196:	f003 fdcf 	bl	8004d38 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin
 800119a:	f64f 732c 	movw	r3, #65324	; 0xff2c
 800119e:	607b      	str	r3, [r7, #4]
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a8:	2303      	movs	r3, #3
 80011aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011ac:	230c      	movs	r3, #12
 80011ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	4619      	mov	r1, r3
 80011b4:	480a      	ldr	r0, [pc, #40]	; (80011e0 <HAL_FMC_MspInit+0x120>)
 80011b6:	f003 fdbf 	bl	8004d38 <HAL_GPIO_Init>
 80011ba:	e000      	b.n	80011be <HAL_FMC_MspInit+0xfe>
    return;
 80011bc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	2000075c 	.word	0x2000075c
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40021800 	.word	0x40021800
 80011d4:	40020c00 	.word	0x40020c00
 80011d8:	40022000 	.word	0x40022000
 80011dc:	40021400 	.word	0x40021400
 80011e0:	40021c00 	.word	0x40021c00

080011e4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80011ec:	f7ff ff68 	bl	80010c0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08e      	sub	sp, #56	; 0x38
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001200:	2300      	movs	r3, #0
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001204:	2300      	movs	r3, #0
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001208:	4b33      	ldr	r3, [pc, #204]	; (80012d8 <HAL_InitTick+0xe0>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	4a32      	ldr	r2, [pc, #200]	; (80012d8 <HAL_InitTick+0xe0>)
 800120e:	f043 0310 	orr.w	r3, r3, #16
 8001212:	6413      	str	r3, [r2, #64]	; 0x40
 8001214:	4b30      	ldr	r3, [pc, #192]	; (80012d8 <HAL_InitTick+0xe0>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	f003 0310 	and.w	r3, r3, #16
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001220:	f107 0210 	add.w	r2, r7, #16
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4611      	mov	r1, r2
 800122a:	4618      	mov	r0, r3
 800122c:	f006 fe48 	bl	8007ec0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001236:	2b00      	cmp	r3, #0
 8001238:	d103      	bne.n	8001242 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800123a:	f006 fe2d 	bl	8007e98 <HAL_RCC_GetPCLK1Freq>
 800123e:	6378      	str	r0, [r7, #52]	; 0x34
 8001240:	e004      	b.n	800124c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001242:	f006 fe29 	bl	8007e98 <HAL_RCC_GetPCLK1Freq>
 8001246:	4603      	mov	r3, r0
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800124c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800124e:	4a23      	ldr	r2, [pc, #140]	; (80012dc <HAL_InitTick+0xe4>)
 8001250:	fba2 2303 	umull	r2, r3, r2, r3
 8001254:	0c9b      	lsrs	r3, r3, #18
 8001256:	3b01      	subs	r3, #1
 8001258:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800125a:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <HAL_InitTick+0xe8>)
 800125c:	4a21      	ldr	r2, [pc, #132]	; (80012e4 <HAL_InitTick+0xec>)
 800125e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001260:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <HAL_InitTick+0xe8>)
 8001262:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001266:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001268:	4a1d      	ldr	r2, [pc, #116]	; (80012e0 <HAL_InitTick+0xe8>)
 800126a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800126c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800126e:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <HAL_InitTick+0xe8>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001274:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <HAL_InitTick+0xe8>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127a:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <HAL_InitTick+0xe8>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001280:	4817      	ldr	r0, [pc, #92]	; (80012e0 <HAL_InitTick+0xe8>)
 8001282:	f007 fb08 	bl	8008896 <HAL_TIM_Base_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800128c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001290:	2b00      	cmp	r3, #0
 8001292:	d11b      	bne.n	80012cc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001294:	4812      	ldr	r0, [pc, #72]	; (80012e0 <HAL_InitTick+0xe8>)
 8001296:	f007 fb55 	bl	8008944 <HAL_TIM_Base_Start_IT>
 800129a:	4603      	mov	r3, r0
 800129c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80012a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d111      	bne.n	80012cc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012a8:	2036      	movs	r0, #54	; 0x36
 80012aa:	f002 f9fd 	bl	80036a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b0f      	cmp	r3, #15
 80012b2:	d808      	bhi.n	80012c6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80012b4:	2200      	movs	r2, #0
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	2036      	movs	r0, #54	; 0x36
 80012ba:	f002 f9d9 	bl	8003670 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012be:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <HAL_InitTick+0xf0>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	e002      	b.n	80012cc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3738      	adds	r7, #56	; 0x38
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40023800 	.word	0x40023800
 80012dc:	431bde83 	.word	0x431bde83
 80012e0:	20000760 	.word	0x20000760
 80012e4:	40001000 	.word	0x40001000
 80012e8:	20000040 	.word	0x20000040

080012ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <NMI_Handler+0x4>

080012f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <HardFault_Handler+0x4>

080012f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <MemManage_Handler+0x4>

080012fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <UsageFault_Handler+0x4>

0800130a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800131c:	4802      	ldr	r0, [pc, #8]	; (8001328 <TIM6_DAC_IRQHandler+0x10>)
 800131e:	f007 fb89 	bl	8008a34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000760 	.word	0x20000760

0800132c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001330:	4802      	ldr	r0, [pc, #8]	; (800133c <OTG_HS_IRQHandler+0x10>)
 8001332:	f005 f947 	bl	80065c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	2000022c 	.word	0x2000022c

08001340 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001344:	4802      	ldr	r0, [pc, #8]	; (8001350 <LTDC_IRQHandler+0x10>)
 8001346:	f004 fe53 	bl	8005ff0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000184 	.word	0x20000184

08001354 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001358:	4802      	ldr	r0, [pc, #8]	; (8001364 <DMA2D_IRQHandler+0x10>)
 800135a:	f002 fced 	bl	8003d38 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200000cc 	.word	0x200000cc

08001368 <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 800136c:	4802      	ldr	r0, [pc, #8]	; (8001378 <CEC_IRQHandler+0x10>)
 800136e:	f001 ffa7 	bl	80032c0 <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000140 	.word	0x20000140

0800137c <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001380:	4802      	ldr	r0, [pc, #8]	; (800138c <DSI_IRQHandler+0x10>)
 8001382:	f003 f8fb 	bl	800457c <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000124 	.word	0x20000124

08001390 <EXTI0_IRQHandler>:
  */

extern int APP_PAGE;
uint32_t lastClick = 0;

void EXTI0_IRQHandler() {
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0)) {
 8001394:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <EXTI0_IRQHandler+0x64>)
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b00      	cmp	r3, #0
 800139e:	d023      	beq.n	80013e8 <EXTI0_IRQHandler+0x58>
		if (HAL_GetTick() - lastClick > 500) {
 80013a0:	f001 ff5e 	bl	8003260 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <EXTI0_IRQHandler+0x68>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013b0:	d91a      	bls.n	80013e8 <EXTI0_IRQHandler+0x58>
			APP_PAGE++;
 80013b2:	4b12      	ldr	r3, [pc, #72]	; (80013fc <EXTI0_IRQHandler+0x6c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	3301      	adds	r3, #1
 80013b8:	4a10      	ldr	r2, [pc, #64]	; (80013fc <EXTI0_IRQHandler+0x6c>)
 80013ba:	6013      	str	r3, [r2, #0]
			if (APP_PAGE > 2) APP_PAGE = APP_PAGE % 3;
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <EXTI0_IRQHandler+0x6c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	dd0c      	ble.n	80013de <EXTI0_IRQHandler+0x4e>
 80013c4:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <EXTI0_IRQHandler+0x6c>)
 80013c6:	6819      	ldr	r1, [r3, #0]
 80013c8:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <EXTI0_IRQHandler+0x70>)
 80013ca:	fb83 3201 	smull	r3, r2, r3, r1
 80013ce:	17cb      	asrs	r3, r1, #31
 80013d0:	1ad2      	subs	r2, r2, r3
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	1aca      	subs	r2, r1, r3
 80013da:	4b08      	ldr	r3, [pc, #32]	; (80013fc <EXTI0_IRQHandler+0x6c>)
 80013dc:	601a      	str	r2, [r3, #0]
			lastClick = HAL_GetTick();
 80013de:	f001 ff3f 	bl	8003260 <HAL_GetTick>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <EXTI0_IRQHandler+0x68>)
 80013e6:	6013      	str	r3, [r2, #0]
		}
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 80013e8:	4b02      	ldr	r3, [pc, #8]	; (80013f4 <EXTI0_IRQHandler+0x64>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	615a      	str	r2, [r3, #20]
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40013c00 	.word	0x40013c00
 80013f8:	200007ac 	.word	0x200007ac
 80013fc:	20000754 	.word	0x20000754
 8001400:	55555556 	.word	0x55555556

08001404 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0

  HAL_GPIO_EXTI_IRQHandler(TS_INT_PIN); // Reset the GPIO_PIN_13 Interrupt - Touch Screen
 8001408:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800140c:	f003 ff66 	bl	80052dc <HAL_GPIO_EXTI_IRQHandler>

}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}

08001414 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800141c:	4a14      	ldr	r2, [pc, #80]	; (8001470 <_sbrk+0x5c>)
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <_sbrk+0x60>)
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001428:	4b13      	ldr	r3, [pc, #76]	; (8001478 <_sbrk+0x64>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d102      	bne.n	8001436 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <_sbrk+0x64>)
 8001432:	4a12      	ldr	r2, [pc, #72]	; (800147c <_sbrk+0x68>)
 8001434:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <_sbrk+0x64>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	429a      	cmp	r2, r3
 8001442:	d207      	bcs.n	8001454 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001444:	f00a fff8 	bl	800c438 <__errno>
 8001448:	4603      	mov	r3, r0
 800144a:	220c      	movs	r2, #12
 800144c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800144e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001452:	e009      	b.n	8001468 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001454:	4b08      	ldr	r3, [pc, #32]	; (8001478 <_sbrk+0x64>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800145a:	4b07      	ldr	r3, [pc, #28]	; (8001478 <_sbrk+0x64>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4413      	add	r3, r2
 8001462:	4a05      	ldr	r2, [pc, #20]	; (8001478 <_sbrk+0x64>)
 8001464:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001466:	68fb      	ldr	r3, [r7, #12]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20080000 	.word	0x20080000
 8001474:	00000400 	.word	0x00000400
 8001478:	200007b0 	.word	0x200007b0
 800147c:	20009880 	.word	0x20009880

08001480 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <SystemInit+0x20>)
 8001486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800148a:	4a05      	ldr	r2, [pc, #20]	; (80014a0 <SystemInit+0x20>)
 800148c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001490:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 80014a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014a8:	480d      	ldr	r0, [pc, #52]	; (80014e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014aa:	490e      	ldr	r1, [pc, #56]	; (80014e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014ac:	4a0e      	ldr	r2, [pc, #56]	; (80014e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b0:	e002      	b.n	80014b8 <LoopCopyDataInit>

080014b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b6:	3304      	adds	r3, #4

080014b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014bc:	d3f9      	bcc.n	80014b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014be:	4a0b      	ldr	r2, [pc, #44]	; (80014ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80014c0:	4c0b      	ldr	r4, [pc, #44]	; (80014f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c4:	e001      	b.n	80014ca <LoopFillZerobss>

080014c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c8:	3204      	adds	r2, #4

080014ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014cc:	d3fb      	bcc.n	80014c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014ce:	f7ff ffd7 	bl	8001480 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014d2:	f00a ffb7 	bl	800c444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014d6:	f7ff fa79 	bl	80009cc <main>
  bx  lr    
 80014da:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 80014dc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80014e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e4:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 80014e8:	0800ebb4 	.word	0x0800ebb4
  ldr r2, =_sbss
 80014ec:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80014f0:	20009880 	.word	0x20009880

080014f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f4:	e7fe      	b.n	80014f4 <ADC_IRQHandler>
	...

080014f8 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	4618      	mov	r0, r3
 8001506:	f000 f90d 	bl	8001724 <ft6x06_GetInstance>
 800150a:	4603      	mov	r3, r0
 800150c:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	2bff      	cmp	r3, #255	; 0xff
 8001512:	d10e      	bne.n	8001532 <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 8001514:	2000      	movs	r0, #0
 8001516:	f000 f905 	bl	8001724 <ft6x06_GetInstance>
 800151a:	4603      	mov	r3, r0
 800151c:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 800151e:	7bbb      	ldrb	r3, [r7, #14]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d806      	bhi.n	8001532 <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 8001524:	7bbb      	ldrb	r3, [r7, #14]
 8001526:	88fa      	ldrh	r2, [r7, #6]
 8001528:	b2d1      	uxtb	r1, r2
 800152a:	4a04      	ldr	r2, [pc, #16]	; (800153c <ft6x06_Init+0x44>)
 800152c:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 800152e:	f000 fcd7 	bl	8001ee0 <TS_IO_Init>
    }
  }
}
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	200007b4 	.word	0x200007b4

08001540 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	4603      	mov	r3, r0
 800155e:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 8001560:	f000 fcbe 	bl	8001ee0 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 8001564:	88fb      	ldrh	r3, [r7, #6]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	21a8      	movs	r1, #168	; 0xa8
 800156a:	4618      	mov	r0, r3
 800156c:	f000 fcdc 	bl	8001f28 <TS_IO_Read>
 8001570:	4603      	mov	r3, r0
 8001572:	b29b      	uxth	r3, r3
}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	4618      	mov	r0, r3
 800158a:	f000 f8bc 	bl	8001706 <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 800158e:	88fb      	ldrh	r3, [r7, #6]
 8001590:	4618      	mov	r0, r3
 8001592:	f000 f88d 	bl	80016b0 <ft6x06_TS_DisableIT>
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2102      	movs	r1, #2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f000 fcb7 	bl	8001f28 <TS_IO_Read>
 80015ba:	4603      	mov	r3, r0
 80015bc:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <ft6x06_TS_DetectTouch+0x50>)
 80015dc:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 80015de:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <ft6x06_TS_DetectTouch+0x50>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
 80015e6:	b2db      	uxtb	r3, r3
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	200007b8 	.word	0x200007b8

080015f4 <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
 8001600:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8001606:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <ft6x06_TS_GetXY+0x90>)
 8001608:	789a      	ldrb	r2, [r3, #2]
 800160a:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <ft6x06_TS_GetXY+0x90>)
 800160c:	785b      	ldrb	r3, [r3, #1]
 800160e:	429a      	cmp	r2, r3
 8001610:	d234      	bcs.n	800167c <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 8001612:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <ft6x06_TS_GetXY+0x90>)
 8001614:	789b      	ldrb	r3, [r3, #2]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d002      	beq.n	8001620 <ft6x06_TS_GetXY+0x2c>
 800161a:	2b01      	cmp	r3, #1
 800161c:	d003      	beq.n	8001626 <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 800161e:	e005      	b.n	800162c <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8001620:	2303      	movs	r3, #3
 8001622:	75fb      	strb	r3, [r7, #23]
      break;
 8001624:	e002      	b.n	800162c <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 8001626:	2309      	movs	r3, #9
 8001628:	75fb      	strb	r3, [r7, #23]
      break;
 800162a:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 800162c:	89fb      	ldrh	r3, [r7, #14]
 800162e:	b2d8      	uxtb	r0, r3
 8001630:	f107 0210 	add.w	r2, r7, #16
 8001634:	7df9      	ldrb	r1, [r7, #23]
 8001636:	2304      	movs	r3, #4
 8001638:	f000 fc94 	bl	8001f64 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 800163c:	7c3b      	ldrb	r3, [r7, #16]
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	b21b      	sxth	r3, r3
 8001642:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001646:	b21a      	sxth	r2, r3
 8001648:	7c7b      	ldrb	r3, [r7, #17]
 800164a:	b21b      	sxth	r3, r3
 800164c:	4313      	orrs	r3, r2
 800164e:	b21b      	sxth	r3, r3
 8001650:	b29a      	uxth	r2, r3
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8001656:	7cbb      	ldrb	r3, [r7, #18]
 8001658:	021b      	lsls	r3, r3, #8
 800165a:	b21b      	sxth	r3, r3
 800165c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001660:	b21a      	sxth	r2, r3
 8001662:	7cfb      	ldrb	r3, [r7, #19]
 8001664:	b21b      	sxth	r3, r3
 8001666:	4313      	orrs	r3, r2
 8001668:	b21b      	sxth	r3, r3
 800166a:	b29a      	uxth	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <ft6x06_TS_GetXY+0x90>)
 8001672:	789b      	ldrb	r3, [r3, #2]
 8001674:	3301      	adds	r3, #1
 8001676:	b2da      	uxtb	r2, r3
 8001678:	4b02      	ldr	r3, [pc, #8]	; (8001684 <ft6x06_TS_GetXY+0x90>)
 800167a:	709a      	strb	r2, [r3, #2]
  }
}
 800167c:	bf00      	nop
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	200007b8 	.word	0x200007b8

08001688 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8001696:	2301      	movs	r3, #1
 8001698:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	7bfa      	ldrb	r2, [r7, #15]
 80016a0:	21a4      	movs	r1, #164	; 0xa4
 80016a2:	4618      	mov	r0, r3
 80016a4:	f000 fc26 	bl	8001ef4 <TS_IO_Write>
}
 80016a8:	bf00      	nop
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 80016be:	2300      	movs	r3, #0
 80016c0:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80016c2:	88fb      	ldrh	r3, [r7, #6]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	7bfa      	ldrb	r2, [r7, #15]
 80016c8:	21a4      	movs	r1, #164	; 0xa4
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 fc12 	bl	8001ef4 <TS_IO_Write>
}
 80016d0:	bf00      	nop
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 80016e2:	2300      	movs	r3, #0
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 8001706:	b480      	push	{r7}
 8001708:	b085      	sub	sp, #20
 800170a:	af00      	add	r7, sp, #0
 800170c:	4603      	mov	r3, r0
 800170e:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 8001714:	68fb      	ldr	r3, [r7, #12]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8001732:	2300      	movs	r3, #0
 8001734:	73fb      	strb	r3, [r7, #15]
 8001736:	e00b      	b.n	8001750 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	4a0a      	ldr	r2, [pc, #40]	; (8001764 <ft6x06_GetInstance+0x40>)
 800173c:	5cd3      	ldrb	r3, [r2, r3]
 800173e:	b29b      	uxth	r3, r3
 8001740:	88fa      	ldrh	r2, [r7, #6]
 8001742:	429a      	cmp	r2, r3
 8001744:	d101      	bne.n	800174a <ft6x06_GetInstance+0x26>
    {
      return idx; 
 8001746:	7bfb      	ldrb	r3, [r7, #15]
 8001748:	e006      	b.n	8001758 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	3301      	adds	r3, #1
 800174e:	73fb      	strb	r3, [r7, #15]
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d9f0      	bls.n	8001738 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 8001756:	23ff      	movs	r3, #255	; 0xff
}
 8001758:	4618      	mov	r0, r3
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	200007b4 	.word	0x200007b4

08001768 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001772:	49c1      	ldr	r1, [pc, #772]	; (8001a78 <OTM8009A_Init+0x310>)
 8001774:	2000      	movs	r0, #0
 8001776:	f001 f81b 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 800177a:	49c0      	ldr	r1, [pc, #768]	; (8001a7c <OTM8009A_Init+0x314>)
 800177c:	2003      	movs	r0, #3
 800177e:	f001 f817 	bl	80027b0 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8001782:	49bf      	ldr	r1, [pc, #764]	; (8001a80 <OTM8009A_Init+0x318>)
 8001784:	2000      	movs	r0, #0
 8001786:	f001 f813 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 800178a:	49be      	ldr	r1, [pc, #760]	; (8001a84 <OTM8009A_Init+0x31c>)
 800178c:	2002      	movs	r0, #2
 800178e:	f001 f80f 	bl	80027b0 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8001792:	49bb      	ldr	r1, [pc, #748]	; (8001a80 <OTM8009A_Init+0x318>)
 8001794:	2000      	movs	r0, #0
 8001796:	f001 f80b 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 800179a:	49bb      	ldr	r1, [pc, #748]	; (8001a88 <OTM8009A_Init+0x320>)
 800179c:	2000      	movs	r0, #0
 800179e:	f001 f807 	bl	80027b0 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80017a2:	200a      	movs	r0, #10
 80017a4:	f000 fbfc 	bl	8001fa0 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 80017a8:	49b8      	ldr	r1, [pc, #736]	; (8001a8c <OTM8009A_Init+0x324>)
 80017aa:	2000      	movs	r0, #0
 80017ac:	f001 f800 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 80017b0:	49b7      	ldr	r1, [pc, #732]	; (8001a90 <OTM8009A_Init+0x328>)
 80017b2:	2000      	movs	r0, #0
 80017b4:	f000 fffc 	bl	80027b0 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80017b8:	200a      	movs	r0, #10
 80017ba:	f000 fbf1 	bl	8001fa0 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 80017be:	49b5      	ldr	r1, [pc, #724]	; (8001a94 <OTM8009A_Init+0x32c>)
 80017c0:	2000      	movs	r0, #0
 80017c2:	f000 fff5 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 80017c6:	49b4      	ldr	r1, [pc, #720]	; (8001a98 <OTM8009A_Init+0x330>)
 80017c8:	2000      	movs	r0, #0
 80017ca:	f000 fff1 	bl	80027b0 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 80017ce:	49b3      	ldr	r1, [pc, #716]	; (8001a9c <OTM8009A_Init+0x334>)
 80017d0:	2000      	movs	r0, #0
 80017d2:	f000 ffed 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80017d6:	49b2      	ldr	r1, [pc, #712]	; (8001aa0 <OTM8009A_Init+0x338>)
 80017d8:	2000      	movs	r0, #0
 80017da:	f000 ffe9 	bl	80027b0 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 80017de:	49b1      	ldr	r1, [pc, #708]	; (8001aa4 <OTM8009A_Init+0x33c>)
 80017e0:	2000      	movs	r0, #0
 80017e2:	f000 ffe5 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 80017e6:	49b0      	ldr	r1, [pc, #704]	; (8001aa8 <OTM8009A_Init+0x340>)
 80017e8:	2000      	movs	r0, #0
 80017ea:	f000 ffe1 	bl	80027b0 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80017ee:	49a2      	ldr	r1, [pc, #648]	; (8001a78 <OTM8009A_Init+0x310>)
 80017f0:	2000      	movs	r0, #0
 80017f2:	f000 ffdd 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 80017f6:	49ad      	ldr	r1, [pc, #692]	; (8001aac <OTM8009A_Init+0x344>)
 80017f8:	2000      	movs	r0, #0
 80017fa:	f000 ffd9 	bl	80027b0 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80017fe:	49ac      	ldr	r1, [pc, #688]	; (8001ab0 <OTM8009A_Init+0x348>)
 8001800:	2000      	movs	r0, #0
 8001802:	f000 ffd5 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8001806:	49ab      	ldr	r1, [pc, #684]	; (8001ab4 <OTM8009A_Init+0x34c>)
 8001808:	2000      	movs	r0, #0
 800180a:	f000 ffd1 	bl	80027b0 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800180e:	49aa      	ldr	r1, [pc, #680]	; (8001ab8 <OTM8009A_Init+0x350>)
 8001810:	2000      	movs	r0, #0
 8001812:	f000 ffcd 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8001816:	49a9      	ldr	r1, [pc, #676]	; (8001abc <OTM8009A_Init+0x354>)
 8001818:	2000      	movs	r0, #0
 800181a:	f000 ffc9 	bl	80027b0 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 800181e:	49a8      	ldr	r1, [pc, #672]	; (8001ac0 <OTM8009A_Init+0x358>)
 8001820:	2000      	movs	r0, #0
 8001822:	f000 ffc5 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8001826:	49a7      	ldr	r1, [pc, #668]	; (8001ac4 <OTM8009A_Init+0x35c>)
 8001828:	2000      	movs	r0, #0
 800182a:	f000 ffc1 	bl	80027b0 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 800182e:	49a6      	ldr	r1, [pc, #664]	; (8001ac8 <OTM8009A_Init+0x360>)
 8001830:	2000      	movs	r0, #0
 8001832:	f000 ffbd 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8001836:	499a      	ldr	r1, [pc, #616]	; (8001aa0 <OTM8009A_Init+0x338>)
 8001838:	2000      	movs	r0, #0
 800183a:	f000 ffb9 	bl	80027b0 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800183e:	498e      	ldr	r1, [pc, #568]	; (8001a78 <OTM8009A_Init+0x310>)
 8001840:	2000      	movs	r0, #0
 8001842:	f000 ffb5 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8001846:	49a1      	ldr	r1, [pc, #644]	; (8001acc <OTM8009A_Init+0x364>)
 8001848:	2002      	movs	r0, #2
 800184a:	f000 ffb1 	bl	80027b0 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 800184e:	49a0      	ldr	r1, [pc, #640]	; (8001ad0 <OTM8009A_Init+0x368>)
 8001850:	2000      	movs	r0, #0
 8001852:	f000 ffad 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8001856:	499f      	ldr	r1, [pc, #636]	; (8001ad4 <OTM8009A_Init+0x36c>)
 8001858:	2000      	movs	r0, #0
 800185a:	f000 ffa9 	bl	80027b0 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 800185e:	499e      	ldr	r1, [pc, #632]	; (8001ad8 <OTM8009A_Init+0x370>)
 8001860:	2000      	movs	r0, #0
 8001862:	f000 ffa5 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8001866:	499d      	ldr	r1, [pc, #628]	; (8001adc <OTM8009A_Init+0x374>)
 8001868:	2000      	movs	r0, #0
 800186a:	f000 ffa1 	bl	80027b0 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 800186e:	499c      	ldr	r1, [pc, #624]	; (8001ae0 <OTM8009A_Init+0x378>)
 8001870:	2000      	movs	r0, #0
 8001872:	f000 ff9d 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8001876:	499b      	ldr	r1, [pc, #620]	; (8001ae4 <OTM8009A_Init+0x37c>)
 8001878:	2000      	movs	r0, #0
 800187a:	f000 ff99 	bl	80027b0 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800187e:	498c      	ldr	r1, [pc, #560]	; (8001ab0 <OTM8009A_Init+0x348>)
 8001880:	2000      	movs	r0, #0
 8001882:	f000 ff95 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8001886:	4998      	ldr	r1, [pc, #608]	; (8001ae8 <OTM8009A_Init+0x380>)
 8001888:	2000      	movs	r0, #0
 800188a:	f000 ff91 	bl	80027b0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800188e:	498a      	ldr	r1, [pc, #552]	; (8001ab8 <OTM8009A_Init+0x350>)
 8001890:	2000      	movs	r0, #0
 8001892:	f000 ff8d 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8001896:	4995      	ldr	r1, [pc, #596]	; (8001aec <OTM8009A_Init+0x384>)
 8001898:	2000      	movs	r0, #0
 800189a:	f000 ff89 	bl	80027b0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 800189e:	4994      	ldr	r1, [pc, #592]	; (8001af0 <OTM8009A_Init+0x388>)
 80018a0:	2000      	movs	r0, #0
 80018a2:	f000 ff85 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 80018a6:	4993      	ldr	r1, [pc, #588]	; (8001af4 <OTM8009A_Init+0x38c>)
 80018a8:	2002      	movs	r0, #2
 80018aa:	f000 ff81 	bl	80027b0 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80018ae:	4974      	ldr	r1, [pc, #464]	; (8001a80 <OTM8009A_Init+0x318>)
 80018b0:	2000      	movs	r0, #0
 80018b2:	f000 ff7d 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 80018b6:	4990      	ldr	r1, [pc, #576]	; (8001af8 <OTM8009A_Init+0x390>)
 80018b8:	2006      	movs	r0, #6
 80018ba:	f000 ff79 	bl	80027b0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80018be:	498f      	ldr	r1, [pc, #572]	; (8001afc <OTM8009A_Init+0x394>)
 80018c0:	2000      	movs	r0, #0
 80018c2:	f000 ff75 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 80018c6:	498e      	ldr	r1, [pc, #568]	; (8001b00 <OTM8009A_Init+0x398>)
 80018c8:	200e      	movs	r0, #14
 80018ca:	f000 ff71 	bl	80027b0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80018ce:	498d      	ldr	r1, [pc, #564]	; (8001b04 <OTM8009A_Init+0x39c>)
 80018d0:	2000      	movs	r0, #0
 80018d2:	f000 ff6d 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 80018d6:	498c      	ldr	r1, [pc, #560]	; (8001b08 <OTM8009A_Init+0x3a0>)
 80018d8:	200e      	movs	r0, #14
 80018da:	f000 ff69 	bl	80027b0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80018de:	498b      	ldr	r1, [pc, #556]	; (8001b0c <OTM8009A_Init+0x3a4>)
 80018e0:	2000      	movs	r0, #0
 80018e2:	f000 ff65 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 80018e6:	498a      	ldr	r1, [pc, #552]	; (8001b10 <OTM8009A_Init+0x3a8>)
 80018e8:	200a      	movs	r0, #10
 80018ea:	f000 ff61 	bl	80027b0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80018ee:	4989      	ldr	r1, [pc, #548]	; (8001b14 <OTM8009A_Init+0x3ac>)
 80018f0:	2000      	movs	r0, #0
 80018f2:	f000 ff5d 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80018f6:	4988      	ldr	r1, [pc, #544]	; (8001b18 <OTM8009A_Init+0x3b0>)
 80018f8:	2000      	movs	r0, #0
 80018fa:	f000 ff59 	bl	80027b0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80018fe:	4960      	ldr	r1, [pc, #384]	; (8001a80 <OTM8009A_Init+0x318>)
 8001900:	2000      	movs	r0, #0
 8001902:	f000 ff55 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8001906:	4985      	ldr	r1, [pc, #532]	; (8001b1c <OTM8009A_Init+0x3b4>)
 8001908:	200a      	movs	r0, #10
 800190a:	f000 ff51 	bl	80027b0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 800190e:	4984      	ldr	r1, [pc, #528]	; (8001b20 <OTM8009A_Init+0x3b8>)
 8001910:	2000      	movs	r0, #0
 8001912:	f000 ff4d 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8001916:	4983      	ldr	r1, [pc, #524]	; (8001b24 <OTM8009A_Init+0x3bc>)
 8001918:	200f      	movs	r0, #15
 800191a:	f000 ff49 	bl	80027b0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800191e:	4977      	ldr	r1, [pc, #476]	; (8001afc <OTM8009A_Init+0x394>)
 8001920:	2000      	movs	r0, #0
 8001922:	f000 ff45 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8001926:	4980      	ldr	r1, [pc, #512]	; (8001b28 <OTM8009A_Init+0x3c0>)
 8001928:	200f      	movs	r0, #15
 800192a:	f000 ff41 	bl	80027b0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800192e:	4975      	ldr	r1, [pc, #468]	; (8001b04 <OTM8009A_Init+0x39c>)
 8001930:	2000      	movs	r0, #0
 8001932:	f000 ff3d 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8001936:	497d      	ldr	r1, [pc, #500]	; (8001b2c <OTM8009A_Init+0x3c4>)
 8001938:	200a      	movs	r0, #10
 800193a:	f000 ff39 	bl	80027b0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800193e:	4973      	ldr	r1, [pc, #460]	; (8001b0c <OTM8009A_Init+0x3a4>)
 8001940:	2000      	movs	r0, #0
 8001942:	f000 ff35 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8001946:	497a      	ldr	r1, [pc, #488]	; (8001b30 <OTM8009A_Init+0x3c8>)
 8001948:	200f      	movs	r0, #15
 800194a:	f000 ff31 	bl	80027b0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800194e:	4971      	ldr	r1, [pc, #452]	; (8001b14 <OTM8009A_Init+0x3ac>)
 8001950:	2000      	movs	r0, #0
 8001952:	f000 ff2d 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8001956:	4977      	ldr	r1, [pc, #476]	; (8001b34 <OTM8009A_Init+0x3cc>)
 8001958:	200f      	movs	r0, #15
 800195a:	f000 ff29 	bl	80027b0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 800195e:	4976      	ldr	r1, [pc, #472]	; (8001b38 <OTM8009A_Init+0x3d0>)
 8001960:	2000      	movs	r0, #0
 8001962:	f000 ff25 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8001966:	4975      	ldr	r1, [pc, #468]	; (8001b3c <OTM8009A_Init+0x3d4>)
 8001968:	200a      	movs	r0, #10
 800196a:	f000 ff21 	bl	80027b0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 800196e:	4974      	ldr	r1, [pc, #464]	; (8001b40 <OTM8009A_Init+0x3d8>)
 8001970:	2000      	movs	r0, #0
 8001972:	f000 ff1d 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8001976:	4973      	ldr	r1, [pc, #460]	; (8001b44 <OTM8009A_Init+0x3dc>)
 8001978:	200a      	movs	r0, #10
 800197a:	f000 ff19 	bl	80027b0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800197e:	4940      	ldr	r1, [pc, #256]	; (8001a80 <OTM8009A_Init+0x318>)
 8001980:	2000      	movs	r0, #0
 8001982:	f000 ff15 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8001986:	4970      	ldr	r1, [pc, #448]	; (8001b48 <OTM8009A_Init+0x3e0>)
 8001988:	200a      	movs	r0, #10
 800198a:	f000 ff11 	bl	80027b0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 800198e:	4964      	ldr	r1, [pc, #400]	; (8001b20 <OTM8009A_Init+0x3b8>)
 8001990:	2000      	movs	r0, #0
 8001992:	f000 ff0d 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8001996:	496d      	ldr	r1, [pc, #436]	; (8001b4c <OTM8009A_Init+0x3e4>)
 8001998:	200f      	movs	r0, #15
 800199a:	f000 ff09 	bl	80027b0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800199e:	4957      	ldr	r1, [pc, #348]	; (8001afc <OTM8009A_Init+0x394>)
 80019a0:	2000      	movs	r0, #0
 80019a2:	f000 ff05 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 80019a6:	496a      	ldr	r1, [pc, #424]	; (8001b50 <OTM8009A_Init+0x3e8>)
 80019a8:	200f      	movs	r0, #15
 80019aa:	f000 ff01 	bl	80027b0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80019ae:	4955      	ldr	r1, [pc, #340]	; (8001b04 <OTM8009A_Init+0x39c>)
 80019b0:	2000      	movs	r0, #0
 80019b2:	f000 fefd 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 80019b6:	4967      	ldr	r1, [pc, #412]	; (8001b54 <OTM8009A_Init+0x3ec>)
 80019b8:	200a      	movs	r0, #10
 80019ba:	f000 fef9 	bl	80027b0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80019be:	4953      	ldr	r1, [pc, #332]	; (8001b0c <OTM8009A_Init+0x3a4>)
 80019c0:	2000      	movs	r0, #0
 80019c2:	f000 fef5 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 80019c6:	4964      	ldr	r1, [pc, #400]	; (8001b58 <OTM8009A_Init+0x3f0>)
 80019c8:	200f      	movs	r0, #15
 80019ca:	f000 fef1 	bl	80027b0 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80019ce:	4951      	ldr	r1, [pc, #324]	; (8001b14 <OTM8009A_Init+0x3ac>)
 80019d0:	2000      	movs	r0, #0
 80019d2:	f000 feed 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 80019d6:	4961      	ldr	r1, [pc, #388]	; (8001b5c <OTM8009A_Init+0x3f4>)
 80019d8:	200f      	movs	r0, #15
 80019da:	f000 fee9 	bl	80027b0 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80019de:	4934      	ldr	r1, [pc, #208]	; (8001ab0 <OTM8009A_Init+0x348>)
 80019e0:	2000      	movs	r0, #0
 80019e2:	f000 fee5 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 80019e6:	495e      	ldr	r1, [pc, #376]	; (8001b60 <OTM8009A_Init+0x3f8>)
 80019e8:	2000      	movs	r0, #0
 80019ea:	f000 fee1 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 80019ee:	495d      	ldr	r1, [pc, #372]	; (8001b64 <OTM8009A_Init+0x3fc>)
 80019f0:	2000      	movs	r0, #0
 80019f2:	f000 fedd 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 80019f6:	495c      	ldr	r1, [pc, #368]	; (8001b68 <OTM8009A_Init+0x400>)
 80019f8:	2000      	movs	r0, #0
 80019fa:	f000 fed9 	bl	80027b0 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 22,7kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 80019fe:	495b      	ldr	r1, [pc, #364]	; (8001b6c <OTM8009A_Init+0x404>)
 8001a00:	2000      	movs	r0, #0
 8001a02:	f000 fed5 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8001a06:	495a      	ldr	r1, [pc, #360]	; (8001b70 <OTM8009A_Init+0x408>)
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f000 fed1 	bl	80027b0 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001a0e:	491a      	ldr	r1, [pc, #104]	; (8001a78 <OTM8009A_Init+0x310>)
 8001a10:	2000      	movs	r0, #0
 8001a12:	f000 fecd 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8001a16:	4957      	ldr	r1, [pc, #348]	; (8001b74 <OTM8009A_Init+0x40c>)
 8001a18:	2003      	movs	r0, #3
 8001a1a:	f000 fec9 	bl	80027b0 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001a1e:	4916      	ldr	r1, [pc, #88]	; (8001a78 <OTM8009A_Init+0x310>)
 8001a20:	2000      	movs	r0, #0
 8001a22:	f000 fec5 	bl	80027b0 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001a26:	4914      	ldr	r1, [pc, #80]	; (8001a78 <OTM8009A_Init+0x310>)
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f000 fec1 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8001a2e:	4952      	ldr	r1, [pc, #328]	; (8001b78 <OTM8009A_Init+0x410>)
 8001a30:	2010      	movs	r0, #16
 8001a32:	f000 febd 	bl	80027b0 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001a36:	4910      	ldr	r1, [pc, #64]	; (8001a78 <OTM8009A_Init+0x310>)
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f000 feb9 	bl	80027b0 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8001a3e:	494f      	ldr	r1, [pc, #316]	; (8001b7c <OTM8009A_Init+0x414>)
 8001a40:	2010      	movs	r0, #16
 8001a42:	f000 feb5 	bl	80027b0 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8001a46:	494e      	ldr	r1, [pc, #312]	; (8001b80 <OTM8009A_Init+0x418>)
 8001a48:	2000      	movs	r0, #0
 8001a4a:	f000 feb1 	bl	80027b0 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8001a4e:	2078      	movs	r0, #120	; 0x78
 8001a50:	f000 faa6 	bl	8001fa0 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d008      	beq.n	8001a6c <OTM8009A_Init+0x304>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	f040 8095 	bne.w	8001b8c <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8001a62:	4948      	ldr	r1, [pc, #288]	; (8001b84 <OTM8009A_Init+0x41c>)
 8001a64:	2000      	movs	r0, #0
 8001a66:	f000 fea3 	bl	80027b0 <DSI_IO_WriteCmd>
    break;
 8001a6a:	e090      	b.n	8001b8e <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8001a6c:	4946      	ldr	r1, [pc, #280]	; (8001b88 <OTM8009A_Init+0x420>)
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f000 fe9e 	bl	80027b0 <DSI_IO_WriteCmd>
    break;
 8001a74:	e08b      	b.n	8001b8e <OTM8009A_Init+0x426>
 8001a76:	bf00      	nop
 8001a78:	0800cfe4 	.word	0x0800cfe4
 8001a7c:	0800ce9c 	.word	0x0800ce9c
 8001a80:	0800cfe8 	.word	0x0800cfe8
 8001a84:	0800cea0 	.word	0x0800cea0
 8001a88:	0800cfec 	.word	0x0800cfec
 8001a8c:	0800cff0 	.word	0x0800cff0
 8001a90:	0800cff4 	.word	0x0800cff4
 8001a94:	0800cff8 	.word	0x0800cff8
 8001a98:	0800cffc 	.word	0x0800cffc
 8001a9c:	0800d000 	.word	0x0800d000
 8001aa0:	0800d004 	.word	0x0800d004
 8001aa4:	0800d008 	.word	0x0800d008
 8001aa8:	0800d00c 	.word	0x0800d00c
 8001aac:	0800d010 	.word	0x0800d010
 8001ab0:	0800d014 	.word	0x0800d014
 8001ab4:	0800d018 	.word	0x0800d018
 8001ab8:	0800d01c 	.word	0x0800d01c
 8001abc:	0800d020 	.word	0x0800d020
 8001ac0:	0800d024 	.word	0x0800d024
 8001ac4:	0800d028 	.word	0x0800d028
 8001ac8:	0800d02c 	.word	0x0800d02c
 8001acc:	0800cecc 	.word	0x0800cecc
 8001ad0:	0800d030 	.word	0x0800d030
 8001ad4:	0800d034 	.word	0x0800d034
 8001ad8:	0800d038 	.word	0x0800d038
 8001adc:	0800d03c 	.word	0x0800d03c
 8001ae0:	0800d040 	.word	0x0800d040
 8001ae4:	0800d044 	.word	0x0800d044
 8001ae8:	0800d048 	.word	0x0800d048
 8001aec:	0800d04c 	.word	0x0800d04c
 8001af0:	0800d050 	.word	0x0800d050
 8001af4:	0800ced0 	.word	0x0800ced0
 8001af8:	0800ced4 	.word	0x0800ced4
 8001afc:	0800d054 	.word	0x0800d054
 8001b00:	0800cedc 	.word	0x0800cedc
 8001b04:	0800d058 	.word	0x0800d058
 8001b08:	0800ceec 	.word	0x0800ceec
 8001b0c:	0800d05c 	.word	0x0800d05c
 8001b10:	0800cefc 	.word	0x0800cefc
 8001b14:	0800d060 	.word	0x0800d060
 8001b18:	0800d098 	.word	0x0800d098
 8001b1c:	0800cf08 	.word	0x0800cf08
 8001b20:	0800d064 	.word	0x0800d064
 8001b24:	0800cf14 	.word	0x0800cf14
 8001b28:	0800cf24 	.word	0x0800cf24
 8001b2c:	0800cf34 	.word	0x0800cf34
 8001b30:	0800cf40 	.word	0x0800cf40
 8001b34:	0800cf50 	.word	0x0800cf50
 8001b38:	0800d068 	.word	0x0800d068
 8001b3c:	0800cf60 	.word	0x0800cf60
 8001b40:	0800d06c 	.word	0x0800d06c
 8001b44:	0800cf6c 	.word	0x0800cf6c
 8001b48:	0800cf78 	.word	0x0800cf78
 8001b4c:	0800cf84 	.word	0x0800cf84
 8001b50:	0800cf94 	.word	0x0800cf94
 8001b54:	0800cfa4 	.word	0x0800cfa4
 8001b58:	0800cfb0 	.word	0x0800cfb0
 8001b5c:	0800cfc0 	.word	0x0800cfc0
 8001b60:	0800d09c 	.word	0x0800d09c
 8001b64:	0800d0a0 	.word	0x0800d0a0
 8001b68:	0800d0a4 	.word	0x0800d0a4
 8001b6c:	0800d0a8 	.word	0x0800d0a8
 8001b70:	0800d0ac 	.word	0x0800d0ac
 8001b74:	0800cfd0 	.word	0x0800cfd0
 8001b78:	0800cea4 	.word	0x0800cea4
 8001b7c:	0800ceb8 	.word	0x0800ceb8
 8001b80:	0800d070 	.word	0x0800d070
 8001b84:	0800d074 	.word	0x0800d074
 8001b88:	0800d078 	.word	0x0800d078
  default :
    break;
 8001b8c:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d10b      	bne.n	8001bac <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8001b94:	4916      	ldr	r1, [pc, #88]	; (8001bf0 <OTM8009A_Init+0x488>)
 8001b96:	2000      	movs	r0, #0
 8001b98:	f000 fe0a 	bl	80027b0 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 8001b9c:	4915      	ldr	r1, [pc, #84]	; (8001bf4 <OTM8009A_Init+0x48c>)
 8001b9e:	2004      	movs	r0, #4
 8001ba0:	f000 fe06 	bl	80027b0 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8001ba4:	4914      	ldr	r1, [pc, #80]	; (8001bf8 <OTM8009A_Init+0x490>)
 8001ba6:	2004      	movs	r0, #4
 8001ba8:	f000 fe02 	bl	80027b0 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8001bac:	4913      	ldr	r1, [pc, #76]	; (8001bfc <OTM8009A_Init+0x494>)
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f000 fdfe 	bl	80027b0 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8001bb4:	4912      	ldr	r1, [pc, #72]	; (8001c00 <OTM8009A_Init+0x498>)
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f000 fdfa 	bl	80027b0 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8001bbc:	4911      	ldr	r1, [pc, #68]	; (8001c04 <OTM8009A_Init+0x49c>)
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f000 fdf6 	bl	80027b0 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8001bc4:	4910      	ldr	r1, [pc, #64]	; (8001c08 <OTM8009A_Init+0x4a0>)
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f000 fdf2 	bl	80027b0 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8001bcc:	490f      	ldr	r1, [pc, #60]	; (8001c0c <OTM8009A_Init+0x4a4>)
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f000 fdee 	bl	80027b0 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001bd4:	490e      	ldr	r1, [pc, #56]	; (8001c10 <OTM8009A_Init+0x4a8>)
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	f000 fdea 	bl	80027b0 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 8001bdc:	490d      	ldr	r1, [pc, #52]	; (8001c14 <OTM8009A_Init+0x4ac>)
 8001bde:	2000      	movs	r0, #0
 8001be0:	f000 fde6 	bl	80027b0 <DSI_IO_WriteCmd>

  return 0;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	0800d07c 	.word	0x0800d07c
 8001bf4:	0800cfd4 	.word	0x0800cfd4
 8001bf8:	0800cfdc 	.word	0x0800cfdc
 8001bfc:	0800d080 	.word	0x0800d080
 8001c00:	0800d084 	.word	0x0800d084
 8001c04:	0800d088 	.word	0x0800d088
 8001c08:	0800d08c 	.word	0x0800d08c
 8001c0c:	0800d090 	.word	0x0800d090
 8001c10:	0800cfe4 	.word	0x0800cfe4
 8001c14:	0800d094 	.word	0x0800d094

08001c18 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08c      	sub	sp, #48	; 0x30
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	4a58      	ldr	r2, [pc, #352]	; (8001d84 <I2Cx_MspInit+0x16c>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d15b      	bne.n	8001ce0 <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8001c28:	4b57      	ldr	r3, [pc, #348]	; (8001d88 <I2Cx_MspInit+0x170>)
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2c:	4a56      	ldr	r2, [pc, #344]	; (8001d88 <I2Cx_MspInit+0x170>)
 8001c2e:	f043 0308 	orr.w	r3, r3, #8
 8001c32:	6313      	str	r3, [r2, #48]	; 0x30
 8001c34:	4b54      	ldr	r3, [pc, #336]	; (8001d88 <I2Cx_MspInit+0x170>)
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	61bb      	str	r3, [r7, #24]
 8001c3e:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 8001c40:	4b51      	ldr	r3, [pc, #324]	; (8001d88 <I2Cx_MspInit+0x170>)
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	4a50      	ldr	r2, [pc, #320]	; (8001d88 <I2Cx_MspInit+0x170>)
 8001c46:	f043 0302 	orr.w	r3, r3, #2
 8001c4a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4c:	4b4e      	ldr	r3, [pc, #312]	; (8001d88 <I2Cx_MspInit+0x170>)
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	617b      	str	r3, [r7, #20]
 8001c56:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8001c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c5c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001c5e:	2312      	movs	r3, #18
 8001c60:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001c66:	2302      	movs	r3, #2
 8001c68:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 8001c6e:	f107 031c 	add.w	r3, r7, #28
 8001c72:	4619      	mov	r1, r3
 8001c74:	4845      	ldr	r0, [pc, #276]	; (8001d8c <I2Cx_MspInit+0x174>)
 8001c76:	f003 f85f 	bl	8004d38 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8001c7a:	2380      	movs	r3, #128	; 0x80
 8001c7c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 8001c7e:	230b      	movs	r3, #11
 8001c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 8001c82:	f107 031c 	add.w	r3, r7, #28
 8001c86:	4619      	mov	r1, r3
 8001c88:	4841      	ldr	r0, [pc, #260]	; (8001d90 <I2Cx_MspInit+0x178>)
 8001c8a:	f003 f855 	bl	8004d38 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8001c8e:	4b3e      	ldr	r3, [pc, #248]	; (8001d88 <I2Cx_MspInit+0x170>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	4a3d      	ldr	r2, [pc, #244]	; (8001d88 <I2Cx_MspInit+0x170>)
 8001c94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c98:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9a:	4b3b      	ldr	r3, [pc, #236]	; (8001d88 <I2Cx_MspInit+0x170>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8001ca6:	4b38      	ldr	r3, [pc, #224]	; (8001d88 <I2Cx_MspInit+0x170>)
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	4a37      	ldr	r2, [pc, #220]	; (8001d88 <I2Cx_MspInit+0x170>)
 8001cac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cb0:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8001cb2:	4b35      	ldr	r3, [pc, #212]	; (8001d88 <I2Cx_MspInit+0x170>)
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	4a34      	ldr	r2, [pc, #208]	; (8001d88 <I2Cx_MspInit+0x170>)
 8001cb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cbc:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	210f      	movs	r1, #15
 8001cc2:	205f      	movs	r0, #95	; 0x5f
 8001cc4:	f001 fcd4 	bl	8003670 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8001cc8:	205f      	movs	r0, #95	; 0x5f
 8001cca:	f001 fced 	bl	80036a8 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8001cce:	2200      	movs	r2, #0
 8001cd0:	210f      	movs	r1, #15
 8001cd2:	2060      	movs	r0, #96	; 0x60
 8001cd4:	f001 fccc 	bl	8003670 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8001cd8:	2060      	movs	r0, #96	; 0x60
 8001cda:	f001 fce5 	bl	80036a8 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8001cde:	e04d      	b.n	8001d7c <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001ce0:	4b29      	ldr	r3, [pc, #164]	; (8001d88 <I2Cx_MspInit+0x170>)
 8001ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce4:	4a28      	ldr	r2, [pc, #160]	; (8001d88 <I2Cx_MspInit+0x170>)
 8001ce6:	f043 0302 	orr.w	r3, r3, #2
 8001cea:	6313      	str	r3, [r2, #48]	; 0x30
 8001cec:	4b26      	ldr	r3, [pc, #152]	; (8001d88 <I2Cx_MspInit+0x170>)
 8001cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8001cf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cfc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001cfe:	2312      	movs	r3, #18
 8001d00:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8001d06:	2302      	movs	r3, #2
 8001d08:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8001d0a:	2304      	movs	r3, #4
 8001d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001d0e:	f107 031c 	add.w	r3, r7, #28
 8001d12:	4619      	mov	r1, r3
 8001d14:	481e      	ldr	r0, [pc, #120]	; (8001d90 <I2Cx_MspInit+0x178>)
 8001d16:	f003 f80f 	bl	8004d38 <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8001d1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001d20:	f107 031c 	add.w	r3, r7, #28
 8001d24:	4619      	mov	r1, r3
 8001d26:	481a      	ldr	r0, [pc, #104]	; (8001d90 <I2Cx_MspInit+0x178>)
 8001d28:	f003 f806 	bl	8004d38 <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8001d2c:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <I2Cx_MspInit+0x170>)
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	4a15      	ldr	r2, [pc, #84]	; (8001d88 <I2Cx_MspInit+0x170>)
 8001d32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d36:	6413      	str	r3, [r2, #64]	; 0x40
 8001d38:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <I2Cx_MspInit+0x170>)
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8001d44:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <I2Cx_MspInit+0x170>)
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	4a0f      	ldr	r2, [pc, #60]	; (8001d88 <I2Cx_MspInit+0x170>)
 8001d4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d4e:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8001d50:	4b0d      	ldr	r3, [pc, #52]	; (8001d88 <I2Cx_MspInit+0x170>)
 8001d52:	6a1b      	ldr	r3, [r3, #32]
 8001d54:	4a0c      	ldr	r2, [pc, #48]	; (8001d88 <I2Cx_MspInit+0x170>)
 8001d56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d5a:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	210f      	movs	r1, #15
 8001d60:	201f      	movs	r0, #31
 8001d62:	f001 fc85 	bl	8003670 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8001d66:	201f      	movs	r0, #31
 8001d68:	f001 fc9e 	bl	80036a8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	210f      	movs	r1, #15
 8001d70:	2020      	movs	r0, #32
 8001d72:	f001 fc7d 	bl	8003670 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8001d76:	2020      	movs	r0, #32
 8001d78:	f001 fc96 	bl	80036a8 <HAL_NVIC_EnableIRQ>
}
 8001d7c:	bf00      	nop
 8001d7e:	3730      	adds	r7, #48	; 0x30
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	200007bc 	.word	0x200007bc
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40020c00 	.word	0x40020c00
 8001d90:	40020400 	.word	0x40020400

08001d94 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f003 fdaf 	bl	8005900 <HAL_I2C_GetState>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d125      	bne.n	8001df4 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4a14      	ldr	r2, [pc, #80]	; (8001dfc <I2Cx_Init+0x68>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d103      	bne.n	8001db8 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a13      	ldr	r2, [pc, #76]	; (8001e00 <I2Cx_Init+0x6c>)
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	e002      	b.n	8001dbe <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a12      	ldr	r2, [pc, #72]	; (8001e04 <I2Cx_Init+0x70>)
 8001dbc:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a11      	ldr	r2, [pc, #68]	; (8001e08 <I2Cx_Init+0x74>)
 8001dc2:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff ff15 	bl	8001c18 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f003 fa98 	bl	8005324 <HAL_I2C_Init>
  }
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	200007bc 	.word	0x200007bc
 8001e00:	40006000 	.word	0x40006000
 8001e04:	40005400 	.word	0x40005400
 8001e08:	40912732 	.word	0x40912732

08001e0c <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	; 0x28
 8001e10:	af04      	add	r7, sp, #16
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	4608      	mov	r0, r1
 8001e16:	4611      	mov	r1, r2
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	72fb      	strb	r3, [r7, #11]
 8001e1e:	460b      	mov	r3, r1
 8001e20:	813b      	strh	r3, [r7, #8]
 8001e22:	4613      	mov	r3, r2
 8001e24:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001e2a:	7afb      	ldrb	r3, [r7, #11]
 8001e2c:	b299      	uxth	r1, r3
 8001e2e:	88f8      	ldrh	r0, [r7, #6]
 8001e30:	893a      	ldrh	r2, [r7, #8]
 8001e32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e36:	9302      	str	r3, [sp, #8]
 8001e38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e3a:	9301      	str	r3, [sp, #4]
 8001e3c:	6a3b      	ldr	r3, [r7, #32]
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	4603      	mov	r3, r0
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f003 fc42 	bl	80056cc <HAL_I2C_Mem_Read>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001e4c:	7dfb      	ldrb	r3, [r7, #23]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d004      	beq.n	8001e5c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 8001e52:	7afb      	ldrb	r3, [r7, #11]
 8001e54:	4619      	mov	r1, r3
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f000 f832 	bl	8001ec0 <I2Cx_Error>
  }
  return status;
 8001e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b08a      	sub	sp, #40	; 0x28
 8001e6a:	af04      	add	r7, sp, #16
 8001e6c:	60f8      	str	r0, [r7, #12]
 8001e6e:	4608      	mov	r0, r1
 8001e70:	4611      	mov	r1, r2
 8001e72:	461a      	mov	r2, r3
 8001e74:	4603      	mov	r3, r0
 8001e76:	72fb      	strb	r3, [r7, #11]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	813b      	strh	r3, [r7, #8]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001e84:	7afb      	ldrb	r3, [r7, #11]
 8001e86:	b299      	uxth	r1, r3
 8001e88:	88f8      	ldrh	r0, [r7, #6]
 8001e8a:	893a      	ldrh	r2, [r7, #8]
 8001e8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e90:	9302      	str	r3, [sp, #8]
 8001e92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e94:	9301      	str	r3, [sp, #4]
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f003 fb01 	bl	80054a4 <HAL_I2C_Mem_Write>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001ea6:	7dfb      	ldrb	r3, [r7, #23]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d004      	beq.n	8001eb6 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001eac:	7afb      	ldrb	r3, [r7, #11]
 8001eae:	4619      	mov	r1, r3
 8001eb0:	68f8      	ldr	r0, [r7, #12]
 8001eb2:	f000 f805 	bl	8001ec0 <I2Cx_Error>
  }
  return status;
 8001eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f003 fab9 	bl	8005444 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff ff5e 	bl	8001d94 <I2Cx_Init>
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <TS_IO_Init+0x10>)
 8001ee6:	f7ff ff55 	bl	8001d94 <I2Cx_Init>
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	200007bc 	.word	0x200007bc

08001ef4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af02      	add	r7, sp, #8
 8001efa:	4603      	mov	r3, r0
 8001efc:	71fb      	strb	r3, [r7, #7]
 8001efe:	460b      	mov	r3, r1
 8001f00:	71bb      	strb	r3, [r7, #6]
 8001f02:	4613      	mov	r3, r2
 8001f04:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001f06:	79bb      	ldrb	r3, [r7, #6]
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	79f9      	ldrb	r1, [r7, #7]
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	1d7b      	adds	r3, r7, #5
 8001f12:	9300      	str	r3, [sp, #0]
 8001f14:	2301      	movs	r3, #1
 8001f16:	4803      	ldr	r0, [pc, #12]	; (8001f24 <TS_IO_Write+0x30>)
 8001f18:	f7ff ffa5 	bl	8001e66 <I2Cx_WriteMultiple>
}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	200007bc 	.word	0x200007bc

08001f28 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af02      	add	r7, sp, #8
 8001f2e:	4603      	mov	r3, r0
 8001f30:	460a      	mov	r2, r1
 8001f32:	71fb      	strb	r3, [r7, #7]
 8001f34:	4613      	mov	r3, r2
 8001f36:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001f3c:	79bb      	ldrb	r3, [r7, #6]
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	79f9      	ldrb	r1, [r7, #7]
 8001f42:	2301      	movs	r3, #1
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	f107 030f 	add.w	r3, r7, #15
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	4804      	ldr	r0, [pc, #16]	; (8001f60 <TS_IO_Read+0x38>)
 8001f50:	f7ff ff5c 	bl	8001e0c <I2Cx_ReadMultiple>

  return read_value;
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200007bc 	.word	0x200007bc

08001f64 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af02      	add	r7, sp, #8
 8001f6a:	603a      	str	r2, [r7, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4603      	mov	r3, r0
 8001f70:	71fb      	strb	r3, [r7, #7]
 8001f72:	460b      	mov	r3, r1
 8001f74:	71bb      	strb	r3, [r7, #6]
 8001f76:	4613      	mov	r3, r2
 8001f78:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001f7a:	79bb      	ldrb	r3, [r7, #6]
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	79f9      	ldrb	r1, [r7, #7]
 8001f80:	88bb      	ldrh	r3, [r7, #4]
 8001f82:	9301      	str	r3, [sp, #4]
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	2301      	movs	r3, #1
 8001f8a:	4804      	ldr	r0, [pc, #16]	; (8001f9c <TS_IO_ReadMultiple+0x38>)
 8001f8c:	f7ff ff3e 	bl	8001e0c <I2Cx_ReadMultiple>
 8001f90:	4603      	mov	r3, r0
 8001f92:	b29b      	uxth	r3, r3
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	200007bc 	.word	0x200007bc

08001fa0 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f001 f965 	bl	8003278 <HAL_Delay>
}
 8001fae:	bf00      	nop
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8001fba:	2001      	movs	r0, #1
 8001fbc:	f000 f804 	bl	8001fc8 <BSP_LCD_InitEx>
 8001fc0:	4603      	mov	r3, r0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b090      	sub	sp, #64	; 0x40
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 8001fd2:	f646 3325 	movw	r3, #27429	; 0x6b25
 8001fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8001fe0:	f000 f936 	bl	8002250 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 8001fe4:	f000 fc0e 	bl	8002804 <LCD_IO_GetID>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 8001fec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001fee:	2b11      	cmp	r3, #17
 8001ff0:	d001      	beq.n	8001ff6 <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e113      	b.n	800221e <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 8001ff6:	f000 fc0d 	bl	8002814 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 8001ffa:	4b8b      	ldr	r3, [pc, #556]	; (8002228 <BSP_LCD_InitEx+0x260>)
 8001ffc:	4a8b      	ldr	r2, [pc, #556]	; (800222c <BSP_LCD_InitEx+0x264>)
 8001ffe:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8002000:	4889      	ldr	r0, [pc, #548]	; (8002228 <BSP_LCD_InitEx+0x260>)
 8002002:	f002 fa47 	bl	8004494 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 8002006:	2364      	movs	r3, #100	; 0x64
 8002008:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 800200a:	2305      	movs	r3, #5
 800200c:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8002012:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002016:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8002018:	4b83      	ldr	r3, [pc, #524]	; (8002228 <BSP_LCD_InitEx+0x260>)
 800201a:	2201      	movs	r2, #1
 800201c:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 800201e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002020:	089b      	lsrs	r3, r3, #2
 8002022:	4a83      	ldr	r2, [pc, #524]	; (8002230 <BSP_LCD_InitEx+0x268>)
 8002024:	fba2 2303 	umull	r2, r3, r2, r3
 8002028:	0a9b      	lsrs	r3, r3, #10
 800202a:	4a7f      	ldr	r2, [pc, #508]	; (8002228 <BSP_LCD_InitEx+0x260>)
 800202c:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 800202e:	f107 0308 	add.w	r3, r7, #8
 8002032:	4619      	mov	r1, r3
 8002034:	487c      	ldr	r0, [pc, #496]	; (8002228 <BSP_LCD_InitEx+0x260>)
 8002036:	f002 f911 	bl	800425c <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d108      	bne.n	8002052 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8002040:	4b7c      	ldr	r3, [pc, #496]	; (8002234 <BSP_LCD_InitEx+0x26c>)
 8002042:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002046:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8002048:	4b7b      	ldr	r3, [pc, #492]	; (8002238 <BSP_LCD_InitEx+0x270>)
 800204a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	e007      	b.n	8002062 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8002052:	4b78      	ldr	r3, [pc, #480]	; (8002234 <BSP_LCD_InitEx+0x26c>)
 8002054:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002058:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 800205a:	4b77      	ldr	r3, [pc, #476]	; (8002238 <BSP_LCD_InitEx+0x270>)
 800205c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002060:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 8002062:	4b74      	ldr	r3, [pc, #464]	; (8002234 <BSP_LCD_InitEx+0x26c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 8002068:	4b73      	ldr	r3, [pc, #460]	; (8002238 <BSP_LCD_InitEx+0x270>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 800206e:	2301      	movs	r3, #1
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 8002072:	230f      	movs	r3, #15
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 8002076:	2310      	movs	r3, #16
 8002078:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 800207a:	2302      	movs	r3, #2
 800207c:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 800207e:	2322      	movs	r3, #34	; 0x22
 8002080:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 8002082:	2322      	movs	r3, #34	; 0x22
 8002084:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8002086:	4b6d      	ldr	r3, [pc, #436]	; (800223c <BSP_LCD_InitEx+0x274>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 800208c:	4b6b      	ldr	r3, [pc, #428]	; (800223c <BSP_LCD_InitEx+0x274>)
 800208e:	2205      	movs	r2, #5
 8002090:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8002092:	4b6a      	ldr	r3, [pc, #424]	; (800223c <BSP_LCD_InitEx+0x274>)
 8002094:	2200      	movs	r2, #0
 8002096:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8002098:	4b68      	ldr	r3, [pc, #416]	; (800223c <BSP_LCD_InitEx+0x274>)
 800209a:	2200      	movs	r2, #0
 800209c:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 800209e:	4b67      	ldr	r3, [pc, #412]	; (800223c <BSP_LCD_InitEx+0x274>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 80020a4:	4b65      	ldr	r3, [pc, #404]	; (800223c <BSP_LCD_InitEx+0x274>)
 80020a6:	2202      	movs	r2, #2
 80020a8:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 80020aa:	4b64      	ldr	r3, [pc, #400]	; (800223c <BSP_LCD_InitEx+0x274>)
 80020ac:	f640 72ff 	movw	r2, #4095	; 0xfff
 80020b0:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 80020b2:	4b62      	ldr	r3, [pc, #392]	; (800223c <BSP_LCD_InitEx+0x274>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 80020b8:	4a60      	ldr	r2, [pc, #384]	; (800223c <BSP_LCD_InitEx+0x274>)
 80020ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020bc:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020c2:	fb03 f202 	mul.w	r2, r3, r2
 80020c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020cc:	4a5b      	ldr	r2, [pc, #364]	; (800223c <BSP_LCD_InitEx+0x274>)
 80020ce:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020d4:	fb03 f202 	mul.w	r2, r3, r2
 80020d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020da:	fbb2 f3f3 	udiv	r3, r2, r3
 80020de:	4a57      	ldr	r2, [pc, #348]	; (800223c <BSP_LCD_InitEx+0x274>)
 80020e0:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 80020e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	441a      	add	r2, r3
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	441a      	add	r2, r3
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	4413      	add	r3, r2
 80020f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020f2:	fb03 f202 	mul.w	r2, r3, r2
 80020f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fc:	4a4f      	ldr	r2, [pc, #316]	; (800223c <BSP_LCD_InitEx+0x274>)
 80020fe:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8002100:	4a4e      	ldr	r2, [pc, #312]	; (800223c <BSP_LCD_InitEx+0x274>)
 8002102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002104:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8002106:	4a4d      	ldr	r2, [pc, #308]	; (800223c <BSP_LCD_InitEx+0x274>)
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 800210c:	4a4b      	ldr	r2, [pc, #300]	; (800223c <BSP_LCD_InitEx+0x274>)
 800210e:	6a3b      	ldr	r3, [r7, #32]
 8002110:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8002112:	4a4a      	ldr	r2, [pc, #296]	; (800223c <BSP_LCD_InitEx+0x274>)
 8002114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002116:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8002118:	4b48      	ldr	r3, [pc, #288]	; (800223c <BSP_LCD_InitEx+0x274>)
 800211a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800211e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8002120:	4b46      	ldr	r3, [pc, #280]	; (800223c <BSP_LCD_InitEx+0x274>)
 8002122:	2210      	movs	r2, #16
 8002124:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8002126:	4b45      	ldr	r3, [pc, #276]	; (800223c <BSP_LCD_InitEx+0x274>)
 8002128:	2200      	movs	r2, #0
 800212a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 800212c:	4b43      	ldr	r3, [pc, #268]	; (800223c <BSP_LCD_InitEx+0x274>)
 800212e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002132:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8002134:	4b41      	ldr	r3, [pc, #260]	; (800223c <BSP_LCD_InitEx+0x274>)
 8002136:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800213a:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 800213c:	4b3f      	ldr	r3, [pc, #252]	; (800223c <BSP_LCD_InitEx+0x274>)
 800213e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002142:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8002144:	4b3d      	ldr	r3, [pc, #244]	; (800223c <BSP_LCD_InitEx+0x274>)
 8002146:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800214a:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 800214c:	4b3b      	ldr	r3, [pc, #236]	; (800223c <BSP_LCD_InitEx+0x274>)
 800214e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002152:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8002154:	4b39      	ldr	r3, [pc, #228]	; (800223c <BSP_LCD_InitEx+0x274>)
 8002156:	f44f 7280 	mov.w	r2, #256	; 0x100
 800215a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 800215c:	4937      	ldr	r1, [pc, #220]	; (800223c <BSP_LCD_InitEx+0x274>)
 800215e:	4832      	ldr	r0, [pc, #200]	; (8002228 <BSP_LCD_InitEx+0x260>)
 8002160:	f002 faf4 	bl	800474c <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	3b01      	subs	r3, #1
 8002168:	4a35      	ldr	r2, [pc, #212]	; (8002240 <BSP_LCD_InitEx+0x278>)
 800216a:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 800216c:	69fa      	ldr	r2, [r7, #28]
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	4413      	add	r3, r2
 8002172:	3b01      	subs	r3, #1
 8002174:	4a32      	ldr	r2, [pc, #200]	; (8002240 <BSP_LCD_InitEx+0x278>)
 8002176:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8002178:	4b2e      	ldr	r3, [pc, #184]	; (8002234 <BSP_LCD_InitEx+0x26c>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	441a      	add	r2, r3
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	4413      	add	r3, r2
 8002184:	3b01      	subs	r3, #1
 8002186:	4a2e      	ldr	r2, [pc, #184]	; (8002240 <BSP_LCD_InitEx+0x278>)
 8002188:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 800218a:	4b2a      	ldr	r3, [pc, #168]	; (8002234 <BSP_LCD_InitEx+0x26c>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	441a      	add	r2, r3
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	441a      	add	r2, r3
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	4413      	add	r3, r2
 800219a:	3b01      	subs	r3, #1
 800219c:	4a28      	ldr	r2, [pc, #160]	; (8002240 <BSP_LCD_InitEx+0x278>)
 800219e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 80021a0:	4b24      	ldr	r3, [pc, #144]	; (8002234 <BSP_LCD_InitEx+0x26c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a26      	ldr	r2, [pc, #152]	; (8002240 <BSP_LCD_InitEx+0x278>)
 80021a6:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 80021a8:	4b23      	ldr	r3, [pc, #140]	; (8002238 <BSP_LCD_InitEx+0x270>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a24      	ldr	r2, [pc, #144]	; (8002240 <BSP_LCD_InitEx+0x278>)
 80021ae:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80021b0:	4b24      	ldr	r3, [pc, #144]	; (8002244 <BSP_LCD_InitEx+0x27c>)
 80021b2:	2208      	movs	r2, #8
 80021b4:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80021b6:	4b23      	ldr	r3, [pc, #140]	; (8002244 <BSP_LCD_InitEx+0x27c>)
 80021b8:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80021bc:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80021be:	4b21      	ldr	r3, [pc, #132]	; (8002244 <BSP_LCD_InitEx+0x27c>)
 80021c0:	2207      	movs	r2, #7
 80021c2:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80021c4:	4b1f      	ldr	r3, [pc, #124]	; (8002244 <BSP_LCD_InitEx+0x27c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80021ca:	481e      	ldr	r0, [pc, #120]	; (8002244 <BSP_LCD_InitEx+0x27c>)
 80021cc:	f005 feaa 	bl	8007f24 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 80021d0:	4b1b      	ldr	r3, [pc, #108]	; (8002240 <BSP_LCD_InitEx+0x278>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <BSP_LCD_InitEx+0x278>)
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 80021e0:	4b17      	ldr	r3, [pc, #92]	; (8002240 <BSP_LCD_InitEx+0x278>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80021e8:	4b15      	ldr	r3, [pc, #84]	; (8002240 <BSP_LCD_InitEx+0x278>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 80021ee:	4b14      	ldr	r3, [pc, #80]	; (8002240 <BSP_LCD_InitEx+0x278>)
 80021f0:	4a15      	ldr	r2, [pc, #84]	; (8002248 <BSP_LCD_InitEx+0x280>)
 80021f2:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 80021f4:	4911      	ldr	r1, [pc, #68]	; (800223c <BSP_LCD_InitEx+0x274>)
 80021f6:	4812      	ldr	r0, [pc, #72]	; (8002240 <BSP_LCD_InitEx+0x278>)
 80021f8:	f004 f994 	bl	8006524 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 80021fc:	4810      	ldr	r0, [pc, #64]	; (8002240 <BSP_LCD_InitEx+0x278>)
 80021fe:	f003 fe27 	bl	8005e50 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 8002202:	4809      	ldr	r0, [pc, #36]	; (8002228 <BSP_LCD_InitEx+0x260>)
 8002204:	f002 fca2 	bl	8004b4c <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002208:	f000 fc84 	bl	8002b14 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800220c:	480f      	ldr	r0, [pc, #60]	; (800224c <BSP_LCD_InitEx+0x284>)
 800220e:	f000 f901 	bl	8002414 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	4619      	mov	r1, r3
 8002216:	2000      	movs	r0, #0
 8002218:	f7ff faa6 	bl	8001768 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3740      	adds	r7, #64	; 0x40
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	2000097c 	.word	0x2000097c
 800222c:	40016c00 	.word	0x40016c00
 8002230:	43215e57 	.word	0x43215e57
 8002234:	20000034 	.word	0x20000034
 8002238:	20000038 	.word	0x20000038
 800223c:	20000810 	.word	0x20000810
 8002240:	200008d4 	.word	0x200008d4
 8002244:	200009b4 	.word	0x200009b4
 8002248:	40016800 	.word	0x40016800
 800224c:	2000002c 	.word	0x2000002c

08002250 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002256:	4b18      	ldr	r3, [pc, #96]	; (80022b8 <BSP_LCD_Reset+0x68>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	4a17      	ldr	r2, [pc, #92]	; (80022b8 <BSP_LCD_Reset+0x68>)
 800225c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002260:	6313      	str	r3, [r2, #48]	; 0x30
 8002262:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <BSP_LCD_Reset+0x68>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800226a:	603b      	str	r3, [r7, #0]
 800226c:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 800226e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002272:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002274:	2301      	movs	r3, #1
 8002276:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8002278:	2301      	movs	r3, #1
 800227a:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800227c:	2303      	movs	r3, #3
 800227e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	4619      	mov	r1, r3
 8002284:	480d      	ldr	r0, [pc, #52]	; (80022bc <BSP_LCD_Reset+0x6c>)
 8002286:	f002 fd57 	bl	8004d38 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 800228a:	2200      	movs	r2, #0
 800228c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002290:	480a      	ldr	r0, [pc, #40]	; (80022bc <BSP_LCD_Reset+0x6c>)
 8002292:	f003 f809 	bl	80052a8 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 8002296:	2014      	movs	r0, #20
 8002298:	f000 ffee 	bl	8003278 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 800229c:	2201      	movs	r2, #1
 800229e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022a2:	4806      	ldr	r0, [pc, #24]	; (80022bc <BSP_LCD_Reset+0x6c>)
 80022a4:	f003 f800 	bl	80052a8 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 80022a8:	200a      	movs	r0, #10
 80022aa:	f000 ffe5 	bl	8003278 <HAL_Delay>
}
 80022ae:	bf00      	nop
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40022400 	.word	0x40022400

080022c0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 80022c4:	4b03      	ldr	r3, [pc, #12]	; (80022d4 <BSP_LCD_GetXSize+0x14>)
 80022c6:	681b      	ldr	r3, [r3, #0]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	20000034 	.word	0x20000034

080022d8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 80022dc:	4b03      	ldr	r3, [pc, #12]	; (80022ec <BSP_LCD_GetYSize+0x14>)
 80022de:	681b      	ldr	r3, [r3, #0]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	20000038 	.word	0x20000038

080022f0 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b090      	sub	sp, #64	; 0x40
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	6039      	str	r1, [r7, #0]
 80022fa:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002300:	f7ff ffde 	bl	80022c0 <BSP_LCD_GetXSize>
 8002304:	4603      	mov	r3, r0
 8002306:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 800230c:	f7ff ffe4 	bl	80022d8 <BSP_LCD_GetYSize>
 8002310:	4603      	mov	r3, r0
 8002312:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 800231c:	23ff      	movs	r3, #255	; 0xff
 800231e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002324:	2300      	movs	r3, #0
 8002326:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002330:	2300      	movs	r3, #0
 8002332:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002336:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800233a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800233c:	2307      	movs	r3, #7
 800233e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002340:	f7ff ffbe 	bl	80022c0 <BSP_LCD_GetXSize>
 8002344:	4603      	mov	r3, r0
 8002346:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002348:	f7ff ffc6 	bl	80022d8 <BSP_LCD_GetYSize>
 800234c:	4603      	mov	r3, r0
 800234e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8002350:	88fa      	ldrh	r2, [r7, #6]
 8002352:	f107 030c 	add.w	r3, r7, #12
 8002356:	4619      	mov	r1, r3
 8002358:	4812      	ldr	r0, [pc, #72]	; (80023a4 <BSP_LCD_LayerDefaultInit+0xb4>)
 800235a:	f003 ff0b 	bl	8006174 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800235e:	88fa      	ldrh	r2, [r7, #6]
 8002360:	4911      	ldr	r1, [pc, #68]	; (80023a8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002362:	4613      	mov	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	3304      	adds	r3, #4
 800236e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002372:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002374:	88fa      	ldrh	r2, [r7, #6]
 8002376:	490c      	ldr	r1, [pc, #48]	; (80023a8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002378:	4613      	mov	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	3308      	adds	r3, #8
 8002384:	4a09      	ldr	r2, [pc, #36]	; (80023ac <BSP_LCD_LayerDefaultInit+0xbc>)
 8002386:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8002388:	88fa      	ldrh	r2, [r7, #6]
 800238a:	4907      	ldr	r1, [pc, #28]	; (80023a8 <BSP_LCD_LayerDefaultInit+0xb8>)
 800238c:	4613      	mov	r3, r2
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800239a:	601a      	str	r2, [r3, #0]
}
 800239c:	bf00      	nop
 800239e:	3740      	adds	r7, #64	; 0x40
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	200008d4 	.word	0x200008d4
 80023a8:	2000099c 	.word	0x2000099c
 80023ac:	2000002c 	.word	0x2000002c

080023b0 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80023b8:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <BSP_LCD_SetTextColor+0x28>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4907      	ldr	r1, [pc, #28]	; (80023dc <BSP_LCD_SetTextColor+0x2c>)
 80023be:	4613      	mov	r3, r2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	601a      	str	r2, [r3, #0]
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	20000998 	.word	0x20000998
 80023dc:	2000099c 	.word	0x2000099c

080023e0 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80023e8:	4b08      	ldr	r3, [pc, #32]	; (800240c <BSP_LCD_SetBackColor+0x2c>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4908      	ldr	r1, [pc, #32]	; (8002410 <BSP_LCD_SetBackColor+0x30>)
 80023ee:	4613      	mov	r3, r2
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4413      	add	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	440b      	add	r3, r1
 80023f8:	3304      	adds	r3, #4
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	601a      	str	r2, [r3, #0]
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	20000998 	.word	0x20000998
 8002410:	2000099c 	.word	0x2000099c

08002414 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 800241c:	4b08      	ldr	r3, [pc, #32]	; (8002440 <BSP_LCD_SetFont+0x2c>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4908      	ldr	r1, [pc, #32]	; (8002444 <BSP_LCD_SetFont+0x30>)
 8002422:	4613      	mov	r3, r2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	4413      	add	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	440b      	add	r3, r1
 800242c:	3308      	adds	r3, #8
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	601a      	str	r2, [r3, #0]
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	20000998 	.word	0x20000998
 8002444:	2000099c 	.word	0x2000099c

08002448 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8002448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800244a:	b085      	sub	sp, #20
 800244c:	af02      	add	r7, sp, #8
 800244e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002450:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <BSP_LCD_Clear+0x48>)
 8002452:	681c      	ldr	r4, [r3, #0]
 8002454:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <BSP_LCD_Clear+0x48>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a0e      	ldr	r2, [pc, #56]	; (8002494 <BSP_LCD_Clear+0x4c>)
 800245a:	2134      	movs	r1, #52	; 0x34
 800245c:	fb01 f303 	mul.w	r3, r1, r3
 8002460:	4413      	add	r3, r2
 8002462:	335c      	adds	r3, #92	; 0x5c
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	461e      	mov	r6, r3
 8002468:	f7ff ff2a 	bl	80022c0 <BSP_LCD_GetXSize>
 800246c:	4605      	mov	r5, r0
 800246e:	f7ff ff33 	bl	80022d8 <BSP_LCD_GetYSize>
 8002472:	4602      	mov	r2, r0
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	9301      	str	r3, [sp, #4]
 8002478:	2300      	movs	r3, #0
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	4613      	mov	r3, r2
 800247e:	462a      	mov	r2, r5
 8002480:	4631      	mov	r1, r6
 8002482:	4620      	mov	r0, r4
 8002484:	f000 fb0e 	bl	8002aa4 <LL_FillBuffer>
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002490:	20000998 	.word	0x20000998
 8002494:	200008d4 	.word	0x200008d4

08002498 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002498:	b590      	push	{r4, r7, lr}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	80fb      	strh	r3, [r7, #6]
 80024a2:	460b      	mov	r3, r1
 80024a4:	80bb      	strh	r3, [r7, #4]
 80024a6:	4613      	mov	r3, r2
 80024a8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80024aa:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <BSP_LCD_DisplayChar+0x80>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	491b      	ldr	r1, [pc, #108]	; (800251c <BSP_LCD_DisplayChar+0x84>)
 80024b0:	4613      	mov	r3, r2
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	4413      	add	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	3308      	adds	r3, #8
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6819      	ldr	r1, [r3, #0]
 80024c0:	78fb      	ldrb	r3, [r7, #3]
 80024c2:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80024c6:	4b14      	ldr	r3, [pc, #80]	; (8002518 <BSP_LCD_DisplayChar+0x80>)
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	4c14      	ldr	r4, [pc, #80]	; (800251c <BSP_LCD_DisplayChar+0x84>)
 80024cc:	4613      	mov	r3, r2
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	4413      	add	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4423      	add	r3, r4
 80024d6:	3308      	adds	r3, #8
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80024dc:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80024e0:	4b0d      	ldr	r3, [pc, #52]	; (8002518 <BSP_LCD_DisplayChar+0x80>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	4c0d      	ldr	r4, [pc, #52]	; (800251c <BSP_LCD_DisplayChar+0x84>)
 80024e6:	4613      	mov	r3, r2
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	4413      	add	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4423      	add	r3, r4
 80024f0:	3308      	adds	r3, #8
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	889b      	ldrh	r3, [r3, #4]
 80024f6:	3307      	adds	r3, #7
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	da00      	bge.n	80024fe <BSP_LCD_DisplayChar+0x66>
 80024fc:	3307      	adds	r3, #7
 80024fe:	10db      	asrs	r3, r3, #3
 8002500:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002504:	18ca      	adds	r2, r1, r3
 8002506:	88b9      	ldrh	r1, [r7, #4]
 8002508:	88fb      	ldrh	r3, [r7, #6]
 800250a:	4618      	mov	r0, r3
 800250c:	f000 fa12 	bl	8002934 <DrawChar>
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	bd90      	pop	{r4, r7, pc}
 8002518:	20000998 	.word	0x20000998
 800251c:	2000099c 	.word	0x2000099c

08002520 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002520:	b5b0      	push	{r4, r5, r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0
 8002526:	60ba      	str	r2, [r7, #8]
 8002528:	461a      	mov	r2, r3
 800252a:	4603      	mov	r3, r0
 800252c:	81fb      	strh	r3, [r7, #14]
 800252e:	460b      	mov	r3, r1
 8002530:	81bb      	strh	r3, [r7, #12]
 8002532:	4613      	mov	r3, r2
 8002534:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002536:	2301      	movs	r3, #1
 8002538:	83fb      	strh	r3, [r7, #30]
 800253a:	2300      	movs	r3, #0
 800253c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 800253e:	2300      	movs	r3, #0
 8002540:	61bb      	str	r3, [r7, #24]
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 800254a:	e002      	b.n	8002552 <BSP_LCD_DisplayStringAt+0x32>
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	3301      	adds	r3, #1
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	617a      	str	r2, [r7, #20]
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f6      	bne.n	800254c <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800255e:	f7ff feaf 	bl	80022c0 <BSP_LCD_GetXSize>
 8002562:	4601      	mov	r1, r0
 8002564:	4b50      	ldr	r3, [pc, #320]	; (80026a8 <BSP_LCD_DisplayStringAt+0x188>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4850      	ldr	r0, [pc, #320]	; (80026ac <BSP_LCD_DisplayStringAt+0x18c>)
 800256a:	4613      	mov	r3, r2
 800256c:	005b      	lsls	r3, r3, #1
 800256e:	4413      	add	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4403      	add	r3, r0
 8002574:	3308      	adds	r3, #8
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	889b      	ldrh	r3, [r3, #4]
 800257a:	fbb1 f3f3 	udiv	r3, r1, r3
 800257e:	613b      	str	r3, [r7, #16]

  switch (Mode)
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	2b03      	cmp	r3, #3
 8002584:	d01c      	beq.n	80025c0 <BSP_LCD_DisplayStringAt+0xa0>
 8002586:	2b03      	cmp	r3, #3
 8002588:	dc33      	bgt.n	80025f2 <BSP_LCD_DisplayStringAt+0xd2>
 800258a:	2b01      	cmp	r3, #1
 800258c:	d002      	beq.n	8002594 <BSP_LCD_DisplayStringAt+0x74>
 800258e:	2b02      	cmp	r3, #2
 8002590:	d019      	beq.n	80025c6 <BSP_LCD_DisplayStringAt+0xa6>
 8002592:	e02e      	b.n	80025f2 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	1ad1      	subs	r1, r2, r3
 800259a:	4b43      	ldr	r3, [pc, #268]	; (80026a8 <BSP_LCD_DisplayStringAt+0x188>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	4843      	ldr	r0, [pc, #268]	; (80026ac <BSP_LCD_DisplayStringAt+0x18c>)
 80025a0:	4613      	mov	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4403      	add	r3, r0
 80025aa:	3308      	adds	r3, #8
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	889b      	ldrh	r3, [r3, #4]
 80025b0:	fb01 f303 	mul.w	r3, r1, r3
 80025b4:	085b      	lsrs	r3, r3, #1
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	89fb      	ldrh	r3, [r7, #14]
 80025ba:	4413      	add	r3, r2
 80025bc:	83fb      	strh	r3, [r7, #30]
      break;
 80025be:	e01b      	b.n	80025f8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80025c0:	89fb      	ldrh	r3, [r7, #14]
 80025c2:	83fb      	strh	r3, [r7, #30]
      break;
 80025c4:	e018      	b.n	80025f8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	b299      	uxth	r1, r3
 80025ce:	4b36      	ldr	r3, [pc, #216]	; (80026a8 <BSP_LCD_DisplayStringAt+0x188>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	4836      	ldr	r0, [pc, #216]	; (80026ac <BSP_LCD_DisplayStringAt+0x18c>)
 80025d4:	4613      	mov	r3, r2
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	4413      	add	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4403      	add	r3, r0
 80025de:	3308      	adds	r3, #8
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	889b      	ldrh	r3, [r3, #4]
 80025e4:	fb11 f303 	smulbb	r3, r1, r3
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	89fb      	ldrh	r3, [r7, #14]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	83fb      	strh	r3, [r7, #30]
      break;
 80025f0:	e002      	b.n	80025f8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = Xpos;
 80025f2:	89fb      	ldrh	r3, [r7, #14]
 80025f4:	83fb      	strh	r3, [r7, #30]
      break;
 80025f6:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 80025f8:	8bfb      	ldrh	r3, [r7, #30]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <BSP_LCD_DisplayStringAt+0xe6>
 80025fe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002602:	2b00      	cmp	r3, #0
 8002604:	da1d      	bge.n	8002642 <BSP_LCD_DisplayStringAt+0x122>
  {
    refcolumn = 1;
 8002606:	2301      	movs	r3, #1
 8002608:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800260a:	e01a      	b.n	8002642 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	781a      	ldrb	r2, [r3, #0]
 8002610:	89b9      	ldrh	r1, [r7, #12]
 8002612:	8bfb      	ldrh	r3, [r7, #30]
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff ff3f 	bl	8002498 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 800261a:	4b23      	ldr	r3, [pc, #140]	; (80026a8 <BSP_LCD_DisplayStringAt+0x188>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	4923      	ldr	r1, [pc, #140]	; (80026ac <BSP_LCD_DisplayStringAt+0x18c>)
 8002620:	4613      	mov	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4413      	add	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	3308      	adds	r3, #8
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	889a      	ldrh	r2, [r3, #4]
 8002630:	8bfb      	ldrh	r3, [r7, #30]
 8002632:	4413      	add	r3, r2
 8002634:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	3301      	adds	r3, #1
 800263a:	60bb      	str	r3, [r7, #8]
    i++;
 800263c:	8bbb      	ldrh	r3, [r7, #28]
 800263e:	3301      	adds	r3, #1
 8002640:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	bf14      	ite	ne
 800264a:	2301      	movne	r3, #1
 800264c:	2300      	moveq	r3, #0
 800264e:	b2dc      	uxtb	r4, r3
 8002650:	f7ff fe36 	bl	80022c0 <BSP_LCD_GetXSize>
 8002654:	8bb9      	ldrh	r1, [r7, #28]
 8002656:	4b14      	ldr	r3, [pc, #80]	; (80026a8 <BSP_LCD_DisplayStringAt+0x188>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	4d14      	ldr	r5, [pc, #80]	; (80026ac <BSP_LCD_DisplayStringAt+0x18c>)
 800265c:	4613      	mov	r3, r2
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	4413      	add	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	442b      	add	r3, r5
 8002666:	3308      	adds	r3, #8
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	889b      	ldrh	r3, [r3, #4]
 800266c:	fb01 f303 	mul.w	r3, r1, r3
 8002670:	1ac3      	subs	r3, r0, r3
 8002672:	b299      	uxth	r1, r3
 8002674:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <BSP_LCD_DisplayStringAt+0x188>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	480c      	ldr	r0, [pc, #48]	; (80026ac <BSP_LCD_DisplayStringAt+0x18c>)
 800267a:	4613      	mov	r3, r2
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	4413      	add	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4403      	add	r3, r0
 8002684:	3308      	adds	r3, #8
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	889b      	ldrh	r3, [r3, #4]
 800268a:	4299      	cmp	r1, r3
 800268c:	bf2c      	ite	cs
 800268e:	2301      	movcs	r3, #1
 8002690:	2300      	movcc	r3, #0
 8002692:	b2db      	uxtb	r3, r3
 8002694:	4023      	ands	r3, r4
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1b7      	bne.n	800260c <BSP_LCD_DisplayStringAt+0xec>
  }

}
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	3720      	adds	r7, #32
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bdb0      	pop	{r4, r5, r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20000998 	.word	0x20000998
 80026ac:	2000099c 	.word	0x2000099c

080026b0 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80026b0:	b5b0      	push	{r4, r5, r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af02      	add	r7, sp, #8
 80026b6:	4603      	mov	r3, r0
 80026b8:	80fb      	strh	r3, [r7, #6]
 80026ba:	460b      	mov	r3, r1
 80026bc:	80bb      	strh	r3, [r7, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80026c6:	4b16      	ldr	r3, [pc, #88]	; (8002720 <BSP_LCD_DrawHLine+0x70>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a16      	ldr	r2, [pc, #88]	; (8002724 <BSP_LCD_DrawHLine+0x74>)
 80026cc:	2134      	movs	r1, #52	; 0x34
 80026ce:	fb01 f303 	mul.w	r3, r1, r3
 80026d2:	4413      	add	r3, r2
 80026d4:	335c      	adds	r3, #92	; 0x5c
 80026d6:	681c      	ldr	r4, [r3, #0]
 80026d8:	f7ff fdf2 	bl	80022c0 <BSP_LCD_GetXSize>
 80026dc:	4602      	mov	r2, r0
 80026de:	88bb      	ldrh	r3, [r7, #4]
 80026e0:	fb03 f202 	mul.w	r2, r3, r2
 80026e4:	88fb      	ldrh	r3, [r7, #6]
 80026e6:	4413      	add	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4423      	add	r3, r4
 80026ec:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80026ee:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <BSP_LCD_DrawHLine+0x70>)
 80026f0:	6818      	ldr	r0, [r3, #0]
 80026f2:	68f9      	ldr	r1, [r7, #12]
 80026f4:	887c      	ldrh	r4, [r7, #2]
 80026f6:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <BSP_LCD_DrawHLine+0x70>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	4d0b      	ldr	r5, [pc, #44]	; (8002728 <BSP_LCD_DrawHLine+0x78>)
 80026fc:	4613      	mov	r3, r2
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	4413      	add	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	442b      	add	r3, r5
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	9301      	str	r3, [sp, #4]
 800270a:	2300      	movs	r3, #0
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	2301      	movs	r3, #1
 8002710:	4622      	mov	r2, r4
 8002712:	f000 f9c7 	bl	8002aa4 <LL_FillBuffer>
}
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bdb0      	pop	{r4, r5, r7, pc}
 800271e:	bf00      	nop
 8002720:	20000998 	.word	0x20000998
 8002724:	200008d4 	.word	0x200008d4
 8002728:	2000099c 	.word	0x2000099c

0800272c <BSP_LCD_DrawVLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800272c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800272e:	b087      	sub	sp, #28
 8002730:	af02      	add	r7, sp, #8
 8002732:	4603      	mov	r3, r0
 8002734:	80fb      	strh	r3, [r7, #6]
 8002736:	460b      	mov	r3, r1
 8002738:	80bb      	strh	r3, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002742:	4b18      	ldr	r3, [pc, #96]	; (80027a4 <BSP_LCD_DrawVLine+0x78>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a18      	ldr	r2, [pc, #96]	; (80027a8 <BSP_LCD_DrawVLine+0x7c>)
 8002748:	2134      	movs	r1, #52	; 0x34
 800274a:	fb01 f303 	mul.w	r3, r1, r3
 800274e:	4413      	add	r3, r2
 8002750:	335c      	adds	r3, #92	; 0x5c
 8002752:	681c      	ldr	r4, [r3, #0]
 8002754:	f7ff fdb4 	bl	80022c0 <BSP_LCD_GetXSize>
 8002758:	4602      	mov	r2, r0
 800275a:	88bb      	ldrh	r3, [r7, #4]
 800275c:	fb03 f202 	mul.w	r2, r3, r2
 8002760:	88fb      	ldrh	r3, [r7, #6]
 8002762:	4413      	add	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4423      	add	r3, r4
 8002768:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 800276a:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <BSP_LCD_DrawVLine+0x78>)
 800276c:	681c      	ldr	r4, [r3, #0]
 800276e:	68fd      	ldr	r5, [r7, #12]
 8002770:	887e      	ldrh	r6, [r7, #2]
 8002772:	f7ff fda5 	bl	80022c0 <BSP_LCD_GetXSize>
 8002776:	4603      	mov	r3, r0
 8002778:	1e59      	subs	r1, r3, #1
 800277a:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <BSP_LCD_DrawVLine+0x78>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	480b      	ldr	r0, [pc, #44]	; (80027ac <BSP_LCD_DrawVLine+0x80>)
 8002780:	4613      	mov	r3, r2
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	4413      	add	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4403      	add	r3, r0
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	9100      	str	r1, [sp, #0]
 8002790:	4633      	mov	r3, r6
 8002792:	2201      	movs	r2, #1
 8002794:	4629      	mov	r1, r5
 8002796:	4620      	mov	r0, r4
 8002798:	f000 f984 	bl	8002aa4 <LL_FillBuffer>
}
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027a4:	20000998 	.word	0x20000998
 80027a8:	200008d4 	.word	0x200008d4
 80027ac:	2000099c 	.word	0x2000099c

080027b0 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d80d      	bhi.n	80027dc <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	3301      	adds	r3, #1
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	4613      	mov	r3, r2
 80027d0:	2215      	movs	r2, #21
 80027d2:	2100      	movs	r1, #0
 80027d4:	480a      	ldr	r0, [pc, #40]	; (8002800 <DSI_IO_WriteCmd+0x50>)
 80027d6:	f002 f9f5 	bl	8004bc4 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 80027da:	e00d      	b.n	80027f8 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4413      	add	r3, r2
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	461a      	mov	r2, r3
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	9301      	str	r3, [sp, #4]
 80027ea:	9200      	str	r2, [sp, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2239      	movs	r2, #57	; 0x39
 80027f0:	2100      	movs	r1, #0
 80027f2:	4803      	ldr	r0, [pc, #12]	; (8002800 <DSI_IO_WriteCmd+0x50>)
 80027f4:	f002 fa08 	bl	8004c08 <HAL_DSI_LongWrite>
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	2000097c 	.word	0x2000097c

08002804 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8002808:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 800280a:	4618      	mov	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800281a:	4b32      	ldr	r3, [pc, #200]	; (80028e4 <BSP_LCD_MspInit+0xd0>)
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	4a31      	ldr	r2, [pc, #196]	; (80028e4 <BSP_LCD_MspInit+0xd0>)
 8002820:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002824:	6453      	str	r3, [r2, #68]	; 0x44
 8002826:	4b2f      	ldr	r3, [pc, #188]	; (80028e4 <BSP_LCD_MspInit+0xd0>)
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8002832:	4b2c      	ldr	r3, [pc, #176]	; (80028e4 <BSP_LCD_MspInit+0xd0>)
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	4a2b      	ldr	r2, [pc, #172]	; (80028e4 <BSP_LCD_MspInit+0xd0>)
 8002838:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800283c:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 800283e:	4b29      	ldr	r3, [pc, #164]	; (80028e4 <BSP_LCD_MspInit+0xd0>)
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	4a28      	ldr	r2, [pc, #160]	; (80028e4 <BSP_LCD_MspInit+0xd0>)
 8002844:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002848:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800284a:	4b26      	ldr	r3, [pc, #152]	; (80028e4 <BSP_LCD_MspInit+0xd0>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	4a25      	ldr	r2, [pc, #148]	; (80028e4 <BSP_LCD_MspInit+0xd0>)
 8002850:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002854:	6313      	str	r3, [r2, #48]	; 0x30
 8002856:	4b23      	ldr	r3, [pc, #140]	; (80028e4 <BSP_LCD_MspInit+0xd0>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800285e:	60bb      	str	r3, [r7, #8]
 8002860:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8002862:	4b20      	ldr	r3, [pc, #128]	; (80028e4 <BSP_LCD_MspInit+0xd0>)
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	4a1f      	ldr	r2, [pc, #124]	; (80028e4 <BSP_LCD_MspInit+0xd0>)
 8002868:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800286c:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 800286e:	4b1d      	ldr	r3, [pc, #116]	; (80028e4 <BSP_LCD_MspInit+0xd0>)
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	4a1c      	ldr	r2, [pc, #112]	; (80028e4 <BSP_LCD_MspInit+0xd0>)
 8002874:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002878:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 800287a:	4b1a      	ldr	r3, [pc, #104]	; (80028e4 <BSP_LCD_MspInit+0xd0>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	4a19      	ldr	r2, [pc, #100]	; (80028e4 <BSP_LCD_MspInit+0xd0>)
 8002880:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002884:	6453      	str	r3, [r2, #68]	; 0x44
 8002886:	4b17      	ldr	r3, [pc, #92]	; (80028e4 <BSP_LCD_MspInit+0xd0>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800288e:	607b      	str	r3, [r7, #4]
 8002890:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8002892:	4b14      	ldr	r3, [pc, #80]	; (80028e4 <BSP_LCD_MspInit+0xd0>)
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	4a13      	ldr	r2, [pc, #76]	; (80028e4 <BSP_LCD_MspInit+0xd0>)
 8002898:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800289c:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 800289e:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <BSP_LCD_MspInit+0xd0>)
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	4a10      	ldr	r2, [pc, #64]	; (80028e4 <BSP_LCD_MspInit+0xd0>)
 80028a4:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80028a8:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 80028aa:	2200      	movs	r2, #0
 80028ac:	2103      	movs	r1, #3
 80028ae:	2058      	movs	r0, #88	; 0x58
 80028b0:	f000 fede 	bl	8003670 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80028b4:	2058      	movs	r0, #88	; 0x58
 80028b6:	f000 fef7 	bl	80036a8 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 80028ba:	2200      	movs	r2, #0
 80028bc:	2103      	movs	r1, #3
 80028be:	205a      	movs	r0, #90	; 0x5a
 80028c0:	f000 fed6 	bl	8003670 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80028c4:	205a      	movs	r0, #90	; 0x5a
 80028c6:	f000 feef 	bl	80036a8 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 80028ca:	2200      	movs	r2, #0
 80028cc:	2103      	movs	r1, #3
 80028ce:	2062      	movs	r0, #98	; 0x62
 80028d0:	f000 fece 	bl	8003670 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 80028d4:	2062      	movs	r0, #98	; 0x62
 80028d6:	f000 fee7 	bl	80036a8 <HAL_NVIC_EnableIRQ>
}
 80028da:	bf00      	nop
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800

080028e8 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80028e8:	b5b0      	push	{r4, r5, r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	603a      	str	r2, [r7, #0]
 80028f2:	80fb      	strh	r3, [r7, #6]
 80028f4:	460b      	mov	r3, r1
 80028f6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80028f8:	4b0c      	ldr	r3, [pc, #48]	; (800292c <BSP_LCD_DrawPixel+0x44>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a0c      	ldr	r2, [pc, #48]	; (8002930 <BSP_LCD_DrawPixel+0x48>)
 80028fe:	2134      	movs	r1, #52	; 0x34
 8002900:	fb01 f303 	mul.w	r3, r1, r3
 8002904:	4413      	add	r3, r2
 8002906:	335c      	adds	r3, #92	; 0x5c
 8002908:	681c      	ldr	r4, [r3, #0]
 800290a:	88bd      	ldrh	r5, [r7, #4]
 800290c:	f7ff fcd8 	bl	80022c0 <BSP_LCD_GetXSize>
 8002910:	4603      	mov	r3, r0
 8002912:	fb03 f205 	mul.w	r2, r3, r5
 8002916:	88fb      	ldrh	r3, [r7, #6]
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4423      	add	r3, r4
 800291e:	461a      	mov	r2, r3
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	6013      	str	r3, [r2, #0]
}
 8002924:	bf00      	nop
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bdb0      	pop	{r4, r5, r7, pc}
 800292c:	20000998 	.word	0x20000998
 8002930:	200008d4 	.word	0x200008d4

08002934 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	603a      	str	r2, [r7, #0]
 800293e:	80fb      	strh	r3, [r7, #6]
 8002940:	460b      	mov	r3, r1
 8002942:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	61fb      	str	r3, [r7, #28]
 8002948:	2300      	movs	r3, #0
 800294a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 800294c:	4b53      	ldr	r3, [pc, #332]	; (8002a9c <DrawChar+0x168>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4953      	ldr	r1, [pc, #332]	; (8002aa0 <DrawChar+0x16c>)
 8002952:	4613      	mov	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	4413      	add	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	440b      	add	r3, r1
 800295c:	3308      	adds	r3, #8
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	88db      	ldrh	r3, [r3, #6]
 8002962:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002964:	4b4d      	ldr	r3, [pc, #308]	; (8002a9c <DrawChar+0x168>)
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	494d      	ldr	r1, [pc, #308]	; (8002aa0 <DrawChar+0x16c>)
 800296a:	4613      	mov	r3, r2
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	4413      	add	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	440b      	add	r3, r1
 8002974:	3308      	adds	r3, #8
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	889b      	ldrh	r3, [r3, #4]
 800297a:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 800297c:	8a3b      	ldrh	r3, [r7, #16]
 800297e:	3307      	adds	r3, #7
 8002980:	2b00      	cmp	r3, #0
 8002982:	da00      	bge.n	8002986 <DrawChar+0x52>
 8002984:	3307      	adds	r3, #7
 8002986:	10db      	asrs	r3, r3, #3
 8002988:	b2db      	uxtb	r3, r3
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	b2da      	uxtb	r2, r3
 800298e:	8a3b      	ldrh	r3, [r7, #16]
 8002990:	b2db      	uxtb	r3, r3
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
 800299a:	e076      	b.n	8002a8a <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800299c:	8a3b      	ldrh	r3, [r7, #16]
 800299e:	3307      	adds	r3, #7
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	da00      	bge.n	80029a6 <DrawChar+0x72>
 80029a4:	3307      	adds	r3, #7
 80029a6:	10db      	asrs	r3, r3, #3
 80029a8:	461a      	mov	r2, r3
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	fb02 f303 	mul.w	r3, r2, r3
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	4413      	add	r3, r2
 80029b4:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80029b6:	8a3b      	ldrh	r3, [r7, #16]
 80029b8:	3307      	adds	r3, #7
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	da00      	bge.n	80029c0 <DrawChar+0x8c>
 80029be:	3307      	adds	r3, #7
 80029c0:	10db      	asrs	r3, r3, #3
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d002      	beq.n	80029cc <DrawChar+0x98>
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d004      	beq.n	80029d4 <DrawChar+0xa0>
 80029ca:	e00c      	b.n	80029e6 <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	617b      	str	r3, [r7, #20]
      break;
 80029d2:	e016      	b.n	8002a02 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	021b      	lsls	r3, r3, #8
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	3201      	adds	r2, #1
 80029de:	7812      	ldrb	r2, [r2, #0]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	617b      	str	r3, [r7, #20]
      break;
 80029e4:	e00d      	b.n	8002a02 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	041a      	lsls	r2, r3, #16
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	3301      	adds	r3, #1
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	021b      	lsls	r3, r3, #8
 80029f4:	4313      	orrs	r3, r2
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	3202      	adds	r2, #2
 80029fa:	7812      	ldrb	r2, [r2, #0]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]
      break;
 8002a00:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8002a02:	2300      	movs	r3, #0
 8002a04:	61bb      	str	r3, [r7, #24]
 8002a06:	e036      	b.n	8002a76 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 8002a08:	8a3a      	ldrh	r2, [r7, #16]
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	1ad2      	subs	r2, r2, r3
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
 8002a10:	4413      	add	r3, r2
 8002a12:	3b01      	subs	r3, #1
 8002a14:	2201      	movs	r2, #1
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d012      	beq.n	8002a4a <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	88fb      	ldrh	r3, [r7, #6]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	b298      	uxth	r0, r3
 8002a2e:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <DrawChar+0x168>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	491b      	ldr	r1, [pc, #108]	; (8002aa0 <DrawChar+0x16c>)
 8002a34:	4613      	mov	r3, r2
 8002a36:	005b      	lsls	r3, r3, #1
 8002a38:	4413      	add	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	88bb      	ldrh	r3, [r7, #4]
 8002a42:	4619      	mov	r1, r3
 8002a44:	f7ff ff50 	bl	80028e8 <BSP_LCD_DrawPixel>
 8002a48:	e012      	b.n	8002a70 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	88fb      	ldrh	r3, [r7, #6]
 8002a50:	4413      	add	r3, r2
 8002a52:	b298      	uxth	r0, r3
 8002a54:	4b11      	ldr	r3, [pc, #68]	; (8002a9c <DrawChar+0x168>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	4911      	ldr	r1, [pc, #68]	; (8002aa0 <DrawChar+0x16c>)
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	4413      	add	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	3304      	adds	r3, #4
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	88bb      	ldrh	r3, [r7, #4]
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	f7ff ff3c 	bl	80028e8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	3301      	adds	r3, #1
 8002a74:	61bb      	str	r3, [r7, #24]
 8002a76:	8a3b      	ldrh	r3, [r7, #16]
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d3c4      	bcc.n	8002a08 <DrawChar+0xd4>
      }
    }
    Ypos++;
 8002a7e:	88bb      	ldrh	r3, [r7, #4]
 8002a80:	3301      	adds	r3, #1
 8002a82:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	3301      	adds	r3, #1
 8002a88:	61fb      	str	r3, [r7, #28]
 8002a8a:	8a7b      	ldrh	r3, [r7, #18]
 8002a8c:	69fa      	ldr	r2, [r7, #28]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d384      	bcc.n	800299c <DrawChar+0x68>
  }
}
 8002a92:	bf00      	nop
 8002a94:	bf00      	nop
 8002a96:	3720      	adds	r7, #32
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	20000998 	.word	0x20000998
 8002aa0:	2000099c 	.word	0x2000099c

08002aa4 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af02      	add	r7, sp, #8
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
 8002ab0:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 8002ab2:	4b16      	ldr	r3, [pc, #88]	; (8002b0c <LL_FillBuffer+0x68>)
 8002ab4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002ab8:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8002aba:	4b14      	ldr	r3, [pc, #80]	; (8002b0c <LL_FillBuffer+0x68>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8002ac0:	4a12      	ldr	r2, [pc, #72]	; (8002b0c <LL_FillBuffer+0x68>)
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 8002ac6:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <LL_FillBuffer+0x68>)
 8002ac8:	4a11      	ldr	r2, [pc, #68]	; (8002b10 <LL_FillBuffer+0x6c>)
 8002aca:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 8002acc:	480f      	ldr	r0, [pc, #60]	; (8002b0c <LL_FillBuffer+0x68>)
 8002ace:	f000 ffc5 	bl	8003a5c <HAL_DMA2D_Init>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d115      	bne.n	8002b04 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 8002ad8:	68f9      	ldr	r1, [r7, #12]
 8002ada:	480c      	ldr	r0, [pc, #48]	; (8002b0c <LL_FillBuffer+0x68>)
 8002adc:	f001 fa3c 	bl	8003f58 <HAL_DMA2D_ConfigLayer>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10e      	bne.n	8002b04 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002ae6:	68ba      	ldr	r2, [r7, #8]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69f9      	ldr	r1, [r7, #28]
 8002af0:	4806      	ldr	r0, [pc, #24]	; (8002b0c <LL_FillBuffer+0x68>)
 8002af2:	f001 f80d 	bl	8003b10 <HAL_DMA2D_Start>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d103      	bne.n	8002b04 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8002afc:	210a      	movs	r1, #10
 8002afe:	4803      	ldr	r0, [pc, #12]	; (8002b0c <LL_FillBuffer+0x68>)
 8002b00:	f001 f831 	bl	8003b66 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002b04:	bf00      	nop
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	2000087c 	.word	0x2000087c
 8002b10:	4002b000 	.word	0x4002b000

08002b14 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002b18:	4b29      	ldr	r3, [pc, #164]	; (8002bc0 <BSP_SDRAM_Init+0xac>)
 8002b1a:	4a2a      	ldr	r2, [pc, #168]	; (8002bc4 <BSP_SDRAM_Init+0xb0>)
 8002b1c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8002b1e:	4b2a      	ldr	r3, [pc, #168]	; (8002bc8 <BSP_SDRAM_Init+0xb4>)
 8002b20:	2202      	movs	r2, #2
 8002b22:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8002b24:	4b28      	ldr	r3, [pc, #160]	; (8002bc8 <BSP_SDRAM_Init+0xb4>)
 8002b26:	2207      	movs	r2, #7
 8002b28:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8002b2a:	4b27      	ldr	r3, [pc, #156]	; (8002bc8 <BSP_SDRAM_Init+0xb4>)
 8002b2c:	2204      	movs	r2, #4
 8002b2e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8002b30:	4b25      	ldr	r3, [pc, #148]	; (8002bc8 <BSP_SDRAM_Init+0xb4>)
 8002b32:	2207      	movs	r2, #7
 8002b34:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8002b36:	4b24      	ldr	r3, [pc, #144]	; (8002bc8 <BSP_SDRAM_Init+0xb4>)
 8002b38:	2202      	movs	r2, #2
 8002b3a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8002b3c:	4b22      	ldr	r3, [pc, #136]	; (8002bc8 <BSP_SDRAM_Init+0xb4>)
 8002b3e:	2202      	movs	r2, #2
 8002b40:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8002b42:	4b21      	ldr	r3, [pc, #132]	; (8002bc8 <BSP_SDRAM_Init+0xb4>)
 8002b44:	2202      	movs	r2, #2
 8002b46:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8002b48:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <BSP_SDRAM_Init+0xac>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002b4e:	4b1c      	ldr	r3, [pc, #112]	; (8002bc0 <BSP_SDRAM_Init+0xac>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002b54:	4b1a      	ldr	r3, [pc, #104]	; (8002bc0 <BSP_SDRAM_Init+0xac>)
 8002b56:	2204      	movs	r2, #4
 8002b58:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002b5a:	4b19      	ldr	r3, [pc, #100]	; (8002bc0 <BSP_SDRAM_Init+0xac>)
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002b60:	4b17      	ldr	r3, [pc, #92]	; (8002bc0 <BSP_SDRAM_Init+0xac>)
 8002b62:	2240      	movs	r2, #64	; 0x40
 8002b64:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8002b66:	4b16      	ldr	r3, [pc, #88]	; (8002bc0 <BSP_SDRAM_Init+0xac>)
 8002b68:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002b6c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002b6e:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <BSP_SDRAM_Init+0xac>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002b74:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <BSP_SDRAM_Init+0xac>)
 8002b76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b7a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8002b7c:	4b10      	ldr	r3, [pc, #64]	; (8002bc0 <BSP_SDRAM_Init+0xac>)
 8002b7e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b82:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8002b84:	4b0e      	ldr	r3, [pc, #56]	; (8002bc0 <BSP_SDRAM_Init+0xac>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	480c      	ldr	r0, [pc, #48]	; (8002bc0 <BSP_SDRAM_Init+0xac>)
 8002b8e:	f000 f87f 	bl	8002c90 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8002b92:	490d      	ldr	r1, [pc, #52]	; (8002bc8 <BSP_SDRAM_Init+0xb4>)
 8002b94:	480a      	ldr	r0, [pc, #40]	; (8002bc0 <BSP_SDRAM_Init+0xac>)
 8002b96:	f005 fded 	bl	8008774 <HAL_SDRAM_Init>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002ba0:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <BSP_SDRAM_Init+0xb8>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	701a      	strb	r2, [r3, #0]
 8002ba6:	e002      	b.n	8002bae <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002ba8:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <BSP_SDRAM_Init+0xb8>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002bae:	f240 6003 	movw	r0, #1539	; 0x603
 8002bb2:	f000 f80d 	bl	8002bd0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002bb6:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <BSP_SDRAM_Init+0xb8>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000a44 	.word	0x20000a44
 8002bc4:	a0000140 	.word	0xa0000140
 8002bc8:	20000a78 	.word	0x20000a78
 8002bcc:	2000003c 	.word	0x2000003c

08002bd0 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8002bdc:	4b2a      	ldr	r3, [pc, #168]	; (8002c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002be2:	4b29      	ldr	r3, [pc, #164]	; (8002c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002be4:	2210      	movs	r2, #16
 8002be6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002be8:	4b27      	ldr	r3, [pc, #156]	; (8002c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bea:	2201      	movs	r2, #1
 8002bec:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002bee:	4b26      	ldr	r3, [pc, #152]	; (8002c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002bf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bf8:	4923      	ldr	r1, [pc, #140]	; (8002c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002bfa:	4824      	ldr	r0, [pc, #144]	; (8002c8c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002bfc:	f005 fdee 	bl	80087dc <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002c00:	2001      	movs	r0, #1
 8002c02:	f000 fb39 	bl	8003278 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8002c06:	4b20      	ldr	r3, [pc, #128]	; (8002c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c08:	2202      	movs	r2, #2
 8002c0a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002c0c:	4b1e      	ldr	r3, [pc, #120]	; (8002c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c0e:	2210      	movs	r2, #16
 8002c10:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002c12:	4b1d      	ldr	r3, [pc, #116]	; (8002c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c14:	2201      	movs	r2, #1
 8002c16:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002c18:	4b1b      	ldr	r3, [pc, #108]	; (8002c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8002c1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c22:	4919      	ldr	r1, [pc, #100]	; (8002c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c24:	4819      	ldr	r0, [pc, #100]	; (8002c8c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c26:	f005 fdd9 	bl	80087dc <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002c2a:	4b17      	ldr	r3, [pc, #92]	; (8002c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002c30:	4b15      	ldr	r3, [pc, #84]	; (8002c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c32:	2210      	movs	r2, #16
 8002c34:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8002c36:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c38:	2208      	movs	r2, #8
 8002c3a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8002c3c:	4b12      	ldr	r3, [pc, #72]	; (8002c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002c42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c46:	4910      	ldr	r1, [pc, #64]	; (8002c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c48:	4810      	ldr	r0, [pc, #64]	; (8002c8c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c4a:	f005 fdc7 	bl	80087dc <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8002c4e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002c52:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8002c54:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c56:	2204      	movs	r2, #4
 8002c58:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8002c5a:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c5c:	2210      	movs	r2, #16
 8002c5e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8002c60:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c62:	2201      	movs	r2, #1
 8002c64:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4a07      	ldr	r2, [pc, #28]	; (8002c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c6a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8002c6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c70:	4905      	ldr	r1, [pc, #20]	; (8002c88 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002c72:	4806      	ldr	r0, [pc, #24]	; (8002c8c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c74:	f005 fdb2 	bl	80087dc <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8002c78:	6879      	ldr	r1, [r7, #4]
 8002c7a:	4804      	ldr	r0, [pc, #16]	; (8002c8c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002c7c:	f005 fde3 	bl	8008846 <HAL_SDRAM_ProgramRefreshRate>
}
 8002c80:	bf00      	nop
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	20000a94 	.word	0x20000a94
 8002c8c:	20000a44 	.word	0x20000a44

08002c90 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b090      	sub	sp, #64	; 0x40
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002c9a:	4b71      	ldr	r3, [pc, #452]	; (8002e60 <BSP_SDRAM_MspInit+0x1d0>)
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9e:	4a70      	ldr	r2, [pc, #448]	; (8002e60 <BSP_SDRAM_MspInit+0x1d0>)
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	6393      	str	r3, [r2, #56]	; 0x38
 8002ca6:	4b6e      	ldr	r3, [pc, #440]	; (8002e60 <BSP_SDRAM_MspInit+0x1d0>)
 8002ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002caa:	f003 0301 	and.w	r3, r3, #1
 8002cae:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002cb2:	4b6b      	ldr	r3, [pc, #428]	; (8002e60 <BSP_SDRAM_MspInit+0x1d0>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	4a6a      	ldr	r2, [pc, #424]	; (8002e60 <BSP_SDRAM_MspInit+0x1d0>)
 8002cb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cbe:	4b68      	ldr	r3, [pc, #416]	; (8002e60 <BSP_SDRAM_MspInit+0x1d0>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cca:	4b65      	ldr	r3, [pc, #404]	; (8002e60 <BSP_SDRAM_MspInit+0x1d0>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	4a64      	ldr	r2, [pc, #400]	; (8002e60 <BSP_SDRAM_MspInit+0x1d0>)
 8002cd0:	f043 0308 	orr.w	r3, r3, #8
 8002cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd6:	4b62      	ldr	r3, [pc, #392]	; (8002e60 <BSP_SDRAM_MspInit+0x1d0>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	623b      	str	r3, [r7, #32]
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ce2:	4b5f      	ldr	r3, [pc, #380]	; (8002e60 <BSP_SDRAM_MspInit+0x1d0>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	4a5e      	ldr	r2, [pc, #376]	; (8002e60 <BSP_SDRAM_MspInit+0x1d0>)
 8002ce8:	f043 0310 	orr.w	r3, r3, #16
 8002cec:	6313      	str	r3, [r2, #48]	; 0x30
 8002cee:	4b5c      	ldr	r3, [pc, #368]	; (8002e60 <BSP_SDRAM_MspInit+0x1d0>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	f003 0310 	and.w	r3, r3, #16
 8002cf6:	61fb      	str	r3, [r7, #28]
 8002cf8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002cfa:	4b59      	ldr	r3, [pc, #356]	; (8002e60 <BSP_SDRAM_MspInit+0x1d0>)
 8002cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfe:	4a58      	ldr	r2, [pc, #352]	; (8002e60 <BSP_SDRAM_MspInit+0x1d0>)
 8002d00:	f043 0320 	orr.w	r3, r3, #32
 8002d04:	6313      	str	r3, [r2, #48]	; 0x30
 8002d06:	4b56      	ldr	r3, [pc, #344]	; (8002e60 <BSP_SDRAM_MspInit+0x1d0>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	f003 0320 	and.w	r3, r3, #32
 8002d0e:	61bb      	str	r3, [r7, #24]
 8002d10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d12:	4b53      	ldr	r3, [pc, #332]	; (8002e60 <BSP_SDRAM_MspInit+0x1d0>)
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	4a52      	ldr	r2, [pc, #328]	; (8002e60 <BSP_SDRAM_MspInit+0x1d0>)
 8002d18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1e:	4b50      	ldr	r3, [pc, #320]	; (8002e60 <BSP_SDRAM_MspInit+0x1d0>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d2a:	4b4d      	ldr	r3, [pc, #308]	; (8002e60 <BSP_SDRAM_MspInit+0x1d0>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	4a4c      	ldr	r2, [pc, #304]	; (8002e60 <BSP_SDRAM_MspInit+0x1d0>)
 8002d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d34:	6313      	str	r3, [r2, #48]	; 0x30
 8002d36:	4b4a      	ldr	r3, [pc, #296]	; (8002e60 <BSP_SDRAM_MspInit+0x1d0>)
 8002d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002d42:	4b47      	ldr	r3, [pc, #284]	; (8002e60 <BSP_SDRAM_MspInit+0x1d0>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	4a46      	ldr	r2, [pc, #280]	; (8002e60 <BSP_SDRAM_MspInit+0x1d0>)
 8002d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4e:	4b44      	ldr	r3, [pc, #272]	; (8002e60 <BSP_SDRAM_MspInit+0x1d0>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8002d62:	2303      	movs	r3, #3
 8002d64:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8002d66:	230c      	movs	r3, #12
 8002d68:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8002d6a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002d70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d74:	4619      	mov	r1, r3
 8002d76:	483b      	ldr	r0, [pc, #236]	; (8002e64 <BSP_SDRAM_MspInit+0x1d4>)
 8002d78:	f001 ffde 	bl	8004d38 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8002d7c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002d80:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002d82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d86:	4619      	mov	r1, r3
 8002d88:	4837      	ldr	r0, [pc, #220]	; (8002e68 <BSP_SDRAM_MspInit+0x1d8>)
 8002d8a:	f001 ffd5 	bl	8004d38 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8002d8e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002d92:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002d94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d98:	4619      	mov	r1, r3
 8002d9a:	4834      	ldr	r0, [pc, #208]	; (8002e6c <BSP_SDRAM_MspInit+0x1dc>)
 8002d9c:	f001 ffcc 	bl	8004d38 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8002da0:	f248 1337 	movw	r3, #33079	; 0x8137
 8002da4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002da6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002daa:	4619      	mov	r1, r3
 8002dac:	4830      	ldr	r0, [pc, #192]	; (8002e70 <BSP_SDRAM_MspInit+0x1e0>)
 8002dae:	f001 ffc3 	bl	8004d38 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8002db2:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8002db6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8002db8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	482d      	ldr	r0, [pc, #180]	; (8002e74 <BSP_SDRAM_MspInit+0x1e4>)
 8002dc0:	f001 ffba 	bl	8004d38 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002dc4:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8002dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8002dca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4829      	ldr	r0, [pc, #164]	; (8002e78 <BSP_SDRAM_MspInit+0x1e8>)
 8002dd2:	f001 ffb1 	bl	8004d38 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002dd6:	4b29      	ldr	r3, [pc, #164]	; (8002e7c <BSP_SDRAM_MspInit+0x1ec>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002ddc:	4b27      	ldr	r3, [pc, #156]	; (8002e7c <BSP_SDRAM_MspInit+0x1ec>)
 8002dde:	2280      	movs	r2, #128	; 0x80
 8002de0:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002de2:	4b26      	ldr	r3, [pc, #152]	; (8002e7c <BSP_SDRAM_MspInit+0x1ec>)
 8002de4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002de8:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8002dea:	4b24      	ldr	r3, [pc, #144]	; (8002e7c <BSP_SDRAM_MspInit+0x1ec>)
 8002dec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002df0:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002df2:	4b22      	ldr	r3, [pc, #136]	; (8002e7c <BSP_SDRAM_MspInit+0x1ec>)
 8002df4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002df8:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002dfa:	4b20      	ldr	r3, [pc, #128]	; (8002e7c <BSP_SDRAM_MspInit+0x1ec>)
 8002dfc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e00:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8002e02:	4b1e      	ldr	r3, [pc, #120]	; (8002e7c <BSP_SDRAM_MspInit+0x1ec>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002e08:	4b1c      	ldr	r3, [pc, #112]	; (8002e7c <BSP_SDRAM_MspInit+0x1ec>)
 8002e0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e0e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002e10:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <BSP_SDRAM_MspInit+0x1ec>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002e16:	4b19      	ldr	r3, [pc, #100]	; (8002e7c <BSP_SDRAM_MspInit+0x1ec>)
 8002e18:	2203      	movs	r2, #3
 8002e1a:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002e1c:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <BSP_SDRAM_MspInit+0x1ec>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002e22:	4b16      	ldr	r3, [pc, #88]	; (8002e7c <BSP_SDRAM_MspInit+0x1ec>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8002e28:	4b14      	ldr	r3, [pc, #80]	; (8002e7c <BSP_SDRAM_MspInit+0x1ec>)
 8002e2a:	4a15      	ldr	r2, [pc, #84]	; (8002e80 <BSP_SDRAM_MspInit+0x1f0>)
 8002e2c:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a12      	ldr	r2, [pc, #72]	; (8002e7c <BSP_SDRAM_MspInit+0x1ec>)
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30
 8002e34:	4a11      	ldr	r2, [pc, #68]	; (8002e7c <BSP_SDRAM_MspInit+0x1ec>)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8002e3a:	4810      	ldr	r0, [pc, #64]	; (8002e7c <BSP_SDRAM_MspInit+0x1ec>)
 8002e3c:	f000 fcfe 	bl	800383c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8002e40:	480e      	ldr	r0, [pc, #56]	; (8002e7c <BSP_SDRAM_MspInit+0x1ec>)
 8002e42:	f000 fc4d 	bl	80036e0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002e46:	2200      	movs	r2, #0
 8002e48:	210f      	movs	r1, #15
 8002e4a:	2038      	movs	r0, #56	; 0x38
 8002e4c:	f000 fc10 	bl	8003670 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002e50:	2038      	movs	r0, #56	; 0x38
 8002e52:	f000 fc29 	bl	80036a8 <HAL_NVIC_EnableIRQ>
}
 8002e56:	bf00      	nop
 8002e58:	3740      	adds	r7, #64	; 0x40
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40023800 	.word	0x40023800
 8002e64:	40020c00 	.word	0x40020c00
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	40021400 	.word	0x40021400
 8002e70:	40021800 	.word	0x40021800
 8002e74:	40021c00 	.word	0x40021c00
 8002e78:	40022000 	.word	0x40022000
 8002e7c:	20000aa4 	.word	0x20000aa4
 8002e80:	40026410 	.word	0x40026410

08002e84 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	460a      	mov	r2, r1
 8002e8e:	80fb      	strh	r3, [r7, #6]
 8002e90:	4613      	mov	r3, r2
 8002e92:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 8002e94:	2300      	movs	r3, #0
 8002e96:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 8002e9c:	4b25      	ldr	r3, [pc, #148]	; (8002f34 <BSP_TS_Init+0xb0>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a25      	ldr	r2, [pc, #148]	; (8002f38 <BSP_TS_Init+0xb4>)
 8002ea2:	7812      	ldrb	r2, [r2, #0]
 8002ea4:	b292      	uxth	r2, r2
 8002ea6:	4610      	mov	r0, r2
 8002ea8:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8002eaa:	4b22      	ldr	r3, [pc, #136]	; (8002f34 <BSP_TS_Init+0xb0>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2054      	movs	r0, #84	; 0x54
 8002eb0:	4798      	blx	r3
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 8002eb6:	7b7b      	ldrb	r3, [r7, #13]
 8002eb8:	2b11      	cmp	r3, #17
 8002eba:	d009      	beq.n	8002ed0 <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8002ebc:	4b1d      	ldr	r3, [pc, #116]	; (8002f34 <BSP_TS_Init+0xb0>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2070      	movs	r0, #112	; 0x70
 8002ec2:	4798      	blx	r3
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 8002ec8:	4b1b      	ldr	r3, [pc, #108]	; (8002f38 <BSP_TS_Init+0xb4>)
 8002eca:	2270      	movs	r2, #112	; 0x70
 8002ecc:	701a      	strb	r2, [r3, #0]
 8002ece:	e002      	b.n	8002ed6 <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 8002ed0:	4b19      	ldr	r3, [pc, #100]	; (8002f38 <BSP_TS_Init+0xb4>)
 8002ed2:	2254      	movs	r2, #84	; 0x54
 8002ed4:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8002ed6:	7b7b      	ldrb	r3, [r7, #13]
 8002ed8:	2b11      	cmp	r3, #17
 8002eda:	d002      	beq.n	8002ee2 <BSP_TS_Init+0x5e>
 8002edc:	7bbb      	ldrb	r3, [r7, #14]
 8002ede:	2b11      	cmp	r3, #17
 8002ee0:	d121      	bne.n	8002f26 <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 8002ee2:	4b16      	ldr	r3, [pc, #88]	; (8002f3c <BSP_TS_Init+0xb8>)
 8002ee4:	4a13      	ldr	r2, [pc, #76]	; (8002f34 <BSP_TS_Init+0xb0>)
 8002ee6:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 8002ee8:	88fa      	ldrh	r2, [r7, #6]
 8002eea:	88bb      	ldrh	r3, [r7, #4]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d203      	bcs.n	8002ef8 <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 8002ef0:	4b13      	ldr	r3, [pc, #76]	; (8002f40 <BSP_TS_Init+0xbc>)
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	701a      	strb	r2, [r3, #0]
 8002ef6:	e002      	b.n	8002efe <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 8002ef8:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <BSP_TS_Init+0xbc>)
 8002efa:	220c      	movs	r2, #12
 8002efc:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d112      	bne.n	8002f2a <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 8002f04:	4b0d      	ldr	r3, [pc, #52]	; (8002f3c <BSP_TS_Init+0xb8>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	4a0b      	ldr	r2, [pc, #44]	; (8002f38 <BSP_TS_Init+0xb4>)
 8002f0c:	7812      	ldrb	r2, [r2, #0]
 8002f0e:	b292      	uxth	r2, r2
 8002f10:	4610      	mov	r0, r2
 8002f12:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 8002f14:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <BSP_TS_Init+0xb8>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	4a07      	ldr	r2, [pc, #28]	; (8002f38 <BSP_TS_Init+0xb4>)
 8002f1c:	7812      	ldrb	r2, [r2, #0]
 8002f1e:	b292      	uxth	r2, r2
 8002f20:	4610      	mov	r0, r2
 8002f22:	4798      	blx	r3
    if(ts_status == TS_OK)
 8002f24:	e001      	b.n	8002f2a <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 8002f26:	2303      	movs	r3, #3
 8002f28:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20000004 	.word	0x20000004
 8002f38:	20000b09 	.word	0x20000b09
 8002f3c:	20000b04 	.word	0x20000b04
 8002f40:	20000b08 	.word	0x20000b08

08002f44 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
  uint8_t ts_status = TS_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef gpio_init_structure;

  /* Msp Init of GPIO used for TS_INT pin coming from TouchScreen driver IC FT6x06 */
  /* When touchscreen is operated in interrupt mode */
  BSP_TS_INT_MspInit();
 8002f4e:	f000 f93f 	bl	80031d0 <BSP_TS_INT_MspInit>

  /* Configure Interrupt mode for TS_INT pin falling edge : when a new touch is available */
  /* TS_INT pin is active on low level on new touch available */
  gpio_init_structure.Pin = TS_INT_PIN;
 8002f52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f56:	603b      	str	r3, [r7, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8002f60:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002f64:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8002f66:	463b      	mov	r3, r7
 8002f68:	4619      	mov	r1, r3
 8002f6a:	480c      	ldr	r0, [pc, #48]	; (8002f9c <BSP_TS_ITConfig+0x58>)
 8002f6c:	f001 fee4 	bl	8004d38 <HAL_GPIO_Init>

  /* Enable and set the TS_INT EXTI Interrupt to an intermediate priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 8002f70:	2200      	movs	r2, #0
 8002f72:	210f      	movs	r1, #15
 8002f74:	2028      	movs	r0, #40	; 0x28
 8002f76:	f000 fb7b 	bl	8003670 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 8002f7a:	2028      	movs	r0, #40	; 0x28
 8002f7c:	f000 fb94 	bl	80036a8 <HAL_NVIC_EnableIRQ>

  /* Enable the TS in interrupt mode */
  /* In that case the INT output of FT6206 when new touch is available */
  /* is active on low level and directed on EXTI */
  ts_driver->EnableIT(I2C_Address);
 8002f80:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <BSP_TS_ITConfig+0x5c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	4a07      	ldr	r2, [pc, #28]	; (8002fa4 <BSP_TS_ITConfig+0x60>)
 8002f88:	7812      	ldrb	r2, [r2, #0]
 8002f8a:	b292      	uxth	r2, r2
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	4798      	blx	r3

  return (ts_status);
 8002f90:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40022000 	.word	0x40022000
 8002fa0:	20000b04 	.word	0x20000b04
 8002fa4:	20000b09 	.word	0x20000b09

08002fa8 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8002fa8:	b590      	push	{r4, r7, lr}
 8002faa:	b089      	sub	sp, #36	; 0x24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 8002fb4:	4b81      	ldr	r3, [pc, #516]	; (80031bc <BSP_TS_GetState+0x214>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	4a81      	ldr	r2, [pc, #516]	; (80031c0 <BSP_TS_GetState+0x218>)
 8002fbc:	7812      	ldrb	r2, [r2, #0]
 8002fbe:	b292      	uxth	r2, r2
 8002fc0:	4610      	mov	r0, r2
 8002fc2:	4798      	blx	r3
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 80ee 	beq.w	80031b2 <BSP_TS_GetState+0x20a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
 8002fda:	e0e3      	b.n	80031a4 <BSP_TS_GetState+0x1fc>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8002fdc:	4b77      	ldr	r3, [pc, #476]	; (80031bc <BSP_TS_GetState+0x214>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695b      	ldr	r3, [r3, #20]
 8002fe2:	4a77      	ldr	r2, [pc, #476]	; (80031c0 <BSP_TS_GetState+0x218>)
 8002fe4:	7812      	ldrb	r2, [r2, #0]
 8002fe6:	b290      	uxth	r0, r2
 8002fe8:	f107 0110 	add.w	r1, r7, #16
 8002fec:	69fa      	ldr	r2, [r7, #28]
 8002fee:	0052      	lsls	r2, r2, #1
 8002ff0:	188c      	adds	r4, r1, r2
 8002ff2:	f107 010c 	add.w	r1, r7, #12
 8002ff6:	69fa      	ldr	r2, [r7, #28]
 8002ff8:	0052      	lsls	r2, r2, #1
 8002ffa:	440a      	add	r2, r1
 8002ffc:	4621      	mov	r1, r4
 8002ffe:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 8003000:	4b70      	ldr	r3, [pc, #448]	; (80031c4 <BSP_TS_GetState+0x21c>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	d019      	beq.n	8003040 <BSP_TS_GetState+0x98>
      {
        tmp = Raw_x[index];
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	3320      	adds	r3, #32
 8003012:	443b      	add	r3, r7
 8003014:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8003018:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	005b      	lsls	r3, r3, #1
 800301e:	3320      	adds	r3, #32
 8003020:	443b      	add	r3, r7
 8003022:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	3320      	adds	r3, #32
 800302c:	443b      	add	r3, r7
 800302e:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	3320      	adds	r3, #32
 8003038:	443b      	add	r3, r7
 800303a:	8b3a      	ldrh	r2, [r7, #24]
 800303c:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 8003040:	4b60      	ldr	r3, [pc, #384]	; (80031c4 <BSP_TS_GetState+0x21c>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00f      	beq.n	800306c <BSP_TS_GetState+0xc4>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	3320      	adds	r3, #32
 8003052:	443b      	add	r3, r7
 8003054:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8003058:	f240 331f 	movw	r3, #799	; 0x31f
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	b29a      	uxth	r2, r3
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	3320      	adds	r3, #32
 8003066:	443b      	add	r3, r7
 8003068:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 800306c:	4b55      	ldr	r3, [pc, #340]	; (80031c4 <BSP_TS_GetState+0x21c>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00f      	beq.n	8003098 <BSP_TS_GetState+0xf0>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	3320      	adds	r3, #32
 800307e:	443b      	add	r3, r7
 8003080:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8003084:	f240 13df 	movw	r3, #479	; 0x1df
 8003088:	1a9b      	subs	r3, r3, r2
 800308a:	b29a      	uxth	r2, r3
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	3320      	adds	r3, #32
 8003092:	443b      	add	r3, r7
 8003094:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	3320      	adds	r3, #32
 800309e:	443b      	add	r3, r7
 80030a0:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80030a4:	4619      	mov	r1, r3
 80030a6:	4a48      	ldr	r2, [pc, #288]	; (80031c8 <BSP_TS_GetState+0x220>)
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ae:	4299      	cmp	r1, r3
 80030b0:	d90d      	bls.n	80030ce <BSP_TS_GetState+0x126>
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	3320      	adds	r3, #32
 80030b8:	443b      	add	r3, r7
 80030ba:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 80030be:	4942      	ldr	r1, [pc, #264]	; (80031c8 <BSP_TS_GetState+0x220>)
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	e00c      	b.n	80030e8 <BSP_TS_GetState+0x140>
 80030ce:	4a3e      	ldr	r2, [pc, #248]	; (80031c8 <BSP_TS_GetState+0x220>)
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	3320      	adds	r3, #32
 80030de:	443b      	add	r3, r7
 80030e0:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	3320      	adds	r3, #32
 80030f0:	443b      	add	r3, r7
 80030f2:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80030f6:	4619      	mov	r1, r3
 80030f8:	4a34      	ldr	r2, [pc, #208]	; (80031cc <BSP_TS_GetState+0x224>)
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003100:	4299      	cmp	r1, r3
 8003102:	d90d      	bls.n	8003120 <BSP_TS_GetState+0x178>
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	3320      	adds	r3, #32
 800310a:	443b      	add	r3, r7
 800310c:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8003110:	492e      	ldr	r1, [pc, #184]	; (80031cc <BSP_TS_GetState+0x224>)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003118:	b29b      	uxth	r3, r3
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	b29b      	uxth	r3, r3
 800311e:	e00c      	b.n	800313a <BSP_TS_GetState+0x192>
 8003120:	4a2a      	ldr	r2, [pc, #168]	; (80031cc <BSP_TS_GetState+0x224>)
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003128:	b29a      	uxth	r2, r3
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	3320      	adds	r3, #32
 8003130:	443b      	add	r3, r7
 8003132:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	b29b      	uxth	r3, r3
 800313a:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 800313c:	8afa      	ldrh	r2, [r7, #22]
 800313e:	8abb      	ldrh	r3, [r7, #20]
 8003140:	4413      	add	r3, r2
 8003142:	2b05      	cmp	r3, #5
 8003144:	dd15      	ble.n	8003172 <BSP_TS_GetState+0x1ca>
      {
        _x[index] = Raw_x[index];
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	3320      	adds	r3, #32
 800314c:	443b      	add	r3, r7
 800314e:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8003152:	4619      	mov	r1, r3
 8003154:	4a1c      	ldr	r2, [pc, #112]	; (80031c8 <BSP_TS_GetState+0x220>)
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	3320      	adds	r3, #32
 8003162:	443b      	add	r3, r7
 8003164:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003168:	4619      	mov	r1, r3
 800316a:	4a18      	ldr	r2, [pc, #96]	; (80031cc <BSP_TS_GetState+0x224>)
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 8003172:	4a15      	ldr	r2, [pc, #84]	; (80031c8 <BSP_TS_GetState+0x220>)
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800317a:	b299      	uxth	r1, r3
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	4413      	add	r3, r2
 8003184:	460a      	mov	r2, r1
 8003186:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 8003188:	4a10      	ldr	r2, [pc, #64]	; (80031cc <BSP_TS_GetState+0x224>)
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003190:	b299      	uxth	r1, r3
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	4413      	add	r3, r2
 800319a:	460a      	mov	r2, r1
 800319c:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	3301      	adds	r3, #1
 80031a2:	61fb      	str	r3, [r7, #28]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	461a      	mov	r2, r3
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	4293      	cmp	r3, r2
 80031ae:	f4ff af15 	bcc.w	8002fdc <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 80031b2:	7efb      	ldrb	r3, [r7, #27]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3724      	adds	r7, #36	; 0x24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd90      	pop	{r4, r7, pc}
 80031bc:	20000b04 	.word	0x20000b04
 80031c0:	20000b09 	.word	0x20000b09
 80031c4:	20000b08 	.word	0x20000b08
 80031c8:	20000b0c 	.word	0x20000b0c
 80031cc:	20000b14 	.word	0x20000b14

080031d0 <BSP_TS_INT_MspInit>:
/**
  * @brief  Initializes the TS_INT pin MSP.
  * @retval None
  */
__weak void BSP_TS_INT_MspInit(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  TS_INT_GPIO_CLK_ENABLE();
 80031d6:	4b0f      	ldr	r3, [pc, #60]	; (8003214 <BSP_TS_INT_MspInit+0x44>)
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	4a0e      	ldr	r2, [pc, #56]	; (8003214 <BSP_TS_INT_MspInit+0x44>)
 80031dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e0:	6313      	str	r3, [r2, #48]	; 0x30
 80031e2:	4b0c      	ldr	r3, [pc, #48]	; (8003214 <BSP_TS_INT_MspInit+0x44>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ea:	603b      	str	r3, [r7, #0]
 80031ec:	683b      	ldr	r3, [r7, #0]

  /* GPIO configuration in input for TouchScreen interrupt signal on TS_INT pin */
  gpio_init_structure.Pin       = TS_INT_PIN;
 80031ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031f2:	607b      	str	r3, [r7, #4]

  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 80031f4:	2300      	movs	r3, #0
 80031f6:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80031f8:	2301      	movs	r3, #1
 80031fa:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80031fc:	2303      	movs	r3, #3
 80031fe:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8003200:	1d3b      	adds	r3, r7, #4
 8003202:	4619      	mov	r1, r3
 8003204:	4804      	ldr	r0, [pc, #16]	; (8003218 <BSP_TS_INT_MspInit+0x48>)
 8003206:	f001 fd97 	bl	8004d38 <HAL_GPIO_Init>
}
 800320a:	bf00      	nop
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40023800 	.word	0x40023800
 8003218:	40022000 	.word	0x40022000

0800321c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003220:	2003      	movs	r0, #3
 8003222:	f000 fa1a 	bl	800365a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003226:	2000      	movs	r0, #0
 8003228:	f7fd ffe6 	bl	80011f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800322c:	f7fd fd1a 	bl	8000c64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003238:	b480      	push	{r7}
 800323a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800323c:	4b06      	ldr	r3, [pc, #24]	; (8003258 <HAL_IncTick+0x20>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	461a      	mov	r2, r3
 8003242:	4b06      	ldr	r3, [pc, #24]	; (800325c <HAL_IncTick+0x24>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4413      	add	r3, r2
 8003248:	4a04      	ldr	r2, [pc, #16]	; (800325c <HAL_IncTick+0x24>)
 800324a:	6013      	str	r3, [r2, #0]
}
 800324c:	bf00      	nop
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	20000044 	.word	0x20000044
 800325c:	20000b1c 	.word	0x20000b1c

08003260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  return uwTick;
 8003264:	4b03      	ldr	r3, [pc, #12]	; (8003274 <HAL_GetTick+0x14>)
 8003266:	681b      	ldr	r3, [r3, #0]
}
 8003268:	4618      	mov	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	20000b1c 	.word	0x20000b1c

08003278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003280:	f7ff ffee 	bl	8003260 <HAL_GetTick>
 8003284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003290:	d005      	beq.n	800329e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003292:	4b0a      	ldr	r3, [pc, #40]	; (80032bc <HAL_Delay+0x44>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	461a      	mov	r2, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4413      	add	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800329e:	bf00      	nop
 80032a0:	f7ff ffde 	bl	8003260 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d8f7      	bhi.n	80032a0 <HAL_Delay+0x28>
  {
  }
}
 80032b0:	bf00      	nop
 80032b2:	bf00      	nop
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	20000044 	.word	0x20000044

080032c0 <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t itflag;
  itflag = hcec->Instance->ISR;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_ARBLST))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2280      	movs	r2, #128	; 0x80
 80032de:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	691a      	ldr	r2, [r3, #16]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032ee:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXBR))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d01c      	beq.n	8003334 <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2222      	movs	r2, #34	; 0x22
 80032fe:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->RxXferSize++;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003304:	3301      	adds	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	865a      	strh	r2, [r3, #50]	; 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331e:	1c5a      	adds	r2, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	691a      	ldr	r2, [r3, #16]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0201 	orr.w	r2, r2, #1
 8003332:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXEND))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d01e      	beq.n	800337c <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f042 0202 	orr.w	r2, r2, #2
 800334c:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2220      	movs	r2, #32
 8003352:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	641a      	str	r2, [r3, #64]	; 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003362:	425b      	negs	r3, r3
 8003364:	441a      	add	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800336e:	4619      	mov	r1, r3
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f88b 	bl	800348c <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXBR))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003382:	2b00      	cmp	r3, #0
 8003384:	d024      	beq.n	80033d0 <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800338a:	3b01      	subs	r3, #1
 800338c:	b29a      	uxth	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	861a      	strh	r2, [r3, #48]	; 0x30
    if (hcec->TxXferCount == 0U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003396:	2b00      	cmp	r3, #0
 8003398:	d107      	bne.n	80033aa <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 0204 	orr.w	r2, r2, #4
 80033a8:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = (uint8_t)*hcec->pTxBuffPtr;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	781a      	ldrb	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	62da      	str	r2, [r3, #44]	; 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691a      	ldr	r2, [r3, #16]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033ce:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXEND))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d014      	beq.n	8003404 <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033e8:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2220      	movs	r2, #32
 80033ee:	639a      	str	r2, [r3, #56]	; 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f83a 	bl	8003478 <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR |
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	f641 437c 	movw	r3, #7292	; 0x1c7c
 800340a:	4013      	ands	r3, r2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d02f      	beq.n	8003470 <HAL_CEC_IRQHandler+0x1b0>
              CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = itflag;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6919      	ldr	r1, [r3, #16]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	f641 437c 	movw	r3, #7292	; 0x1c7c
 8003424:	430b      	orrs	r3, r1
 8003426:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00e      	beq.n	8003450 <HAL_CEC_IRQHandler+0x190>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800343a:	425b      	negs	r3, r3
 800343c:	441a      	add	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	629a      	str	r2, [r3, #40]	; 0x28
      hcec->RxXferSize = 0U;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	865a      	strh	r2, [r3, #50]	; 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2220      	movs	r2, #32
 800344c:	63da      	str	r2, [r3, #60]	; 0x3c
 800344e:	e00c      	b.n	800346a <HAL_CEC_IRQHandler+0x1aa>
    }
    else if (((itflag & CEC_ISR_ARBLST) == 0U) && ((itflag & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003456:	2b00      	cmp	r3, #0
 8003458:	d107      	bne.n	800346a <HAL_CEC_IRQHandler+0x1aa>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003460:	2b00      	cmp	r3, #0
 8003462:	d002      	beq.n	800346a <HAL_CEC_IRQHandler+0x1aa>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2220      	movs	r2, #32
 8003468:	639a      	str	r2, [r3, #56]	; 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f819 	bl	80034a2 <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 8003470:	bf00      	nop
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
	...

080034b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034c8:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <__NVIC_SetPriorityGrouping+0x40>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034d4:	4013      	ands	r3, r2
 80034d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80034e0:	4b06      	ldr	r3, [pc, #24]	; (80034fc <__NVIC_SetPriorityGrouping+0x44>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034e6:	4a04      	ldr	r2, [pc, #16]	; (80034f8 <__NVIC_SetPriorityGrouping+0x40>)
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	60d3      	str	r3, [r2, #12]
}
 80034ec:	bf00      	nop
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	e000ed00 	.word	0xe000ed00
 80034fc:	05fa0000 	.word	0x05fa0000

08003500 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003504:	4b04      	ldr	r3, [pc, #16]	; (8003518 <__NVIC_GetPriorityGrouping+0x18>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	0a1b      	lsrs	r3, r3, #8
 800350a:	f003 0307 	and.w	r3, r3, #7
}
 800350e:	4618      	mov	r0, r3
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	e000ed00 	.word	0xe000ed00

0800351c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352a:	2b00      	cmp	r3, #0
 800352c:	db0b      	blt.n	8003546 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800352e:	79fb      	ldrb	r3, [r7, #7]
 8003530:	f003 021f 	and.w	r2, r3, #31
 8003534:	4907      	ldr	r1, [pc, #28]	; (8003554 <__NVIC_EnableIRQ+0x38>)
 8003536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	2001      	movs	r0, #1
 800353e:	fa00 f202 	lsl.w	r2, r0, r2
 8003542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	e000e100 	.word	0xe000e100

08003558 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003566:	2b00      	cmp	r3, #0
 8003568:	db12      	blt.n	8003590 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	f003 021f 	and.w	r2, r3, #31
 8003570:	490a      	ldr	r1, [pc, #40]	; (800359c <__NVIC_DisableIRQ+0x44>)
 8003572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	2001      	movs	r0, #1
 800357a:	fa00 f202 	lsl.w	r2, r0, r2
 800357e:	3320      	adds	r3, #32
 8003580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003584:	f3bf 8f4f 	dsb	sy
}
 8003588:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800358a:	f3bf 8f6f 	isb	sy
}
 800358e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	e000e100 	.word	0xe000e100

080035a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	6039      	str	r1, [r7, #0]
 80035aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	db0a      	blt.n	80035ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	490c      	ldr	r1, [pc, #48]	; (80035ec <__NVIC_SetPriority+0x4c>)
 80035ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035be:	0112      	lsls	r2, r2, #4
 80035c0:	b2d2      	uxtb	r2, r2
 80035c2:	440b      	add	r3, r1
 80035c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035c8:	e00a      	b.n	80035e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	4908      	ldr	r1, [pc, #32]	; (80035f0 <__NVIC_SetPriority+0x50>)
 80035d0:	79fb      	ldrb	r3, [r7, #7]
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	3b04      	subs	r3, #4
 80035d8:	0112      	lsls	r2, r2, #4
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	440b      	add	r3, r1
 80035de:	761a      	strb	r2, [r3, #24]
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	e000e100 	.word	0xe000e100
 80035f0:	e000ed00 	.word	0xe000ed00

080035f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b089      	sub	sp, #36	; 0x24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f003 0307 	and.w	r3, r3, #7
 8003606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f1c3 0307 	rsb	r3, r3, #7
 800360e:	2b04      	cmp	r3, #4
 8003610:	bf28      	it	cs
 8003612:	2304      	movcs	r3, #4
 8003614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	3304      	adds	r3, #4
 800361a:	2b06      	cmp	r3, #6
 800361c:	d902      	bls.n	8003624 <NVIC_EncodePriority+0x30>
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	3b03      	subs	r3, #3
 8003622:	e000      	b.n	8003626 <NVIC_EncodePriority+0x32>
 8003624:	2300      	movs	r3, #0
 8003626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003628:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	fa02 f303 	lsl.w	r3, r2, r3
 8003632:	43da      	mvns	r2, r3
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	401a      	ands	r2, r3
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800363c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	fa01 f303 	lsl.w	r3, r1, r3
 8003646:	43d9      	mvns	r1, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800364c:	4313      	orrs	r3, r2
         );
}
 800364e:	4618      	mov	r0, r3
 8003650:	3724      	adds	r7, #36	; 0x24
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr

0800365a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b082      	sub	sp, #8
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff ff28 	bl	80034b8 <__NVIC_SetPriorityGrouping>
}
 8003668:	bf00      	nop
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
 800367c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003682:	f7ff ff3d 	bl	8003500 <__NVIC_GetPriorityGrouping>
 8003686:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	68b9      	ldr	r1, [r7, #8]
 800368c:	6978      	ldr	r0, [r7, #20]
 800368e:	f7ff ffb1 	bl	80035f4 <NVIC_EncodePriority>
 8003692:	4602      	mov	r2, r0
 8003694:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003698:	4611      	mov	r1, r2
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff ff80 	bl	80035a0 <__NVIC_SetPriority>
}
 80036a0:	bf00      	nop
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7ff ff30 	bl	800351c <__NVIC_EnableIRQ>
}
 80036bc:	bf00      	nop
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	4603      	mov	r3, r0
 80036cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80036ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff ff40 	bl	8003558 <__NVIC_DisableIRQ>
}
 80036d8:	bf00      	nop
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036ec:	f7ff fdb8 	bl	8003260 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e099      	b.n	8003830 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0201 	bic.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800371c:	e00f      	b.n	800373e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800371e:	f7ff fd9f 	bl	8003260 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b05      	cmp	r3, #5
 800372a:	d908      	bls.n	800373e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2203      	movs	r2, #3
 8003736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e078      	b.n	8003830 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1e8      	bne.n	800371e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	4b38      	ldr	r3, [pc, #224]	; (8003838 <HAL_DMA_Init+0x158>)
 8003758:	4013      	ands	r3, r2
 800375a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800376a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003776:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003782:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4313      	orrs	r3, r2
 800378e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	2b04      	cmp	r3, #4
 8003796:	d107      	bne.n	80037a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a0:	4313      	orrs	r3, r2
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f023 0307 	bic.w	r3, r3, #7
 80037be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d117      	bne.n	8003802 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	4313      	orrs	r3, r2
 80037da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00e      	beq.n	8003802 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f8bd 	bl	8003964 <DMA_CheckFifoParam>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d008      	beq.n	8003802 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2240      	movs	r2, #64	; 0x40
 80037f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80037fe:	2301      	movs	r3, #1
 8003800:	e016      	b.n	8003830 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 f874 	bl	80038f8 <DMA_CalcBaseAndBitshift>
 8003810:	4603      	mov	r3, r0
 8003812:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003818:	223f      	movs	r2, #63	; 0x3f
 800381a:	409a      	lsls	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	e010803f 	.word	0xe010803f

0800383c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d101      	bne.n	800384e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e050      	b.n	80038f0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d101      	bne.n	800385e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800385a:	2302      	movs	r3, #2
 800385c:	e048      	b.n	80038f0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0201 	bic.w	r2, r2, #1
 800386c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2200      	movs	r2, #0
 800387c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2200      	movs	r2, #0
 8003884:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2200      	movs	r2, #0
 800388c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2200      	movs	r2, #0
 8003894:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2221      	movs	r2, #33	; 0x21
 800389c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f82a 	bl	80038f8 <DMA_CalcBaseAndBitshift>
 80038a4:	4603      	mov	r3, r0
 80038a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ac:	223f      	movs	r2, #63	; 0x3f
 80038ae:	409a      	lsls	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	b2db      	uxtb	r3, r3
 8003906:	3b10      	subs	r3, #16
 8003908:	4a13      	ldr	r2, [pc, #76]	; (8003958 <DMA_CalcBaseAndBitshift+0x60>)
 800390a:	fba2 2303 	umull	r2, r3, r2, r3
 800390e:	091b      	lsrs	r3, r3, #4
 8003910:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003912:	4a12      	ldr	r2, [pc, #72]	; (800395c <DMA_CalcBaseAndBitshift+0x64>)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4413      	add	r3, r2
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	461a      	mov	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2b03      	cmp	r3, #3
 8003924:	d908      	bls.n	8003938 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	461a      	mov	r2, r3
 800392c:	4b0c      	ldr	r3, [pc, #48]	; (8003960 <DMA_CalcBaseAndBitshift+0x68>)
 800392e:	4013      	ands	r3, r2
 8003930:	1d1a      	adds	r2, r3, #4
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	659a      	str	r2, [r3, #88]	; 0x58
 8003936:	e006      	b.n	8003946 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	4b08      	ldr	r3, [pc, #32]	; (8003960 <DMA_CalcBaseAndBitshift+0x68>)
 8003940:	4013      	ands	r3, r2
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	aaaaaaab 	.word	0xaaaaaaab
 800395c:	0800eb68 	.word	0x0800eb68
 8003960:	fffffc00 	.word	0xfffffc00

08003964 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003974:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d11f      	bne.n	80039be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b03      	cmp	r3, #3
 8003982:	d856      	bhi.n	8003a32 <DMA_CheckFifoParam+0xce>
 8003984:	a201      	add	r2, pc, #4	; (adr r2, 800398c <DMA_CheckFifoParam+0x28>)
 8003986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398a:	bf00      	nop
 800398c:	0800399d 	.word	0x0800399d
 8003990:	080039af 	.word	0x080039af
 8003994:	0800399d 	.word	0x0800399d
 8003998:	08003a33 	.word	0x08003a33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d046      	beq.n	8003a36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039ac:	e043      	b.n	8003a36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039b6:	d140      	bne.n	8003a3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039bc:	e03d      	b.n	8003a3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c6:	d121      	bne.n	8003a0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	d837      	bhi.n	8003a3e <DMA_CheckFifoParam+0xda>
 80039ce:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <DMA_CheckFifoParam+0x70>)
 80039d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d4:	080039e5 	.word	0x080039e5
 80039d8:	080039eb 	.word	0x080039eb
 80039dc:	080039e5 	.word	0x080039e5
 80039e0:	080039fd 	.word	0x080039fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	73fb      	strb	r3, [r7, #15]
      break;
 80039e8:	e030      	b.n	8003a4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d025      	beq.n	8003a42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039fa:	e022      	b.n	8003a42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a04:	d11f      	bne.n	8003a46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a0a:	e01c      	b.n	8003a46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d903      	bls.n	8003a1a <DMA_CheckFifoParam+0xb6>
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2b03      	cmp	r3, #3
 8003a16:	d003      	beq.n	8003a20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a18:	e018      	b.n	8003a4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	73fb      	strb	r3, [r7, #15]
      break;
 8003a1e:	e015      	b.n	8003a4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00e      	beq.n	8003a4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a30:	e00b      	b.n	8003a4a <DMA_CheckFifoParam+0xe6>
      break;
 8003a32:	bf00      	nop
 8003a34:	e00a      	b.n	8003a4c <DMA_CheckFifoParam+0xe8>
      break;
 8003a36:	bf00      	nop
 8003a38:	e008      	b.n	8003a4c <DMA_CheckFifoParam+0xe8>
      break;
 8003a3a:	bf00      	nop
 8003a3c:	e006      	b.n	8003a4c <DMA_CheckFifoParam+0xe8>
      break;
 8003a3e:	bf00      	nop
 8003a40:	e004      	b.n	8003a4c <DMA_CheckFifoParam+0xe8>
      break;
 8003a42:	bf00      	nop
 8003a44:	e002      	b.n	8003a4c <DMA_CheckFifoParam+0xe8>
      break;   
 8003a46:	bf00      	nop
 8003a48:	e000      	b.n	8003a4c <DMA_CheckFifoParam+0xe8>
      break;
 8003a4a:	bf00      	nop
    }
  } 
  
  return status; 
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3714      	adds	r7, #20
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop

08003a5c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d101      	bne.n	8003a6e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e049      	b.n	8003b02 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d106      	bne.n	8003a88 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fd f916 	bl	8000cb4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aac:	f023 0107 	bic.w	r1, r3, #7
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689a      	ldr	r2, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ac2:	4b12      	ldr	r3, [pc, #72]	; (8003b0c <HAL_DMA2D_Init+0xb0>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	68d1      	ldr	r1, [r2, #12]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6812      	ldr	r2, [r2, #0]
 8003ace:	430b      	orrs	r3, r1
 8003ad0:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ad8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	051a      	lsls	r2, r3, #20
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	055b      	lsls	r3, r3, #21
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	ffffc000 	.word	0xffffc000

08003b10 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af02      	add	r7, sp, #8
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_DMA2D_Start+0x1c>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e018      	b.n	8003b5e <HAL_DMA2D_Start+0x4e>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	68b9      	ldr	r1, [r7, #8]
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 faa4 	bl	8004094 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0201 	orr.w	r2, r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b086      	sub	sp, #24
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
 8003b6e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d056      	beq.n	8003c30 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b82:	f7ff fb6d 	bl	8003260 <HAL_GetTick>
 8003b86:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003b88:	e04b      	b.n	8003c22 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d023      	beq.n	8003be4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f003 0320 	and.w	r3, r3, #32
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d005      	beq.n	8003bb2 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003baa:	f043 0202 	orr.w	r2, r3, #2
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d005      	beq.n	8003bc8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc0:	f043 0201 	orr.w	r2, r3, #1
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2221      	movs	r2, #33	; 0x21
 8003bce:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2204      	movs	r2, #4
 8003bd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0a5      	b.n	8003d30 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bea:	d01a      	beq.n	8003c22 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bec:	f7ff fb38 	bl	8003260 <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d302      	bcc.n	8003c02 <HAL_DMA2D_PollForTransfer+0x9c>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10f      	bne.n	8003c22 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c06:	f043 0220 	orr.w	r2, r3, #32
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2203      	movs	r2, #3
 8003c12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e086      	b.n	8003d30 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0ac      	beq.n	8003b8a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	f003 0320 	and.w	r3, r3, #32
 8003c3a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	f003 0320 	and.w	r3, r3, #32
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d061      	beq.n	8003d16 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003c52:	f7ff fb05 	bl	8003260 <HAL_GetTick>
 8003c56:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003c58:	e056      	b.n	8003d08 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d02e      	beq.n	8003cca <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d005      	beq.n	8003c82 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7a:	f043 0204 	orr.w	r2, r3, #4
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f003 0320 	and.w	r3, r3, #32
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d005      	beq.n	8003c98 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c90:	f043 0202 	orr.w	r2, r3, #2
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca6:	f043 0201 	orr.w	r2, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2229      	movs	r2, #41	; 0x29
 8003cb4:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2204      	movs	r2, #4
 8003cba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e032      	b.n	8003d30 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cd0:	d01a      	beq.n	8003d08 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cd2:	f7ff fac5 	bl	8003260 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d302      	bcc.n	8003ce8 <HAL_DMA2D_PollForTransfer+0x182>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10f      	bne.n	8003d08 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cec:	f043 0220 	orr.w	r2, r3, #32
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2203      	movs	r2, #3
 8003cf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e013      	b.n	8003d30 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f003 0310 	and.w	r3, r3, #16
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0a1      	beq.n	8003c5a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2212      	movs	r2, #18
 8003d1c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d026      	beq.n	8003da8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d021      	beq.n	8003da8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d72:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d78:	f043 0201 	orr.w	r2, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2201      	movs	r2, #1
 8003d86:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d003      	beq.n	8003da8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	69db      	ldr	r3, [r3, #28]
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d026      	beq.n	8003e00 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d021      	beq.n	8003e00 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dca:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd8:	f043 0202 	orr.w	r2, r3, #2
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2204      	movs	r2, #4
 8003de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d026      	beq.n	8003e58 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d021      	beq.n	8003e58 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e22:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2208      	movs	r2, #8
 8003e2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e30:	f043 0204 	orr.w	r2, r3, #4
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2204      	movs	r2, #4
 8003e3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d013      	beq.n	8003e8a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d00e      	beq.n	8003e8a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e7a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2204      	movs	r2, #4
 8003e82:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 f853 	bl	8003f30 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d024      	beq.n	8003ede <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d01f      	beq.n	8003ede <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003eac:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d003      	beq.n	8003ede <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f003 0310 	and.w	r3, r3, #16
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d01f      	beq.n	8003f28 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d01a      	beq.n	8003f28 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f00:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2210      	movs	r2, #16
 8003f08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f80e 	bl	8003f44 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003f28:	bf00      	nop
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003f38:	bf00      	nop
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <HAL_DMA2D_ConfigLayer+0x20>
 8003f74:	2302      	movs	r3, #2
 8003f76:	e084      	b.n	8004082 <HAL_DMA2D_ConfigLayer+0x12a>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2202      	movs	r2, #2
 8003f84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	4413      	add	r3, r2
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	3320      	adds	r3, #32
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	4413      	add	r3, r2
 8003f98:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	041b      	lsls	r3, r3, #16
 8003fa4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003fac:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003fb8:	4b35      	ldr	r3, [pc, #212]	; (8004090 <HAL_DMA2D_ConfigLayer+0x138>)
 8003fba:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	2b0a      	cmp	r3, #10
 8003fc2:	d003      	beq.n	8003fcc <HAL_DMA2D_ConfigLayer+0x74>
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2b09      	cmp	r3, #9
 8003fca:	d107      	bne.n	8003fdc <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]
 8003fda:	e005      	b.n	8003fe8 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	061b      	lsls	r3, r3, #24
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d120      	bne.n	8004030 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	43db      	mvns	r3, r3
 8003ff8:	ea02 0103 	and.w	r1, r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	430a      	orrs	r2, r1
 8004004:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	6812      	ldr	r2, [r2, #0]
 800400e:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2b0a      	cmp	r3, #10
 8004016:	d003      	beq.n	8004020 <HAL_DMA2D_ConfigLayer+0xc8>
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2b09      	cmp	r3, #9
 800401e:	d127      	bne.n	8004070 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	68da      	ldr	r2, [r3, #12]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800402c:	629a      	str	r2, [r3, #40]	; 0x28
 800402e:	e01f      	b.n	8004070 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	69da      	ldr	r2, [r3, #28]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	43db      	mvns	r3, r3
 800403a:	ea02 0103 	and.w	r1, r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	697a      	ldr	r2, [r7, #20]
 8004044:	430a      	orrs	r2, r1
 8004046:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	6812      	ldr	r2, [r2, #0]
 8004050:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b0a      	cmp	r3, #10
 8004058:	d003      	beq.n	8004062 <HAL_DMA2D_ConfigLayer+0x10a>
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b09      	cmp	r3, #9
 8004060:	d106      	bne.n	8004070 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800406e:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	371c      	adds	r7, #28
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	ff33000f 	.word	0xff33000f

08004094 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004094:	b480      	push	{r7}
 8004096:	b08b      	sub	sp, #44	; 0x2c
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
 80040a0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	041a      	lsls	r2, r3, #16
 80040b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b2:	431a      	orrs	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040cc:	d174      	bne.n	80041b8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80040d4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80040dc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80040e4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d108      	bne.n	8004106 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	431a      	orrs	r2, r3
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	4313      	orrs	r3, r2
 8004102:	627b      	str	r3, [r7, #36]	; 0x24
 8004104:	e053      	b.n	80041ae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d106      	bne.n	800411c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	4313      	orrs	r3, r2
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	4313      	orrs	r3, r2
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
 800411a:	e048      	b.n	80041ae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	2b02      	cmp	r3, #2
 8004122:	d111      	bne.n	8004148 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	0cdb      	lsrs	r3, r3, #19
 8004128:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	0a9b      	lsrs	r3, r3, #10
 800412e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	08db      	lsrs	r3, r3, #3
 8004134:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	015a      	lsls	r2, r3, #5
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	02db      	lsls	r3, r3, #11
 800413e:	4313      	orrs	r3, r2
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	4313      	orrs	r3, r2
 8004144:	627b      	str	r3, [r7, #36]	; 0x24
 8004146:	e032      	b.n	80041ae <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	2b03      	cmp	r3, #3
 800414e:	d117      	bne.n	8004180 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004150:	6a3b      	ldr	r3, [r7, #32]
 8004152:	0fdb      	lsrs	r3, r3, #31
 8004154:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	0cdb      	lsrs	r3, r3, #19
 800415a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	0adb      	lsrs	r3, r3, #11
 8004160:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	08db      	lsrs	r3, r3, #3
 8004166:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	029b      	lsls	r3, r3, #10
 8004170:	431a      	orrs	r2, r3
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	03db      	lsls	r3, r3, #15
 8004176:	4313      	orrs	r3, r2
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	4313      	orrs	r3, r2
 800417c:	627b      	str	r3, [r7, #36]	; 0x24
 800417e:	e016      	b.n	80041ae <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	0f1b      	lsrs	r3, r3, #28
 8004184:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	0d1b      	lsrs	r3, r3, #20
 800418a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	0b1b      	lsrs	r3, r3, #12
 8004190:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	091b      	lsrs	r3, r3, #4
 8004196:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	011a      	lsls	r2, r3, #4
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	431a      	orrs	r2, r3
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	031b      	lsls	r3, r3, #12
 80041a6:	4313      	orrs	r3, r2
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80041b6:	e003      	b.n	80041c0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	60da      	str	r2, [r3, #12]
}
 80041c0:	bf00      	nop
 80041c2:	372c      	adds	r7, #44	; 0x2c
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
 80041d8:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	019a      	lsls	r2, r3, #6
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	431a      	orrs	r2, r3
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	021b      	lsls	r3, r3, #8
 80041e6:	431a      	orrs	r2, r3
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	041b      	lsls	r3, r3, #16
 80041ec:	431a      	orrs	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80041f2:	bf00      	nop
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b086      	sub	sp, #24
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	607a      	str	r2, [r7, #4]
 800420a:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800420c:	f7ff f828 	bl	8003260 <HAL_GetTick>
 8004210:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004212:	e009      	b.n	8004228 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004214:	f7ff f824 	bl	8003260 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004222:	d901      	bls.n	8004228 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e015      	b.n	8004254 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800422e:	f003 0301 	and.w	r3, r3, #1
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0ee      	beq.n	8004214 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	019a      	lsls	r2, r3, #6
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	431a      	orrs	r2, r3
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	021b      	lsls	r3, r3, #8
 8004242:	ea42 0103 	orr.w	r1, r2, r3
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	041a      	lsls	r2, r3, #16
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3718      	adds	r7, #24
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b088      	sub	sp, #32
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e109      	b.n	8004484 <HAL_DSI_Init+0x228>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	7c5b      	ldrb	r3, [r3, #17]
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d102      	bne.n	8004280 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fc fd40 	bl	8000d00 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2203      	movs	r2, #3
 8004284:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8004286:	2300      	movs	r3, #0
 8004288:	613b      	str	r3, [r7, #16]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800429a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80042a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042aa:	613b      	str	r3, [r7, #16]
 80042ac:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042ae:	f7fe ffd7 	bl	8003260 <HAL_GetTick>
 80042b2:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80042b4:	e009      	b.n	80042ca <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80042b6:	f7fe ffd3 	bl	8003260 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042c4:	d901      	bls.n	80042ca <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e0dc      	b.n	8004484 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80042d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0ed      	beq.n	80042b6 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	4b69      	ldr	r3, [pc, #420]	; (800448c <HAL_DSI_Init+0x230>)
 80042e8:	400b      	ands	r3, r1
 80042ea:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004302:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800430a:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8004316:	2300      	movs	r3, #0
 8004318:	60fb      	str	r3, [r7, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f042 0201 	orr.w	r2, r2, #1
 800432a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	60fb      	str	r3, [r7, #12]
 800433c:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 800433e:	2001      	movs	r0, #1
 8004340:	f7fe ff9a 	bl	8003278 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8004344:	f7fe ff8c 	bl	8003260 <HAL_GetTick>
 8004348:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800434a:	e009      	b.n	8004360 <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800434c:	f7fe ff88 	bl	8003260 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800435a:	d901      	bls.n	8004360 <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e091      	b.n	8004484 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0ed      	beq.n	800434c <HAL_DSI_Init+0xf0>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f042 0206 	orr.w	r2, r2, #6
 8004380:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0203 	bic.w	r2, r2, #3
 8004394:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	431a      	orrs	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0201 	orr.w	r2, r2, #1
 80043ae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0203 	bic.w	r2, r2, #3
 80043c2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689a      	ldr	r2, [r3, #8]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043ea:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6899      	ldr	r1, [r3, #8]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689a      	ldr	r2, [r3, #8]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <HAL_DSI_Init+0x1b0>
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	e000      	b.n	800440e <HAL_DSI_Init+0x1b2>
 800440c:	2301      	movs	r3, #1
 800440e:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	4a1f      	ldr	r2, [pc, #124]	; (8004490 <HAL_DSI_Init+0x234>)
 8004414:	fb03 f202 	mul.w	r2, r3, r2
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 0303 	and.w	r3, r3, #3
 8004420:	409a      	lsls	r2, r3
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f246 11a8 	movw	r1, #25000	; 0x61a8
 800442a:	fb01 f303 	mul.w	r3, r1, r3
 800442e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004432:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8004444:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	430a      	orrs	r2, r1
 8004458:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2200      	movs	r2, #0
 8004462:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2200      	movs	r2, #0
 800446c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3720      	adds	r7, #32
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	fffc8603 	.word	0xfffc8603
 8004490:	003d0900 	.word	0x003d0900

08004494 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e066      	b.n	8004574 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2203      	movs	r2, #3
 80044aa:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80044ac:	2300      	movs	r3, #0
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0208 	bic.w	r2, r2, #8
 80044c0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80044cc:	f003 0308 	and.w	r3, r3, #8
 80044d0:	617b      	str	r3, [r7, #20]
 80044d2:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 80044d4:	2300      	movs	r3, #0
 80044d6:	613b      	str	r3, [r7, #16]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0201 	bic.w	r2, r2, #1
 80044e6:	605a      	str	r2, [r3, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	613b      	str	r3, [r7, #16]
 80044f4:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0206 	bic.w	r2, r2, #6
 8004506:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0201 	bic.w	r2, r2, #1
 800451e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8004532:	2300      	movs	r3, #0
 8004534:	60bb      	str	r3, [r7, #8]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004546:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004552:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004556:	60bb      	str	r3, [r7, #8]
 8004558:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fc fc1c 	bl	8000d98 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3718      	adds	r7, #24
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00f      	beq.n	80045b4 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d007      	beq.n	80045b4 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f8ad 	bl	800470e <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00f      	beq.n	80045e4 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d007      	beq.n	80045e4 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2202      	movs	r2, #2
 80045da:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f89f 	bl	8004722 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f000 808c 	beq.w	8004706 <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80045f6:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	4013      	ands	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800460e:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	4013      	ands	r3, r2
 800461c:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d005      	beq.n	8004632 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	695b      	ldr	r3, [r3, #20]
 800462a:	f043 0201 	orr.w	r2, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d005      	beq.n	8004648 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	f043 0202 	orr.w	r2, r3, #2
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d005      	beq.n	800465e <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	f043 0204 	orr.w	r2, r3, #4
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	f003 0302 	and.w	r3, r3, #2
 8004664:	2b00      	cmp	r3, #0
 8004666:	d005      	beq.n	8004674 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	f043 0208 	orr.w	r2, r3, #8
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f003 030c 	and.w	r3, r3, #12
 800467a:	2b00      	cmp	r3, #0
 800467c:	d005      	beq.n	800468a <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	f043 0210 	orr.w	r2, r3, #16
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f003 0310 	and.w	r3, r3, #16
 8004690:	2b00      	cmp	r3, #0
 8004692:	d005      	beq.n	80046a0 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	f043 0220 	orr.w	r2, r3, #32
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	f003 0320 	and.w	r3, r3, #32
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d005      	beq.n	80046b6 <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d005      	beq.n	80046cc <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d005      	beq.n	80046e2 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d005      	beq.n	80046f8 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 f818 	bl	8004736 <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8004706:	bf00      	nop
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8004716:	bf00      	nop
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8004722:	b480      	push	{r7}
 8004724:	b083      	sub	sp, #12
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 800472a:	bf00      	nop
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 800473e:	bf00      	nop
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
	...

0800474c <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	7c1b      	ldrb	r3, [r3, #16]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d101      	bne.n	8004762 <HAL_DSI_ConfigVideoMode+0x16>
 800475e:	2302      	movs	r3, #2
 8004760:	e1ee      	b.n	8004b40 <HAL_DSI_ConfigVideoMode+0x3f4>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0201 	bic.w	r2, r2, #1
 8004776:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0201 	bic.w	r2, r2, #1
 8004788:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0203 	bic.w	r2, r2, #3
 800479a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	4b8b      	ldr	r3, [pc, #556]	; (80049e8 <HAL_DSI_ConfigVideoMode+0x29c>)
 80047ba:	400b      	ands	r3, r1
 80047bc:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	691a      	ldr	r2, [r3, #16]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	4b84      	ldr	r3, [pc, #528]	; (80049ec <HAL_DSI_ConfigVideoMode+0x2a0>)
 80047dc:	400b      	ands	r3, r1
 80047de:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	695a      	ldr	r2, [r3, #20]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	4b7b      	ldr	r3, [pc, #492]	; (80049ec <HAL_DSI_ConfigVideoMode+0x2a0>)
 80047fe:	400b      	ands	r3, r1
 8004800:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	699a      	ldr	r2, [r3, #24]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0203 	bic.w	r2, r2, #3
 8004822:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68d9      	ldr	r1, [r3, #12]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695a      	ldr	r2, [r3, #20]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0207 	bic.w	r2, r2, #7
 8004844:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6959      	ldr	r1, [r3, #20]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	431a      	orrs	r2, r3
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	691a      	ldr	r2, [r3, #16]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 020f 	bic.w	r2, r2, #15
 8004872:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	6919      	ldr	r1, [r3, #16]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f022 020e 	bic.w	r2, r2, #14
 8004896:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	005a      	lsls	r2, r3, #1
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	d110      	bne.n	80048dc <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	691a      	ldr	r2, [r3, #16]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048c8:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6919      	ldr	r1, [r3, #16]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	4b42      	ldr	r3, [pc, #264]	; (80049f0 <HAL_DSI_ConfigVideoMode+0x2a4>)
 80048e8:	400b      	ands	r3, r1
 80048ea:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	4b39      	ldr	r3, [pc, #228]	; (80049f0 <HAL_DSI_ConfigVideoMode+0x2a4>)
 800490a:	400b      	ands	r3, r1
 800490c:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	4b32      	ldr	r3, [pc, #200]	; (80049f4 <HAL_DSI_ConfigVideoMode+0x2a8>)
 800492c:	400b      	ands	r3, r1
 800492e:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	4b2a      	ldr	r3, [pc, #168]	; (80049f8 <HAL_DSI_ConfigVideoMode+0x2ac>)
 800494e:	400b      	ands	r3, r1
 8004950:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	430a      	orrs	r2, r1
 8004962:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	4b22      	ldr	r3, [pc, #136]	; (80049f8 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004970:	400b      	ands	r3, r1
 8004972:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	4b19      	ldr	r3, [pc, #100]	; (80049f8 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8004992:	400b      	ands	r3, r1
 8004994:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	4b0d      	ldr	r3, [pc, #52]	; (80049e8 <HAL_DSI_ConfigVideoMode+0x29c>)
 80049b4:	400b      	ands	r3, r1
 80049b6:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049d8:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049e4:	e00a      	b.n	80049fc <HAL_DSI_ConfigVideoMode+0x2b0>
 80049e6:	bf00      	nop
 80049e8:	ffffc000 	.word	0xffffc000
 80049ec:	ffffe000 	.word	0xffffe000
 80049f0:	fffff000 	.word	0xfffff000
 80049f4:	ffff8000 	.word	0xffff8000
 80049f8:	fffffc00 	.word	0xfffffc00
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699a      	ldr	r2, [r3, #24]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8004a12:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6999      	ldr	r1, [r3, #24]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a1e:	041a      	lsls	r2, r3, #16
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699a      	ldr	r2, [r3, #24]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a36:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6999      	ldr	r1, [r3, #24]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a58:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a7a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a9c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004abe:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ae0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	430a      	orrs	r2, r1
 8004af2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b02:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b24:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	430a      	orrs	r2, r1
 8004b36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	7c1b      	ldrb	r3, [r3, #16]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d101      	bne.n	8004b60 <HAL_DSI_Start+0x14>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	e02b      	b.n	8004bb8 <HAL_DSI_Start+0x6c>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8004b66:	2300      	movs	r3, #0
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f042 0201 	orr.w	r2, r2, #1
 8004b78:	605a      	str	r2, [r3, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	60fb      	str	r3, [r7, #12]
 8004b86:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60bb      	str	r3, [r7, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f042 0208 	orr.w	r2, r2, #8
 8004b9c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8004ba8:	f003 0308 	and.w	r3, r3, #8
 8004bac:	60bb      	str	r3, [r7, #8]
 8004bae:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b088      	sub	sp, #32
 8004bc8:	af02      	add	r7, sp, #8
 8004bca:	60f8      	str	r0, [r7, #12]
 8004bcc:	60b9      	str	r1, [r7, #8]
 8004bce:	607a      	str	r2, [r7, #4]
 8004bd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	7c1b      	ldrb	r3, [r3, #16]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <HAL_DSI_ShortWrite+0x1a>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e010      	b.n	8004c00 <HAL_DSI_ShortWrite+0x3c>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2201      	movs	r2, #1
 8004be2:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	68b9      	ldr	r1, [r7, #8]
 8004bee:	68f8      	ldr	r0, [r7, #12]
 8004bf0:	f7ff fb05 	bl	80041fe <DSI_ShortWrite>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	741a      	strb	r2, [r3, #16]

  return status;
 8004bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3718      	adds	r7, #24
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b08c      	sub	sp, #48	; 0x30
 8004c0c:	af02      	add	r7, sp, #8
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
 8004c14:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8004c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c18:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	7c1b      	ldrb	r3, [r3, #16]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d101      	bne.n	8004c26 <HAL_DSI_LongWrite+0x1e>
 8004c22:	2302      	movs	r3, #2
 8004c24:	e084      	b.n	8004d30 <HAL_DSI_LongWrite+0x128>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c2c:	f7fe fb18 	bl	8003260 <HAL_GetTick>
 8004c30:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004c32:	e00c      	b.n	8004c4e <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004c34:	f7fe fb14 	bl	8003260 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c42:	d904      	bls.n	8004c4e <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e070      	b.n	8004d30 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c54:	f003 0301 	and.w	r3, r3, #1
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0eb      	beq.n	8004c34 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8004c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c5e:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	2b03      	cmp	r3, #3
 8004c64:	bf28      	it	cs
 8004c66:	2303      	movcs	r3, #3
 8004c68:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	623b      	str	r3, [r7, #32]
 8004c6e:	e00f      	b.n	8004c90 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	4413      	add	r3, r2
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	461a      	mov	r2, r3
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	fa02 f303 	lsl.w	r3, r2, r3
 8004c84:	69fa      	ldr	r2, [r7, #28]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8004c8a:	6a3b      	ldr	r3, [r7, #32]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	623b      	str	r3, [r7, #32]
 8004c90:	6a3a      	ldr	r2, [r7, #32]
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d3eb      	bcc.n	8004c70 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	69fa      	ldr	r2, [r7, #28]
 8004c9e:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 8004ca0:	683a      	ldr	r2, [r7, #0]
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	4413      	add	r3, r2
 8004cae:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8004cb0:	e028      	b.n	8004d04 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	2b04      	cmp	r3, #4
 8004cb6:	bf28      	it	cs
 8004cb8:	2304      	movcs	r3, #4
 8004cba:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	623b      	str	r3, [r7, #32]
 8004cc4:	e00e      	b.n	8004ce4 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	6a3b      	ldr	r3, [r7, #32]
 8004cca:	4413      	add	r3, r2
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	6a3b      	ldr	r3, [r7, #32]
 8004cd2:	00db      	lsls	r3, r3, #3
 8004cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd8:	69fa      	ldr	r2, [r7, #28]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	623b      	str	r3, [r7, #32]
 8004ce4:	6a3a      	ldr	r2, [r7, #32]
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d3ec      	bcc.n	8004cc6 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	69fa      	ldr	r2, [r7, #28]
 8004cf2:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8004cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	4413      	add	r3, r2
 8004d02:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1d3      	bne.n	8004cb2 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004d12:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	3301      	adds	r3, #1
 8004d18:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	68b9      	ldr	r1, [r7, #8]
 8004d24:	f7ff fa52 	bl	80041cc <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3728      	adds	r7, #40	; 0x28
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b089      	sub	sp, #36	; 0x24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004d42:	2300      	movs	r3, #0
 8004d44:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004d46:	2300      	movs	r3, #0
 8004d48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004d52:	2300      	movs	r3, #0
 8004d54:	61fb      	str	r3, [r7, #28]
 8004d56:	e175      	b.n	8005044 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004d58:	2201      	movs	r2, #1
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	697a      	ldr	r2, [r7, #20]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	f040 8164 	bne.w	800503e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d005      	beq.n	8004d8e <HAL_GPIO_Init+0x56>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d130      	bne.n	8004df0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	2203      	movs	r2, #3
 8004d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9e:	43db      	mvns	r3, r3
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	4013      	ands	r3, r2
 8004da4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
 8004db2:	69ba      	ldr	r2, [r7, #24]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dcc:	43db      	mvns	r3, r3
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	091b      	lsrs	r3, r3, #4
 8004dda:	f003 0201 	and.w	r2, r3, #1
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f003 0303 	and.w	r3, r3, #3
 8004df8:	2b03      	cmp	r3, #3
 8004dfa:	d017      	beq.n	8004e2c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	2203      	movs	r2, #3
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	43db      	mvns	r3, r3
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	4013      	ands	r3, r2
 8004e12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f003 0303 	and.w	r3, r3, #3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d123      	bne.n	8004e80 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	08da      	lsrs	r2, r3, #3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	3208      	adds	r2, #8
 8004e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	220f      	movs	r2, #15
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	43db      	mvns	r3, r3
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	691a      	ldr	r2, [r3, #16]
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	f003 0307 	and.w	r3, r3, #7
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	08da      	lsrs	r2, r3, #3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3208      	adds	r2, #8
 8004e7a:	69b9      	ldr	r1, [r7, #24]
 8004e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	2203      	movs	r2, #3
 8004e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e90:	43db      	mvns	r3, r3
 8004e92:	69ba      	ldr	r2, [r7, #24]
 8004e94:	4013      	ands	r3, r2
 8004e96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f003 0203 	and.w	r2, r3, #3
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	69ba      	ldr	r2, [r7, #24]
 8004eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	f000 80be 	beq.w	800503e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ec2:	4b66      	ldr	r3, [pc, #408]	; (800505c <HAL_GPIO_Init+0x324>)
 8004ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec6:	4a65      	ldr	r2, [pc, #404]	; (800505c <HAL_GPIO_Init+0x324>)
 8004ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8004ece:	4b63      	ldr	r3, [pc, #396]	; (800505c <HAL_GPIO_Init+0x324>)
 8004ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004eda:	4a61      	ldr	r2, [pc, #388]	; (8005060 <HAL_GPIO_Init+0x328>)
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	089b      	lsrs	r3, r3, #2
 8004ee0:	3302      	adds	r3, #2
 8004ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	f003 0303 	and.w	r3, r3, #3
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	220f      	movs	r2, #15
 8004ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef6:	43db      	mvns	r3, r3
 8004ef8:	69ba      	ldr	r2, [r7, #24]
 8004efa:	4013      	ands	r3, r2
 8004efc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a58      	ldr	r2, [pc, #352]	; (8005064 <HAL_GPIO_Init+0x32c>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d037      	beq.n	8004f76 <HAL_GPIO_Init+0x23e>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a57      	ldr	r2, [pc, #348]	; (8005068 <HAL_GPIO_Init+0x330>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d031      	beq.n	8004f72 <HAL_GPIO_Init+0x23a>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a56      	ldr	r2, [pc, #344]	; (800506c <HAL_GPIO_Init+0x334>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d02b      	beq.n	8004f6e <HAL_GPIO_Init+0x236>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a55      	ldr	r2, [pc, #340]	; (8005070 <HAL_GPIO_Init+0x338>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d025      	beq.n	8004f6a <HAL_GPIO_Init+0x232>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a54      	ldr	r2, [pc, #336]	; (8005074 <HAL_GPIO_Init+0x33c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d01f      	beq.n	8004f66 <HAL_GPIO_Init+0x22e>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a53      	ldr	r2, [pc, #332]	; (8005078 <HAL_GPIO_Init+0x340>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d019      	beq.n	8004f62 <HAL_GPIO_Init+0x22a>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a52      	ldr	r2, [pc, #328]	; (800507c <HAL_GPIO_Init+0x344>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d013      	beq.n	8004f5e <HAL_GPIO_Init+0x226>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a51      	ldr	r2, [pc, #324]	; (8005080 <HAL_GPIO_Init+0x348>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00d      	beq.n	8004f5a <HAL_GPIO_Init+0x222>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a50      	ldr	r2, [pc, #320]	; (8005084 <HAL_GPIO_Init+0x34c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d007      	beq.n	8004f56 <HAL_GPIO_Init+0x21e>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a4f      	ldr	r2, [pc, #316]	; (8005088 <HAL_GPIO_Init+0x350>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d101      	bne.n	8004f52 <HAL_GPIO_Init+0x21a>
 8004f4e:	2309      	movs	r3, #9
 8004f50:	e012      	b.n	8004f78 <HAL_GPIO_Init+0x240>
 8004f52:	230a      	movs	r3, #10
 8004f54:	e010      	b.n	8004f78 <HAL_GPIO_Init+0x240>
 8004f56:	2308      	movs	r3, #8
 8004f58:	e00e      	b.n	8004f78 <HAL_GPIO_Init+0x240>
 8004f5a:	2307      	movs	r3, #7
 8004f5c:	e00c      	b.n	8004f78 <HAL_GPIO_Init+0x240>
 8004f5e:	2306      	movs	r3, #6
 8004f60:	e00a      	b.n	8004f78 <HAL_GPIO_Init+0x240>
 8004f62:	2305      	movs	r3, #5
 8004f64:	e008      	b.n	8004f78 <HAL_GPIO_Init+0x240>
 8004f66:	2304      	movs	r3, #4
 8004f68:	e006      	b.n	8004f78 <HAL_GPIO_Init+0x240>
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e004      	b.n	8004f78 <HAL_GPIO_Init+0x240>
 8004f6e:	2302      	movs	r3, #2
 8004f70:	e002      	b.n	8004f78 <HAL_GPIO_Init+0x240>
 8004f72:	2301      	movs	r3, #1
 8004f74:	e000      	b.n	8004f78 <HAL_GPIO_Init+0x240>
 8004f76:	2300      	movs	r3, #0
 8004f78:	69fa      	ldr	r2, [r7, #28]
 8004f7a:	f002 0203 	and.w	r2, r2, #3
 8004f7e:	0092      	lsls	r2, r2, #2
 8004f80:	4093      	lsls	r3, r2
 8004f82:	69ba      	ldr	r2, [r7, #24]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004f88:	4935      	ldr	r1, [pc, #212]	; (8005060 <HAL_GPIO_Init+0x328>)
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	089b      	lsrs	r3, r3, #2
 8004f8e:	3302      	adds	r3, #2
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f96:	4b3d      	ldr	r3, [pc, #244]	; (800508c <HAL_GPIO_Init+0x354>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	43db      	mvns	r3, r3
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004fba:	4a34      	ldr	r2, [pc, #208]	; (800508c <HAL_GPIO_Init+0x354>)
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fc0:	4b32      	ldr	r3, [pc, #200]	; (800508c <HAL_GPIO_Init+0x354>)
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	43db      	mvns	r3, r3
 8004fca:	69ba      	ldr	r2, [r7, #24]
 8004fcc:	4013      	ands	r3, r2
 8004fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d003      	beq.n	8004fe4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004fe4:	4a29      	ldr	r2, [pc, #164]	; (800508c <HAL_GPIO_Init+0x354>)
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004fea:	4b28      	ldr	r3, [pc, #160]	; (800508c <HAL_GPIO_Init+0x354>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	43db      	mvns	r3, r3
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	4313      	orrs	r3, r2
 800500c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800500e:	4a1f      	ldr	r2, [pc, #124]	; (800508c <HAL_GPIO_Init+0x354>)
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005014:	4b1d      	ldr	r3, [pc, #116]	; (800508c <HAL_GPIO_Init+0x354>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	43db      	mvns	r3, r3
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	4013      	ands	r3, r2
 8005022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	4313      	orrs	r3, r2
 8005036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005038:	4a14      	ldr	r2, [pc, #80]	; (800508c <HAL_GPIO_Init+0x354>)
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	3301      	adds	r3, #1
 8005042:	61fb      	str	r3, [r7, #28]
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	2b0f      	cmp	r3, #15
 8005048:	f67f ae86 	bls.w	8004d58 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800504c:	bf00      	nop
 800504e:	bf00      	nop
 8005050:	3724      	adds	r7, #36	; 0x24
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	40023800 	.word	0x40023800
 8005060:	40013800 	.word	0x40013800
 8005064:	40020000 	.word	0x40020000
 8005068:	40020400 	.word	0x40020400
 800506c:	40020800 	.word	0x40020800
 8005070:	40020c00 	.word	0x40020c00
 8005074:	40021000 	.word	0x40021000
 8005078:	40021400 	.word	0x40021400
 800507c:	40021800 	.word	0x40021800
 8005080:	40021c00 	.word	0x40021c00
 8005084:	40022000 	.word	0x40022000
 8005088:	40022400 	.word	0x40022400
 800508c:	40013c00 	.word	0x40013c00

08005090 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800509a:	2300      	movs	r3, #0
 800509c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 800509e:	2300      	movs	r3, #0
 80050a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80050a2:	2300      	movs	r3, #0
 80050a4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]
 80050aa:	e0d9      	b.n	8005260 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80050ac:	2201      	movs	r2, #1
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	fa02 f303 	lsl.w	r3, r2, r3
 80050b4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	4013      	ands	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	f040 80c9 	bne.w	800525a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80050c8:	4a6b      	ldr	r2, [pc, #428]	; (8005278 <HAL_GPIO_DeInit+0x1e8>)
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	089b      	lsrs	r3, r3, #2
 80050ce:	3302      	adds	r3, #2
 80050d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050d4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f003 0303 	and.w	r3, r3, #3
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	220f      	movs	r2, #15
 80050e0:	fa02 f303 	lsl.w	r3, r2, r3
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	4013      	ands	r3, r2
 80050e8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a63      	ldr	r2, [pc, #396]	; (800527c <HAL_GPIO_DeInit+0x1ec>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d037      	beq.n	8005162 <HAL_GPIO_DeInit+0xd2>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a62      	ldr	r2, [pc, #392]	; (8005280 <HAL_GPIO_DeInit+0x1f0>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d031      	beq.n	800515e <HAL_GPIO_DeInit+0xce>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a61      	ldr	r2, [pc, #388]	; (8005284 <HAL_GPIO_DeInit+0x1f4>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d02b      	beq.n	800515a <HAL_GPIO_DeInit+0xca>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a60      	ldr	r2, [pc, #384]	; (8005288 <HAL_GPIO_DeInit+0x1f8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d025      	beq.n	8005156 <HAL_GPIO_DeInit+0xc6>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a5f      	ldr	r2, [pc, #380]	; (800528c <HAL_GPIO_DeInit+0x1fc>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d01f      	beq.n	8005152 <HAL_GPIO_DeInit+0xc2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a5e      	ldr	r2, [pc, #376]	; (8005290 <HAL_GPIO_DeInit+0x200>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d019      	beq.n	800514e <HAL_GPIO_DeInit+0xbe>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a5d      	ldr	r2, [pc, #372]	; (8005294 <HAL_GPIO_DeInit+0x204>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d013      	beq.n	800514a <HAL_GPIO_DeInit+0xba>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a5c      	ldr	r2, [pc, #368]	; (8005298 <HAL_GPIO_DeInit+0x208>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d00d      	beq.n	8005146 <HAL_GPIO_DeInit+0xb6>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a5b      	ldr	r2, [pc, #364]	; (800529c <HAL_GPIO_DeInit+0x20c>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d007      	beq.n	8005142 <HAL_GPIO_DeInit+0xb2>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a5a      	ldr	r2, [pc, #360]	; (80052a0 <HAL_GPIO_DeInit+0x210>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d101      	bne.n	800513e <HAL_GPIO_DeInit+0xae>
 800513a:	2309      	movs	r3, #9
 800513c:	e012      	b.n	8005164 <HAL_GPIO_DeInit+0xd4>
 800513e:	230a      	movs	r3, #10
 8005140:	e010      	b.n	8005164 <HAL_GPIO_DeInit+0xd4>
 8005142:	2308      	movs	r3, #8
 8005144:	e00e      	b.n	8005164 <HAL_GPIO_DeInit+0xd4>
 8005146:	2307      	movs	r3, #7
 8005148:	e00c      	b.n	8005164 <HAL_GPIO_DeInit+0xd4>
 800514a:	2306      	movs	r3, #6
 800514c:	e00a      	b.n	8005164 <HAL_GPIO_DeInit+0xd4>
 800514e:	2305      	movs	r3, #5
 8005150:	e008      	b.n	8005164 <HAL_GPIO_DeInit+0xd4>
 8005152:	2304      	movs	r3, #4
 8005154:	e006      	b.n	8005164 <HAL_GPIO_DeInit+0xd4>
 8005156:	2303      	movs	r3, #3
 8005158:	e004      	b.n	8005164 <HAL_GPIO_DeInit+0xd4>
 800515a:	2302      	movs	r3, #2
 800515c:	e002      	b.n	8005164 <HAL_GPIO_DeInit+0xd4>
 800515e:	2301      	movs	r3, #1
 8005160:	e000      	b.n	8005164 <HAL_GPIO_DeInit+0xd4>
 8005162:	2300      	movs	r3, #0
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	f002 0203 	and.w	r2, r2, #3
 800516a:	0092      	lsls	r2, r2, #2
 800516c:	4093      	lsls	r3, r2
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	429a      	cmp	r2, r3
 8005172:	d132      	bne.n	80051da <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005174:	4b4b      	ldr	r3, [pc, #300]	; (80052a4 <HAL_GPIO_DeInit+0x214>)
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	43db      	mvns	r3, r3
 800517c:	4949      	ldr	r1, [pc, #292]	; (80052a4 <HAL_GPIO_DeInit+0x214>)
 800517e:	4013      	ands	r3, r2
 8005180:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005182:	4b48      	ldr	r3, [pc, #288]	; (80052a4 <HAL_GPIO_DeInit+0x214>)
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	43db      	mvns	r3, r3
 800518a:	4946      	ldr	r1, [pc, #280]	; (80052a4 <HAL_GPIO_DeInit+0x214>)
 800518c:	4013      	ands	r3, r2
 800518e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005190:	4b44      	ldr	r3, [pc, #272]	; (80052a4 <HAL_GPIO_DeInit+0x214>)
 8005192:	68da      	ldr	r2, [r3, #12]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	43db      	mvns	r3, r3
 8005198:	4942      	ldr	r1, [pc, #264]	; (80052a4 <HAL_GPIO_DeInit+0x214>)
 800519a:	4013      	ands	r3, r2
 800519c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800519e:	4b41      	ldr	r3, [pc, #260]	; (80052a4 <HAL_GPIO_DeInit+0x214>)
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	43db      	mvns	r3, r3
 80051a6:	493f      	ldr	r1, [pc, #252]	; (80052a4 <HAL_GPIO_DeInit+0x214>)
 80051a8:	4013      	ands	r3, r2
 80051aa:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	f003 0303 	and.w	r3, r3, #3
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	220f      	movs	r2, #15
 80051b6:	fa02 f303 	lsl.w	r3, r2, r3
 80051ba:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80051bc:	4a2e      	ldr	r2, [pc, #184]	; (8005278 <HAL_GPIO_DeInit+0x1e8>)
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	089b      	lsrs	r3, r3, #2
 80051c2:	3302      	adds	r3, #2
 80051c4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	43da      	mvns	r2, r3
 80051cc:	482a      	ldr	r0, [pc, #168]	; (8005278 <HAL_GPIO_DeInit+0x1e8>)
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	089b      	lsrs	r3, r3, #2
 80051d2:	400a      	ands	r2, r1
 80051d4:	3302      	adds	r3, #2
 80051d6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	2103      	movs	r1, #3
 80051e4:	fa01 f303 	lsl.w	r3, r1, r3
 80051e8:	43db      	mvns	r3, r3
 80051ea:	401a      	ands	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	08da      	lsrs	r2, r3, #3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3208      	adds	r2, #8
 80051f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	220f      	movs	r2, #15
 8005206:	fa02 f303 	lsl.w	r3, r2, r3
 800520a:	43db      	mvns	r3, r3
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	08d2      	lsrs	r2, r2, #3
 8005210:	4019      	ands	r1, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	3208      	adds	r2, #8
 8005216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68da      	ldr	r2, [r3, #12]
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	005b      	lsls	r3, r3, #1
 8005222:	2103      	movs	r1, #3
 8005224:	fa01 f303 	lsl.w	r3, r1, r3
 8005228:	43db      	mvns	r3, r3
 800522a:	401a      	ands	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685a      	ldr	r2, [r3, #4]
 8005234:	2101      	movs	r1, #1
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	fa01 f303 	lsl.w	r3, r1, r3
 800523c:	43db      	mvns	r3, r3
 800523e:	401a      	ands	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	2103      	movs	r1, #3
 800524e:	fa01 f303 	lsl.w	r3, r1, r3
 8005252:	43db      	mvns	r3, r3
 8005254:	401a      	ands	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	3301      	adds	r3, #1
 800525e:	617b      	str	r3, [r7, #20]
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	2b0f      	cmp	r3, #15
 8005264:	f67f af22 	bls.w	80050ac <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005268:	bf00      	nop
 800526a:	bf00      	nop
 800526c:	371c      	adds	r7, #28
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	40013800 	.word	0x40013800
 800527c:	40020000 	.word	0x40020000
 8005280:	40020400 	.word	0x40020400
 8005284:	40020800 	.word	0x40020800
 8005288:	40020c00 	.word	0x40020c00
 800528c:	40021000 	.word	0x40021000
 8005290:	40021400 	.word	0x40021400
 8005294:	40021800 	.word	0x40021800
 8005298:	40021c00 	.word	0x40021c00
 800529c:	40022000 	.word	0x40022000
 80052a0:	40022400 	.word	0x40022400
 80052a4:	40013c00 	.word	0x40013c00

080052a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	460b      	mov	r3, r1
 80052b2:	807b      	strh	r3, [r7, #2]
 80052b4:	4613      	mov	r3, r2
 80052b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80052b8:	787b      	ldrb	r3, [r7, #1]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052be:	887a      	ldrh	r2, [r7, #2]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80052c4:	e003      	b.n	80052ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80052c6:	887b      	ldrh	r3, [r7, #2]
 80052c8:	041a      	lsls	r2, r3, #16
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	619a      	str	r2, [r3, #24]
}
 80052ce:	bf00      	nop
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
	...

080052dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	4603      	mov	r3, r0
 80052e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80052e6:	4b08      	ldr	r3, [pc, #32]	; (8005308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80052e8:	695a      	ldr	r2, [r3, #20]
 80052ea:	88fb      	ldrh	r3, [r7, #6]
 80052ec:	4013      	ands	r3, r2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d006      	beq.n	8005300 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80052f2:	4a05      	ldr	r2, [pc, #20]	; (8005308 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80052f4:	88fb      	ldrh	r3, [r7, #6]
 80052f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80052f8:	88fb      	ldrh	r3, [r7, #6]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 f806 	bl	800530c <HAL_GPIO_EXTI_Callback>
  }
}
 8005300:	bf00      	nop
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40013c00 	.word	0x40013c00

0800530c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	4603      	mov	r3, r0
 8005314:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
	...

08005324 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e07f      	b.n	8005436 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d106      	bne.n	8005350 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f7fb fd44 	bl	8000dd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2224      	movs	r2, #36	; 0x24
 8005354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 0201 	bic.w	r2, r2, #1
 8005366:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005374:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005384:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d107      	bne.n	800539e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689a      	ldr	r2, [r3, #8]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800539a:	609a      	str	r2, [r3, #8]
 800539c:	e006      	b.n	80053ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80053aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d104      	bne.n	80053be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6859      	ldr	r1, [r3, #4]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	4b1d      	ldr	r3, [pc, #116]	; (8005440 <HAL_I2C_Init+0x11c>)
 80053ca:	430b      	orrs	r3, r1
 80053cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	68da      	ldr	r2, [r3, #12]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691a      	ldr	r2, [r3, #16]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	69d9      	ldr	r1, [r3, #28]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a1a      	ldr	r2, [r3, #32]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0201 	orr.w	r2, r2, #1
 8005416:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2220      	movs	r2, #32
 8005422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	02008000 	.word	0x02008000

08005444 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e021      	b.n	800549a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2224      	movs	r2, #36	; 0x24
 800545a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f022 0201 	bic.w	r2, r2, #1
 800546c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7fb fd7c 	bl	8000f6c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
	...

080054a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b088      	sub	sp, #32
 80054a8:	af02      	add	r7, sp, #8
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	4608      	mov	r0, r1
 80054ae:	4611      	mov	r1, r2
 80054b0:	461a      	mov	r2, r3
 80054b2:	4603      	mov	r3, r0
 80054b4:	817b      	strh	r3, [r7, #10]
 80054b6:	460b      	mov	r3, r1
 80054b8:	813b      	strh	r3, [r7, #8]
 80054ba:	4613      	mov	r3, r2
 80054bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b20      	cmp	r3, #32
 80054c8:	f040 80f9 	bne.w	80056be <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d002      	beq.n	80054d8 <HAL_I2C_Mem_Write+0x34>
 80054d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d105      	bne.n	80054e4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e0ed      	b.n	80056c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d101      	bne.n	80054f2 <HAL_I2C_Mem_Write+0x4e>
 80054ee:	2302      	movs	r3, #2
 80054f0:	e0e6      	b.n	80056c0 <HAL_I2C_Mem_Write+0x21c>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80054fa:	f7fd feb1 	bl	8003260 <HAL_GetTick>
 80054fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	2319      	movs	r3, #25
 8005506:	2201      	movs	r2, #1
 8005508:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 fad1 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e0d1      	b.n	80056c0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2221      	movs	r2, #33	; 0x21
 8005520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2240      	movs	r2, #64	; 0x40
 8005528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6a3a      	ldr	r2, [r7, #32]
 8005536:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800553c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005544:	88f8      	ldrh	r0, [r7, #6]
 8005546:	893a      	ldrh	r2, [r7, #8]
 8005548:	8979      	ldrh	r1, [r7, #10]
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	9301      	str	r3, [sp, #4]
 800554e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	4603      	mov	r3, r0
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f000 f9e1 	bl	800591c <I2C_RequestMemoryWrite>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d005      	beq.n	800556c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e0a9      	b.n	80056c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005570:	b29b      	uxth	r3, r3
 8005572:	2bff      	cmp	r3, #255	; 0xff
 8005574:	d90e      	bls.n	8005594 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	22ff      	movs	r2, #255	; 0xff
 800557a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005580:	b2da      	uxtb	r2, r3
 8005582:	8979      	ldrh	r1, [r7, #10]
 8005584:	2300      	movs	r3, #0
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 fc2d 	bl	8005dec <I2C_TransferConfig>
 8005592:	e00f      	b.n	80055b4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005598:	b29a      	uxth	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055a2:	b2da      	uxtb	r2, r3
 80055a4:	8979      	ldrh	r1, [r7, #10]
 80055a6:	2300      	movs	r3, #0
 80055a8:	9300      	str	r3, [sp, #0]
 80055aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 fc1c 	bl	8005dec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f000 fabb 	bl	8005b34 <I2C_WaitOnTXISFlagUntilTimeout>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e07b      	b.n	80056c0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	781a      	ldrb	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d8:	1c5a      	adds	r2, r3, #1
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	3b01      	subs	r3, #1
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f0:	3b01      	subs	r3, #1
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d034      	beq.n	800566c <HAL_I2C_Mem_Write+0x1c8>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005606:	2b00      	cmp	r3, #0
 8005608:	d130      	bne.n	800566c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005610:	2200      	movs	r2, #0
 8005612:	2180      	movs	r1, #128	; 0x80
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f000 fa4d 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d001      	beq.n	8005624 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e04d      	b.n	80056c0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005628:	b29b      	uxth	r3, r3
 800562a:	2bff      	cmp	r3, #255	; 0xff
 800562c:	d90e      	bls.n	800564c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	22ff      	movs	r2, #255	; 0xff
 8005632:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005638:	b2da      	uxtb	r2, r3
 800563a:	8979      	ldrh	r1, [r7, #10]
 800563c:	2300      	movs	r3, #0
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 fbd1 	bl	8005dec <I2C_TransferConfig>
 800564a:	e00f      	b.n	800566c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005650:	b29a      	uxth	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800565a:	b2da      	uxtb	r2, r3
 800565c:	8979      	ldrh	r1, [r7, #10]
 800565e:	2300      	movs	r3, #0
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f000 fbc0 	bl	8005dec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005670:	b29b      	uxth	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d19e      	bne.n	80055b4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f000 fa9a 	bl	8005bb4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e01a      	b.n	80056c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2220      	movs	r2, #32
 8005690:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	6859      	ldr	r1, [r3, #4]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	4b0a      	ldr	r3, [pc, #40]	; (80056c8 <HAL_I2C_Mem_Write+0x224>)
 800569e:	400b      	ands	r3, r1
 80056a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2220      	movs	r2, #32
 80056a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	e000      	b.n	80056c0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80056be:	2302      	movs	r3, #2
  }
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3718      	adds	r7, #24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	fe00e800 	.word	0xfe00e800

080056cc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b088      	sub	sp, #32
 80056d0:	af02      	add	r7, sp, #8
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	4608      	mov	r0, r1
 80056d6:	4611      	mov	r1, r2
 80056d8:	461a      	mov	r2, r3
 80056da:	4603      	mov	r3, r0
 80056dc:	817b      	strh	r3, [r7, #10]
 80056de:	460b      	mov	r3, r1
 80056e0:	813b      	strh	r3, [r7, #8]
 80056e2:	4613      	mov	r3, r2
 80056e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	2b20      	cmp	r3, #32
 80056f0:	f040 80fd 	bne.w	80058ee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80056f4:	6a3b      	ldr	r3, [r7, #32]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <HAL_I2C_Mem_Read+0x34>
 80056fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d105      	bne.n	800570c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005706:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e0f1      	b.n	80058f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <HAL_I2C_Mem_Read+0x4e>
 8005716:	2302      	movs	r3, #2
 8005718:	e0ea      	b.n	80058f0 <HAL_I2C_Mem_Read+0x224>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005722:	f7fd fd9d 	bl	8003260 <HAL_GetTick>
 8005726:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	2319      	movs	r3, #25
 800572e:	2201      	movs	r2, #1
 8005730:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f000 f9bd 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d001      	beq.n	8005744 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e0d5      	b.n	80058f0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2222      	movs	r2, #34	; 0x22
 8005748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2240      	movs	r2, #64	; 0x40
 8005750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6a3a      	ldr	r2, [r7, #32]
 800575e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005764:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800576c:	88f8      	ldrh	r0, [r7, #6]
 800576e:	893a      	ldrh	r2, [r7, #8]
 8005770:	8979      	ldrh	r1, [r7, #10]
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	9301      	str	r3, [sp, #4]
 8005776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005778:	9300      	str	r3, [sp, #0]
 800577a:	4603      	mov	r3, r0
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f000 f921 	bl	80059c4 <I2C_RequestMemoryRead>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d005      	beq.n	8005794 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e0ad      	b.n	80058f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005798:	b29b      	uxth	r3, r3
 800579a:	2bff      	cmp	r3, #255	; 0xff
 800579c:	d90e      	bls.n	80057bc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	22ff      	movs	r2, #255	; 0xff
 80057a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	8979      	ldrh	r1, [r7, #10]
 80057ac:	4b52      	ldr	r3, [pc, #328]	; (80058f8 <HAL_I2C_Mem_Read+0x22c>)
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 fb19 	bl	8005dec <I2C_TransferConfig>
 80057ba:	e00f      	b.n	80057dc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057ca:	b2da      	uxtb	r2, r3
 80057cc:	8979      	ldrh	r1, [r7, #10]
 80057ce:	4b4a      	ldr	r3, [pc, #296]	; (80058f8 <HAL_I2C_Mem_Read+0x22c>)
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f000 fb08 	bl	8005dec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e2:	2200      	movs	r2, #0
 80057e4:	2104      	movs	r1, #4
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 f964 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e07c      	b.n	80058f0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	b2d2      	uxtb	r2, r2
 8005802:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005808:	1c5a      	adds	r2, r3, #1
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005812:	3b01      	subs	r3, #1
 8005814:	b29a      	uxth	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800581e:	b29b      	uxth	r3, r3
 8005820:	3b01      	subs	r3, #1
 8005822:	b29a      	uxth	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800582c:	b29b      	uxth	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d034      	beq.n	800589c <HAL_I2C_Mem_Read+0x1d0>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005836:	2b00      	cmp	r3, #0
 8005838:	d130      	bne.n	800589c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005840:	2200      	movs	r2, #0
 8005842:	2180      	movs	r1, #128	; 0x80
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 f935 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e04d      	b.n	80058f0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005858:	b29b      	uxth	r3, r3
 800585a:	2bff      	cmp	r3, #255	; 0xff
 800585c:	d90e      	bls.n	800587c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	22ff      	movs	r2, #255	; 0xff
 8005862:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005868:	b2da      	uxtb	r2, r3
 800586a:	8979      	ldrh	r1, [r7, #10]
 800586c:	2300      	movs	r3, #0
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f000 fab9 	bl	8005dec <I2C_TransferConfig>
 800587a:	e00f      	b.n	800589c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005880:	b29a      	uxth	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800588a:	b2da      	uxtb	r2, r3
 800588c:	8979      	ldrh	r1, [r7, #10]
 800588e:	2300      	movs	r3, #0
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f000 faa8 	bl	8005dec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d19a      	bne.n	80057dc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f000 f982 	bl	8005bb4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e01a      	b.n	80058f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2220      	movs	r2, #32
 80058c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6859      	ldr	r1, [r3, #4]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	4b0b      	ldr	r3, [pc, #44]	; (80058fc <HAL_I2C_Mem_Read+0x230>)
 80058ce:	400b      	ands	r3, r1
 80058d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2220      	movs	r2, #32
 80058d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058ea:	2300      	movs	r3, #0
 80058ec:	e000      	b.n	80058f0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80058ee:	2302      	movs	r3, #2
  }
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3718      	adds	r7, #24
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	80002400 	.word	0x80002400
 80058fc:	fe00e800 	.word	0xfe00e800

08005900 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800590e:	b2db      	uxtb	r3, r3
}
 8005910:	4618      	mov	r0, r3
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af02      	add	r7, sp, #8
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	4608      	mov	r0, r1
 8005926:	4611      	mov	r1, r2
 8005928:	461a      	mov	r2, r3
 800592a:	4603      	mov	r3, r0
 800592c:	817b      	strh	r3, [r7, #10]
 800592e:	460b      	mov	r3, r1
 8005930:	813b      	strh	r3, [r7, #8]
 8005932:	4613      	mov	r3, r2
 8005934:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005936:	88fb      	ldrh	r3, [r7, #6]
 8005938:	b2da      	uxtb	r2, r3
 800593a:	8979      	ldrh	r1, [r7, #10]
 800593c:	4b20      	ldr	r3, [pc, #128]	; (80059c0 <I2C_RequestMemoryWrite+0xa4>)
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 fa51 	bl	8005dec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800594a:	69fa      	ldr	r2, [r7, #28]
 800594c:	69b9      	ldr	r1, [r7, #24]
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f000 f8f0 	bl	8005b34 <I2C_WaitOnTXISFlagUntilTimeout>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e02c      	b.n	80059b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800595e:	88fb      	ldrh	r3, [r7, #6]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d105      	bne.n	8005970 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005964:	893b      	ldrh	r3, [r7, #8]
 8005966:	b2da      	uxtb	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	629a      	str	r2, [r3, #40]	; 0x28
 800596e:	e015      	b.n	800599c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005970:	893b      	ldrh	r3, [r7, #8]
 8005972:	0a1b      	lsrs	r3, r3, #8
 8005974:	b29b      	uxth	r3, r3
 8005976:	b2da      	uxtb	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800597e:	69fa      	ldr	r2, [r7, #28]
 8005980:	69b9      	ldr	r1, [r7, #24]
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 f8d6 	bl	8005b34 <I2C_WaitOnTXISFlagUntilTimeout>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e012      	b.n	80059b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005992:	893b      	ldrh	r3, [r7, #8]
 8005994:	b2da      	uxtb	r2, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	9300      	str	r3, [sp, #0]
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	2200      	movs	r2, #0
 80059a4:	2180      	movs	r1, #128	; 0x80
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f000 f884 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e000      	b.n	80059b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	80002000 	.word	0x80002000

080059c4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af02      	add	r7, sp, #8
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	4608      	mov	r0, r1
 80059ce:	4611      	mov	r1, r2
 80059d0:	461a      	mov	r2, r3
 80059d2:	4603      	mov	r3, r0
 80059d4:	817b      	strh	r3, [r7, #10]
 80059d6:	460b      	mov	r3, r1
 80059d8:	813b      	strh	r3, [r7, #8]
 80059da:	4613      	mov	r3, r2
 80059dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80059de:	88fb      	ldrh	r3, [r7, #6]
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	8979      	ldrh	r1, [r7, #10]
 80059e4:	4b20      	ldr	r3, [pc, #128]	; (8005a68 <I2C_RequestMemoryRead+0xa4>)
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	2300      	movs	r3, #0
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f000 f9fe 	bl	8005dec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059f0:	69fa      	ldr	r2, [r7, #28]
 80059f2:	69b9      	ldr	r1, [r7, #24]
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f000 f89d 	bl	8005b34 <I2C_WaitOnTXISFlagUntilTimeout>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d001      	beq.n	8005a04 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e02c      	b.n	8005a5e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a04:	88fb      	ldrh	r3, [r7, #6]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d105      	bne.n	8005a16 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a0a:	893b      	ldrh	r3, [r7, #8]
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	629a      	str	r2, [r3, #40]	; 0x28
 8005a14:	e015      	b.n	8005a42 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005a16:	893b      	ldrh	r3, [r7, #8]
 8005a18:	0a1b      	lsrs	r3, r3, #8
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a24:	69fa      	ldr	r2, [r7, #28]
 8005a26:	69b9      	ldr	r1, [r7, #24]
 8005a28:	68f8      	ldr	r0, [r7, #12]
 8005a2a:	f000 f883 	bl	8005b34 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d001      	beq.n	8005a38 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e012      	b.n	8005a5e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005a38:	893b      	ldrh	r3, [r7, #8]
 8005a3a:	b2da      	uxtb	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	9300      	str	r3, [sp, #0]
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	2140      	movs	r1, #64	; 0x40
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f000 f831 	bl	8005ab4 <I2C_WaitOnFlagUntilTimeout>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d001      	beq.n	8005a5c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e000      	b.n	8005a5e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	80002000 	.word	0x80002000

08005a6c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	f003 0302 	and.w	r3, r3, #2
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d103      	bne.n	8005a8a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2200      	movs	r2, #0
 8005a88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d007      	beq.n	8005aa8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	699a      	ldr	r2, [r3, #24]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f042 0201 	orr.w	r2, r2, #1
 8005aa6:	619a      	str	r2, [r3, #24]
  }
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	603b      	str	r3, [r7, #0]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ac4:	e022      	b.n	8005b0c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005acc:	d01e      	beq.n	8005b0c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ace:	f7fd fbc7 	bl	8003260 <HAL_GetTick>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d302      	bcc.n	8005ae4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d113      	bne.n	8005b0c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae8:	f043 0220 	orr.w	r2, r3, #32
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2220      	movs	r2, #32
 8005af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e00f      	b.n	8005b2c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699a      	ldr	r2, [r3, #24]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	4013      	ands	r3, r2
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	bf0c      	ite	eq
 8005b1c:	2301      	moveq	r3, #1
 8005b1e:	2300      	movne	r3, #0
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	461a      	mov	r2, r3
 8005b24:	79fb      	ldrb	r3, [r7, #7]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d0cd      	beq.n	8005ac6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b084      	sub	sp, #16
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b40:	e02c      	b.n	8005b9c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	68b9      	ldr	r1, [r7, #8]
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 f870 	bl	8005c2c <I2C_IsErrorOccurred>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d001      	beq.n	8005b56 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e02a      	b.n	8005bac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b5c:	d01e      	beq.n	8005b9c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b5e:	f7fd fb7f 	bl	8003260 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d302      	bcc.n	8005b74 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d113      	bne.n	8005b9c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b78:	f043 0220 	orr.w	r2, r3, #32
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2220      	movs	r2, #32
 8005b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e007      	b.n	8005bac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	f003 0302 	and.w	r3, r3, #2
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d1cb      	bne.n	8005b42 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005bc0:	e028      	b.n	8005c14 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	68b9      	ldr	r1, [r7, #8]
 8005bc6:	68f8      	ldr	r0, [r7, #12]
 8005bc8:	f000 f830 	bl	8005c2c <I2C_IsErrorOccurred>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d001      	beq.n	8005bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e026      	b.n	8005c24 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bd6:	f7fd fb43 	bl	8003260 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d302      	bcc.n	8005bec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d113      	bne.n	8005c14 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf0:	f043 0220 	orr.w	r2, r3, #32
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e007      	b.n	8005c24 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b20      	cmp	r3, #32
 8005c20:	d1cf      	bne.n	8005bc2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b08a      	sub	sp, #40	; 0x28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005c46:	2300      	movs	r3, #0
 8005c48:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	f003 0310 	and.w	r3, r3, #16
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d068      	beq.n	8005d2a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2210      	movs	r2, #16
 8005c5e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005c60:	e049      	b.n	8005cf6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c68:	d045      	beq.n	8005cf6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005c6a:	f7fd faf9 	bl	8003260 <HAL_GetTick>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	1ad3      	subs	r3, r2, r3
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d302      	bcc.n	8005c80 <I2C_IsErrorOccurred+0x54>
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d13a      	bne.n	8005cf6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c8a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c92:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ca2:	d121      	bne.n	8005ce8 <I2C_IsErrorOccurred+0xbc>
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005caa:	d01d      	beq.n	8005ce8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005cac:	7cfb      	ldrb	r3, [r7, #19]
 8005cae:	2b20      	cmp	r3, #32
 8005cb0:	d01a      	beq.n	8005ce8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cc0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005cc2:	f7fd facd 	bl	8003260 <HAL_GetTick>
 8005cc6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cc8:	e00e      	b.n	8005ce8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005cca:	f7fd fac9 	bl	8003260 <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	2b19      	cmp	r3, #25
 8005cd6:	d907      	bls.n	8005ce8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	f043 0320 	orr.w	r3, r3, #32
 8005cde:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005ce6:	e006      	b.n	8005cf6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	f003 0320 	and.w	r3, r3, #32
 8005cf2:	2b20      	cmp	r3, #32
 8005cf4:	d1e9      	bne.n	8005cca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	f003 0320 	and.w	r3, r3, #32
 8005d00:	2b20      	cmp	r3, #32
 8005d02:	d003      	beq.n	8005d0c <I2C_IsErrorOccurred+0xe0>
 8005d04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0aa      	beq.n	8005c62 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d103      	bne.n	8005d1c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005d1c:	6a3b      	ldr	r3, [r7, #32]
 8005d1e:	f043 0304 	orr.w	r3, r3, #4
 8005d22:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00b      	beq.n	8005d54 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005d3c:	6a3b      	ldr	r3, [r7, #32]
 8005d3e:	f043 0301 	orr.w	r3, r3, #1
 8005d42:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d00b      	beq.n	8005d76 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005d5e:	6a3b      	ldr	r3, [r7, #32]
 8005d60:	f043 0308 	orr.w	r3, r3, #8
 8005d64:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00b      	beq.n	8005d98 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	f043 0302 	orr.w	r3, r3, #2
 8005d86:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d01c      	beq.n	8005dda <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f7ff fe63 	bl	8005a6c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6859      	ldr	r1, [r3, #4]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	4b0d      	ldr	r3, [pc, #52]	; (8005de8 <I2C_IsErrorOccurred+0x1bc>)
 8005db2:	400b      	ands	r3, r1
 8005db4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2220      	movs	r2, #32
 8005dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005dda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3728      	adds	r7, #40	; 0x28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	fe00e800 	.word	0xfe00e800

08005dec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	607b      	str	r3, [r7, #4]
 8005df6:	460b      	mov	r3, r1
 8005df8:	817b      	strh	r3, [r7, #10]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005dfe:	897b      	ldrh	r3, [r7, #10]
 8005e00:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e04:	7a7b      	ldrb	r3, [r7, #9]
 8005e06:	041b      	lsls	r3, r3, #16
 8005e08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e0c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e1a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	6a3b      	ldr	r3, [r7, #32]
 8005e24:	0d5b      	lsrs	r3, r3, #21
 8005e26:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005e2a:	4b08      	ldr	r3, [pc, #32]	; (8005e4c <I2C_TransferConfig+0x60>)
 8005e2c:	430b      	orrs	r3, r1
 8005e2e:	43db      	mvns	r3, r3
 8005e30:	ea02 0103 	and.w	r1, r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005e3e:	bf00      	nop
 8005e40:	371c      	adds	r7, #28
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	03ff63ff 	.word	0x03ff63ff

08005e50 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d101      	bne.n	8005e62 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e0bf      	b.n	8005fe2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d106      	bne.n	8005e7c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f7fb f8b4 	bl	8000fe4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2202      	movs	r2, #2
 8005e80:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	699a      	ldr	r2, [r3, #24]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005e92:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6999      	ldr	r1, [r3, #24]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ea8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6899      	ldr	r1, [r3, #8]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	4b4a      	ldr	r3, [pc, #296]	; (8005fec <HAL_LTDC_Init+0x19c>)
 8005ec4:	400b      	ands	r3, r1
 8005ec6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	041b      	lsls	r3, r3, #16
 8005ece:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6899      	ldr	r1, [r3, #8]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	699a      	ldr	r2, [r3, #24]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	431a      	orrs	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68d9      	ldr	r1, [r3, #12]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	4b3e      	ldr	r3, [pc, #248]	; (8005fec <HAL_LTDC_Init+0x19c>)
 8005ef2:	400b      	ands	r3, r1
 8005ef4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	041b      	lsls	r3, r3, #16
 8005efc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68d9      	ldr	r1, [r3, #12]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a1a      	ldr	r2, [r3, #32]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	430a      	orrs	r2, r1
 8005f12:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6919      	ldr	r1, [r3, #16]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	4b33      	ldr	r3, [pc, #204]	; (8005fec <HAL_LTDC_Init+0x19c>)
 8005f20:	400b      	ands	r3, r1
 8005f22:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	041b      	lsls	r3, r3, #16
 8005f2a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	6919      	ldr	r1, [r3, #16]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	431a      	orrs	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	6959      	ldr	r1, [r3, #20]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	4b27      	ldr	r3, [pc, #156]	; (8005fec <HAL_LTDC_Init+0x19c>)
 8005f4e:	400b      	ands	r3, r1
 8005f50:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f56:	041b      	lsls	r3, r3, #16
 8005f58:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6959      	ldr	r1, [r3, #20]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	431a      	orrs	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f76:	021b      	lsls	r3, r3, #8
 8005f78:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005f80:	041b      	lsls	r3, r3, #16
 8005f82:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005f92:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	430a      	orrs	r2, r1
 8005fae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0206 	orr.w	r2, r2, #6
 8005fbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	699a      	ldr	r2, [r3, #24]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f042 0201 	orr.w	r2, r2, #1
 8005fce:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	f000f800 	.word	0xf000f800

08005ff0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006006:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f003 0304 	and.w	r3, r3, #4
 800600e:	2b00      	cmp	r3, #0
 8006010:	d023      	beq.n	800605a <HAL_LTDC_IRQHandler+0x6a>
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	f003 0304 	and.w	r3, r3, #4
 8006018:	2b00      	cmp	r3, #0
 800601a:	d01e      	beq.n	800605a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f022 0204 	bic.w	r2, r2, #4
 800602a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2204      	movs	r2, #4
 8006032:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800603a:	f043 0201 	orr.w	r2, r3, #1
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2204      	movs	r2, #4
 8006048:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 f86f 	bl	8006138 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d023      	beq.n	80060ac <HAL_LTDC_IRQHandler+0xbc>
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	f003 0302 	and.w	r3, r3, #2
 800606a:	2b00      	cmp	r3, #0
 800606c:	d01e      	beq.n	80060ac <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 0202 	bic.w	r2, r2, #2
 800607c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2202      	movs	r2, #2
 8006084:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800608c:	f043 0202 	orr.w	r2, r3, #2
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2204      	movs	r2, #4
 800609a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f846 	bl	8006138 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d01b      	beq.n	80060ee <HAL_LTDC_IRQHandler+0xfe>
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d016      	beq.n	80060ee <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f022 0201 	bic.w	r2, r2, #1
 80060ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2201      	movs	r2, #1
 80060d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f82f 	bl	800614c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f003 0308 	and.w	r3, r3, #8
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d01b      	beq.n	8006130 <HAL_LTDC_IRQHandler+0x140>
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	f003 0308 	and.w	r3, r3, #8
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d016      	beq.n	8006130 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 0208 	bic.w	r2, r2, #8
 8006110:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2208      	movs	r2, #8
 8006118:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f818 	bl	8006160 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006130:	bf00      	nop
 8006132:	3710      	adds	r7, #16
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006174:	b5b0      	push	{r4, r5, r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006186:	2b01      	cmp	r3, #1
 8006188:	d101      	bne.n	800618e <HAL_LTDC_ConfigLayer+0x1a>
 800618a:	2302      	movs	r3, #2
 800618c:	e02c      	b.n	80061e8 <HAL_LTDC_ConfigLayer+0x74>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2202      	movs	r2, #2
 800619a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2134      	movs	r1, #52	; 0x34
 80061a4:	fb01 f303 	mul.w	r3, r1, r3
 80061a8:	4413      	add	r3, r2
 80061aa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	4614      	mov	r4, r2
 80061b2:	461d      	mov	r5, r3
 80061b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061c0:	682b      	ldr	r3, [r5, #0]
 80061c2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	68b9      	ldr	r1, [r7, #8]
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	f000 f811 	bl	80061f0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2201      	movs	r2, #1
 80061d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bdb0      	pop	{r4, r5, r7, pc}

080061f0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b089      	sub	sp, #36	; 0x24
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	0c1b      	lsrs	r3, r3, #16
 8006208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800620c:	4413      	add	r3, r2
 800620e:	041b      	lsls	r3, r3, #16
 8006210:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	461a      	mov	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	01db      	lsls	r3, r3, #7
 800621c:	4413      	add	r3, r2
 800621e:	3384      	adds	r3, #132	; 0x84
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	6812      	ldr	r2, [r2, #0]
 8006226:	4611      	mov	r1, r2
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	01d2      	lsls	r2, r2, #7
 800622c:	440a      	add	r2, r1
 800622e:	3284      	adds	r2, #132	; 0x84
 8006230:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006234:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	0c1b      	lsrs	r3, r3, #16
 8006242:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006246:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006248:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4619      	mov	r1, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	01db      	lsls	r3, r3, #7
 8006254:	440b      	add	r3, r1
 8006256:	3384      	adds	r3, #132	; 0x84
 8006258:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800625e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	68da      	ldr	r2, [r3, #12]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800626e:	4413      	add	r3, r2
 8006270:	041b      	lsls	r3, r3, #16
 8006272:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	461a      	mov	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	01db      	lsls	r3, r3, #7
 800627e:	4413      	add	r3, r2
 8006280:	3384      	adds	r3, #132	; 0x84
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	6812      	ldr	r2, [r2, #0]
 8006288:	4611      	mov	r1, r2
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	01d2      	lsls	r2, r2, #7
 800628e:	440a      	add	r2, r1
 8006290:	3284      	adds	r2, #132	; 0x84
 8006292:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006296:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	689a      	ldr	r2, [r3, #8]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062a6:	4413      	add	r3, r2
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4619      	mov	r1, r3
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	01db      	lsls	r3, r3, #7
 80062b4:	440b      	add	r3, r1
 80062b6:	3384      	adds	r3, #132	; 0x84
 80062b8:	4619      	mov	r1, r3
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	4313      	orrs	r3, r2
 80062be:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	461a      	mov	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	01db      	lsls	r3, r3, #7
 80062ca:	4413      	add	r3, r2
 80062cc:	3384      	adds	r3, #132	; 0x84
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	6812      	ldr	r2, [r2, #0]
 80062d4:	4611      	mov	r1, r2
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	01d2      	lsls	r2, r2, #7
 80062da:	440a      	add	r2, r1
 80062dc:	3284      	adds	r2, #132	; 0x84
 80062de:	f023 0307 	bic.w	r3, r3, #7
 80062e2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	461a      	mov	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	01db      	lsls	r3, r3, #7
 80062ee:	4413      	add	r3, r2
 80062f0:	3384      	adds	r3, #132	; 0x84
 80062f2:	461a      	mov	r2, r3
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006300:	021b      	lsls	r3, r3, #8
 8006302:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800630a:	041b      	lsls	r3, r3, #16
 800630c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	061b      	lsls	r3, r3, #24
 8006314:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	01db      	lsls	r3, r3, #7
 8006320:	4413      	add	r3, r2
 8006322:	3384      	adds	r3, #132	; 0x84
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	461a      	mov	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	01db      	lsls	r3, r3, #7
 8006330:	4413      	add	r3, r2
 8006332:	3384      	adds	r3, #132	; 0x84
 8006334:	461a      	mov	r2, r3
 8006336:	2300      	movs	r3, #0
 8006338:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006340:	461a      	mov	r2, r3
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	431a      	orrs	r2, r3
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	431a      	orrs	r2, r3
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4619      	mov	r1, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	01db      	lsls	r3, r3, #7
 8006354:	440b      	add	r3, r1
 8006356:	3384      	adds	r3, #132	; 0x84
 8006358:	4619      	mov	r1, r3
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	4313      	orrs	r3, r2
 800635e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	461a      	mov	r2, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	01db      	lsls	r3, r3, #7
 800636a:	4413      	add	r3, r2
 800636c:	3384      	adds	r3, #132	; 0x84
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	6812      	ldr	r2, [r2, #0]
 8006374:	4611      	mov	r1, r2
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	01d2      	lsls	r2, r2, #7
 800637a:	440a      	add	r2, r1
 800637c:	3284      	adds	r2, #132	; 0x84
 800637e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006382:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	461a      	mov	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	01db      	lsls	r3, r3, #7
 800638e:	4413      	add	r3, r2
 8006390:	3384      	adds	r3, #132	; 0x84
 8006392:	461a      	mov	r2, r3
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	461a      	mov	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	01db      	lsls	r3, r3, #7
 80063a4:	4413      	add	r3, r2
 80063a6:	3384      	adds	r3, #132	; 0x84
 80063a8:	69da      	ldr	r2, [r3, #28]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4619      	mov	r1, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	01db      	lsls	r3, r3, #7
 80063b4:	440b      	add	r3, r1
 80063b6:	3384      	adds	r3, #132	; 0x84
 80063b8:	4619      	mov	r1, r3
 80063ba:	4b58      	ldr	r3, [pc, #352]	; (800651c <LTDC_SetConfig+0x32c>)
 80063bc:	4013      	ands	r3, r2
 80063be:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	69da      	ldr	r2, [r3, #28]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	6a1b      	ldr	r3, [r3, #32]
 80063c8:	68f9      	ldr	r1, [r7, #12]
 80063ca:	6809      	ldr	r1, [r1, #0]
 80063cc:	4608      	mov	r0, r1
 80063ce:	6879      	ldr	r1, [r7, #4]
 80063d0:	01c9      	lsls	r1, r1, #7
 80063d2:	4401      	add	r1, r0
 80063d4:	3184      	adds	r1, #132	; 0x84
 80063d6:	4313      	orrs	r3, r2
 80063d8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	461a      	mov	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	01db      	lsls	r3, r3, #7
 80063e4:	4413      	add	r3, r2
 80063e6:	3384      	adds	r3, #132	; 0x84
 80063e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	461a      	mov	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	01db      	lsls	r3, r3, #7
 80063f4:	4413      	add	r3, r2
 80063f6:	3384      	adds	r3, #132	; 0x84
 80063f8:	461a      	mov	r2, r3
 80063fa:	2300      	movs	r3, #0
 80063fc:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	461a      	mov	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	01db      	lsls	r3, r3, #7
 8006408:	4413      	add	r3, r2
 800640a:	3384      	adds	r3, #132	; 0x84
 800640c:	461a      	mov	r2, r3
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006412:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d102      	bne.n	8006422 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800641c:	2304      	movs	r3, #4
 800641e:	61fb      	str	r3, [r7, #28]
 8006420:	e01b      	b.n	800645a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d102      	bne.n	8006430 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800642a:	2303      	movs	r3, #3
 800642c:	61fb      	str	r3, [r7, #28]
 800642e:	e014      	b.n	800645a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	2b04      	cmp	r3, #4
 8006436:	d00b      	beq.n	8006450 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800643c:	2b02      	cmp	r3, #2
 800643e:	d007      	beq.n	8006450 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006444:	2b03      	cmp	r3, #3
 8006446:	d003      	beq.n	8006450 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800644c:	2b07      	cmp	r3, #7
 800644e:	d102      	bne.n	8006456 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006450:	2302      	movs	r3, #2
 8006452:	61fb      	str	r3, [r7, #28]
 8006454:	e001      	b.n	800645a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006456:	2301      	movs	r3, #1
 8006458:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	461a      	mov	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	01db      	lsls	r3, r3, #7
 8006464:	4413      	add	r3, r2
 8006466:	3384      	adds	r3, #132	; 0x84
 8006468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	6812      	ldr	r2, [r2, #0]
 800646e:	4611      	mov	r1, r2
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	01d2      	lsls	r2, r2, #7
 8006474:	440a      	add	r2, r1
 8006476:	3284      	adds	r2, #132	; 0x84
 8006478:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800647c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006482:	69fa      	ldr	r2, [r7, #28]
 8006484:	fb02 f303 	mul.w	r3, r2, r3
 8006488:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	6859      	ldr	r1, [r3, #4]
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	1acb      	subs	r3, r1, r3
 8006494:	69f9      	ldr	r1, [r7, #28]
 8006496:	fb01 f303 	mul.w	r3, r1, r3
 800649a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800649c:	68f9      	ldr	r1, [r7, #12]
 800649e:	6809      	ldr	r1, [r1, #0]
 80064a0:	4608      	mov	r0, r1
 80064a2:	6879      	ldr	r1, [r7, #4]
 80064a4:	01c9      	lsls	r1, r1, #7
 80064a6:	4401      	add	r1, r0
 80064a8:	3184      	adds	r1, #132	; 0x84
 80064aa:	4313      	orrs	r3, r2
 80064ac:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	01db      	lsls	r3, r3, #7
 80064b8:	4413      	add	r3, r2
 80064ba:	3384      	adds	r3, #132	; 0x84
 80064bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4619      	mov	r1, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	01db      	lsls	r3, r3, #7
 80064c8:	440b      	add	r3, r1
 80064ca:	3384      	adds	r3, #132	; 0x84
 80064cc:	4619      	mov	r1, r3
 80064ce:	4b14      	ldr	r3, [pc, #80]	; (8006520 <LTDC_SetConfig+0x330>)
 80064d0:	4013      	ands	r3, r2
 80064d2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	461a      	mov	r2, r3
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	01db      	lsls	r3, r3, #7
 80064de:	4413      	add	r3, r2
 80064e0:	3384      	adds	r3, #132	; 0x84
 80064e2:	461a      	mov	r2, r3
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	461a      	mov	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	01db      	lsls	r3, r3, #7
 80064f4:	4413      	add	r3, r2
 80064f6:	3384      	adds	r3, #132	; 0x84
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	6812      	ldr	r2, [r2, #0]
 80064fe:	4611      	mov	r1, r2
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	01d2      	lsls	r2, r2, #7
 8006504:	440a      	add	r2, r1
 8006506:	3284      	adds	r2, #132	; 0x84
 8006508:	f043 0301 	orr.w	r3, r3, #1
 800650c:	6013      	str	r3, [r2, #0]
}
 800650e:	bf00      	nop
 8006510:	3724      	adds	r7, #36	; 0x24
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	fffff8f8 	.word	0xfffff8f8
 8006520:	fffff800 	.word	0xfffff800

08006524 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                            DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 8006536:	2200      	movs	r2, #0
 8006538:	e001      	b.n	800653e <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 800653a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d102      	bne.n	8006550 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 800654a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800654e:	e000      	b.n	8006552 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8006550:	2200      	movs	r2, #0
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	69db      	ldr	r3, [r3, #28]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d102      	bne.n	8006564 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 800655e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006562:	e000      	b.n	8006566 <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8006564:	2200      	movs	r2, #0
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800656e:	1e5a      	subs	r2, r3, #1
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657c:	4413      	add	r3, r2
 800657e:	1e5a      	subs	r2, r3, #1
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658c:	441a      	add	r2, r3
                                   VidCfg->VerticalActive - 1U;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8006592:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 8006594:	1e5a      	subs	r2, r3, #1
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a2:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80065a8:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ae:	4413      	add	r3, r2
 80065b0:	1e5a      	subs	r2, r3, #1
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80065c4:	b590      	push	{r4, r7, lr}
 80065c6:	b08d      	sub	sp, #52	; 0x34
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d2:	6a3b      	ldr	r3, [r7, #32]
 80065d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4618      	mov	r0, r3
 80065dc:	f003 f800 	bl	80095e0 <USB_GetMode>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f040 84b7 	bne.w	8006f56 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f002 ff64 	bl	80094ba <USB_ReadInterrupts>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	f000 84ad 	beq.w	8006f54 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	0a1b      	lsrs	r3, r3, #8
 8006604:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4618      	mov	r0, r3
 8006614:	f002 ff51 	bl	80094ba <USB_ReadInterrupts>
 8006618:	4603      	mov	r3, r0
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b02      	cmp	r3, #2
 8006620:	d107      	bne.n	8006632 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	695a      	ldr	r2, [r3, #20]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f002 0202 	and.w	r2, r2, #2
 8006630:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4618      	mov	r0, r3
 8006638:	f002 ff3f 	bl	80094ba <USB_ReadInterrupts>
 800663c:	4603      	mov	r3, r0
 800663e:	f003 0310 	and.w	r3, r3, #16
 8006642:	2b10      	cmp	r3, #16
 8006644:	d161      	bne.n	800670a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	699a      	ldr	r2, [r3, #24]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f022 0210 	bic.w	r2, r2, #16
 8006654:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	6a1b      	ldr	r3, [r3, #32]
 800665a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	f003 020f 	and.w	r2, r3, #15
 8006662:	4613      	mov	r3, r2
 8006664:	00db      	lsls	r3, r3, #3
 8006666:	4413      	add	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	4413      	add	r3, r2
 8006672:	3304      	adds	r3, #4
 8006674:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	0c5b      	lsrs	r3, r3, #17
 800667a:	f003 030f 	and.w	r3, r3, #15
 800667e:	2b02      	cmp	r3, #2
 8006680:	d124      	bne.n	80066cc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006682:	69ba      	ldr	r2, [r7, #24]
 8006684:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006688:	4013      	ands	r3, r2
 800668a:	2b00      	cmp	r3, #0
 800668c:	d035      	beq.n	80066fa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	091b      	lsrs	r3, r3, #4
 8006696:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006698:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800669c:	b29b      	uxth	r3, r3
 800669e:	461a      	mov	r2, r3
 80066a0:	6a38      	ldr	r0, [r7, #32]
 80066a2:	f002 feb2 	bl	800940a <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	691a      	ldr	r2, [r3, #16]
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	091b      	lsrs	r3, r3, #4
 80066ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066b2:	441a      	add	r2, r3
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	6a1a      	ldr	r2, [r3, #32]
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	091b      	lsrs	r3, r3, #4
 80066c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066c4:	441a      	add	r2, r3
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	621a      	str	r2, [r3, #32]
 80066ca:	e016      	b.n	80066fa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	0c5b      	lsrs	r3, r3, #17
 80066d0:	f003 030f 	and.w	r3, r3, #15
 80066d4:	2b06      	cmp	r3, #6
 80066d6:	d110      	bne.n	80066fa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80066de:	2208      	movs	r2, #8
 80066e0:	4619      	mov	r1, r3
 80066e2:	6a38      	ldr	r0, [r7, #32]
 80066e4:	f002 fe91 	bl	800940a <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	6a1a      	ldr	r2, [r3, #32]
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	091b      	lsrs	r3, r3, #4
 80066f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066f4:	441a      	add	r2, r3
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	699a      	ldr	r2, [r3, #24]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f042 0210 	orr.w	r2, r2, #16
 8006708:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4618      	mov	r0, r3
 8006710:	f002 fed3 	bl	80094ba <USB_ReadInterrupts>
 8006714:	4603      	mov	r3, r0
 8006716:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800671a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800671e:	f040 80a7 	bne.w	8006870 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006722:	2300      	movs	r3, #0
 8006724:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4618      	mov	r0, r3
 800672c:	f002 fed8 	bl	80094e0 <USB_ReadDevAllOutEpInterrupt>
 8006730:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006732:	e099      	b.n	8006868 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006736:	f003 0301 	and.w	r3, r3, #1
 800673a:	2b00      	cmp	r3, #0
 800673c:	f000 808e 	beq.w	800685c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006746:	b2d2      	uxtb	r2, r2
 8006748:	4611      	mov	r1, r2
 800674a:	4618      	mov	r0, r3
 800674c:	f002 fefc 	bl	8009548 <USB_ReadDevOutEPInterrupt>
 8006750:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00c      	beq.n	8006776 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675e:	015a      	lsls	r2, r3, #5
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	4413      	add	r3, r2
 8006764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006768:	461a      	mov	r2, r3
 800676a:	2301      	movs	r3, #1
 800676c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800676e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 fd27 	bl	80071c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	f003 0308 	and.w	r3, r3, #8
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00c      	beq.n	800679a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	4413      	add	r3, r2
 8006788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800678c:	461a      	mov	r2, r3
 800678e:	2308      	movs	r3, #8
 8006790:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006792:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fdfd 	bl	8007394 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f003 0310 	and.w	r3, r3, #16
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d008      	beq.n	80067b6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	015a      	lsls	r2, r3, #5
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	4413      	add	r3, r2
 80067ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b0:	461a      	mov	r2, r3
 80067b2:	2310      	movs	r3, #16
 80067b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	f003 0302 	and.w	r3, r3, #2
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d030      	beq.n	8006822 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80067c0:	6a3b      	ldr	r3, [r7, #32]
 80067c2:	695b      	ldr	r3, [r3, #20]
 80067c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c8:	2b80      	cmp	r3, #128	; 0x80
 80067ca:	d109      	bne.n	80067e0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	69fa      	ldr	r2, [r7, #28]
 80067d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80067de:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80067e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067e2:	4613      	mov	r3, r2
 80067e4:	00db      	lsls	r3, r3, #3
 80067e6:	4413      	add	r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	4413      	add	r3, r2
 80067f2:	3304      	adds	r3, #4
 80067f4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	78db      	ldrb	r3, [r3, #3]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d108      	bne.n	8006810 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2200      	movs	r2, #0
 8006802:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006806:	b2db      	uxtb	r3, r3
 8006808:	4619      	mov	r1, r3
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 fbf0 	bl	8006ff0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	4413      	add	r3, r2
 8006818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800681c:	461a      	mov	r2, r3
 800681e:	2302      	movs	r3, #2
 8006820:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	f003 0320 	and.w	r3, r3, #32
 8006828:	2b00      	cmp	r3, #0
 800682a:	d008      	beq.n	800683e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	4413      	add	r3, r2
 8006834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006838:	461a      	mov	r2, r3
 800683a:	2320      	movs	r3, #32
 800683c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d009      	beq.n	800685c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006854:	461a      	mov	r2, r3
 8006856:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800685a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685e:	3301      	adds	r3, #1
 8006860:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006864:	085b      	lsrs	r3, r3, #1
 8006866:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686a:	2b00      	cmp	r3, #0
 800686c:	f47f af62 	bne.w	8006734 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4618      	mov	r0, r3
 8006876:	f002 fe20 	bl	80094ba <USB_ReadInterrupts>
 800687a:	4603      	mov	r3, r0
 800687c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006880:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006884:	f040 80db 	bne.w	8006a3e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4618      	mov	r0, r3
 800688e:	f002 fe41 	bl	8009514 <USB_ReadDevAllInEpInterrupt>
 8006892:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006894:	2300      	movs	r3, #0
 8006896:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006898:	e0cd      	b.n	8006a36 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689c:	f003 0301 	and.w	r3, r3, #1
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f000 80c2 	beq.w	8006a2a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ac:	b2d2      	uxtb	r2, r2
 80068ae:	4611      	mov	r1, r2
 80068b0:	4618      	mov	r0, r3
 80068b2:	f002 fe67 	bl	8009584 <USB_ReadDevInEPInterrupt>
 80068b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	f003 0301 	and.w	r3, r3, #1
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d057      	beq.n	8006972 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80068c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c4:	f003 030f 	and.w	r3, r3, #15
 80068c8:	2201      	movs	r2, #1
 80068ca:	fa02 f303 	lsl.w	r3, r2, r3
 80068ce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	43db      	mvns	r3, r3
 80068dc:	69f9      	ldr	r1, [r7, #28]
 80068de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068e2:	4013      	ands	r3, r2
 80068e4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80068e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e8:	015a      	lsls	r2, r3, #5
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f2:	461a      	mov	r2, r3
 80068f4:	2301      	movs	r3, #1
 80068f6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d132      	bne.n	8006966 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006900:	6879      	ldr	r1, [r7, #4]
 8006902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006904:	4613      	mov	r3, r2
 8006906:	00db      	lsls	r3, r3, #3
 8006908:	4413      	add	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	440b      	add	r3, r1
 800690e:	334c      	adds	r3, #76	; 0x4c
 8006910:	6819      	ldr	r1, [r3, #0]
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006916:	4613      	mov	r3, r2
 8006918:	00db      	lsls	r3, r3, #3
 800691a:	4413      	add	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4403      	add	r3, r0
 8006920:	3348      	adds	r3, #72	; 0x48
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4419      	add	r1, r3
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800692a:	4613      	mov	r3, r2
 800692c:	00db      	lsls	r3, r3, #3
 800692e:	4413      	add	r3, r2
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	4403      	add	r3, r0
 8006934:	334c      	adds	r3, #76	; 0x4c
 8006936:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	2b00      	cmp	r3, #0
 800693c:	d113      	bne.n	8006966 <HAL_PCD_IRQHandler+0x3a2>
 800693e:	6879      	ldr	r1, [r7, #4]
 8006940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006942:	4613      	mov	r3, r2
 8006944:	00db      	lsls	r3, r3, #3
 8006946:	4413      	add	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	440b      	add	r3, r1
 800694c:	3354      	adds	r3, #84	; 0x54
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d108      	bne.n	8006966 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6818      	ldr	r0, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800695e:	461a      	mov	r2, r3
 8006960:	2101      	movs	r1, #1
 8006962:	f002 fe6f 	bl	8009644 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	b2db      	uxtb	r3, r3
 800696a:	4619      	mov	r1, r3
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f000 fb01 	bl	8006f74 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	f003 0308 	and.w	r3, r3, #8
 8006978:	2b00      	cmp	r3, #0
 800697a:	d008      	beq.n	800698e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800697c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	4413      	add	r3, r2
 8006984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006988:	461a      	mov	r2, r3
 800698a:	2308      	movs	r3, #8
 800698c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f003 0310 	and.w	r3, r3, #16
 8006994:	2b00      	cmp	r3, #0
 8006996:	d008      	beq.n	80069aa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a4:	461a      	mov	r2, r3
 80069a6:	2310      	movs	r3, #16
 80069a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d008      	beq.n	80069c6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80069b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b6:	015a      	lsls	r2, r3, #5
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	4413      	add	r3, r2
 80069bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069c0:	461a      	mov	r2, r3
 80069c2:	2340      	movs	r3, #64	; 0x40
 80069c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	f003 0302 	and.w	r3, r3, #2
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d023      	beq.n	8006a18 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80069d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069d2:	6a38      	ldr	r0, [r7, #32]
 80069d4:	f002 fbd8 	bl	8009188 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80069d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069da:	4613      	mov	r3, r2
 80069dc:	00db      	lsls	r3, r3, #3
 80069de:	4413      	add	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	3338      	adds	r3, #56	; 0x38
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	4413      	add	r3, r2
 80069e8:	3304      	adds	r3, #4
 80069ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	78db      	ldrb	r3, [r3, #3]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d108      	bne.n	8006a06 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	2200      	movs	r2, #0
 80069f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	4619      	mov	r1, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 fb01 	bl	8007008 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a08:	015a      	lsls	r2, r3, #5
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a12:	461a      	mov	r2, r3
 8006a14:	2302      	movs	r3, #2
 8006a16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d003      	beq.n	8006a2a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006a22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fb40 	bl	80070aa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a32:	085b      	lsrs	r3, r3, #1
 8006a34:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f47f af2e 	bne.w	800689a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f002 fd39 	bl	80094ba <USB_ReadInterrupts>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a52:	d122      	bne.n	8006a9a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	69fa      	ldr	r2, [r7, #28]
 8006a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a62:	f023 0301 	bic.w	r3, r3, #1
 8006a66:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d108      	bne.n	8006a84 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fccf 	bl	8007420 <HAL_PCDEx_LPM_Callback>
 8006a82:	e002      	b.n	8006a8a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 faa9 	bl	8006fdc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	695a      	ldr	r2, [r3, #20]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006a98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f002 fd0b 	bl	80094ba <USB_ReadInterrupts>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006aaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aae:	d112      	bne.n	8006ad6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f003 0301 	and.w	r3, r3, #1
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d102      	bne.n	8006ac6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fa81 	bl	8006fc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	695a      	ldr	r2, [r3, #20]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006ad4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f002 fced 	bl	80094ba <USB_ReadInterrupts>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ae6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006aea:	d121      	bne.n	8006b30 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	695a      	ldr	r2, [r3, #20]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006afa:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d111      	bne.n	8006b2a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b14:	089b      	lsrs	r3, r3, #2
 8006b16:	f003 020f 	and.w	r2, r3, #15
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006b20:	2101      	movs	r1, #1
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f000 fc7c 	bl	8007420 <HAL_PCDEx_LPM_Callback>
 8006b28:	e002      	b.n	8006b30 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fa4c 	bl	8006fc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f002 fcc0 	bl	80094ba <USB_ReadInterrupts>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b44:	f040 80b7 	bne.w	8006cb6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	69fa      	ldr	r2, [r7, #28]
 8006b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b56:	f023 0301 	bic.w	r3, r3, #1
 8006b5a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2110      	movs	r1, #16
 8006b62:	4618      	mov	r0, r3
 8006b64:	f002 fb10 	bl	8009188 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b68:	2300      	movs	r3, #0
 8006b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b6c:	e046      	b.n	8006bfc <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b70:	015a      	lsls	r2, r3, #5
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	4413      	add	r3, r2
 8006b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b80:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b84:	015a      	lsls	r2, r3, #5
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	4413      	add	r3, r2
 8006b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b92:	0151      	lsls	r1, r2, #5
 8006b94:	69fa      	ldr	r2, [r7, #28]
 8006b96:	440a      	add	r2, r1
 8006b98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ba0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bae:	461a      	mov	r2, r3
 8006bb0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006bb4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb8:	015a      	lsls	r2, r3, #5
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bc6:	0151      	lsls	r1, r2, #5
 8006bc8:	69fa      	ldr	r2, [r7, #28]
 8006bca:	440a      	add	r2, r1
 8006bcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006bd4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd8:	015a      	lsls	r2, r3, #5
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006be6:	0151      	lsls	r1, r2, #5
 8006be8:	69fa      	ldr	r2, [r7, #28]
 8006bea:	440a      	add	r2, r1
 8006bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bf0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006bf4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d3b3      	bcc.n	8006b6e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	69fa      	ldr	r2, [r7, #28]
 8006c10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c14:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006c18:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d016      	beq.n	8006c50 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c2c:	69fa      	ldr	r2, [r7, #28]
 8006c2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c32:	f043 030b 	orr.w	r3, r3, #11
 8006c36:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c42:	69fa      	ldr	r2, [r7, #28]
 8006c44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c48:	f043 030b 	orr.w	r3, r3, #11
 8006c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8006c4e:	e015      	b.n	8006c7c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c56:	695a      	ldr	r2, [r3, #20]
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c5e:	4619      	mov	r1, r3
 8006c60:	f242 032b 	movw	r3, #8235	; 0x202b
 8006c64:	4313      	orrs	r3, r2
 8006c66:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	69fa      	ldr	r2, [r7, #28]
 8006c72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c76:	f043 030b 	orr.w	r3, r3, #11
 8006c7a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	69fa      	ldr	r2, [r7, #28]
 8006c86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c8a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006c8e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6818      	ldr	r0, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	691b      	ldr	r3, [r3, #16]
 8006c98:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	f002 fccf 	bl	8009644 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	695a      	ldr	r2, [r3, #20]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006cb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f002 fbfd 	bl	80094ba <USB_ReadInterrupts>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cca:	d124      	bne.n	8006d16 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f002 fc93 	bl	80095fc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f002 fa88 	bl	80091f0 <USB_GetDevSpeed>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681c      	ldr	r4, [r3, #0]
 8006cec:	f001 f8c8 	bl	8007e80 <HAL_RCC_GetHCLKFreq>
 8006cf0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f002 f9a2 	bl	8009044 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f957 	bl	8006fb4 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	695a      	ldr	r2, [r3, #20]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006d14:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f002 fbcd 	bl	80094ba <USB_ReadInterrupts>
 8006d20:	4603      	mov	r3, r0
 8006d22:	f003 0308 	and.w	r3, r3, #8
 8006d26:	2b08      	cmp	r3, #8
 8006d28:	d10a      	bne.n	8006d40 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f938 	bl	8006fa0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	695a      	ldr	r2, [r3, #20]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f002 0208 	and.w	r2, r2, #8
 8006d3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4618      	mov	r0, r3
 8006d46:	f002 fbb8 	bl	80094ba <USB_ReadInterrupts>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d50:	2b80      	cmp	r3, #128	; 0x80
 8006d52:	d122      	bne.n	8006d9a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006d54:	6a3b      	ldr	r3, [r7, #32]
 8006d56:	699b      	ldr	r3, [r3, #24]
 8006d58:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006d60:	2301      	movs	r3, #1
 8006d62:	627b      	str	r3, [r7, #36]	; 0x24
 8006d64:	e014      	b.n	8006d90 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006d66:	6879      	ldr	r1, [r7, #4]
 8006d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	00db      	lsls	r3, r3, #3
 8006d6e:	4413      	add	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	440b      	add	r3, r1
 8006d74:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d105      	bne.n	8006d8a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	4619      	mov	r1, r3
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f95f 	bl	8007048 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d3e5      	bcc.n	8006d66 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f002 fb8b 	bl	80094ba <USB_ReadInterrupts>
 8006da4:	4603      	mov	r3, r0
 8006da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006daa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dae:	d13b      	bne.n	8006e28 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006db0:	2301      	movs	r3, #1
 8006db2:	627b      	str	r3, [r7, #36]	; 0x24
 8006db4:	e02b      	b.n	8006e0e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db8:	015a      	lsls	r2, r3, #5
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006dc6:	6879      	ldr	r1, [r7, #4]
 8006dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dca:	4613      	mov	r3, r2
 8006dcc:	00db      	lsls	r3, r3, #3
 8006dce:	4413      	add	r3, r2
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	440b      	add	r3, r1
 8006dd4:	3340      	adds	r3, #64	; 0x40
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d115      	bne.n	8006e08 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006ddc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	da12      	bge.n	8006e08 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006de2:	6879      	ldr	r1, [r7, #4]
 8006de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006de6:	4613      	mov	r3, r2
 8006de8:	00db      	lsls	r3, r3, #3
 8006dea:	4413      	add	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	440b      	add	r3, r1
 8006df0:	333f      	adds	r3, #63	; 0x3f
 8006df2:	2201      	movs	r2, #1
 8006df4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	4619      	mov	r1, r3
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f920 	bl	8007048 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d3ce      	bcc.n	8006db6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	695a      	ldr	r2, [r3, #20]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006e26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f002 fb44 	bl	80094ba <USB_ReadInterrupts>
 8006e32:	4603      	mov	r3, r0
 8006e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e3c:	d155      	bne.n	8006eea <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006e3e:	2301      	movs	r3, #1
 8006e40:	627b      	str	r3, [r7, #36]	; 0x24
 8006e42:	e045      	b.n	8006ed0 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e46:	015a      	lsls	r2, r3, #5
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006e54:	6879      	ldr	r1, [r7, #4]
 8006e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e58:	4613      	mov	r3, r2
 8006e5a:	00db      	lsls	r3, r3, #3
 8006e5c:	4413      	add	r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	440b      	add	r3, r1
 8006e62:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d12e      	bne.n	8006eca <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006e6c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	da2b      	bge.n	8006eca <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006e7e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d121      	bne.n	8006eca <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006e86:	6879      	ldr	r1, [r7, #4]
 8006e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	00db      	lsls	r3, r3, #3
 8006e8e:	4413      	add	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	440b      	add	r3, r1
 8006e94:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006e98:	2201      	movs	r2, #1
 8006e9a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006e9c:	6a3b      	ldr	r3, [r7, #32]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ea4:	6a3b      	ldr	r3, [r7, #32]
 8006ea6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006ea8:	6a3b      	ldr	r3, [r7, #32]
 8006eaa:	695b      	ldr	r3, [r3, #20]
 8006eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10a      	bne.n	8006eca <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006eb4:	69fb      	ldr	r3, [r7, #28]
 8006eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	69fa      	ldr	r2, [r7, #28]
 8006ebe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ec6:	6053      	str	r3, [r2, #4]
            break;
 8006ec8:	e007      	b.n	8006eda <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ecc:	3301      	adds	r3, #1
 8006ece:	627b      	str	r3, [r7, #36]	; 0x24
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d3b4      	bcc.n	8006e44 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	695a      	ldr	r2, [r3, #20]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006ee8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f002 fae3 	bl	80094ba <USB_ReadInterrupts>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006efe:	d10a      	bne.n	8006f16 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 f88d 	bl	8007020 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	695a      	ldr	r2, [r3, #20]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006f14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f002 facd 	bl	80094ba <USB_ReadInterrupts>
 8006f20:	4603      	mov	r3, r0
 8006f22:	f003 0304 	and.w	r3, r3, #4
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	d115      	bne.n	8006f56 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	f003 0304 	and.w	r3, r3, #4
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f879 	bl	8007034 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	6859      	ldr	r1, [r3, #4]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	69ba      	ldr	r2, [r7, #24]
 8006f4e:	430a      	orrs	r2, r1
 8006f50:	605a      	str	r2, [r3, #4]
 8006f52:	e000      	b.n	8006f56 <HAL_PCD_IRQHandler+0x992>
      return;
 8006f54:	bf00      	nop
    }
  }
}
 8006f56:	3734      	adds	r7, #52	; 0x34
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd90      	pop	{r4, r7, pc}

08006f5c <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	460b      	mov	r3, r1
 8006f66:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8006ffc:	bf00      	nop
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	460b      	mov	r3, r1
 8007012:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8007014:	bf00      	nop
 8007016:	370c      	adds	r7, #12
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	460b      	mov	r3, r1
 8007052:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007054:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007058:	2b00      	cmp	r3, #0
 800705a:	da0c      	bge.n	8007076 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800705c:	78fb      	ldrb	r3, [r7, #3]
 800705e:	f003 020f 	and.w	r2, r3, #15
 8007062:	4613      	mov	r3, r2
 8007064:	00db      	lsls	r3, r3, #3
 8007066:	4413      	add	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	3338      	adds	r3, #56	; 0x38
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	4413      	add	r3, r2
 8007070:	3304      	adds	r3, #4
 8007072:	60fb      	str	r3, [r7, #12]
 8007074:	e00c      	b.n	8007090 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007076:	78fb      	ldrb	r3, [r7, #3]
 8007078:	f003 020f 	and.w	r2, r3, #15
 800707c:	4613      	mov	r3, r2
 800707e:	00db      	lsls	r3, r3, #3
 8007080:	4413      	add	r3, r2
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	4413      	add	r3, r2
 800708c:	3304      	adds	r3, #4
 800708e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68f9      	ldr	r1, [r7, #12]
 8007096:	4618      	mov	r0, r3
 8007098:	f002 f8cf 	bl	800923a <USB_EPStopXfer>
 800709c:	4603      	mov	r3, r0
 800709e:	72fb      	strb	r3, [r7, #11]

  return ret;
 80070a0:	7afb      	ldrb	r3, [r7, #11]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b08a      	sub	sp, #40	; 0x28
 80070ae:	af02      	add	r7, sp, #8
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80070be:	683a      	ldr	r2, [r7, #0]
 80070c0:	4613      	mov	r3, r2
 80070c2:	00db      	lsls	r3, r3, #3
 80070c4:	4413      	add	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	3338      	adds	r3, #56	; 0x38
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	4413      	add	r3, r2
 80070ce:	3304      	adds	r3, #4
 80070d0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6a1a      	ldr	r2, [r3, #32]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d901      	bls.n	80070e2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e06c      	b.n	80071bc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	699a      	ldr	r2, [r3, #24]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	1ad3      	subs	r3, r2, r3
 80070ec:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	69fa      	ldr	r2, [r7, #28]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d902      	bls.n	80070fe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	3303      	adds	r3, #3
 8007102:	089b      	lsrs	r3, r3, #2
 8007104:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007106:	e02b      	b.n	8007160 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	699a      	ldr	r2, [r3, #24]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	69fa      	ldr	r2, [r7, #28]
 800711a:	429a      	cmp	r2, r3
 800711c:	d902      	bls.n	8007124 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	3303      	adds	r3, #3
 8007128:	089b      	lsrs	r3, r3, #2
 800712a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6919      	ldr	r1, [r3, #16]
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	b2da      	uxtb	r2, r3
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800713c:	b2db      	uxtb	r3, r3
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	4603      	mov	r3, r0
 8007142:	6978      	ldr	r0, [r7, #20]
 8007144:	f002 f923 	bl	800938e <USB_WritePacket>

    ep->xfer_buff  += len;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	691a      	ldr	r2, [r3, #16]
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	441a      	add	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	6a1a      	ldr	r2, [r3, #32]
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	441a      	add	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	015a      	lsls	r2, r3, #5
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	4413      	add	r3, r2
 8007168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	b29b      	uxth	r3, r3
 8007170:	69ba      	ldr	r2, [r7, #24]
 8007172:	429a      	cmp	r2, r3
 8007174:	d809      	bhi.n	800718a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6a1a      	ldr	r2, [r3, #32]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800717e:	429a      	cmp	r2, r3
 8007180:	d203      	bcs.n	800718a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1be      	bne.n	8007108 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	699a      	ldr	r2, [r3, #24]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	429a      	cmp	r2, r3
 8007194:	d811      	bhi.n	80071ba <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	f003 030f 	and.w	r3, r3, #15
 800719c:	2201      	movs	r2, #1
 800719e:	fa02 f303 	lsl.w	r3, r2, r3
 80071a2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	43db      	mvns	r3, r3
 80071b0:	6939      	ldr	r1, [r7, #16]
 80071b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071b6:	4013      	ands	r3, r2
 80071b8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3720      	adds	r7, #32
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b088      	sub	sp, #32
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	333c      	adds	r3, #60	; 0x3c
 80071dc:	3304      	adds	r3, #4
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d17b      	bne.n	80072f2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	f003 0308 	and.w	r3, r3, #8
 8007200:	2b00      	cmp	r3, #0
 8007202:	d015      	beq.n	8007230 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	4a61      	ldr	r2, [pc, #388]	; (800738c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007208:	4293      	cmp	r3, r2
 800720a:	f240 80b9 	bls.w	8007380 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007214:	2b00      	cmp	r3, #0
 8007216:	f000 80b3 	beq.w	8007380 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	015a      	lsls	r2, r3, #5
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	4413      	add	r3, r2
 8007222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007226:	461a      	mov	r2, r3
 8007228:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800722c:	6093      	str	r3, [r2, #8]
 800722e:	e0a7      	b.n	8007380 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	f003 0320 	and.w	r3, r3, #32
 8007236:	2b00      	cmp	r3, #0
 8007238:	d009      	beq.n	800724e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	015a      	lsls	r2, r3, #5
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	4413      	add	r3, r2
 8007242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007246:	461a      	mov	r2, r3
 8007248:	2320      	movs	r3, #32
 800724a:	6093      	str	r3, [r2, #8]
 800724c:	e098      	b.n	8007380 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007254:	2b00      	cmp	r3, #0
 8007256:	f040 8093 	bne.w	8007380 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	4a4b      	ldr	r2, [pc, #300]	; (800738c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d90f      	bls.n	8007282 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00a      	beq.n	8007282 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	015a      	lsls	r2, r3, #5
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	4413      	add	r3, r2
 8007274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007278:	461a      	mov	r2, r3
 800727a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800727e:	6093      	str	r3, [r2, #8]
 8007280:	e07e      	b.n	8007380 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	4613      	mov	r3, r2
 8007286:	00db      	lsls	r3, r3, #3
 8007288:	4413      	add	r3, r2
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	4413      	add	r3, r2
 8007294:	3304      	adds	r3, #4
 8007296:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	69da      	ldr	r2, [r3, #28]
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	0159      	lsls	r1, r3, #5
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	440b      	add	r3, r1
 80072a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a8:	691b      	ldr	r3, [r3, #16]
 80072aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072ae:	1ad2      	subs	r2, r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d114      	bne.n	80072e4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d109      	bne.n	80072d6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6818      	ldr	r0, [r3, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80072cc:	461a      	mov	r2, r3
 80072ce:	2101      	movs	r1, #1
 80072d0:	f002 f9b8 	bl	8009644 <USB_EP0_OutStart>
 80072d4:	e006      	b.n	80072e4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	691a      	ldr	r2, [r3, #16]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	441a      	add	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	4619      	mov	r1, r3
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7ff fe36 	bl	8006f5c <HAL_PCD_DataOutStageCallback>
 80072f0:	e046      	b.n	8007380 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	4a26      	ldr	r2, [pc, #152]	; (8007390 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d124      	bne.n	8007344 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00a      	beq.n	800731a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	4413      	add	r3, r2
 800730c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007310:	461a      	mov	r2, r3
 8007312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007316:	6093      	str	r3, [r2, #8]
 8007318:	e032      	b.n	8007380 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	f003 0320 	and.w	r3, r3, #32
 8007320:	2b00      	cmp	r3, #0
 8007322:	d008      	beq.n	8007336 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	015a      	lsls	r2, r3, #5
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	4413      	add	r3, r2
 800732c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007330:	461a      	mov	r2, r3
 8007332:	2320      	movs	r3, #32
 8007334:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	b2db      	uxtb	r3, r3
 800733a:	4619      	mov	r1, r3
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f7ff fe0d 	bl	8006f5c <HAL_PCD_DataOutStageCallback>
 8007342:	e01d      	b.n	8007380 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d114      	bne.n	8007374 <PCD_EP_OutXfrComplete_int+0x1b0>
 800734a:	6879      	ldr	r1, [r7, #4]
 800734c:	683a      	ldr	r2, [r7, #0]
 800734e:	4613      	mov	r3, r2
 8007350:	00db      	lsls	r3, r3, #3
 8007352:	4413      	add	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	440b      	add	r3, r1
 8007358:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d108      	bne.n	8007374 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6818      	ldr	r0, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800736c:	461a      	mov	r2, r3
 800736e:	2100      	movs	r1, #0
 8007370:	f002 f968 	bl	8009644 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	b2db      	uxtb	r3, r3
 8007378:	4619      	mov	r1, r3
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f7ff fdee 	bl	8006f5c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3720      	adds	r7, #32
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	4f54300a 	.word	0x4f54300a
 8007390:	4f54310a 	.word	0x4f54310a

08007394 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	333c      	adds	r3, #60	; 0x3c
 80073ac:	3304      	adds	r3, #4
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	015a      	lsls	r2, r3, #5
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	4413      	add	r3, r2
 80073ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	4a15      	ldr	r2, [pc, #84]	; (800741c <PCD_EP_OutSetupPacket_int+0x88>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d90e      	bls.n	80073e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d009      	beq.n	80073e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	015a      	lsls	r2, r3, #5
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	4413      	add	r3, r2
 80073dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e0:	461a      	mov	r2, r3
 80073e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7ff fdcf 	bl	8006f8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	4a0a      	ldr	r2, [pc, #40]	; (800741c <PCD_EP_OutSetupPacket_int+0x88>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d90c      	bls.n	8007410 <PCD_EP_OutSetupPacket_int+0x7c>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d108      	bne.n	8007410 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6818      	ldr	r0, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007408:	461a      	mov	r2, r3
 800740a:	2101      	movs	r1, #1
 800740c:	f002 f91a 	bl	8009644 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3718      	adds	r7, #24
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	4f54300a 	.word	0x4f54300a

08007420 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	460b      	mov	r3, r1
 800742a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007438:	b480      	push	{r7}
 800743a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800743c:	4b05      	ldr	r3, [pc, #20]	; (8007454 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a04      	ldr	r2, [pc, #16]	; (8007454 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007446:	6013      	str	r3, [r2, #0]
}
 8007448:	bf00      	nop
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	40007000 	.word	0x40007000

08007458 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800745e:	2300      	movs	r3, #0
 8007460:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007462:	4b23      	ldr	r3, [pc, #140]	; (80074f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007466:	4a22      	ldr	r2, [pc, #136]	; (80074f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800746c:	6413      	str	r3, [r2, #64]	; 0x40
 800746e:	4b20      	ldr	r3, [pc, #128]	; (80074f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8007470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007476:	603b      	str	r3, [r7, #0]
 8007478:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800747a:	4b1e      	ldr	r3, [pc, #120]	; (80074f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a1d      	ldr	r2, [pc, #116]	; (80074f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007484:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007486:	f7fb feeb 	bl	8003260 <HAL_GetTick>
 800748a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800748c:	e009      	b.n	80074a2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800748e:	f7fb fee7 	bl	8003260 <HAL_GetTick>
 8007492:	4602      	mov	r2, r0
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	1ad3      	subs	r3, r2, r3
 8007498:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800749c:	d901      	bls.n	80074a2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800749e:	2303      	movs	r3, #3
 80074a0:	e022      	b.n	80074e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80074a2:	4b14      	ldr	r3, [pc, #80]	; (80074f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074ae:	d1ee      	bne.n	800748e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80074b0:	4b10      	ldr	r3, [pc, #64]	; (80074f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4a0f      	ldr	r2, [pc, #60]	; (80074f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80074bc:	f7fb fed0 	bl	8003260 <HAL_GetTick>
 80074c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80074c2:	e009      	b.n	80074d8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80074c4:	f7fb fecc 	bl	8003260 <HAL_GetTick>
 80074c8:	4602      	mov	r2, r0
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074d2:	d901      	bls.n	80074d8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e007      	b.n	80074e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80074d8:	4b06      	ldr	r3, [pc, #24]	; (80074f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074e4:	d1ee      	bne.n	80074c4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	40023800 	.word	0x40023800
 80074f4:	40007000 	.word	0x40007000

080074f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007500:	2300      	movs	r3, #0
 8007502:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e29b      	b.n	8007a46 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b00      	cmp	r3, #0
 8007518:	f000 8087 	beq.w	800762a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800751c:	4b96      	ldr	r3, [pc, #600]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	f003 030c 	and.w	r3, r3, #12
 8007524:	2b04      	cmp	r3, #4
 8007526:	d00c      	beq.n	8007542 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007528:	4b93      	ldr	r3, [pc, #588]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f003 030c 	and.w	r3, r3, #12
 8007530:	2b08      	cmp	r3, #8
 8007532:	d112      	bne.n	800755a <HAL_RCC_OscConfig+0x62>
 8007534:	4b90      	ldr	r3, [pc, #576]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800753c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007540:	d10b      	bne.n	800755a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007542:	4b8d      	ldr	r3, [pc, #564]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d06c      	beq.n	8007628 <HAL_RCC_OscConfig+0x130>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d168      	bne.n	8007628 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e275      	b.n	8007a46 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007562:	d106      	bne.n	8007572 <HAL_RCC_OscConfig+0x7a>
 8007564:	4b84      	ldr	r3, [pc, #528]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a83      	ldr	r2, [pc, #524]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 800756a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800756e:	6013      	str	r3, [r2, #0]
 8007570:	e02e      	b.n	80075d0 <HAL_RCC_OscConfig+0xd8>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d10c      	bne.n	8007594 <HAL_RCC_OscConfig+0x9c>
 800757a:	4b7f      	ldr	r3, [pc, #508]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a7e      	ldr	r2, [pc, #504]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 8007580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007584:	6013      	str	r3, [r2, #0]
 8007586:	4b7c      	ldr	r3, [pc, #496]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a7b      	ldr	r2, [pc, #492]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 800758c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007590:	6013      	str	r3, [r2, #0]
 8007592:	e01d      	b.n	80075d0 <HAL_RCC_OscConfig+0xd8>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800759c:	d10c      	bne.n	80075b8 <HAL_RCC_OscConfig+0xc0>
 800759e:	4b76      	ldr	r3, [pc, #472]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a75      	ldr	r2, [pc, #468]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 80075a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075a8:	6013      	str	r3, [r2, #0]
 80075aa:	4b73      	ldr	r3, [pc, #460]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a72      	ldr	r2, [pc, #456]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 80075b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075b4:	6013      	str	r3, [r2, #0]
 80075b6:	e00b      	b.n	80075d0 <HAL_RCC_OscConfig+0xd8>
 80075b8:	4b6f      	ldr	r3, [pc, #444]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a6e      	ldr	r2, [pc, #440]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 80075be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075c2:	6013      	str	r3, [r2, #0]
 80075c4:	4b6c      	ldr	r3, [pc, #432]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a6b      	ldr	r2, [pc, #428]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 80075ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d013      	beq.n	8007600 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075d8:	f7fb fe42 	bl	8003260 <HAL_GetTick>
 80075dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075de:	e008      	b.n	80075f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80075e0:	f7fb fe3e 	bl	8003260 <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	2b64      	cmp	r3, #100	; 0x64
 80075ec:	d901      	bls.n	80075f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e229      	b.n	8007a46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075f2:	4b61      	ldr	r3, [pc, #388]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d0f0      	beq.n	80075e0 <HAL_RCC_OscConfig+0xe8>
 80075fe:	e014      	b.n	800762a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007600:	f7fb fe2e 	bl	8003260 <HAL_GetTick>
 8007604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007606:	e008      	b.n	800761a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007608:	f7fb fe2a 	bl	8003260 <HAL_GetTick>
 800760c:	4602      	mov	r2, r0
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	2b64      	cmp	r3, #100	; 0x64
 8007614:	d901      	bls.n	800761a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e215      	b.n	8007a46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800761a:	4b57      	ldr	r3, [pc, #348]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1f0      	bne.n	8007608 <HAL_RCC_OscConfig+0x110>
 8007626:	e000      	b.n	800762a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0302 	and.w	r3, r3, #2
 8007632:	2b00      	cmp	r3, #0
 8007634:	d069      	beq.n	800770a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007636:	4b50      	ldr	r3, [pc, #320]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f003 030c 	and.w	r3, r3, #12
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00b      	beq.n	800765a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007642:	4b4d      	ldr	r3, [pc, #308]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	f003 030c 	and.w	r3, r3, #12
 800764a:	2b08      	cmp	r3, #8
 800764c:	d11c      	bne.n	8007688 <HAL_RCC_OscConfig+0x190>
 800764e:	4b4a      	ldr	r3, [pc, #296]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d116      	bne.n	8007688 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800765a:	4b47      	ldr	r3, [pc, #284]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0302 	and.w	r3, r3, #2
 8007662:	2b00      	cmp	r3, #0
 8007664:	d005      	beq.n	8007672 <HAL_RCC_OscConfig+0x17a>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d001      	beq.n	8007672 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e1e9      	b.n	8007a46 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007672:	4b41      	ldr	r3, [pc, #260]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	00db      	lsls	r3, r3, #3
 8007680:	493d      	ldr	r1, [pc, #244]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 8007682:	4313      	orrs	r3, r2
 8007684:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007686:	e040      	b.n	800770a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d023      	beq.n	80076d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007690:	4b39      	ldr	r3, [pc, #228]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a38      	ldr	r2, [pc, #224]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 8007696:	f043 0301 	orr.w	r3, r3, #1
 800769a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800769c:	f7fb fde0 	bl	8003260 <HAL_GetTick>
 80076a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076a2:	e008      	b.n	80076b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076a4:	f7fb fddc 	bl	8003260 <HAL_GetTick>
 80076a8:	4602      	mov	r2, r0
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d901      	bls.n	80076b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e1c7      	b.n	8007a46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076b6:	4b30      	ldr	r3, [pc, #192]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f003 0302 	and.w	r3, r3, #2
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d0f0      	beq.n	80076a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076c2:	4b2d      	ldr	r3, [pc, #180]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	00db      	lsls	r3, r3, #3
 80076d0:	4929      	ldr	r1, [pc, #164]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 80076d2:	4313      	orrs	r3, r2
 80076d4:	600b      	str	r3, [r1, #0]
 80076d6:	e018      	b.n	800770a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076d8:	4b27      	ldr	r3, [pc, #156]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a26      	ldr	r2, [pc, #152]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 80076de:	f023 0301 	bic.w	r3, r3, #1
 80076e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076e4:	f7fb fdbc 	bl	8003260 <HAL_GetTick>
 80076e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076ea:	e008      	b.n	80076fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076ec:	f7fb fdb8 	bl	8003260 <HAL_GetTick>
 80076f0:	4602      	mov	r2, r0
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d901      	bls.n	80076fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e1a3      	b.n	8007a46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076fe:	4b1e      	ldr	r3, [pc, #120]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0302 	and.w	r3, r3, #2
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1f0      	bne.n	80076ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 0308 	and.w	r3, r3, #8
 8007712:	2b00      	cmp	r3, #0
 8007714:	d038      	beq.n	8007788 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	695b      	ldr	r3, [r3, #20]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d019      	beq.n	8007752 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800771e:	4b16      	ldr	r3, [pc, #88]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 8007720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007722:	4a15      	ldr	r2, [pc, #84]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 8007724:	f043 0301 	orr.w	r3, r3, #1
 8007728:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800772a:	f7fb fd99 	bl	8003260 <HAL_GetTick>
 800772e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007730:	e008      	b.n	8007744 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007732:	f7fb fd95 	bl	8003260 <HAL_GetTick>
 8007736:	4602      	mov	r2, r0
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	2b02      	cmp	r3, #2
 800773e:	d901      	bls.n	8007744 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007740:	2303      	movs	r3, #3
 8007742:	e180      	b.n	8007a46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007744:	4b0c      	ldr	r3, [pc, #48]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 8007746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007748:	f003 0302 	and.w	r3, r3, #2
 800774c:	2b00      	cmp	r3, #0
 800774e:	d0f0      	beq.n	8007732 <HAL_RCC_OscConfig+0x23a>
 8007750:	e01a      	b.n	8007788 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007752:	4b09      	ldr	r3, [pc, #36]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 8007754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007756:	4a08      	ldr	r2, [pc, #32]	; (8007778 <HAL_RCC_OscConfig+0x280>)
 8007758:	f023 0301 	bic.w	r3, r3, #1
 800775c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800775e:	f7fb fd7f 	bl	8003260 <HAL_GetTick>
 8007762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007764:	e00a      	b.n	800777c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007766:	f7fb fd7b 	bl	8003260 <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	2b02      	cmp	r3, #2
 8007772:	d903      	bls.n	800777c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	e166      	b.n	8007a46 <HAL_RCC_OscConfig+0x54e>
 8007778:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800777c:	4b92      	ldr	r3, [pc, #584]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 800777e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007780:	f003 0302 	and.w	r3, r3, #2
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1ee      	bne.n	8007766 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f003 0304 	and.w	r3, r3, #4
 8007790:	2b00      	cmp	r3, #0
 8007792:	f000 80a4 	beq.w	80078de <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007796:	4b8c      	ldr	r3, [pc, #560]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 8007798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d10d      	bne.n	80077be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80077a2:	4b89      	ldr	r3, [pc, #548]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 80077a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a6:	4a88      	ldr	r2, [pc, #544]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 80077a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077ac:	6413      	str	r3, [r2, #64]	; 0x40
 80077ae:	4b86      	ldr	r3, [pc, #536]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 80077b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077b6:	60bb      	str	r3, [r7, #8]
 80077b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077ba:	2301      	movs	r3, #1
 80077bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077be:	4b83      	ldr	r3, [pc, #524]	; (80079cc <HAL_RCC_OscConfig+0x4d4>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d118      	bne.n	80077fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80077ca:	4b80      	ldr	r3, [pc, #512]	; (80079cc <HAL_RCC_OscConfig+0x4d4>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a7f      	ldr	r2, [pc, #508]	; (80079cc <HAL_RCC_OscConfig+0x4d4>)
 80077d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077d6:	f7fb fd43 	bl	8003260 <HAL_GetTick>
 80077da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077dc:	e008      	b.n	80077f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077de:	f7fb fd3f 	bl	8003260 <HAL_GetTick>
 80077e2:	4602      	mov	r2, r0
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	2b64      	cmp	r3, #100	; 0x64
 80077ea:	d901      	bls.n	80077f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e12a      	b.n	8007a46 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077f0:	4b76      	ldr	r3, [pc, #472]	; (80079cc <HAL_RCC_OscConfig+0x4d4>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d0f0      	beq.n	80077de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d106      	bne.n	8007812 <HAL_RCC_OscConfig+0x31a>
 8007804:	4b70      	ldr	r3, [pc, #448]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 8007806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007808:	4a6f      	ldr	r2, [pc, #444]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 800780a:	f043 0301 	orr.w	r3, r3, #1
 800780e:	6713      	str	r3, [r2, #112]	; 0x70
 8007810:	e02d      	b.n	800786e <HAL_RCC_OscConfig+0x376>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10c      	bne.n	8007834 <HAL_RCC_OscConfig+0x33c>
 800781a:	4b6b      	ldr	r3, [pc, #428]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 800781c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800781e:	4a6a      	ldr	r2, [pc, #424]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 8007820:	f023 0301 	bic.w	r3, r3, #1
 8007824:	6713      	str	r3, [r2, #112]	; 0x70
 8007826:	4b68      	ldr	r3, [pc, #416]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 8007828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800782a:	4a67      	ldr	r2, [pc, #412]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 800782c:	f023 0304 	bic.w	r3, r3, #4
 8007830:	6713      	str	r3, [r2, #112]	; 0x70
 8007832:	e01c      	b.n	800786e <HAL_RCC_OscConfig+0x376>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	2b05      	cmp	r3, #5
 800783a:	d10c      	bne.n	8007856 <HAL_RCC_OscConfig+0x35e>
 800783c:	4b62      	ldr	r3, [pc, #392]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 800783e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007840:	4a61      	ldr	r2, [pc, #388]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 8007842:	f043 0304 	orr.w	r3, r3, #4
 8007846:	6713      	str	r3, [r2, #112]	; 0x70
 8007848:	4b5f      	ldr	r3, [pc, #380]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 800784a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800784c:	4a5e      	ldr	r2, [pc, #376]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 800784e:	f043 0301 	orr.w	r3, r3, #1
 8007852:	6713      	str	r3, [r2, #112]	; 0x70
 8007854:	e00b      	b.n	800786e <HAL_RCC_OscConfig+0x376>
 8007856:	4b5c      	ldr	r3, [pc, #368]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 8007858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800785a:	4a5b      	ldr	r2, [pc, #364]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 800785c:	f023 0301 	bic.w	r3, r3, #1
 8007860:	6713      	str	r3, [r2, #112]	; 0x70
 8007862:	4b59      	ldr	r3, [pc, #356]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 8007864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007866:	4a58      	ldr	r2, [pc, #352]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 8007868:	f023 0304 	bic.w	r3, r3, #4
 800786c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d015      	beq.n	80078a2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007876:	f7fb fcf3 	bl	8003260 <HAL_GetTick>
 800787a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800787c:	e00a      	b.n	8007894 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800787e:	f7fb fcef 	bl	8003260 <HAL_GetTick>
 8007882:	4602      	mov	r2, r0
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	1ad3      	subs	r3, r2, r3
 8007888:	f241 3288 	movw	r2, #5000	; 0x1388
 800788c:	4293      	cmp	r3, r2
 800788e:	d901      	bls.n	8007894 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	e0d8      	b.n	8007a46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007894:	4b4c      	ldr	r3, [pc, #304]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 8007896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007898:	f003 0302 	and.w	r3, r3, #2
 800789c:	2b00      	cmp	r3, #0
 800789e:	d0ee      	beq.n	800787e <HAL_RCC_OscConfig+0x386>
 80078a0:	e014      	b.n	80078cc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078a2:	f7fb fcdd 	bl	8003260 <HAL_GetTick>
 80078a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078a8:	e00a      	b.n	80078c0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078aa:	f7fb fcd9 	bl	8003260 <HAL_GetTick>
 80078ae:	4602      	mov	r2, r0
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	1ad3      	subs	r3, r2, r3
 80078b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d901      	bls.n	80078c0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80078bc:	2303      	movs	r3, #3
 80078be:	e0c2      	b.n	8007a46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078c0:	4b41      	ldr	r3, [pc, #260]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 80078c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c4:	f003 0302 	and.w	r3, r3, #2
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1ee      	bne.n	80078aa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80078cc:	7dfb      	ldrb	r3, [r7, #23]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d105      	bne.n	80078de <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078d2:	4b3d      	ldr	r3, [pc, #244]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 80078d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d6:	4a3c      	ldr	r2, [pc, #240]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 80078d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	699b      	ldr	r3, [r3, #24]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 80ae 	beq.w	8007a44 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80078e8:	4b37      	ldr	r3, [pc, #220]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	f003 030c 	and.w	r3, r3, #12
 80078f0:	2b08      	cmp	r3, #8
 80078f2:	d06d      	beq.n	80079d0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d14b      	bne.n	8007994 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078fc:	4b32      	ldr	r3, [pc, #200]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a31      	ldr	r2, [pc, #196]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 8007902:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007908:	f7fb fcaa 	bl	8003260 <HAL_GetTick>
 800790c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800790e:	e008      	b.n	8007922 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007910:	f7fb fca6 	bl	8003260 <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	2b02      	cmp	r3, #2
 800791c:	d901      	bls.n	8007922 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e091      	b.n	8007a46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007922:	4b29      	ldr	r3, [pc, #164]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1f0      	bne.n	8007910 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	69da      	ldr	r2, [r3, #28]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	431a      	orrs	r2, r3
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793c:	019b      	lsls	r3, r3, #6
 800793e:	431a      	orrs	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007944:	085b      	lsrs	r3, r3, #1
 8007946:	3b01      	subs	r3, #1
 8007948:	041b      	lsls	r3, r3, #16
 800794a:	431a      	orrs	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007950:	061b      	lsls	r3, r3, #24
 8007952:	431a      	orrs	r2, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007958:	071b      	lsls	r3, r3, #28
 800795a:	491b      	ldr	r1, [pc, #108]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 800795c:	4313      	orrs	r3, r2
 800795e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007960:	4b19      	ldr	r3, [pc, #100]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a18      	ldr	r2, [pc, #96]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 8007966:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800796a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800796c:	f7fb fc78 	bl	8003260 <HAL_GetTick>
 8007970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007972:	e008      	b.n	8007986 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007974:	f7fb fc74 	bl	8003260 <HAL_GetTick>
 8007978:	4602      	mov	r2, r0
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	2b02      	cmp	r3, #2
 8007980:	d901      	bls.n	8007986 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	e05f      	b.n	8007a46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007986:	4b10      	ldr	r3, [pc, #64]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800798e:	2b00      	cmp	r3, #0
 8007990:	d0f0      	beq.n	8007974 <HAL_RCC_OscConfig+0x47c>
 8007992:	e057      	b.n	8007a44 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007994:	4b0c      	ldr	r3, [pc, #48]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a0b      	ldr	r2, [pc, #44]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 800799a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800799e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079a0:	f7fb fc5e 	bl	8003260 <HAL_GetTick>
 80079a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079a6:	e008      	b.n	80079ba <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079a8:	f7fb fc5a 	bl	8003260 <HAL_GetTick>
 80079ac:	4602      	mov	r2, r0
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d901      	bls.n	80079ba <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e045      	b.n	8007a46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079ba:	4b03      	ldr	r3, [pc, #12]	; (80079c8 <HAL_RCC_OscConfig+0x4d0>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1f0      	bne.n	80079a8 <HAL_RCC_OscConfig+0x4b0>
 80079c6:	e03d      	b.n	8007a44 <HAL_RCC_OscConfig+0x54c>
 80079c8:	40023800 	.word	0x40023800
 80079cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80079d0:	4b1f      	ldr	r3, [pc, #124]	; (8007a50 <HAL_RCC_OscConfig+0x558>)
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d030      	beq.n	8007a40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d129      	bne.n	8007a40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d122      	bne.n	8007a40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a00:	4013      	ands	r3, r2
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a06:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d119      	bne.n	8007a40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a16:	085b      	lsrs	r3, r3, #1
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d10f      	bne.n	8007a40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d107      	bne.n	8007a40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d001      	beq.n	8007a44 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	e000      	b.n	8007a46 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3718      	adds	r7, #24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	40023800 	.word	0x40023800

08007a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d101      	bne.n	8007a6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e0d0      	b.n	8007c0e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a6c:	4b6a      	ldr	r3, [pc, #424]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 030f 	and.w	r3, r3, #15
 8007a74:	683a      	ldr	r2, [r7, #0]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d910      	bls.n	8007a9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a7a:	4b67      	ldr	r3, [pc, #412]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f023 020f 	bic.w	r2, r3, #15
 8007a82:	4965      	ldr	r1, [pc, #404]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a8a:	4b63      	ldr	r3, [pc, #396]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 030f 	and.w	r3, r3, #15
 8007a92:	683a      	ldr	r2, [r7, #0]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d001      	beq.n	8007a9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e0b8      	b.n	8007c0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 0302 	and.w	r3, r3, #2
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d020      	beq.n	8007aea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0304 	and.w	r3, r3, #4
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d005      	beq.n	8007ac0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ab4:	4b59      	ldr	r3, [pc, #356]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	4a58      	ldr	r2, [pc, #352]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007aba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007abe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0308 	and.w	r3, r3, #8
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d005      	beq.n	8007ad8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007acc:	4b53      	ldr	r3, [pc, #332]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007ace:	689b      	ldr	r3, [r3, #8]
 8007ad0:	4a52      	ldr	r2, [pc, #328]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007ad2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007ad6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ad8:	4b50      	ldr	r3, [pc, #320]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	494d      	ldr	r1, [pc, #308]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d040      	beq.n	8007b78 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d107      	bne.n	8007b0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007afe:	4b47      	ldr	r3, [pc, #284]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d115      	bne.n	8007b36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e07f      	b.n	8007c0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d107      	bne.n	8007b26 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b16:	4b41      	ldr	r3, [pc, #260]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d109      	bne.n	8007b36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e073      	b.n	8007c0e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b26:	4b3d      	ldr	r3, [pc, #244]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0302 	and.w	r3, r3, #2
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e06b      	b.n	8007c0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b36:	4b39      	ldr	r3, [pc, #228]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f023 0203 	bic.w	r2, r3, #3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	4936      	ldr	r1, [pc, #216]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b48:	f7fb fb8a 	bl	8003260 <HAL_GetTick>
 8007b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b4e:	e00a      	b.n	8007b66 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b50:	f7fb fb86 	bl	8003260 <HAL_GetTick>
 8007b54:	4602      	mov	r2, r0
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	1ad3      	subs	r3, r2, r3
 8007b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d901      	bls.n	8007b66 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007b62:	2303      	movs	r3, #3
 8007b64:	e053      	b.n	8007c0e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b66:	4b2d      	ldr	r3, [pc, #180]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	f003 020c 	and.w	r2, r3, #12
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d1eb      	bne.n	8007b50 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b78:	4b27      	ldr	r3, [pc, #156]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 030f 	and.w	r3, r3, #15
 8007b80:	683a      	ldr	r2, [r7, #0]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d210      	bcs.n	8007ba8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b86:	4b24      	ldr	r3, [pc, #144]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f023 020f 	bic.w	r2, r3, #15
 8007b8e:	4922      	ldr	r1, [pc, #136]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b96:	4b20      	ldr	r3, [pc, #128]	; (8007c18 <HAL_RCC_ClockConfig+0x1c4>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 030f 	and.w	r3, r3, #15
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d001      	beq.n	8007ba8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e032      	b.n	8007c0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 0304 	and.w	r3, r3, #4
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d008      	beq.n	8007bc6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bb4:	4b19      	ldr	r3, [pc, #100]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	4916      	ldr	r1, [pc, #88]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f003 0308 	and.w	r3, r3, #8
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d009      	beq.n	8007be6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007bd2:	4b12      	ldr	r3, [pc, #72]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	00db      	lsls	r3, r3, #3
 8007be0:	490e      	ldr	r1, [pc, #56]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007be6:	f000 f885 	bl	8007cf4 <HAL_RCC_GetSysClockFreq>
 8007bea:	4602      	mov	r2, r0
 8007bec:	4b0b      	ldr	r3, [pc, #44]	; (8007c1c <HAL_RCC_ClockConfig+0x1c8>)
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	091b      	lsrs	r3, r3, #4
 8007bf2:	f003 030f 	and.w	r3, r3, #15
 8007bf6:	490a      	ldr	r1, [pc, #40]	; (8007c20 <HAL_RCC_ClockConfig+0x1cc>)
 8007bf8:	5ccb      	ldrb	r3, [r1, r3]
 8007bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8007bfe:	4a09      	ldr	r2, [pc, #36]	; (8007c24 <HAL_RCC_ClockConfig+0x1d0>)
 8007c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007c02:	4b09      	ldr	r3, [pc, #36]	; (8007c28 <HAL_RCC_ClockConfig+0x1d4>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7f9 faf6 	bl	80011f8 <HAL_InitTick>

  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	40023c00 	.word	0x40023c00
 8007c1c:	40023800 	.word	0x40023800
 8007c20:	0800ce84 	.word	0x0800ce84
 8007c24:	20000000 	.word	0x20000000
 8007c28:	20000040 	.word	0x20000040

08007c2c <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b08c      	sub	sp, #48	; 0x30
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d127      	bne.n	8007c8e <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8007c3e:	4b2a      	ldr	r3, [pc, #168]	; (8007ce8 <HAL_RCC_MCOConfig+0xbc>)
 8007c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c42:	4a29      	ldr	r2, [pc, #164]	; (8007ce8 <HAL_RCC_MCOConfig+0xbc>)
 8007c44:	f043 0301 	orr.w	r3, r3, #1
 8007c48:	6313      	str	r3, [r2, #48]	; 0x30
 8007c4a:	4b27      	ldr	r3, [pc, #156]	; (8007ce8 <HAL_RCC_MCOConfig+0xbc>)
 8007c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4e:	f003 0301 	and.w	r3, r3, #1
 8007c52:	61bb      	str	r3, [r7, #24]
 8007c54:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007c56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8007c60:	2303      	movs	r3, #3
 8007c62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c64:	2300      	movs	r3, #0
 8007c66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007c6c:	f107 031c 	add.w	r3, r7, #28
 8007c70:	4619      	mov	r1, r3
 8007c72:	481e      	ldr	r0, [pc, #120]	; (8007cec <HAL_RCC_MCOConfig+0xc0>)
 8007c74:	f7fd f860 	bl	8004d38 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007c78:	4b1b      	ldr	r3, [pc, #108]	; (8007ce8 <HAL_RCC_MCOConfig+0xbc>)
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8007c80:	68b9      	ldr	r1, [r7, #8]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	430b      	orrs	r3, r1
 8007c86:	4918      	ldr	r1, [pc, #96]	; (8007ce8 <HAL_RCC_MCOConfig+0xbc>)
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 8007c8c:	e027      	b.n	8007cde <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
 8007c8e:	4b16      	ldr	r3, [pc, #88]	; (8007ce8 <HAL_RCC_MCOConfig+0xbc>)
 8007c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c92:	4a15      	ldr	r2, [pc, #84]	; (8007ce8 <HAL_RCC_MCOConfig+0xbc>)
 8007c94:	f043 0304 	orr.w	r3, r3, #4
 8007c98:	6313      	str	r3, [r2, #48]	; 0x30
 8007c9a:	4b13      	ldr	r3, [pc, #76]	; (8007ce8 <HAL_RCC_MCOConfig+0xbc>)
 8007c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9e:	f003 0304 	and.w	r3, r3, #4
 8007ca2:	617b      	str	r3, [r7, #20]
 8007ca4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007ca6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cac:	2302      	movs	r3, #2
 8007cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007cbc:	f107 031c 	add.w	r3, r7, #28
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	480b      	ldr	r0, [pc, #44]	; (8007cf0 <HAL_RCC_MCOConfig+0xc4>)
 8007cc4:	f7fd f838 	bl	8004d38 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 8007cc8:	4b07      	ldr	r3, [pc, #28]	; (8007ce8 <HAL_RCC_MCOConfig+0xbc>)
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	00d9      	lsls	r1, r3, #3
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	430b      	orrs	r3, r1
 8007cd8:	4903      	ldr	r1, [pc, #12]	; (8007ce8 <HAL_RCC_MCOConfig+0xbc>)
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	608b      	str	r3, [r1, #8]
}
 8007cde:	bf00      	nop
 8007ce0:	3730      	adds	r7, #48	; 0x30
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	40023800 	.word	0x40023800
 8007cec:	40020000 	.word	0x40020000
 8007cf0:	40020800 	.word	0x40020800

08007cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cf8:	b090      	sub	sp, #64	; 0x40
 8007cfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8007d00:	2300      	movs	r3, #0
 8007d02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d04:	2300      	movs	r3, #0
 8007d06:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d0c:	4b59      	ldr	r3, [pc, #356]	; (8007e74 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d0e:	689b      	ldr	r3, [r3, #8]
 8007d10:	f003 030c 	and.w	r3, r3, #12
 8007d14:	2b08      	cmp	r3, #8
 8007d16:	d00d      	beq.n	8007d34 <HAL_RCC_GetSysClockFreq+0x40>
 8007d18:	2b08      	cmp	r3, #8
 8007d1a:	f200 80a1 	bhi.w	8007e60 <HAL_RCC_GetSysClockFreq+0x16c>
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d002      	beq.n	8007d28 <HAL_RCC_GetSysClockFreq+0x34>
 8007d22:	2b04      	cmp	r3, #4
 8007d24:	d003      	beq.n	8007d2e <HAL_RCC_GetSysClockFreq+0x3a>
 8007d26:	e09b      	b.n	8007e60 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d28:	4b53      	ldr	r3, [pc, #332]	; (8007e78 <HAL_RCC_GetSysClockFreq+0x184>)
 8007d2a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007d2c:	e09b      	b.n	8007e66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d2e:	4b53      	ldr	r3, [pc, #332]	; (8007e7c <HAL_RCC_GetSysClockFreq+0x188>)
 8007d30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007d32:	e098      	b.n	8007e66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d34:	4b4f      	ldr	r3, [pc, #316]	; (8007e74 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d3c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007d3e:	4b4d      	ldr	r3, [pc, #308]	; (8007e74 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d028      	beq.n	8007d9c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d4a:	4b4a      	ldr	r3, [pc, #296]	; (8007e74 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	099b      	lsrs	r3, r3, #6
 8007d50:	2200      	movs	r2, #0
 8007d52:	623b      	str	r3, [r7, #32]
 8007d54:	627a      	str	r2, [r7, #36]	; 0x24
 8007d56:	6a3b      	ldr	r3, [r7, #32]
 8007d58:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	4b47      	ldr	r3, [pc, #284]	; (8007e7c <HAL_RCC_GetSysClockFreq+0x188>)
 8007d60:	fb03 f201 	mul.w	r2, r3, r1
 8007d64:	2300      	movs	r3, #0
 8007d66:	fb00 f303 	mul.w	r3, r0, r3
 8007d6a:	4413      	add	r3, r2
 8007d6c:	4a43      	ldr	r2, [pc, #268]	; (8007e7c <HAL_RCC_GetSysClockFreq+0x188>)
 8007d6e:	fba0 1202 	umull	r1, r2, r0, r2
 8007d72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d74:	460a      	mov	r2, r1
 8007d76:	62ba      	str	r2, [r7, #40]	; 0x28
 8007d78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d7a:	4413      	add	r3, r2
 8007d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d80:	2200      	movs	r2, #0
 8007d82:	61bb      	str	r3, [r7, #24]
 8007d84:	61fa      	str	r2, [r7, #28]
 8007d86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007d8e:	f7f8 faa7 	bl	80002e0 <__aeabi_uldivmod>
 8007d92:	4602      	mov	r2, r0
 8007d94:	460b      	mov	r3, r1
 8007d96:	4613      	mov	r3, r2
 8007d98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d9a:	e053      	b.n	8007e44 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d9c:	4b35      	ldr	r3, [pc, #212]	; (8007e74 <HAL_RCC_GetSysClockFreq+0x180>)
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	099b      	lsrs	r3, r3, #6
 8007da2:	2200      	movs	r2, #0
 8007da4:	613b      	str	r3, [r7, #16]
 8007da6:	617a      	str	r2, [r7, #20]
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007dae:	f04f 0b00 	mov.w	fp, #0
 8007db2:	4652      	mov	r2, sl
 8007db4:	465b      	mov	r3, fp
 8007db6:	f04f 0000 	mov.w	r0, #0
 8007dba:	f04f 0100 	mov.w	r1, #0
 8007dbe:	0159      	lsls	r1, r3, #5
 8007dc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007dc4:	0150      	lsls	r0, r2, #5
 8007dc6:	4602      	mov	r2, r0
 8007dc8:	460b      	mov	r3, r1
 8007dca:	ebb2 080a 	subs.w	r8, r2, sl
 8007dce:	eb63 090b 	sbc.w	r9, r3, fp
 8007dd2:	f04f 0200 	mov.w	r2, #0
 8007dd6:	f04f 0300 	mov.w	r3, #0
 8007dda:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007dde:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007de2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007de6:	ebb2 0408 	subs.w	r4, r2, r8
 8007dea:	eb63 0509 	sbc.w	r5, r3, r9
 8007dee:	f04f 0200 	mov.w	r2, #0
 8007df2:	f04f 0300 	mov.w	r3, #0
 8007df6:	00eb      	lsls	r3, r5, #3
 8007df8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007dfc:	00e2      	lsls	r2, r4, #3
 8007dfe:	4614      	mov	r4, r2
 8007e00:	461d      	mov	r5, r3
 8007e02:	eb14 030a 	adds.w	r3, r4, sl
 8007e06:	603b      	str	r3, [r7, #0]
 8007e08:	eb45 030b 	adc.w	r3, r5, fp
 8007e0c:	607b      	str	r3, [r7, #4]
 8007e0e:	f04f 0200 	mov.w	r2, #0
 8007e12:	f04f 0300 	mov.w	r3, #0
 8007e16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007e1a:	4629      	mov	r1, r5
 8007e1c:	028b      	lsls	r3, r1, #10
 8007e1e:	4621      	mov	r1, r4
 8007e20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007e24:	4621      	mov	r1, r4
 8007e26:	028a      	lsls	r2, r1, #10
 8007e28:	4610      	mov	r0, r2
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e2e:	2200      	movs	r2, #0
 8007e30:	60bb      	str	r3, [r7, #8]
 8007e32:	60fa      	str	r2, [r7, #12]
 8007e34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e38:	f7f8 fa52 	bl	80002e0 <__aeabi_uldivmod>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	460b      	mov	r3, r1
 8007e40:	4613      	mov	r3, r2
 8007e42:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007e44:	4b0b      	ldr	r3, [pc, #44]	; (8007e74 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	0c1b      	lsrs	r3, r3, #16
 8007e4a:	f003 0303 	and.w	r3, r3, #3
 8007e4e:	3301      	adds	r3, #1
 8007e50:	005b      	lsls	r3, r3, #1
 8007e52:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8007e54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007e5e:	e002      	b.n	8007e66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007e60:	4b05      	ldr	r3, [pc, #20]	; (8007e78 <HAL_RCC_GetSysClockFreq+0x184>)
 8007e62:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007e64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3740      	adds	r7, #64	; 0x40
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e72:	bf00      	nop
 8007e74:	40023800 	.word	0x40023800
 8007e78:	00f42400 	.word	0x00f42400
 8007e7c:	017d7840 	.word	0x017d7840

08007e80 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e80:	b480      	push	{r7}
 8007e82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e84:	4b03      	ldr	r3, [pc, #12]	; (8007e94 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e86:	681b      	ldr	r3, [r3, #0]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	20000000 	.word	0x20000000

08007e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007e9c:	f7ff fff0 	bl	8007e80 <HAL_RCC_GetHCLKFreq>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	4b05      	ldr	r3, [pc, #20]	; (8007eb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	0a9b      	lsrs	r3, r3, #10
 8007ea8:	f003 0307 	and.w	r3, r3, #7
 8007eac:	4903      	ldr	r1, [pc, #12]	; (8007ebc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007eae:	5ccb      	ldrb	r3, [r1, r3]
 8007eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	40023800 	.word	0x40023800
 8007ebc:	0800ce94 	.word	0x0800ce94

08007ec0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	220f      	movs	r2, #15
 8007ece:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007ed0:	4b12      	ldr	r3, [pc, #72]	; (8007f1c <HAL_RCC_GetClockConfig+0x5c>)
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	f003 0203 	and.w	r2, r3, #3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007edc:	4b0f      	ldr	r3, [pc, #60]	; (8007f1c <HAL_RCC_GetClockConfig+0x5c>)
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007ee8:	4b0c      	ldr	r3, [pc, #48]	; (8007f1c <HAL_RCC_GetClockConfig+0x5c>)
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007ef4:	4b09      	ldr	r3, [pc, #36]	; (8007f1c <HAL_RCC_GetClockConfig+0x5c>)
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	08db      	lsrs	r3, r3, #3
 8007efa:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007f02:	4b07      	ldr	r3, [pc, #28]	; (8007f20 <HAL_RCC_GetClockConfig+0x60>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f003 020f 	and.w	r2, r3, #15
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	601a      	str	r2, [r3, #0]
}
 8007f0e:	bf00      	nop
 8007f10:	370c      	adds	r7, #12
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	40023800 	.word	0x40023800
 8007f20:	40023c00 	.word	0x40023c00

08007f24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b088      	sub	sp, #32
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007f30:	2300      	movs	r3, #0
 8007f32:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007f34:	2300      	movs	r3, #0
 8007f36:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 0301 	and.w	r3, r3, #1
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d012      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007f4c:	4b69      	ldr	r3, [pc, #420]	; (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	4a68      	ldr	r2, [pc, #416]	; (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f52:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007f56:	6093      	str	r3, [r2, #8]
 8007f58:	4b66      	ldr	r3, [pc, #408]	; (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f5a:	689a      	ldr	r2, [r3, #8]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f60:	4964      	ldr	r1, [pc, #400]	; (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f62:	4313      	orrs	r3, r2
 8007f64:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d101      	bne.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d017      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f7e:	4b5d      	ldr	r3, [pc, #372]	; (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f8c:	4959      	ldr	r1, [pc, #356]	; (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f9c:	d101      	bne.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d101      	bne.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007faa:	2301      	movs	r3, #1
 8007fac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d017      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007fba:	4b4e      	ldr	r3, [pc, #312]	; (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fc0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc8:	494a      	ldr	r1, [pc, #296]	; (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fd8:	d101      	bne.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d101      	bne.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d001      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f003 0320 	and.w	r3, r3, #32
 8008002:	2b00      	cmp	r3, #0
 8008004:	f000 808b 	beq.w	800811e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008008:	4b3a      	ldr	r3, [pc, #232]	; (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800800a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800c:	4a39      	ldr	r2, [pc, #228]	; (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800800e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008012:	6413      	str	r3, [r2, #64]	; 0x40
 8008014:	4b37      	ldr	r3, [pc, #220]	; (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800801c:	60bb      	str	r3, [r7, #8]
 800801e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008020:	4b35      	ldr	r3, [pc, #212]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a34      	ldr	r2, [pc, #208]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800802a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800802c:	f7fb f918 	bl	8003260 <HAL_GetTick>
 8008030:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008032:	e008      	b.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008034:	f7fb f914 	bl	8003260 <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	2b64      	cmp	r3, #100	; 0x64
 8008040:	d901      	bls.n	8008046 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	e38f      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008046:	4b2c      	ldr	r3, [pc, #176]	; (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800804e:	2b00      	cmp	r3, #0
 8008050:	d0f0      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008052:	4b28      	ldr	r3, [pc, #160]	; (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800805a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d035      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800806a:	693a      	ldr	r2, [r7, #16]
 800806c:	429a      	cmp	r2, r3
 800806e:	d02e      	beq.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008070:	4b20      	ldr	r3, [pc, #128]	; (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008078:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800807a:	4b1e      	ldr	r3, [pc, #120]	; (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800807c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800807e:	4a1d      	ldr	r2, [pc, #116]	; (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008084:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008086:	4b1b      	ldr	r3, [pc, #108]	; (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800808a:	4a1a      	ldr	r2, [pc, #104]	; (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800808c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008090:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008092:	4a18      	ldr	r2, [pc, #96]	; (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008098:	4b16      	ldr	r3, [pc, #88]	; (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800809a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800809c:	f003 0301 	and.w	r3, r3, #1
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d114      	bne.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080a4:	f7fb f8dc 	bl	8003260 <HAL_GetTick>
 80080a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080aa:	e00a      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080ac:	f7fb f8d8 	bl	8003260 <HAL_GetTick>
 80080b0:	4602      	mov	r2, r0
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d901      	bls.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	e351      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080c2:	4b0c      	ldr	r3, [pc, #48]	; (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080c6:	f003 0302 	and.w	r3, r3, #2
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d0ee      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080da:	d111      	bne.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80080dc:	4b05      	ldr	r3, [pc, #20]	; (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80080e8:	4b04      	ldr	r3, [pc, #16]	; (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80080ea:	400b      	ands	r3, r1
 80080ec:	4901      	ldr	r1, [pc, #4]	; (80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	608b      	str	r3, [r1, #8]
 80080f2:	e00b      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80080f4:	40023800 	.word	0x40023800
 80080f8:	40007000 	.word	0x40007000
 80080fc:	0ffffcff 	.word	0x0ffffcff
 8008100:	4bac      	ldr	r3, [pc, #688]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	4aab      	ldr	r2, [pc, #684]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008106:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800810a:	6093      	str	r3, [r2, #8]
 800810c:	4ba9      	ldr	r3, [pc, #676]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800810e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008118:	49a6      	ldr	r1, [pc, #664]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800811a:	4313      	orrs	r3, r2
 800811c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 0310 	and.w	r3, r3, #16
 8008126:	2b00      	cmp	r3, #0
 8008128:	d010      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800812a:	4ba2      	ldr	r3, [pc, #648]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800812c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008130:	4aa0      	ldr	r2, [pc, #640]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008132:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008136:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800813a:	4b9e      	ldr	r3, [pc, #632]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800813c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008144:	499b      	ldr	r1, [pc, #620]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008146:	4313      	orrs	r3, r2
 8008148:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008154:	2b00      	cmp	r3, #0
 8008156:	d00a      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008158:	4b96      	ldr	r3, [pc, #600]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800815a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800815e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008166:	4993      	ldr	r1, [pc, #588]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008168:	4313      	orrs	r3, r2
 800816a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00a      	beq.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800817a:	4b8e      	ldr	r3, [pc, #568]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800817c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008180:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008188:	498a      	ldr	r1, [pc, #552]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800818a:	4313      	orrs	r3, r2
 800818c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00a      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800819c:	4b85      	ldr	r3, [pc, #532]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800819e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081aa:	4982      	ldr	r1, [pc, #520]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80081ac:	4313      	orrs	r3, r2
 80081ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d00a      	beq.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80081be:	4b7d      	ldr	r3, [pc, #500]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80081c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081cc:	4979      	ldr	r1, [pc, #484]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80081ce:	4313      	orrs	r3, r2
 80081d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00a      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80081e0:	4b74      	ldr	r3, [pc, #464]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80081e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081e6:	f023 0203 	bic.w	r2, r3, #3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ee:	4971      	ldr	r1, [pc, #452]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80081f0:	4313      	orrs	r3, r2
 80081f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00a      	beq.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008202:	4b6c      	ldr	r3, [pc, #432]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008208:	f023 020c 	bic.w	r2, r3, #12
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008210:	4968      	ldr	r1, [pc, #416]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008212:	4313      	orrs	r3, r2
 8008214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008220:	2b00      	cmp	r3, #0
 8008222:	d00a      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008224:	4b63      	ldr	r3, [pc, #396]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800822a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008232:	4960      	ldr	r1, [pc, #384]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008234:	4313      	orrs	r3, r2
 8008236:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00a      	beq.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008246:	4b5b      	ldr	r3, [pc, #364]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800824c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008254:	4957      	ldr	r1, [pc, #348]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008256:	4313      	orrs	r3, r2
 8008258:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00a      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008268:	4b52      	ldr	r3, [pc, #328]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800826a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800826e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008276:	494f      	ldr	r1, [pc, #316]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008278:	4313      	orrs	r3, r2
 800827a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00a      	beq.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800828a:	4b4a      	ldr	r3, [pc, #296]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800828c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008290:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008298:	4946      	ldr	r1, [pc, #280]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800829a:	4313      	orrs	r3, r2
 800829c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00a      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80082ac:	4b41      	ldr	r3, [pc, #260]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80082ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082ba:	493e      	ldr	r1, [pc, #248]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80082bc:	4313      	orrs	r3, r2
 80082be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00a      	beq.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80082ce:	4b39      	ldr	r3, [pc, #228]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80082d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082dc:	4935      	ldr	r1, [pc, #212]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80082de:	4313      	orrs	r3, r2
 80082e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00a      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80082f0:	4b30      	ldr	r3, [pc, #192]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80082f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082f6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082fe:	492d      	ldr	r1, [pc, #180]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008300:	4313      	orrs	r3, r2
 8008302:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800830e:	2b00      	cmp	r3, #0
 8008310:	d011      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008312:	4b28      	ldr	r3, [pc, #160]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008318:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008320:	4924      	ldr	r1, [pc, #144]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008322:	4313      	orrs	r3, r2
 8008324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800832c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008330:	d101      	bne.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008332:	2301      	movs	r3, #1
 8008334:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f003 0308 	and.w	r3, r3, #8
 800833e:	2b00      	cmp	r3, #0
 8008340:	d001      	beq.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008342:	2301      	movs	r3, #1
 8008344:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d00a      	beq.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008352:	4b18      	ldr	r3, [pc, #96]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008358:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008360:	4914      	ldr	r1, [pc, #80]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008362:	4313      	orrs	r3, r2
 8008364:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00b      	beq.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008374:	4b0f      	ldr	r3, [pc, #60]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800837a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008384:	490b      	ldr	r1, [pc, #44]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008386:	4313      	orrs	r3, r2
 8008388:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00f      	beq.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8008398:	4b06      	ldr	r3, [pc, #24]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800839a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800839e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083a8:	4902      	ldr	r1, [pc, #8]	; (80083b4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80083aa:	4313      	orrs	r3, r2
 80083ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80083b0:	e002      	b.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80083b2:	bf00      	nop
 80083b4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00b      	beq.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80083c4:	4b8a      	ldr	r3, [pc, #552]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80083c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083d4:	4986      	ldr	r1, [pc, #536]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80083d6:	4313      	orrs	r3, r2
 80083d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d00b      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80083e8:	4b81      	ldr	r3, [pc, #516]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80083ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083f8:	497d      	ldr	r1, [pc, #500]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80083fa:	4313      	orrs	r3, r2
 80083fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	2b01      	cmp	r3, #1
 8008404:	d006      	beq.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800840e:	2b00      	cmp	r3, #0
 8008410:	f000 80d6 	beq.w	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008414:	4b76      	ldr	r3, [pc, #472]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a75      	ldr	r2, [pc, #468]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800841a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800841e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008420:	f7fa ff1e 	bl	8003260 <HAL_GetTick>
 8008424:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008426:	e008      	b.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008428:	f7fa ff1a 	bl	8003260 <HAL_GetTick>
 800842c:	4602      	mov	r2, r0
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	2b64      	cmp	r3, #100	; 0x64
 8008434:	d901      	bls.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008436:	2303      	movs	r3, #3
 8008438:	e195      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800843a:	4b6d      	ldr	r3, [pc, #436]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1f0      	bne.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 0301 	and.w	r3, r3, #1
 800844e:	2b00      	cmp	r3, #0
 8008450:	d021      	beq.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008456:	2b00      	cmp	r3, #0
 8008458:	d11d      	bne.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800845a:	4b65      	ldr	r3, [pc, #404]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800845c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008460:	0c1b      	lsrs	r3, r3, #16
 8008462:	f003 0303 	and.w	r3, r3, #3
 8008466:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008468:	4b61      	ldr	r3, [pc, #388]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800846a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800846e:	0e1b      	lsrs	r3, r3, #24
 8008470:	f003 030f 	and.w	r3, r3, #15
 8008474:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	019a      	lsls	r2, r3, #6
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	041b      	lsls	r3, r3, #16
 8008480:	431a      	orrs	r2, r3
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	061b      	lsls	r3, r3, #24
 8008486:	431a      	orrs	r2, r3
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	071b      	lsls	r3, r3, #28
 800848e:	4958      	ldr	r1, [pc, #352]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008490:	4313      	orrs	r3, r2
 8008492:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d004      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x588>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084aa:	d00a      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d02e      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084c0:	d129      	bne.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80084c2:	4b4b      	ldr	r3, [pc, #300]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80084c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084c8:	0c1b      	lsrs	r3, r3, #16
 80084ca:	f003 0303 	and.w	r3, r3, #3
 80084ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80084d0:	4b47      	ldr	r3, [pc, #284]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80084d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084d6:	0f1b      	lsrs	r3, r3, #28
 80084d8:	f003 0307 	and.w	r3, r3, #7
 80084dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	019a      	lsls	r2, r3, #6
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	041b      	lsls	r3, r3, #16
 80084e8:	431a      	orrs	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	061b      	lsls	r3, r3, #24
 80084f0:	431a      	orrs	r2, r3
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	071b      	lsls	r3, r3, #28
 80084f6:	493e      	ldr	r1, [pc, #248]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80084f8:	4313      	orrs	r3, r2
 80084fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80084fe:	4b3c      	ldr	r3, [pc, #240]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008504:	f023 021f 	bic.w	r2, r3, #31
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850c:	3b01      	subs	r3, #1
 800850e:	4938      	ldr	r1, [pc, #224]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008510:	4313      	orrs	r3, r2
 8008512:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800851e:	2b00      	cmp	r3, #0
 8008520:	d01d      	beq.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008522:	4b33      	ldr	r3, [pc, #204]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008528:	0e1b      	lsrs	r3, r3, #24
 800852a:	f003 030f 	and.w	r3, r3, #15
 800852e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008530:	4b2f      	ldr	r3, [pc, #188]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008536:	0f1b      	lsrs	r3, r3, #28
 8008538:	f003 0307 	and.w	r3, r3, #7
 800853c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	019a      	lsls	r2, r3, #6
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	041b      	lsls	r3, r3, #16
 800854a:	431a      	orrs	r2, r3
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	061b      	lsls	r3, r3, #24
 8008550:	431a      	orrs	r2, r3
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	071b      	lsls	r3, r3, #28
 8008556:	4926      	ldr	r1, [pc, #152]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008558:	4313      	orrs	r3, r2
 800855a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d011      	beq.n	800858e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	019a      	lsls	r2, r3, #6
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	691b      	ldr	r3, [r3, #16]
 8008574:	041b      	lsls	r3, r3, #16
 8008576:	431a      	orrs	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	061b      	lsls	r3, r3, #24
 800857e:	431a      	orrs	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	071b      	lsls	r3, r3, #28
 8008586:	491a      	ldr	r1, [pc, #104]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008588:	4313      	orrs	r3, r2
 800858a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800858e:	4b18      	ldr	r3, [pc, #96]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a17      	ldr	r2, [pc, #92]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008594:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008598:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800859a:	f7fa fe61 	bl	8003260 <HAL_GetTick>
 800859e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80085a0:	e008      	b.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80085a2:	f7fa fe5d 	bl	8003260 <HAL_GetTick>
 80085a6:	4602      	mov	r2, r0
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	2b64      	cmp	r3, #100	; 0x64
 80085ae:	d901      	bls.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80085b0:	2303      	movs	r3, #3
 80085b2:	e0d8      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80085b4:	4b0e      	ldr	r3, [pc, #56]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d0f0      	beq.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	f040 80ce 	bne.w	8008764 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80085c8:	4b09      	ldr	r3, [pc, #36]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a08      	ldr	r2, [pc, #32]	; (80085f0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80085ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085d4:	f7fa fe44 	bl	8003260 <HAL_GetTick>
 80085d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80085da:	e00b      	b.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80085dc:	f7fa fe40 	bl	8003260 <HAL_GetTick>
 80085e0:	4602      	mov	r2, r0
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	2b64      	cmp	r3, #100	; 0x64
 80085e8:	d904      	bls.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80085ea:	2303      	movs	r3, #3
 80085ec:	e0bb      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80085ee:	bf00      	nop
 80085f0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80085f4:	4b5e      	ldr	r3, [pc, #376]	; (8008770 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80085fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008600:	d0ec      	beq.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800860a:	2b00      	cmp	r3, #0
 800860c:	d003      	beq.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008612:	2b00      	cmp	r3, #0
 8008614:	d009      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800861e:	2b00      	cmp	r3, #0
 8008620:	d02e      	beq.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008626:	2b00      	cmp	r3, #0
 8008628:	d12a      	bne.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800862a:	4b51      	ldr	r3, [pc, #324]	; (8008770 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800862c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008630:	0c1b      	lsrs	r3, r3, #16
 8008632:	f003 0303 	and.w	r3, r3, #3
 8008636:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008638:	4b4d      	ldr	r3, [pc, #308]	; (8008770 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800863a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800863e:	0f1b      	lsrs	r3, r3, #28
 8008640:	f003 0307 	and.w	r3, r3, #7
 8008644:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	695b      	ldr	r3, [r3, #20]
 800864a:	019a      	lsls	r2, r3, #6
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	041b      	lsls	r3, r3, #16
 8008650:	431a      	orrs	r2, r3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	061b      	lsls	r3, r3, #24
 8008658:	431a      	orrs	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	071b      	lsls	r3, r3, #28
 800865e:	4944      	ldr	r1, [pc, #272]	; (8008770 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008660:	4313      	orrs	r3, r2
 8008662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008666:	4b42      	ldr	r3, [pc, #264]	; (8008770 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800866c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008674:	3b01      	subs	r3, #1
 8008676:	021b      	lsls	r3, r3, #8
 8008678:	493d      	ldr	r1, [pc, #244]	; (8008770 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800867a:	4313      	orrs	r3, r2
 800867c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008688:	2b00      	cmp	r3, #0
 800868a:	d022      	beq.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008690:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008694:	d11d      	bne.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008696:	4b36      	ldr	r3, [pc, #216]	; (8008770 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800869c:	0e1b      	lsrs	r3, r3, #24
 800869e:	f003 030f 	and.w	r3, r3, #15
 80086a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80086a4:	4b32      	ldr	r3, [pc, #200]	; (8008770 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80086a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086aa:	0f1b      	lsrs	r3, r3, #28
 80086ac:	f003 0307 	and.w	r3, r3, #7
 80086b0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	019a      	lsls	r2, r3, #6
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a1b      	ldr	r3, [r3, #32]
 80086bc:	041b      	lsls	r3, r3, #16
 80086be:	431a      	orrs	r2, r3
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	061b      	lsls	r3, r3, #24
 80086c4:	431a      	orrs	r2, r3
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	071b      	lsls	r3, r3, #28
 80086ca:	4929      	ldr	r1, [pc, #164]	; (8008770 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80086cc:	4313      	orrs	r3, r2
 80086ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f003 0308 	and.w	r3, r3, #8
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d028      	beq.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80086de:	4b24      	ldr	r3, [pc, #144]	; (8008770 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80086e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086e4:	0e1b      	lsrs	r3, r3, #24
 80086e6:	f003 030f 	and.w	r3, r3, #15
 80086ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80086ec:	4b20      	ldr	r3, [pc, #128]	; (8008770 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80086ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086f2:	0c1b      	lsrs	r3, r3, #16
 80086f4:	f003 0303 	and.w	r3, r3, #3
 80086f8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	695b      	ldr	r3, [r3, #20]
 80086fe:	019a      	lsls	r2, r3, #6
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	041b      	lsls	r3, r3, #16
 8008704:	431a      	orrs	r2, r3
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	061b      	lsls	r3, r3, #24
 800870a:	431a      	orrs	r2, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	69db      	ldr	r3, [r3, #28]
 8008710:	071b      	lsls	r3, r3, #28
 8008712:	4917      	ldr	r1, [pc, #92]	; (8008770 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008714:	4313      	orrs	r3, r2
 8008716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800871a:	4b15      	ldr	r3, [pc, #84]	; (8008770 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800871c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008720:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008728:	4911      	ldr	r1, [pc, #68]	; (8008770 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800872a:	4313      	orrs	r3, r2
 800872c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008730:	4b0f      	ldr	r3, [pc, #60]	; (8008770 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a0e      	ldr	r2, [pc, #56]	; (8008770 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800873a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800873c:	f7fa fd90 	bl	8003260 <HAL_GetTick>
 8008740:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008742:	e008      	b.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008744:	f7fa fd8c 	bl	8003260 <HAL_GetTick>
 8008748:	4602      	mov	r2, r0
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	2b64      	cmp	r3, #100	; 0x64
 8008750:	d901      	bls.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	e007      	b.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008756:	4b06      	ldr	r3, [pc, #24]	; (8008770 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800875e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008762:	d1ef      	bne.n	8008744 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3720      	adds	r7, #32
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
 800876e:	bf00      	nop
 8008770:	40023800 	.word	0x40023800

08008774 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d101      	bne.n	8008788 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	e025      	b.n	80087d4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800878e:	b2db      	uxtb	r3, r3
 8008790:	2b00      	cmp	r3, #0
 8008792:	d106      	bne.n	80087a2 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f7f8 fd21 	bl	80011e4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2202      	movs	r2, #2
 80087a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	3304      	adds	r3, #4
 80087b2:	4619      	mov	r1, r3
 80087b4:	4610      	mov	r0, r2
 80087b6:	f000 fb43 	bl	8008e40 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6818      	ldr	r0, [r3, #0]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	461a      	mov	r2, r3
 80087c4:	6839      	ldr	r1, [r7, #0]
 80087c6:	f000 fb97 	bl	8008ef8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2201      	movs	r2, #1
 80087ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b086      	sub	sp, #24
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80087ee:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80087f0:	7dfb      	ldrb	r3, [r7, #23]
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d101      	bne.n	80087fa <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80087f6:	2302      	movs	r3, #2
 80087f8:	e021      	b.n	800883e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80087fa:	7dfb      	ldrb	r3, [r7, #23]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d002      	beq.n	8008806 <HAL_SDRAM_SendCommand+0x2a>
 8008800:	7dfb      	ldrb	r3, [r7, #23]
 8008802:	2b05      	cmp	r3, #5
 8008804:	d118      	bne.n	8008838 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2202      	movs	r2, #2
 800880a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	68b9      	ldr	r1, [r7, #8]
 8008816:	4618      	mov	r0, r3
 8008818:	f000 fbd8 	bl	8008fcc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2b02      	cmp	r3, #2
 8008822:	d104      	bne.n	800882e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2205      	movs	r2, #5
 8008828:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800882c:	e006      	b.n	800883c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2201      	movs	r2, #1
 8008832:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008836:	e001      	b.n	800883c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	e000      	b.n	800883e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3718      	adds	r7, #24
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b082      	sub	sp, #8
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
 800884e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008856:	b2db      	uxtb	r3, r3
 8008858:	2b02      	cmp	r3, #2
 800885a:	d101      	bne.n	8008860 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800885c:	2302      	movs	r3, #2
 800885e:	e016      	b.n	800888e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008866:	b2db      	uxtb	r3, r3
 8008868:	2b01      	cmp	r3, #1
 800886a:	d10f      	bne.n	800888c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2202      	movs	r2, #2
 8008870:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	4618      	mov	r0, r3
 800887c:	f000 fbca 	bl	8009014 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8008888:	2300      	movs	r3, #0
 800888a:	e000      	b.n	800888e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800888c:	2301      	movs	r3, #1
}
 800888e:	4618      	mov	r0, r3
 8008890:	3708      	adds	r7, #8
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b082      	sub	sp, #8
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d101      	bne.n	80088a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e049      	b.n	800893c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d106      	bne.n	80088c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f7f8 fbb7 	bl	8001030 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2202      	movs	r2, #2
 80088c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	3304      	adds	r3, #4
 80088d2:	4619      	mov	r1, r3
 80088d4:	4610      	mov	r0, r2
 80088d6:	f000 f9f5 	bl	8008cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2201      	movs	r2, #1
 80088de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2201      	movs	r2, #1
 80088e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2201      	movs	r2, #1
 80088ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2201      	movs	r2, #1
 80088fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2201      	movs	r2, #1
 8008916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2201      	movs	r2, #1
 8008926:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2201      	movs	r2, #1
 800892e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3708      	adds	r7, #8
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008952:	b2db      	uxtb	r3, r3
 8008954:	2b01      	cmp	r3, #1
 8008956:	d001      	beq.n	800895c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008958:	2301      	movs	r3, #1
 800895a:	e054      	b.n	8008a06 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2202      	movs	r2, #2
 8008960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	68da      	ldr	r2, [r3, #12]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f042 0201 	orr.w	r2, r2, #1
 8008972:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a26      	ldr	r2, [pc, #152]	; (8008a14 <HAL_TIM_Base_Start_IT+0xd0>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d022      	beq.n	80089c4 <HAL_TIM_Base_Start_IT+0x80>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008986:	d01d      	beq.n	80089c4 <HAL_TIM_Base_Start_IT+0x80>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a22      	ldr	r2, [pc, #136]	; (8008a18 <HAL_TIM_Base_Start_IT+0xd4>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d018      	beq.n	80089c4 <HAL_TIM_Base_Start_IT+0x80>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a21      	ldr	r2, [pc, #132]	; (8008a1c <HAL_TIM_Base_Start_IT+0xd8>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d013      	beq.n	80089c4 <HAL_TIM_Base_Start_IT+0x80>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a1f      	ldr	r2, [pc, #124]	; (8008a20 <HAL_TIM_Base_Start_IT+0xdc>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d00e      	beq.n	80089c4 <HAL_TIM_Base_Start_IT+0x80>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a1e      	ldr	r2, [pc, #120]	; (8008a24 <HAL_TIM_Base_Start_IT+0xe0>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d009      	beq.n	80089c4 <HAL_TIM_Base_Start_IT+0x80>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a1c      	ldr	r2, [pc, #112]	; (8008a28 <HAL_TIM_Base_Start_IT+0xe4>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d004      	beq.n	80089c4 <HAL_TIM_Base_Start_IT+0x80>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a1b      	ldr	r2, [pc, #108]	; (8008a2c <HAL_TIM_Base_Start_IT+0xe8>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d115      	bne.n	80089f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	689a      	ldr	r2, [r3, #8]
 80089ca:	4b19      	ldr	r3, [pc, #100]	; (8008a30 <HAL_TIM_Base_Start_IT+0xec>)
 80089cc:	4013      	ands	r3, r2
 80089ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2b06      	cmp	r3, #6
 80089d4:	d015      	beq.n	8008a02 <HAL_TIM_Base_Start_IT+0xbe>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089dc:	d011      	beq.n	8008a02 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681a      	ldr	r2, [r3, #0]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f042 0201 	orr.w	r2, r2, #1
 80089ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089ee:	e008      	b.n	8008a02 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f042 0201 	orr.w	r2, r2, #1
 80089fe:	601a      	str	r2, [r3, #0]
 8008a00:	e000      	b.n	8008a04 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3714      	adds	r7, #20
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop
 8008a14:	40010000 	.word	0x40010000
 8008a18:	40000400 	.word	0x40000400
 8008a1c:	40000800 	.word	0x40000800
 8008a20:	40000c00 	.word	0x40000c00
 8008a24:	40010400 	.word	0x40010400
 8008a28:	40014000 	.word	0x40014000
 8008a2c:	40001800 	.word	0x40001800
 8008a30:	00010007 	.word	0x00010007

08008a34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	f003 0302 	and.w	r3, r3, #2
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d122      	bne.n	8008a90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	f003 0302 	and.w	r3, r3, #2
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d11b      	bne.n	8008a90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f06f 0202 	mvn.w	r2, #2
 8008a60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2201      	movs	r2, #1
 8008a66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	699b      	ldr	r3, [r3, #24]
 8008a6e:	f003 0303 	and.w	r3, r3, #3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d003      	beq.n	8008a7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f000 f905 	bl	8008c86 <HAL_TIM_IC_CaptureCallback>
 8008a7c:	e005      	b.n	8008a8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 f8f7 	bl	8008c72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 f908 	bl	8008c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	691b      	ldr	r3, [r3, #16]
 8008a96:	f003 0304 	and.w	r3, r3, #4
 8008a9a:	2b04      	cmp	r3, #4
 8008a9c:	d122      	bne.n	8008ae4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	f003 0304 	and.w	r3, r3, #4
 8008aa8:	2b04      	cmp	r3, #4
 8008aaa:	d11b      	bne.n	8008ae4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f06f 0204 	mvn.w	r2, #4
 8008ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2202      	movs	r2, #2
 8008aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	699b      	ldr	r3, [r3, #24]
 8008ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d003      	beq.n	8008ad2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f8db 	bl	8008c86 <HAL_TIM_IC_CaptureCallback>
 8008ad0:	e005      	b.n	8008ade <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f000 f8cd 	bl	8008c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f000 f8de 	bl	8008c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	f003 0308 	and.w	r3, r3, #8
 8008aee:	2b08      	cmp	r3, #8
 8008af0:	d122      	bne.n	8008b38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	f003 0308 	and.w	r3, r3, #8
 8008afc:	2b08      	cmp	r3, #8
 8008afe:	d11b      	bne.n	8008b38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f06f 0208 	mvn.w	r2, #8
 8008b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2204      	movs	r2, #4
 8008b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	69db      	ldr	r3, [r3, #28]
 8008b16:	f003 0303 	and.w	r3, r3, #3
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d003      	beq.n	8008b26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f8b1 	bl	8008c86 <HAL_TIM_IC_CaptureCallback>
 8008b24:	e005      	b.n	8008b32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 f8a3 	bl	8008c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 f8b4 	bl	8008c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	f003 0310 	and.w	r3, r3, #16
 8008b42:	2b10      	cmp	r3, #16
 8008b44:	d122      	bne.n	8008b8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	f003 0310 	and.w	r3, r3, #16
 8008b50:	2b10      	cmp	r3, #16
 8008b52:	d11b      	bne.n	8008b8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f06f 0210 	mvn.w	r2, #16
 8008b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2208      	movs	r2, #8
 8008b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	69db      	ldr	r3, [r3, #28]
 8008b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d003      	beq.n	8008b7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 f887 	bl	8008c86 <HAL_TIM_IC_CaptureCallback>
 8008b78:	e005      	b.n	8008b86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f879 	bl	8008c72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 f88a 	bl	8008c9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	f003 0301 	and.w	r3, r3, #1
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d10e      	bne.n	8008bb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	f003 0301 	and.w	r3, r3, #1
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d107      	bne.n	8008bb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f06f 0201 	mvn.w	r2, #1
 8008bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7f8 f83e 	bl	8000c34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bc2:	2b80      	cmp	r3, #128	; 0x80
 8008bc4:	d10e      	bne.n	8008be4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bd0:	2b80      	cmp	r3, #128	; 0x80
 8008bd2:	d107      	bne.n	8008be4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008bdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 f91a 	bl	8008e18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	691b      	ldr	r3, [r3, #16]
 8008bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bf2:	d10e      	bne.n	8008c12 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bfe:	2b80      	cmp	r3, #128	; 0x80
 8008c00:	d107      	bne.n	8008c12 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 f90d 	bl	8008e2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c1c:	2b40      	cmp	r3, #64	; 0x40
 8008c1e:	d10e      	bne.n	8008c3e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	68db      	ldr	r3, [r3, #12]
 8008c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c2a:	2b40      	cmp	r3, #64	; 0x40
 8008c2c:	d107      	bne.n	8008c3e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f838 	bl	8008cae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	f003 0320 	and.w	r3, r3, #32
 8008c48:	2b20      	cmp	r3, #32
 8008c4a:	d10e      	bne.n	8008c6a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	f003 0320 	and.w	r3, r3, #32
 8008c56:	2b20      	cmp	r3, #32
 8008c58:	d107      	bne.n	8008c6a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f06f 0220 	mvn.w	r2, #32
 8008c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 f8cd 	bl	8008e04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c6a:	bf00      	nop
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c72:	b480      	push	{r7}
 8008c74:	b083      	sub	sp, #12
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c7a:	bf00      	nop
 8008c7c:	370c      	adds	r7, #12
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr

08008c86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c86:	b480      	push	{r7}
 8008c88:	b083      	sub	sp, #12
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c8e:	bf00      	nop
 8008c90:	370c      	adds	r7, #12
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr

08008c9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c9a:	b480      	push	{r7}
 8008c9c:	b083      	sub	sp, #12
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ca2:	bf00      	nop
 8008ca4:	370c      	adds	r7, #12
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr

08008cae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008cae:	b480      	push	{r7}
 8008cb0:	b083      	sub	sp, #12
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008cb6:	bf00      	nop
 8008cb8:	370c      	adds	r7, #12
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
	...

08008cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4a40      	ldr	r2, [pc, #256]	; (8008dd8 <TIM_Base_SetConfig+0x114>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d013      	beq.n	8008d04 <TIM_Base_SetConfig+0x40>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ce2:	d00f      	beq.n	8008d04 <TIM_Base_SetConfig+0x40>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a3d      	ldr	r2, [pc, #244]	; (8008ddc <TIM_Base_SetConfig+0x118>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d00b      	beq.n	8008d04 <TIM_Base_SetConfig+0x40>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a3c      	ldr	r2, [pc, #240]	; (8008de0 <TIM_Base_SetConfig+0x11c>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d007      	beq.n	8008d04 <TIM_Base_SetConfig+0x40>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a3b      	ldr	r2, [pc, #236]	; (8008de4 <TIM_Base_SetConfig+0x120>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d003      	beq.n	8008d04 <TIM_Base_SetConfig+0x40>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a3a      	ldr	r2, [pc, #232]	; (8008de8 <TIM_Base_SetConfig+0x124>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d108      	bne.n	8008d16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a2f      	ldr	r2, [pc, #188]	; (8008dd8 <TIM_Base_SetConfig+0x114>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d02b      	beq.n	8008d76 <TIM_Base_SetConfig+0xb2>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d24:	d027      	beq.n	8008d76 <TIM_Base_SetConfig+0xb2>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a2c      	ldr	r2, [pc, #176]	; (8008ddc <TIM_Base_SetConfig+0x118>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d023      	beq.n	8008d76 <TIM_Base_SetConfig+0xb2>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4a2b      	ldr	r2, [pc, #172]	; (8008de0 <TIM_Base_SetConfig+0x11c>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d01f      	beq.n	8008d76 <TIM_Base_SetConfig+0xb2>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a2a      	ldr	r2, [pc, #168]	; (8008de4 <TIM_Base_SetConfig+0x120>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d01b      	beq.n	8008d76 <TIM_Base_SetConfig+0xb2>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a29      	ldr	r2, [pc, #164]	; (8008de8 <TIM_Base_SetConfig+0x124>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d017      	beq.n	8008d76 <TIM_Base_SetConfig+0xb2>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a28      	ldr	r2, [pc, #160]	; (8008dec <TIM_Base_SetConfig+0x128>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d013      	beq.n	8008d76 <TIM_Base_SetConfig+0xb2>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	4a27      	ldr	r2, [pc, #156]	; (8008df0 <TIM_Base_SetConfig+0x12c>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d00f      	beq.n	8008d76 <TIM_Base_SetConfig+0xb2>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4a26      	ldr	r2, [pc, #152]	; (8008df4 <TIM_Base_SetConfig+0x130>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d00b      	beq.n	8008d76 <TIM_Base_SetConfig+0xb2>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4a25      	ldr	r2, [pc, #148]	; (8008df8 <TIM_Base_SetConfig+0x134>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d007      	beq.n	8008d76 <TIM_Base_SetConfig+0xb2>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a24      	ldr	r2, [pc, #144]	; (8008dfc <TIM_Base_SetConfig+0x138>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d003      	beq.n	8008d76 <TIM_Base_SetConfig+0xb2>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4a23      	ldr	r2, [pc, #140]	; (8008e00 <TIM_Base_SetConfig+0x13c>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d108      	bne.n	8008d88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	68fa      	ldr	r2, [r7, #12]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	695b      	ldr	r3, [r3, #20]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	689a      	ldr	r2, [r3, #8]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	4a0a      	ldr	r2, [pc, #40]	; (8008dd8 <TIM_Base_SetConfig+0x114>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d003      	beq.n	8008dbc <TIM_Base_SetConfig+0xf8>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a0c      	ldr	r2, [pc, #48]	; (8008de8 <TIM_Base_SetConfig+0x124>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d103      	bne.n	8008dc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	691a      	ldr	r2, [r3, #16]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	615a      	str	r2, [r3, #20]
}
 8008dca:	bf00      	nop
 8008dcc:	3714      	adds	r7, #20
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr
 8008dd6:	bf00      	nop
 8008dd8:	40010000 	.word	0x40010000
 8008ddc:	40000400 	.word	0x40000400
 8008de0:	40000800 	.word	0x40000800
 8008de4:	40000c00 	.word	0x40000c00
 8008de8:	40010400 	.word	0x40010400
 8008dec:	40014000 	.word	0x40014000
 8008df0:	40014400 	.word	0x40014400
 8008df4:	40014800 	.word	0x40014800
 8008df8:	40001800 	.word	0x40001800
 8008dfc:	40001c00 	.word	0x40001c00
 8008e00:	40002000 	.word	0x40002000

08008e04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e0c:	bf00      	nop
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e20:	bf00      	nop
 8008e22:	370c      	adds	r7, #12
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008e34:	bf00      	nop
 8008e36:	370c      	adds	r7, #12
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d121      	bne.n	8008e96 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	4b27      	ldr	r3, [pc, #156]	; (8008ef4 <FMC_SDRAM_Init+0xb4>)
 8008e58:	4013      	ands	r3, r2
 8008e5a:	683a      	ldr	r2, [r7, #0]
 8008e5c:	6851      	ldr	r1, [r2, #4]
 8008e5e:	683a      	ldr	r2, [r7, #0]
 8008e60:	6892      	ldr	r2, [r2, #8]
 8008e62:	4311      	orrs	r1, r2
 8008e64:	683a      	ldr	r2, [r7, #0]
 8008e66:	68d2      	ldr	r2, [r2, #12]
 8008e68:	4311      	orrs	r1, r2
 8008e6a:	683a      	ldr	r2, [r7, #0]
 8008e6c:	6912      	ldr	r2, [r2, #16]
 8008e6e:	4311      	orrs	r1, r2
 8008e70:	683a      	ldr	r2, [r7, #0]
 8008e72:	6952      	ldr	r2, [r2, #20]
 8008e74:	4311      	orrs	r1, r2
 8008e76:	683a      	ldr	r2, [r7, #0]
 8008e78:	6992      	ldr	r2, [r2, #24]
 8008e7a:	4311      	orrs	r1, r2
 8008e7c:	683a      	ldr	r2, [r7, #0]
 8008e7e:	69d2      	ldr	r2, [r2, #28]
 8008e80:	4311      	orrs	r1, r2
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	6a12      	ldr	r2, [r2, #32]
 8008e86:	4311      	orrs	r1, r2
 8008e88:	683a      	ldr	r2, [r7, #0]
 8008e8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008e8c:	430a      	orrs	r2, r1
 8008e8e:	431a      	orrs	r2, r3
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	601a      	str	r2, [r3, #0]
 8008e94:	e026      	b.n	8008ee4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	69d9      	ldr	r1, [r3, #28]
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	6a1b      	ldr	r3, [r3, #32]
 8008ea6:	4319      	orrs	r1, r3
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eac:	430b      	orrs	r3, r1
 8008eae:	431a      	orrs	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685a      	ldr	r2, [r3, #4]
 8008eb8:	4b0e      	ldr	r3, [pc, #56]	; (8008ef4 <FMC_SDRAM_Init+0xb4>)
 8008eba:	4013      	ands	r3, r2
 8008ebc:	683a      	ldr	r2, [r7, #0]
 8008ebe:	6851      	ldr	r1, [r2, #4]
 8008ec0:	683a      	ldr	r2, [r7, #0]
 8008ec2:	6892      	ldr	r2, [r2, #8]
 8008ec4:	4311      	orrs	r1, r2
 8008ec6:	683a      	ldr	r2, [r7, #0]
 8008ec8:	68d2      	ldr	r2, [r2, #12]
 8008eca:	4311      	orrs	r1, r2
 8008ecc:	683a      	ldr	r2, [r7, #0]
 8008ece:	6912      	ldr	r2, [r2, #16]
 8008ed0:	4311      	orrs	r1, r2
 8008ed2:	683a      	ldr	r2, [r7, #0]
 8008ed4:	6952      	ldr	r2, [r2, #20]
 8008ed6:	4311      	orrs	r1, r2
 8008ed8:	683a      	ldr	r2, [r7, #0]
 8008eda:	6992      	ldr	r2, [r2, #24]
 8008edc:	430a      	orrs	r2, r1
 8008ede:	431a      	orrs	r2, r3
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	370c      	adds	r7, #12
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	ffff8000 	.word	0xffff8000

08008ef8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d128      	bne.n	8008f5c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	1e59      	subs	r1, r3, #1
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	3b01      	subs	r3, #1
 8008f1e:	011b      	lsls	r3, r3, #4
 8008f20:	4319      	orrs	r1, r3
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	689b      	ldr	r3, [r3, #8]
 8008f26:	3b01      	subs	r3, #1
 8008f28:	021b      	lsls	r3, r3, #8
 8008f2a:	4319      	orrs	r1, r3
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	3b01      	subs	r3, #1
 8008f32:	031b      	lsls	r3, r3, #12
 8008f34:	4319      	orrs	r1, r3
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	041b      	lsls	r3, r3, #16
 8008f3e:	4319      	orrs	r1, r3
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	695b      	ldr	r3, [r3, #20]
 8008f44:	3b01      	subs	r3, #1
 8008f46:	051b      	lsls	r3, r3, #20
 8008f48:	4319      	orrs	r1, r3
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	699b      	ldr	r3, [r3, #24]
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	061b      	lsls	r3, r3, #24
 8008f52:	430b      	orrs	r3, r1
 8008f54:	431a      	orrs	r2, r3
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	609a      	str	r2, [r3, #8]
 8008f5a:	e02d      	b.n	8008fb8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	689a      	ldr	r2, [r3, #8]
 8008f60:	4b19      	ldr	r3, [pc, #100]	; (8008fc8 <FMC_SDRAM_Timing_Init+0xd0>)
 8008f62:	4013      	ands	r3, r2
 8008f64:	68ba      	ldr	r2, [r7, #8]
 8008f66:	68d2      	ldr	r2, [r2, #12]
 8008f68:	3a01      	subs	r2, #1
 8008f6a:	0311      	lsls	r1, r2, #12
 8008f6c:	68ba      	ldr	r2, [r7, #8]
 8008f6e:	6952      	ldr	r2, [r2, #20]
 8008f70:	3a01      	subs	r2, #1
 8008f72:	0512      	lsls	r2, r2, #20
 8008f74:	430a      	orrs	r2, r1
 8008f76:	431a      	orrs	r2, r3
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	1e59      	subs	r1, r3, #1
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	3b01      	subs	r3, #1
 8008f90:	011b      	lsls	r3, r3, #4
 8008f92:	4319      	orrs	r1, r3
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	021b      	lsls	r3, r3, #8
 8008f9c:	4319      	orrs	r1, r3
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	041b      	lsls	r3, r3, #16
 8008fa6:	4319      	orrs	r1, r3
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	699b      	ldr	r3, [r3, #24]
 8008fac:	3b01      	subs	r3, #1
 8008fae:	061b      	lsls	r3, r3, #24
 8008fb0:	430b      	orrs	r3, r1
 8008fb2:	431a      	orrs	r2, r3
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3714      	adds	r7, #20
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop
 8008fc8:	ff0f0fff 	.word	0xff0f0fff

08008fcc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b085      	sub	sp, #20
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	691a      	ldr	r2, [r3, #16]
 8008fdc:	4b0c      	ldr	r3, [pc, #48]	; (8009010 <FMC_SDRAM_SendCommand+0x44>)
 8008fde:	4013      	ands	r3, r2
 8008fe0:	68ba      	ldr	r2, [r7, #8]
 8008fe2:	6811      	ldr	r1, [r2, #0]
 8008fe4:	68ba      	ldr	r2, [r7, #8]
 8008fe6:	6852      	ldr	r2, [r2, #4]
 8008fe8:	4311      	orrs	r1, r2
 8008fea:	68ba      	ldr	r2, [r7, #8]
 8008fec:	6892      	ldr	r2, [r2, #8]
 8008fee:	3a01      	subs	r2, #1
 8008ff0:	0152      	lsls	r2, r2, #5
 8008ff2:	4311      	orrs	r1, r2
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	68d2      	ldr	r2, [r2, #12]
 8008ff8:	0252      	lsls	r2, r2, #9
 8008ffa:	430a      	orrs	r2, r1
 8008ffc:	431a      	orrs	r2, r3
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	3714      	adds	r7, #20
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr
 8009010:	ffc00000 	.word	0xffc00000

08009014 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	695a      	ldr	r2, [r3, #20]
 8009022:	4b07      	ldr	r3, [pc, #28]	; (8009040 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8009024:	4013      	ands	r3, r2
 8009026:	683a      	ldr	r2, [r7, #0]
 8009028:	0052      	lsls	r2, r2, #1
 800902a:	431a      	orrs	r2, r3
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	370c      	adds	r7, #12
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	ffffc001 	.word	0xffffc001

08009044 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009044:	b480      	push	{r7}
 8009046:	b087      	sub	sp, #28
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	4613      	mov	r3, r2
 8009050:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009052:	79fb      	ldrb	r3, [r7, #7]
 8009054:	2b02      	cmp	r3, #2
 8009056:	d165      	bne.n	8009124 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	4a41      	ldr	r2, [pc, #260]	; (8009160 <USB_SetTurnaroundTime+0x11c>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d906      	bls.n	800906e <USB_SetTurnaroundTime+0x2a>
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	4a40      	ldr	r2, [pc, #256]	; (8009164 <USB_SetTurnaroundTime+0x120>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d202      	bcs.n	800906e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009068:	230f      	movs	r3, #15
 800906a:	617b      	str	r3, [r7, #20]
 800906c:	e062      	b.n	8009134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	4a3c      	ldr	r2, [pc, #240]	; (8009164 <USB_SetTurnaroundTime+0x120>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d306      	bcc.n	8009084 <USB_SetTurnaroundTime+0x40>
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	4a3b      	ldr	r2, [pc, #236]	; (8009168 <USB_SetTurnaroundTime+0x124>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d202      	bcs.n	8009084 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800907e:	230e      	movs	r3, #14
 8009080:	617b      	str	r3, [r7, #20]
 8009082:	e057      	b.n	8009134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	4a38      	ldr	r2, [pc, #224]	; (8009168 <USB_SetTurnaroundTime+0x124>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d306      	bcc.n	800909a <USB_SetTurnaroundTime+0x56>
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	4a37      	ldr	r2, [pc, #220]	; (800916c <USB_SetTurnaroundTime+0x128>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d202      	bcs.n	800909a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009094:	230d      	movs	r3, #13
 8009096:	617b      	str	r3, [r7, #20]
 8009098:	e04c      	b.n	8009134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	4a33      	ldr	r2, [pc, #204]	; (800916c <USB_SetTurnaroundTime+0x128>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d306      	bcc.n	80090b0 <USB_SetTurnaroundTime+0x6c>
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	4a32      	ldr	r2, [pc, #200]	; (8009170 <USB_SetTurnaroundTime+0x12c>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d802      	bhi.n	80090b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80090aa:	230c      	movs	r3, #12
 80090ac:	617b      	str	r3, [r7, #20]
 80090ae:	e041      	b.n	8009134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	4a2f      	ldr	r2, [pc, #188]	; (8009170 <USB_SetTurnaroundTime+0x12c>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d906      	bls.n	80090c6 <USB_SetTurnaroundTime+0x82>
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	4a2e      	ldr	r2, [pc, #184]	; (8009174 <USB_SetTurnaroundTime+0x130>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d802      	bhi.n	80090c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80090c0:	230b      	movs	r3, #11
 80090c2:	617b      	str	r3, [r7, #20]
 80090c4:	e036      	b.n	8009134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	4a2a      	ldr	r2, [pc, #168]	; (8009174 <USB_SetTurnaroundTime+0x130>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d906      	bls.n	80090dc <USB_SetTurnaroundTime+0x98>
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	4a29      	ldr	r2, [pc, #164]	; (8009178 <USB_SetTurnaroundTime+0x134>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d802      	bhi.n	80090dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80090d6:	230a      	movs	r3, #10
 80090d8:	617b      	str	r3, [r7, #20]
 80090da:	e02b      	b.n	8009134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80090dc:	68bb      	ldr	r3, [r7, #8]
 80090de:	4a26      	ldr	r2, [pc, #152]	; (8009178 <USB_SetTurnaroundTime+0x134>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d906      	bls.n	80090f2 <USB_SetTurnaroundTime+0xae>
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	4a25      	ldr	r2, [pc, #148]	; (800917c <USB_SetTurnaroundTime+0x138>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d202      	bcs.n	80090f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80090ec:	2309      	movs	r3, #9
 80090ee:	617b      	str	r3, [r7, #20]
 80090f0:	e020      	b.n	8009134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	4a21      	ldr	r2, [pc, #132]	; (800917c <USB_SetTurnaroundTime+0x138>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d306      	bcc.n	8009108 <USB_SetTurnaroundTime+0xc4>
 80090fa:	68bb      	ldr	r3, [r7, #8]
 80090fc:	4a20      	ldr	r2, [pc, #128]	; (8009180 <USB_SetTurnaroundTime+0x13c>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d802      	bhi.n	8009108 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009102:	2308      	movs	r3, #8
 8009104:	617b      	str	r3, [r7, #20]
 8009106:	e015      	b.n	8009134 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	4a1d      	ldr	r2, [pc, #116]	; (8009180 <USB_SetTurnaroundTime+0x13c>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d906      	bls.n	800911e <USB_SetTurnaroundTime+0xda>
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	4a1c      	ldr	r2, [pc, #112]	; (8009184 <USB_SetTurnaroundTime+0x140>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d202      	bcs.n	800911e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009118:	2307      	movs	r3, #7
 800911a:	617b      	str	r3, [r7, #20]
 800911c:	e00a      	b.n	8009134 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800911e:	2306      	movs	r3, #6
 8009120:	617b      	str	r3, [r7, #20]
 8009122:	e007      	b.n	8009134 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009124:	79fb      	ldrb	r3, [r7, #7]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d102      	bne.n	8009130 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800912a:	2309      	movs	r3, #9
 800912c:	617b      	str	r3, [r7, #20]
 800912e:	e001      	b.n	8009134 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009130:	2309      	movs	r3, #9
 8009132:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	68da      	ldr	r2, [r3, #12]
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	029b      	lsls	r3, r3, #10
 8009148:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800914c:	431a      	orrs	r2, r3
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	371c      	adds	r7, #28
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr
 8009160:	00d8acbf 	.word	0x00d8acbf
 8009164:	00e4e1c0 	.word	0x00e4e1c0
 8009168:	00f42400 	.word	0x00f42400
 800916c:	01067380 	.word	0x01067380
 8009170:	011a499f 	.word	0x011a499f
 8009174:	01312cff 	.word	0x01312cff
 8009178:	014ca43f 	.word	0x014ca43f
 800917c:	016e3600 	.word	0x016e3600
 8009180:	01a6ab1f 	.word	0x01a6ab1f
 8009184:	01e84800 	.word	0x01e84800

08009188 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009192:	2300      	movs	r3, #0
 8009194:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	3301      	adds	r3, #1
 800919a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	4a13      	ldr	r2, [pc, #76]	; (80091ec <USB_FlushTxFifo+0x64>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d901      	bls.n	80091a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80091a4:	2303      	movs	r3, #3
 80091a6:	e01b      	b.n	80091e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	691b      	ldr	r3, [r3, #16]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	daf2      	bge.n	8009196 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80091b0:	2300      	movs	r3, #0
 80091b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	019b      	lsls	r3, r3, #6
 80091b8:	f043 0220 	orr.w	r2, r3, #32
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	3301      	adds	r3, #1
 80091c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	4a08      	ldr	r2, [pc, #32]	; (80091ec <USB_FlushTxFifo+0x64>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d901      	bls.n	80091d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80091ce:	2303      	movs	r3, #3
 80091d0:	e006      	b.n	80091e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	f003 0320 	and.w	r3, r3, #32
 80091da:	2b20      	cmp	r3, #32
 80091dc:	d0f0      	beq.n	80091c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80091de:	2300      	movs	r3, #0
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr
 80091ec:	00030d40 	.word	0x00030d40

080091f0 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b087      	sub	sp, #28
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	f003 0306 	and.w	r3, r3, #6
 8009208:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d102      	bne.n	8009216 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009210:	2300      	movs	r3, #0
 8009212:	75fb      	strb	r3, [r7, #23]
 8009214:	e00a      	b.n	800922c <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2b02      	cmp	r3, #2
 800921a:	d002      	beq.n	8009222 <USB_GetDevSpeed+0x32>
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2b06      	cmp	r3, #6
 8009220:	d102      	bne.n	8009228 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009222:	2302      	movs	r3, #2
 8009224:	75fb      	strb	r3, [r7, #23]
 8009226:	e001      	b.n	800922c <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009228:	230f      	movs	r3, #15
 800922a:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800922c:	7dfb      	ldrb	r3, [r7, #23]
}
 800922e:	4618      	mov	r0, r3
 8009230:	371c      	adds	r7, #28
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr

0800923a <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800923a:	b480      	push	{r7}
 800923c:	b087      	sub	sp, #28
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
 8009242:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009244:	2300      	movs	r3, #0
 8009246:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009248:	2300      	movs	r3, #0
 800924a:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	785b      	ldrb	r3, [r3, #1]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d14a      	bne.n	80092ee <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	015a      	lsls	r2, r3, #5
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	4413      	add	r3, r2
 8009262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800926c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009270:	f040 8086 	bne.w	8009380 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	015a      	lsls	r2, r3, #5
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	4413      	add	r3, r2
 800927e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	683a      	ldr	r2, [r7, #0]
 8009286:	7812      	ldrb	r2, [r2, #0]
 8009288:	0151      	lsls	r1, r2, #5
 800928a:	693a      	ldr	r2, [r7, #16]
 800928c:	440a      	add	r2, r1
 800928e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009292:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009296:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	015a      	lsls	r2, r3, #5
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	4413      	add	r3, r2
 80092a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	683a      	ldr	r2, [r7, #0]
 80092aa:	7812      	ldrb	r2, [r2, #0]
 80092ac:	0151      	lsls	r1, r2, #5
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	440a      	add	r2, r1
 80092b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092ba:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	3301      	adds	r3, #1
 80092c0:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f242 7210 	movw	r2, #10000	; 0x2710
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d902      	bls.n	80092d2 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	75fb      	strb	r3, [r7, #23]
          break;
 80092d0:	e056      	b.n	8009380 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	015a      	lsls	r2, r3, #5
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	4413      	add	r3, r2
 80092dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092ea:	d0e7      	beq.n	80092bc <USB_EPStopXfer+0x82>
 80092ec:	e048      	b.n	8009380 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	015a      	lsls	r2, r3, #5
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	4413      	add	r3, r2
 80092f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009302:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009306:	d13b      	bne.n	8009380 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	015a      	lsls	r2, r3, #5
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	4413      	add	r3, r2
 8009312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	683a      	ldr	r2, [r7, #0]
 800931a:	7812      	ldrb	r2, [r2, #0]
 800931c:	0151      	lsls	r1, r2, #5
 800931e:	693a      	ldr	r2, [r7, #16]
 8009320:	440a      	add	r2, r1
 8009322:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009326:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800932a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	015a      	lsls	r2, r3, #5
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	4413      	add	r3, r2
 8009336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	683a      	ldr	r2, [r7, #0]
 800933e:	7812      	ldrb	r2, [r2, #0]
 8009340:	0151      	lsls	r1, r2, #5
 8009342:	693a      	ldr	r2, [r7, #16]
 8009344:	440a      	add	r2, r1
 8009346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800934a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800934e:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	3301      	adds	r3, #1
 8009354:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f242 7210 	movw	r2, #10000	; 0x2710
 800935c:	4293      	cmp	r3, r2
 800935e:	d902      	bls.n	8009366 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	75fb      	strb	r3, [r7, #23]
          break;
 8009364:	e00c      	b.n	8009380 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	015a      	lsls	r2, r3, #5
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	4413      	add	r3, r2
 8009370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800937a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800937e:	d0e7      	beq.n	8009350 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009380:	7dfb      	ldrb	r3, [r7, #23]
}
 8009382:	4618      	mov	r0, r3
 8009384:	371c      	adds	r7, #28
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr

0800938e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800938e:	b480      	push	{r7}
 8009390:	b089      	sub	sp, #36	; 0x24
 8009392:	af00      	add	r7, sp, #0
 8009394:	60f8      	str	r0, [r7, #12]
 8009396:	60b9      	str	r1, [r7, #8]
 8009398:	4611      	mov	r1, r2
 800939a:	461a      	mov	r2, r3
 800939c:	460b      	mov	r3, r1
 800939e:	71fb      	strb	r3, [r7, #7]
 80093a0:	4613      	mov	r3, r2
 80093a2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80093ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d123      	bne.n	80093fc <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80093b4:	88bb      	ldrh	r3, [r7, #4]
 80093b6:	3303      	adds	r3, #3
 80093b8:	089b      	lsrs	r3, r3, #2
 80093ba:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80093bc:	2300      	movs	r3, #0
 80093be:	61bb      	str	r3, [r7, #24]
 80093c0:	e018      	b.n	80093f4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80093c2:	79fb      	ldrb	r3, [r7, #7]
 80093c4:	031a      	lsls	r2, r3, #12
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	4413      	add	r3, r2
 80093ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093ce:	461a      	mov	r2, r3
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	3301      	adds	r3, #1
 80093da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	3301      	adds	r3, #1
 80093e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	3301      	adds	r3, #1
 80093e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	3301      	adds	r3, #1
 80093ec:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	3301      	adds	r3, #1
 80093f2:	61bb      	str	r3, [r7, #24]
 80093f4:	69ba      	ldr	r2, [r7, #24]
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d3e2      	bcc.n	80093c2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80093fc:	2300      	movs	r3, #0
}
 80093fe:	4618      	mov	r0, r3
 8009400:	3724      	adds	r7, #36	; 0x24
 8009402:	46bd      	mov	sp, r7
 8009404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009408:	4770      	bx	lr

0800940a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800940a:	b480      	push	{r7}
 800940c:	b08b      	sub	sp, #44	; 0x2c
 800940e:	af00      	add	r7, sp, #0
 8009410:	60f8      	str	r0, [r7, #12]
 8009412:	60b9      	str	r1, [r7, #8]
 8009414:	4613      	mov	r3, r2
 8009416:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009420:	88fb      	ldrh	r3, [r7, #6]
 8009422:	089b      	lsrs	r3, r3, #2
 8009424:	b29b      	uxth	r3, r3
 8009426:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009428:	88fb      	ldrh	r3, [r7, #6]
 800942a:	f003 0303 	and.w	r3, r3, #3
 800942e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009430:	2300      	movs	r3, #0
 8009432:	623b      	str	r3, [r7, #32]
 8009434:	e014      	b.n	8009460 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009440:	601a      	str	r2, [r3, #0]
    pDest++;
 8009442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009444:	3301      	adds	r3, #1
 8009446:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944a:	3301      	adds	r3, #1
 800944c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800944e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009450:	3301      	adds	r3, #1
 8009452:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009456:	3301      	adds	r3, #1
 8009458:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800945a:	6a3b      	ldr	r3, [r7, #32]
 800945c:	3301      	adds	r3, #1
 800945e:	623b      	str	r3, [r7, #32]
 8009460:	6a3a      	ldr	r2, [r7, #32]
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	429a      	cmp	r2, r3
 8009466:	d3e6      	bcc.n	8009436 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009468:	8bfb      	ldrh	r3, [r7, #30]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d01e      	beq.n	80094ac <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800946e:	2300      	movs	r3, #0
 8009470:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009472:	69bb      	ldr	r3, [r7, #24]
 8009474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009478:	461a      	mov	r2, r3
 800947a:	f107 0310 	add.w	r3, r7, #16
 800947e:	6812      	ldr	r2, [r2, #0]
 8009480:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009482:	693a      	ldr	r2, [r7, #16]
 8009484:	6a3b      	ldr	r3, [r7, #32]
 8009486:	b2db      	uxtb	r3, r3
 8009488:	00db      	lsls	r3, r3, #3
 800948a:	fa22 f303 	lsr.w	r3, r2, r3
 800948e:	b2da      	uxtb	r2, r3
 8009490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009492:	701a      	strb	r2, [r3, #0]
      i++;
 8009494:	6a3b      	ldr	r3, [r7, #32]
 8009496:	3301      	adds	r3, #1
 8009498:	623b      	str	r3, [r7, #32]
      pDest++;
 800949a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949c:	3301      	adds	r3, #1
 800949e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80094a0:	8bfb      	ldrh	r3, [r7, #30]
 80094a2:	3b01      	subs	r3, #1
 80094a4:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80094a6:	8bfb      	ldrh	r3, [r7, #30]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d1ea      	bne.n	8009482 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80094ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	372c      	adds	r7, #44	; 0x2c
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr

080094ba <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80094ba:	b480      	push	{r7}
 80094bc:	b085      	sub	sp, #20
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	695b      	ldr	r3, [r3, #20]
 80094c6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	699b      	ldr	r3, [r3, #24]
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	4013      	ands	r3, r2
 80094d0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80094d2:	68fb      	ldr	r3, [r7, #12]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3714      	adds	r7, #20
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b085      	sub	sp, #20
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094f2:	699b      	ldr	r3, [r3, #24]
 80094f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094fc:	69db      	ldr	r3, [r3, #28]
 80094fe:	68ba      	ldr	r2, [r7, #8]
 8009500:	4013      	ands	r3, r2
 8009502:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	0c1b      	lsrs	r3, r3, #16
}
 8009508:	4618      	mov	r0, r3
 800950a:	3714      	adds	r7, #20
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009514:	b480      	push	{r7}
 8009516:	b085      	sub	sp, #20
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009526:	699b      	ldr	r3, [r3, #24]
 8009528:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009530:	69db      	ldr	r3, [r3, #28]
 8009532:	68ba      	ldr	r2, [r7, #8]
 8009534:	4013      	ands	r3, r2
 8009536:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	b29b      	uxth	r3, r3
}
 800953c:	4618      	mov	r0, r3
 800953e:	3714      	adds	r7, #20
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr

08009548 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009548:	b480      	push	{r7}
 800954a:	b085      	sub	sp, #20
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	460b      	mov	r3, r1
 8009552:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009558:	78fb      	ldrb	r3, [r7, #3]
 800955a:	015a      	lsls	r2, r3, #5
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	4413      	add	r3, r2
 8009560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800956e:	695b      	ldr	r3, [r3, #20]
 8009570:	68ba      	ldr	r2, [r7, #8]
 8009572:	4013      	ands	r3, r2
 8009574:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009576:	68bb      	ldr	r3, [r7, #8]
}
 8009578:	4618      	mov	r0, r3
 800957a:	3714      	adds	r7, #20
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009584:	b480      	push	{r7}
 8009586:	b087      	sub	sp, #28
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	460b      	mov	r3, r1
 800958e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800959a:	691b      	ldr	r3, [r3, #16]
 800959c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095a6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80095a8:	78fb      	ldrb	r3, [r7, #3]
 80095aa:	f003 030f 	and.w	r3, r3, #15
 80095ae:	68fa      	ldr	r2, [r7, #12]
 80095b0:	fa22 f303 	lsr.w	r3, r2, r3
 80095b4:	01db      	lsls	r3, r3, #7
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80095be:	78fb      	ldrb	r3, [r7, #3]
 80095c0:	015a      	lsls	r2, r3, #5
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	4413      	add	r3, r2
 80095c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	693a      	ldr	r2, [r7, #16]
 80095ce:	4013      	ands	r3, r2
 80095d0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80095d2:	68bb      	ldr	r3, [r7, #8]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	371c      	adds	r7, #28
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	695b      	ldr	r3, [r3, #20]
 80095ec:	f003 0301 	and.w	r3, r3, #1
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009616:	4619      	mov	r1, r3
 8009618:	4b09      	ldr	r3, [pc, #36]	; (8009640 <USB_ActivateSetup+0x44>)
 800961a:	4013      	ands	r3, r2
 800961c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	68fa      	ldr	r2, [r7, #12]
 8009628:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800962c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009630:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	3714      	adds	r7, #20
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr
 8009640:	fffff800 	.word	0xfffff800

08009644 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009644:	b480      	push	{r7}
 8009646:	b087      	sub	sp, #28
 8009648:	af00      	add	r7, sp, #0
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	460b      	mov	r3, r1
 800964e:	607a      	str	r2, [r7, #4]
 8009650:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	333c      	adds	r3, #60	; 0x3c
 800965a:	3304      	adds	r3, #4
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	4a26      	ldr	r2, [pc, #152]	; (80096fc <USB_EP0_OutStart+0xb8>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d90a      	bls.n	800967e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009674:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009678:	d101      	bne.n	800967e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800967a:	2300      	movs	r3, #0
 800967c:	e037      	b.n	80096ee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009684:	461a      	mov	r2, r3
 8009686:	2300      	movs	r3, #0
 8009688:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009690:	691b      	ldr	r3, [r3, #16]
 8009692:	697a      	ldr	r2, [r7, #20]
 8009694:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009698:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800969c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a4:	691b      	ldr	r3, [r3, #16]
 80096a6:	697a      	ldr	r2, [r7, #20]
 80096a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096ac:	f043 0318 	orr.w	r3, r3, #24
 80096b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096b8:	691b      	ldr	r3, [r3, #16]
 80096ba:	697a      	ldr	r2, [r7, #20]
 80096bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096c0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80096c4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80096c6:	7afb      	ldrb	r3, [r7, #11]
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d10f      	bne.n	80096ec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096d2:	461a      	mov	r2, r3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	697a      	ldr	r2, [r7, #20]
 80096e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096e6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80096ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	371c      	adds	r7, #28
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr
 80096fa:	bf00      	nop
 80096fc:	4f54300a 	.word	0x4f54300a

08009700 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009700:	b480      	push	{r7}
 8009702:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009704:	bf00      	nop
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr
	...

08009710 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009710:	b480      	push	{r7}
 8009712:	b085      	sub	sp, #20
 8009714:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009716:	f3ef 8305 	mrs	r3, IPSR
 800971a:	60bb      	str	r3, [r7, #8]
  return(result);
 800971c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800971e:	2b00      	cmp	r3, #0
 8009720:	d10f      	bne.n	8009742 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009722:	f3ef 8310 	mrs	r3, PRIMASK
 8009726:	607b      	str	r3, [r7, #4]
  return(result);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d105      	bne.n	800973a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800972e:	f3ef 8311 	mrs	r3, BASEPRI
 8009732:	603b      	str	r3, [r7, #0]
  return(result);
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d007      	beq.n	800974a <osKernelInitialize+0x3a>
 800973a:	4b0e      	ldr	r3, [pc, #56]	; (8009774 <osKernelInitialize+0x64>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2b02      	cmp	r3, #2
 8009740:	d103      	bne.n	800974a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009742:	f06f 0305 	mvn.w	r3, #5
 8009746:	60fb      	str	r3, [r7, #12]
 8009748:	e00c      	b.n	8009764 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800974a:	4b0a      	ldr	r3, [pc, #40]	; (8009774 <osKernelInitialize+0x64>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d105      	bne.n	800975e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009752:	4b08      	ldr	r3, [pc, #32]	; (8009774 <osKernelInitialize+0x64>)
 8009754:	2201      	movs	r2, #1
 8009756:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009758:	2300      	movs	r3, #0
 800975a:	60fb      	str	r3, [r7, #12]
 800975c:	e002      	b.n	8009764 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800975e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009762:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009764:	68fb      	ldr	r3, [r7, #12]
}
 8009766:	4618      	mov	r0, r3
 8009768:	3714      	adds	r7, #20
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr
 8009772:	bf00      	nop
 8009774:	20000b20 	.word	0x20000b20

08009778 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800977e:	f3ef 8305 	mrs	r3, IPSR
 8009782:	60bb      	str	r3, [r7, #8]
  return(result);
 8009784:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009786:	2b00      	cmp	r3, #0
 8009788:	d10f      	bne.n	80097aa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800978a:	f3ef 8310 	mrs	r3, PRIMASK
 800978e:	607b      	str	r3, [r7, #4]
  return(result);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d105      	bne.n	80097a2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009796:	f3ef 8311 	mrs	r3, BASEPRI
 800979a:	603b      	str	r3, [r7, #0]
  return(result);
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d007      	beq.n	80097b2 <osKernelStart+0x3a>
 80097a2:	4b0f      	ldr	r3, [pc, #60]	; (80097e0 <osKernelStart+0x68>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2b02      	cmp	r3, #2
 80097a8:	d103      	bne.n	80097b2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80097aa:	f06f 0305 	mvn.w	r3, #5
 80097ae:	60fb      	str	r3, [r7, #12]
 80097b0:	e010      	b.n	80097d4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80097b2:	4b0b      	ldr	r3, [pc, #44]	; (80097e0 <osKernelStart+0x68>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d109      	bne.n	80097ce <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80097ba:	f7ff ffa1 	bl	8009700 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80097be:	4b08      	ldr	r3, [pc, #32]	; (80097e0 <osKernelStart+0x68>)
 80097c0:	2202      	movs	r2, #2
 80097c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80097c4:	f001 f90a 	bl	800a9dc <vTaskStartScheduler>
      stat = osOK;
 80097c8:	2300      	movs	r3, #0
 80097ca:	60fb      	str	r3, [r7, #12]
 80097cc:	e002      	b.n	80097d4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80097ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80097d4:	68fb      	ldr	r3, [r7, #12]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3710      	adds	r7, #16
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}
 80097de:	bf00      	nop
 80097e0:	20000b20 	.word	0x20000b20

080097e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b090      	sub	sp, #64	; 0x40
 80097e8:	af04      	add	r7, sp, #16
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80097f0:	2300      	movs	r3, #0
 80097f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097f4:	f3ef 8305 	mrs	r3, IPSR
 80097f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80097fa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f040 808f 	bne.w	8009920 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009802:	f3ef 8310 	mrs	r3, PRIMASK
 8009806:	61bb      	str	r3, [r7, #24]
  return(result);
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d105      	bne.n	800981a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800980e:	f3ef 8311 	mrs	r3, BASEPRI
 8009812:	617b      	str	r3, [r7, #20]
  return(result);
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d003      	beq.n	8009822 <osThreadNew+0x3e>
 800981a:	4b44      	ldr	r3, [pc, #272]	; (800992c <osThreadNew+0x148>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2b02      	cmp	r3, #2
 8009820:	d07e      	beq.n	8009920 <osThreadNew+0x13c>
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d07b      	beq.n	8009920 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009828:	2380      	movs	r3, #128	; 0x80
 800982a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800982c:	2318      	movs	r3, #24
 800982e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009830:	2300      	movs	r3, #0
 8009832:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009834:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009838:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d045      	beq.n	80098cc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d002      	beq.n	800984e <osThreadNew+0x6a>
        name = attr->name;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	699b      	ldr	r3, [r3, #24]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d002      	beq.n	800985c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	699b      	ldr	r3, [r3, #24]
 800985a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800985c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985e:	2b00      	cmp	r3, #0
 8009860:	d008      	beq.n	8009874 <osThreadNew+0x90>
 8009862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009864:	2b38      	cmp	r3, #56	; 0x38
 8009866:	d805      	bhi.n	8009874 <osThreadNew+0x90>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	f003 0301 	and.w	r3, r3, #1
 8009870:	2b00      	cmp	r3, #0
 8009872:	d001      	beq.n	8009878 <osThreadNew+0x94>
        return (NULL);
 8009874:	2300      	movs	r3, #0
 8009876:	e054      	b.n	8009922 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	695b      	ldr	r3, [r3, #20]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d003      	beq.n	8009888 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	695b      	ldr	r3, [r3, #20]
 8009884:	089b      	lsrs	r3, r3, #2
 8009886:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d00e      	beq.n	80098ae <osThreadNew+0xca>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	2b5f      	cmp	r3, #95	; 0x5f
 8009896:	d90a      	bls.n	80098ae <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800989c:	2b00      	cmp	r3, #0
 800989e:	d006      	beq.n	80098ae <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	695b      	ldr	r3, [r3, #20]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d002      	beq.n	80098ae <osThreadNew+0xca>
        mem = 1;
 80098a8:	2301      	movs	r3, #1
 80098aa:	623b      	str	r3, [r7, #32]
 80098ac:	e010      	b.n	80098d0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d10c      	bne.n	80098d0 <osThreadNew+0xec>
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d108      	bne.n	80098d0 <osThreadNew+0xec>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	691b      	ldr	r3, [r3, #16]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d104      	bne.n	80098d0 <osThreadNew+0xec>
          mem = 0;
 80098c6:	2300      	movs	r3, #0
 80098c8:	623b      	str	r3, [r7, #32]
 80098ca:	e001      	b.n	80098d0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80098cc:	2300      	movs	r3, #0
 80098ce:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80098d0:	6a3b      	ldr	r3, [r7, #32]
 80098d2:	2b01      	cmp	r3, #1
 80098d4:	d110      	bne.n	80098f8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80098de:	9202      	str	r2, [sp, #8]
 80098e0:	9301      	str	r3, [sp, #4]
 80098e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e4:	9300      	str	r3, [sp, #0]
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f000 fe93 	bl	800a618 <xTaskCreateStatic>
 80098f2:	4603      	mov	r3, r0
 80098f4:	613b      	str	r3, [r7, #16]
 80098f6:	e013      	b.n	8009920 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80098f8:	6a3b      	ldr	r3, [r7, #32]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d110      	bne.n	8009920 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80098fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009900:	b29a      	uxth	r2, r3
 8009902:	f107 0310 	add.w	r3, r7, #16
 8009906:	9301      	str	r3, [sp, #4]
 8009908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990a:	9300      	str	r3, [sp, #0]
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009910:	68f8      	ldr	r0, [r7, #12]
 8009912:	f000 fee4 	bl	800a6de <xTaskCreate>
 8009916:	4603      	mov	r3, r0
 8009918:	2b01      	cmp	r3, #1
 800991a:	d001      	beq.n	8009920 <osThreadNew+0x13c>
          hTask = NULL;
 800991c:	2300      	movs	r3, #0
 800991e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009920:	693b      	ldr	r3, [r7, #16]
}
 8009922:	4618      	mov	r0, r3
 8009924:	3730      	adds	r7, #48	; 0x30
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	20000b20 	.word	0x20000b20

08009930 <osThreadGetStackSpace>:
  }

  return (state);
}

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
 8009930:	b580      	push	{r7, lr}
 8009932:	b088      	sub	sp, #32
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800993c:	f3ef 8305 	mrs	r3, IPSR
 8009940:	617b      	str	r3, [r7, #20]
  return(result);
 8009942:	697b      	ldr	r3, [r7, #20]
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 8009944:	2b00      	cmp	r3, #0
 8009946:	d112      	bne.n	800996e <osThreadGetStackSpace+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009948:	f3ef 8310 	mrs	r3, PRIMASK
 800994c:	613b      	str	r3, [r7, #16]
  return(result);
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d105      	bne.n	8009960 <osThreadGetStackSpace+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009954:	f3ef 8311 	mrs	r3, BASEPRI
 8009958:	60fb      	str	r3, [r7, #12]
  return(result);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d003      	beq.n	8009968 <osThreadGetStackSpace+0x38>
 8009960:	4b09      	ldr	r3, [pc, #36]	; (8009988 <osThreadGetStackSpace+0x58>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2b02      	cmp	r3, #2
 8009966:	d002      	beq.n	800996e <osThreadGetStackSpace+0x3e>
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d102      	bne.n	8009974 <osThreadGetStackSpace+0x44>
    sz = 0U;
 800996e:	2300      	movs	r3, #0
 8009970:	61fb      	str	r3, [r7, #28]
 8009972:	e003      	b.n	800997c <osThreadGetStackSpace+0x4c>
  } else {
    sz = (uint32_t)uxTaskGetStackHighWaterMark (hTask);
 8009974:	69b8      	ldr	r0, [r7, #24]
 8009976:	f001 fc8b 	bl	800b290 <uxTaskGetStackHighWaterMark>
 800997a:	61f8      	str	r0, [r7, #28]
  }

  return (sz);
 800997c:	69fb      	ldr	r3, [r7, #28]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3720      	adds	r7, #32
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}
 8009986:	bf00      	nop
 8009988:	20000b20 	.word	0x20000b20

0800998c <osThreadGetCount>:
#endif

  return (stat);
}

uint32_t osThreadGetCount (void) {
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009992:	f3ef 8305 	mrs	r3, IPSR
 8009996:	60bb      	str	r3, [r7, #8]
  return(result);
 8009998:	68bb      	ldr	r3, [r7, #8]
  uint32_t count;

  if (IS_IRQ()) {
 800999a:	2b00      	cmp	r3, #0
 800999c:	d10f      	bne.n	80099be <osThreadGetCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800999e:	f3ef 8310 	mrs	r3, PRIMASK
 80099a2:	607b      	str	r3, [r7, #4]
  return(result);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d105      	bne.n	80099b6 <osThreadGetCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80099aa:	f3ef 8311 	mrs	r3, BASEPRI
 80099ae:	603b      	str	r3, [r7, #0]
  return(result);
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d006      	beq.n	80099c4 <osThreadGetCount+0x38>
 80099b6:	4b07      	ldr	r3, [pc, #28]	; (80099d4 <osThreadGetCount+0x48>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	2b02      	cmp	r3, #2
 80099bc:	d102      	bne.n	80099c4 <osThreadGetCount+0x38>
    count = 0U;
 80099be:	2300      	movs	r3, #0
 80099c0:	60fb      	str	r3, [r7, #12]
 80099c2:	e002      	b.n	80099ca <osThreadGetCount+0x3e>
  } else {
    count = uxTaskGetNumberOfTasks();
 80099c4:	f001 f932 	bl	800ac2c <uxTaskGetNumberOfTasks>
 80099c8:	60f8      	str	r0, [r7, #12]
  }

  return (count);
 80099ca:	68fb      	ldr	r3, [r7, #12]
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3710      	adds	r7, #16
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	20000b20 	.word	0x20000b20

080099d8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80099d8:	b580      	push	{r7, lr}
 80099da:	b086      	sub	sp, #24
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099e0:	f3ef 8305 	mrs	r3, IPSR
 80099e4:	613b      	str	r3, [r7, #16]
  return(result);
 80099e6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d10f      	bne.n	8009a0c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099ec:	f3ef 8310 	mrs	r3, PRIMASK
 80099f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d105      	bne.n	8009a04 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80099f8:	f3ef 8311 	mrs	r3, BASEPRI
 80099fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d007      	beq.n	8009a14 <osDelay+0x3c>
 8009a04:	4b0a      	ldr	r3, [pc, #40]	; (8009a30 <osDelay+0x58>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2b02      	cmp	r3, #2
 8009a0a:	d103      	bne.n	8009a14 <osDelay+0x3c>
    stat = osErrorISR;
 8009a0c:	f06f 0305 	mvn.w	r3, #5
 8009a10:	617b      	str	r3, [r7, #20]
 8009a12:	e007      	b.n	8009a24 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8009a14:	2300      	movs	r3, #0
 8009a16:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d002      	beq.n	8009a24 <osDelay+0x4c>
      vTaskDelay(ticks);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 ffa6 	bl	800a970 <vTaskDelay>
    }
  }

  return (stat);
 8009a24:	697b      	ldr	r3, [r7, #20]
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3718      	adds	r7, #24
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
 8009a2e:	bf00      	nop
 8009a30:	20000b20 	.word	0x20000b20

08009a34 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009a34:	b480      	push	{r7}
 8009a36:	b085      	sub	sp, #20
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	4a07      	ldr	r2, [pc, #28]	; (8009a60 <vApplicationGetIdleTaskMemory+0x2c>)
 8009a44:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	4a06      	ldr	r2, [pc, #24]	; (8009a64 <vApplicationGetIdleTaskMemory+0x30>)
 8009a4a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2280      	movs	r2, #128	; 0x80
 8009a50:	601a      	str	r2, [r3, #0]
}
 8009a52:	bf00      	nop
 8009a54:	3714      	adds	r7, #20
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	20000b24 	.word	0x20000b24
 8009a64:	20000b84 	.word	0x20000b84

08009a68 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009a68:	b480      	push	{r7}
 8009a6a:	b085      	sub	sp, #20
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	4a07      	ldr	r2, [pc, #28]	; (8009a94 <vApplicationGetTimerTaskMemory+0x2c>)
 8009a78:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	4a06      	ldr	r2, [pc, #24]	; (8009a98 <vApplicationGetTimerTaskMemory+0x30>)
 8009a7e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a86:	601a      	str	r2, [r3, #0]
}
 8009a88:	bf00      	nop
 8009a8a:	3714      	adds	r7, #20
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr
 8009a94:	20000d84 	.word	0x20000d84
 8009a98:	20000de4 	.word	0x20000de4

08009a9c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f103 0208 	add.w	r2, r3, #8
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ab4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f103 0208 	add.w	r2, r3, #8
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f103 0208 	add.w	r2, r3, #8
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2200      	movs	r2, #0
 8009ace:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009ad0:	bf00      	nop
 8009ad2:	370c      	adds	r7, #12
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009adc:	b480      	push	{r7}
 8009ade:	b083      	sub	sp, #12
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009aea:	bf00      	nop
 8009aec:	370c      	adds	r7, #12
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr

08009af6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009af6:	b480      	push	{r7}
 8009af8:	b085      	sub	sp, #20
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]
 8009afe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	68fa      	ldr	r2, [r7, #12]
 8009b0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	689a      	ldr	r2, [r3, #8]
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	689b      	ldr	r3, [r3, #8]
 8009b18:	683a      	ldr	r2, [r7, #0]
 8009b1a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	683a      	ldr	r2, [r7, #0]
 8009b20:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	1c5a      	adds	r2, r3, #1
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	601a      	str	r2, [r3, #0]
}
 8009b32:	bf00      	nop
 8009b34:	3714      	adds	r7, #20
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr

08009b3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b3e:	b480      	push	{r7}
 8009b40:	b085      	sub	sp, #20
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
 8009b46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b54:	d103      	bne.n	8009b5e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	691b      	ldr	r3, [r3, #16]
 8009b5a:	60fb      	str	r3, [r7, #12]
 8009b5c:	e00c      	b.n	8009b78 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	3308      	adds	r3, #8
 8009b62:	60fb      	str	r3, [r7, #12]
 8009b64:	e002      	b.n	8009b6c <vListInsert+0x2e>
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	60fb      	str	r3, [r7, #12]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	68ba      	ldr	r2, [r7, #8]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d2f6      	bcs.n	8009b66 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	685a      	ldr	r2, [r3, #4]
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	683a      	ldr	r2, [r7, #0]
 8009b86:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	683a      	ldr	r2, [r7, #0]
 8009b92:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	1c5a      	adds	r2, r3, #1
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	601a      	str	r2, [r3, #0]
}
 8009ba4:	bf00      	nop
 8009ba6:	3714      	adds	r7, #20
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr

08009bb0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b085      	sub	sp, #20
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	691b      	ldr	r3, [r3, #16]
 8009bbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	6892      	ldr	r2, [r2, #8]
 8009bc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	6852      	ldr	r2, [r2, #4]
 8009bd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d103      	bne.n	8009be4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	689a      	ldr	r2, [r3, #8]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	1e5a      	subs	r2, r3, #1
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3714      	adds	r7, #20
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d10c      	bne.n	8009c32 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1c:	b672      	cpsid	i
 8009c1e:	f383 8811 	msr	BASEPRI, r3
 8009c22:	f3bf 8f6f 	isb	sy
 8009c26:	f3bf 8f4f 	dsb	sy
 8009c2a:	b662      	cpsie	i
 8009c2c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009c2e:	bf00      	nop
 8009c30:	e7fe      	b.n	8009c30 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8009c32:	f002 f8eb 	bl	800be0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c3e:	68f9      	ldr	r1, [r7, #12]
 8009c40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c42:	fb01 f303 	mul.w	r3, r1, r3
 8009c46:	441a      	add	r2, r3
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c62:	3b01      	subs	r3, #1
 8009c64:	68f9      	ldr	r1, [r7, #12]
 8009c66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c68:	fb01 f303 	mul.w	r3, r1, r3
 8009c6c:	441a      	add	r2, r3
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	22ff      	movs	r2, #255	; 0xff
 8009c76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	22ff      	movs	r2, #255	; 0xff
 8009c7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d114      	bne.n	8009cb2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	691b      	ldr	r3, [r3, #16]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d01a      	beq.n	8009cc6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	3310      	adds	r3, #16
 8009c94:	4618      	mov	r0, r3
 8009c96:	f001 f969 	bl	800af6c <xTaskRemoveFromEventList>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d012      	beq.n	8009cc6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009ca0:	4b0c      	ldr	r3, [pc, #48]	; (8009cd4 <xQueueGenericReset+0xd0>)
 8009ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ca6:	601a      	str	r2, [r3, #0]
 8009ca8:	f3bf 8f4f 	dsb	sy
 8009cac:	f3bf 8f6f 	isb	sy
 8009cb0:	e009      	b.n	8009cc6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	3310      	adds	r3, #16
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7ff fef0 	bl	8009a9c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	3324      	adds	r3, #36	; 0x24
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7ff feeb 	bl	8009a9c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009cc6:	f002 f8d5 	bl	800be74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009cca:	2301      	movs	r3, #1
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3710      	adds	r7, #16
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}
 8009cd4:	e000ed04 	.word	0xe000ed04

08009cd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b08e      	sub	sp, #56	; 0x38
 8009cdc:	af02      	add	r7, sp, #8
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	60b9      	str	r1, [r7, #8]
 8009ce2:	607a      	str	r2, [r7, #4]
 8009ce4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d10c      	bne.n	8009d06 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8009cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf0:	b672      	cpsid	i
 8009cf2:	f383 8811 	msr	BASEPRI, r3
 8009cf6:	f3bf 8f6f 	isb	sy
 8009cfa:	f3bf 8f4f 	dsb	sy
 8009cfe:	b662      	cpsie	i
 8009d00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d02:	bf00      	nop
 8009d04:	e7fe      	b.n	8009d04 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d10c      	bne.n	8009d26 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8009d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d10:	b672      	cpsid	i
 8009d12:	f383 8811 	msr	BASEPRI, r3
 8009d16:	f3bf 8f6f 	isb	sy
 8009d1a:	f3bf 8f4f 	dsb	sy
 8009d1e:	b662      	cpsie	i
 8009d20:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d22:	bf00      	nop
 8009d24:	e7fe      	b.n	8009d24 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d002      	beq.n	8009d32 <xQueueGenericCreateStatic+0x5a>
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d001      	beq.n	8009d36 <xQueueGenericCreateStatic+0x5e>
 8009d32:	2301      	movs	r3, #1
 8009d34:	e000      	b.n	8009d38 <xQueueGenericCreateStatic+0x60>
 8009d36:	2300      	movs	r3, #0
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d10c      	bne.n	8009d56 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8009d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d40:	b672      	cpsid	i
 8009d42:	f383 8811 	msr	BASEPRI, r3
 8009d46:	f3bf 8f6f 	isb	sy
 8009d4a:	f3bf 8f4f 	dsb	sy
 8009d4e:	b662      	cpsie	i
 8009d50:	623b      	str	r3, [r7, #32]
}
 8009d52:	bf00      	nop
 8009d54:	e7fe      	b.n	8009d54 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d102      	bne.n	8009d62 <xQueueGenericCreateStatic+0x8a>
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d101      	bne.n	8009d66 <xQueueGenericCreateStatic+0x8e>
 8009d62:	2301      	movs	r3, #1
 8009d64:	e000      	b.n	8009d68 <xQueueGenericCreateStatic+0x90>
 8009d66:	2300      	movs	r3, #0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d10c      	bne.n	8009d86 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8009d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d70:	b672      	cpsid	i
 8009d72:	f383 8811 	msr	BASEPRI, r3
 8009d76:	f3bf 8f6f 	isb	sy
 8009d7a:	f3bf 8f4f 	dsb	sy
 8009d7e:	b662      	cpsie	i
 8009d80:	61fb      	str	r3, [r7, #28]
}
 8009d82:	bf00      	nop
 8009d84:	e7fe      	b.n	8009d84 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009d86:	2350      	movs	r3, #80	; 0x50
 8009d88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	2b50      	cmp	r3, #80	; 0x50
 8009d8e:	d00c      	beq.n	8009daa <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8009d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d94:	b672      	cpsid	i
 8009d96:	f383 8811 	msr	BASEPRI, r3
 8009d9a:	f3bf 8f6f 	isb	sy
 8009d9e:	f3bf 8f4f 	dsb	sy
 8009da2:	b662      	cpsie	i
 8009da4:	61bb      	str	r3, [r7, #24]
}
 8009da6:	bf00      	nop
 8009da8:	e7fe      	b.n	8009da8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009daa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00d      	beq.n	8009dd2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009db8:	2201      	movs	r2, #1
 8009dba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009dbe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc4:	9300      	str	r3, [sp, #0]
 8009dc6:	4613      	mov	r3, r2
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	68b9      	ldr	r1, [r7, #8]
 8009dcc:	68f8      	ldr	r0, [r7, #12]
 8009dce:	f000 f805 	bl	8009ddc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3730      	adds	r7, #48	; 0x30
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	60b9      	str	r1, [r7, #8]
 8009de6:	607a      	str	r2, [r7, #4]
 8009de8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d103      	bne.n	8009df8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009df0:	69bb      	ldr	r3, [r7, #24]
 8009df2:	69ba      	ldr	r2, [r7, #24]
 8009df4:	601a      	str	r2, [r3, #0]
 8009df6:	e002      	b.n	8009dfe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009df8:	69bb      	ldr	r3, [r7, #24]
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009dfe:	69bb      	ldr	r3, [r7, #24]
 8009e00:	68fa      	ldr	r2, [r7, #12]
 8009e02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	68ba      	ldr	r2, [r7, #8]
 8009e08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009e0a:	2101      	movs	r1, #1
 8009e0c:	69b8      	ldr	r0, [r7, #24]
 8009e0e:	f7ff fef9 	bl	8009c04 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	78fa      	ldrb	r2, [r7, #3]
 8009e16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009e1a:	bf00      	nop
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
	...

08009e24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b08e      	sub	sp, #56	; 0x38
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	607a      	str	r2, [r7, #4]
 8009e30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009e32:	2300      	movs	r3, #0
 8009e34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d10c      	bne.n	8009e5a <xQueueGenericSend+0x36>
	__asm volatile
 8009e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e44:	b672      	cpsid	i
 8009e46:	f383 8811 	msr	BASEPRI, r3
 8009e4a:	f3bf 8f6f 	isb	sy
 8009e4e:	f3bf 8f4f 	dsb	sy
 8009e52:	b662      	cpsie	i
 8009e54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e56:	bf00      	nop
 8009e58:	e7fe      	b.n	8009e58 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d103      	bne.n	8009e68 <xQueueGenericSend+0x44>
 8009e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d101      	bne.n	8009e6c <xQueueGenericSend+0x48>
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e000      	b.n	8009e6e <xQueueGenericSend+0x4a>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d10c      	bne.n	8009e8c <xQueueGenericSend+0x68>
	__asm volatile
 8009e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e76:	b672      	cpsid	i
 8009e78:	f383 8811 	msr	BASEPRI, r3
 8009e7c:	f3bf 8f6f 	isb	sy
 8009e80:	f3bf 8f4f 	dsb	sy
 8009e84:	b662      	cpsie	i
 8009e86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e88:	bf00      	nop
 8009e8a:	e7fe      	b.n	8009e8a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	2b02      	cmp	r3, #2
 8009e90:	d103      	bne.n	8009e9a <xQueueGenericSend+0x76>
 8009e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d101      	bne.n	8009e9e <xQueueGenericSend+0x7a>
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e000      	b.n	8009ea0 <xQueueGenericSend+0x7c>
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d10c      	bne.n	8009ebe <xQueueGenericSend+0x9a>
	__asm volatile
 8009ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea8:	b672      	cpsid	i
 8009eaa:	f383 8811 	msr	BASEPRI, r3
 8009eae:	f3bf 8f6f 	isb	sy
 8009eb2:	f3bf 8f4f 	dsb	sy
 8009eb6:	b662      	cpsie	i
 8009eb8:	623b      	str	r3, [r7, #32]
}
 8009eba:	bf00      	nop
 8009ebc:	e7fe      	b.n	8009ebc <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ebe:	f001 fa55 	bl	800b36c <xTaskGetSchedulerState>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d102      	bne.n	8009ece <xQueueGenericSend+0xaa>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d101      	bne.n	8009ed2 <xQueueGenericSend+0xae>
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e000      	b.n	8009ed4 <xQueueGenericSend+0xb0>
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d10c      	bne.n	8009ef2 <xQueueGenericSend+0xce>
	__asm volatile
 8009ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009edc:	b672      	cpsid	i
 8009ede:	f383 8811 	msr	BASEPRI, r3
 8009ee2:	f3bf 8f6f 	isb	sy
 8009ee6:	f3bf 8f4f 	dsb	sy
 8009eea:	b662      	cpsie	i
 8009eec:	61fb      	str	r3, [r7, #28]
}
 8009eee:	bf00      	nop
 8009ef0:	e7fe      	b.n	8009ef0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009ef2:	f001 ff8b 	bl	800be0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d302      	bcc.n	8009f08 <xQueueGenericSend+0xe4>
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	2b02      	cmp	r3, #2
 8009f06:	d129      	bne.n	8009f5c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f08:	683a      	ldr	r2, [r7, #0]
 8009f0a:	68b9      	ldr	r1, [r7, #8]
 8009f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f0e:	f000 fa15 	bl	800a33c <prvCopyDataToQueue>
 8009f12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d010      	beq.n	8009f3e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1e:	3324      	adds	r3, #36	; 0x24
 8009f20:	4618      	mov	r0, r3
 8009f22:	f001 f823 	bl	800af6c <xTaskRemoveFromEventList>
 8009f26:	4603      	mov	r3, r0
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d013      	beq.n	8009f54 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009f2c:	4b3f      	ldr	r3, [pc, #252]	; (800a02c <xQueueGenericSend+0x208>)
 8009f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f32:	601a      	str	r2, [r3, #0]
 8009f34:	f3bf 8f4f 	dsb	sy
 8009f38:	f3bf 8f6f 	isb	sy
 8009f3c:	e00a      	b.n	8009f54 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d007      	beq.n	8009f54 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009f44:	4b39      	ldr	r3, [pc, #228]	; (800a02c <xQueueGenericSend+0x208>)
 8009f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f4a:	601a      	str	r2, [r3, #0]
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009f54:	f001 ff8e 	bl	800be74 <vPortExitCritical>
				return pdPASS;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	e063      	b.n	800a024 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d103      	bne.n	8009f6a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f62:	f001 ff87 	bl	800be74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009f66:	2300      	movs	r3, #0
 8009f68:	e05c      	b.n	800a024 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d106      	bne.n	8009f7e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009f70:	f107 0314 	add.w	r3, r7, #20
 8009f74:	4618      	mov	r0, r3
 8009f76:	f001 f85f 	bl	800b038 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f7e:	f001 ff79 	bl	800be74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f82:	f000 fd95 	bl	800aab0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f86:	f001 ff41 	bl	800be0c <vPortEnterCritical>
 8009f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f90:	b25b      	sxtb	r3, r3
 8009f92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f96:	d103      	bne.n	8009fa0 <xQueueGenericSend+0x17c>
 8009f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fa6:	b25b      	sxtb	r3, r3
 8009fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fac:	d103      	bne.n	8009fb6 <xQueueGenericSend+0x192>
 8009fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009fb6:	f001 ff5d 	bl	800be74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009fba:	1d3a      	adds	r2, r7, #4
 8009fbc:	f107 0314 	add.w	r3, r7, #20
 8009fc0:	4611      	mov	r1, r2
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f001 f84e 	bl	800b064 <xTaskCheckForTimeOut>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d124      	bne.n	800a018 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009fce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fd0:	f000 faac 	bl	800a52c <prvIsQueueFull>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d018      	beq.n	800a00c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fdc:	3310      	adds	r3, #16
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	4611      	mov	r1, r2
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f000 ff6e 	bl	800aec4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009fe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fea:	f000 fa37 	bl	800a45c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009fee:	f000 fd6d 	bl	800aacc <xTaskResumeAll>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	f47f af7c 	bne.w	8009ef2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8009ffa:	4b0c      	ldr	r3, [pc, #48]	; (800a02c <xQueueGenericSend+0x208>)
 8009ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a000:	601a      	str	r2, [r3, #0]
 800a002:	f3bf 8f4f 	dsb	sy
 800a006:	f3bf 8f6f 	isb	sy
 800a00a:	e772      	b.n	8009ef2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a00c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a00e:	f000 fa25 	bl	800a45c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a012:	f000 fd5b 	bl	800aacc <xTaskResumeAll>
 800a016:	e76c      	b.n	8009ef2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a01a:	f000 fa1f 	bl	800a45c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a01e:	f000 fd55 	bl	800aacc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a022:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a024:	4618      	mov	r0, r3
 800a026:	3738      	adds	r7, #56	; 0x38
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}
 800a02c:	e000ed04 	.word	0xe000ed04

0800a030 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b08e      	sub	sp, #56	; 0x38
 800a034:	af00      	add	r7, sp, #0
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
 800a03c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a044:	2b00      	cmp	r3, #0
 800a046:	d10c      	bne.n	800a062 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800a048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04c:	b672      	cpsid	i
 800a04e:	f383 8811 	msr	BASEPRI, r3
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	f3bf 8f4f 	dsb	sy
 800a05a:	b662      	cpsie	i
 800a05c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a05e:	bf00      	nop
 800a060:	e7fe      	b.n	800a060 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d103      	bne.n	800a070 <xQueueGenericSendFromISR+0x40>
 800a068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d101      	bne.n	800a074 <xQueueGenericSendFromISR+0x44>
 800a070:	2301      	movs	r3, #1
 800a072:	e000      	b.n	800a076 <xQueueGenericSendFromISR+0x46>
 800a074:	2300      	movs	r3, #0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d10c      	bne.n	800a094 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800a07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07e:	b672      	cpsid	i
 800a080:	f383 8811 	msr	BASEPRI, r3
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	f3bf 8f4f 	dsb	sy
 800a08c:	b662      	cpsie	i
 800a08e:	623b      	str	r3, [r7, #32]
}
 800a090:	bf00      	nop
 800a092:	e7fe      	b.n	800a092 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	2b02      	cmp	r3, #2
 800a098:	d103      	bne.n	800a0a2 <xQueueGenericSendFromISR+0x72>
 800a09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a09e:	2b01      	cmp	r3, #1
 800a0a0:	d101      	bne.n	800a0a6 <xQueueGenericSendFromISR+0x76>
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e000      	b.n	800a0a8 <xQueueGenericSendFromISR+0x78>
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d10c      	bne.n	800a0c6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800a0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b0:	b672      	cpsid	i
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	b662      	cpsie	i
 800a0c0:	61fb      	str	r3, [r7, #28]
}
 800a0c2:	bf00      	nop
 800a0c4:	e7fe      	b.n	800a0c4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a0c6:	f001 ff89 	bl	800bfdc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a0ca:	f3ef 8211 	mrs	r2, BASEPRI
 800a0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d2:	b672      	cpsid	i
 800a0d4:	f383 8811 	msr	BASEPRI, r3
 800a0d8:	f3bf 8f6f 	isb	sy
 800a0dc:	f3bf 8f4f 	dsb	sy
 800a0e0:	b662      	cpsie	i
 800a0e2:	61ba      	str	r2, [r7, #24]
 800a0e4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a0e6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a0e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d302      	bcc.n	800a0fc <xQueueGenericSendFromISR+0xcc>
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	2b02      	cmp	r3, #2
 800a0fa:	d12c      	bne.n	800a156 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a102:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a106:	683a      	ldr	r2, [r7, #0]
 800a108:	68b9      	ldr	r1, [r7, #8]
 800a10a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a10c:	f000 f916 	bl	800a33c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a110:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a114:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a118:	d112      	bne.n	800a140 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d016      	beq.n	800a150 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a124:	3324      	adds	r3, #36	; 0x24
 800a126:	4618      	mov	r0, r3
 800a128:	f000 ff20 	bl	800af6c <xTaskRemoveFromEventList>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d00e      	beq.n	800a150 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d00b      	beq.n	800a150 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	601a      	str	r2, [r3, #0]
 800a13e:	e007      	b.n	800a150 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a140:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a144:	3301      	adds	r3, #1
 800a146:	b2db      	uxtb	r3, r3
 800a148:	b25a      	sxtb	r2, r3
 800a14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a150:	2301      	movs	r3, #1
 800a152:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a154:	e001      	b.n	800a15a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a156:	2300      	movs	r3, #0
 800a158:	637b      	str	r3, [r7, #52]	; 0x34
 800a15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a15c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a164:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3738      	adds	r7, #56	; 0x38
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b08c      	sub	sp, #48	; 0x30
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a17c:	2300      	movs	r3, #0
 800a17e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a186:	2b00      	cmp	r3, #0
 800a188:	d10c      	bne.n	800a1a4 <xQueueReceive+0x34>
	__asm volatile
 800a18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18e:	b672      	cpsid	i
 800a190:	f383 8811 	msr	BASEPRI, r3
 800a194:	f3bf 8f6f 	isb	sy
 800a198:	f3bf 8f4f 	dsb	sy
 800a19c:	b662      	cpsie	i
 800a19e:	623b      	str	r3, [r7, #32]
}
 800a1a0:	bf00      	nop
 800a1a2:	e7fe      	b.n	800a1a2 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d103      	bne.n	800a1b2 <xQueueReceive+0x42>
 800a1aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d101      	bne.n	800a1b6 <xQueueReceive+0x46>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e000      	b.n	800a1b8 <xQueueReceive+0x48>
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d10c      	bne.n	800a1d6 <xQueueReceive+0x66>
	__asm volatile
 800a1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c0:	b672      	cpsid	i
 800a1c2:	f383 8811 	msr	BASEPRI, r3
 800a1c6:	f3bf 8f6f 	isb	sy
 800a1ca:	f3bf 8f4f 	dsb	sy
 800a1ce:	b662      	cpsie	i
 800a1d0:	61fb      	str	r3, [r7, #28]
}
 800a1d2:	bf00      	nop
 800a1d4:	e7fe      	b.n	800a1d4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1d6:	f001 f8c9 	bl	800b36c <xTaskGetSchedulerState>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d102      	bne.n	800a1e6 <xQueueReceive+0x76>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d101      	bne.n	800a1ea <xQueueReceive+0x7a>
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e000      	b.n	800a1ec <xQueueReceive+0x7c>
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d10c      	bne.n	800a20a <xQueueReceive+0x9a>
	__asm volatile
 800a1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f4:	b672      	cpsid	i
 800a1f6:	f383 8811 	msr	BASEPRI, r3
 800a1fa:	f3bf 8f6f 	isb	sy
 800a1fe:	f3bf 8f4f 	dsb	sy
 800a202:	b662      	cpsie	i
 800a204:	61bb      	str	r3, [r7, #24]
}
 800a206:	bf00      	nop
 800a208:	e7fe      	b.n	800a208 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a20a:	f001 fdff 	bl	800be0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a212:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a216:	2b00      	cmp	r3, #0
 800a218:	d01f      	beq.n	800a25a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a21a:	68b9      	ldr	r1, [r7, #8]
 800a21c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a21e:	f000 f8f7 	bl	800a410 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a224:	1e5a      	subs	r2, r3, #1
 800a226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a228:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a22a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22c:	691b      	ldr	r3, [r3, #16]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d00f      	beq.n	800a252 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a234:	3310      	adds	r3, #16
 800a236:	4618      	mov	r0, r3
 800a238:	f000 fe98 	bl	800af6c <xTaskRemoveFromEventList>
 800a23c:	4603      	mov	r3, r0
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d007      	beq.n	800a252 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a242:	4b3d      	ldr	r3, [pc, #244]	; (800a338 <xQueueReceive+0x1c8>)
 800a244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a248:	601a      	str	r2, [r3, #0]
 800a24a:	f3bf 8f4f 	dsb	sy
 800a24e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a252:	f001 fe0f 	bl	800be74 <vPortExitCritical>
				return pdPASS;
 800a256:	2301      	movs	r3, #1
 800a258:	e069      	b.n	800a32e <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d103      	bne.n	800a268 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a260:	f001 fe08 	bl	800be74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a264:	2300      	movs	r3, #0
 800a266:	e062      	b.n	800a32e <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d106      	bne.n	800a27c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a26e:	f107 0310 	add.w	r3, r7, #16
 800a272:	4618      	mov	r0, r3
 800a274:	f000 fee0 	bl	800b038 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a278:	2301      	movs	r3, #1
 800a27a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a27c:	f001 fdfa 	bl	800be74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a280:	f000 fc16 	bl	800aab0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a284:	f001 fdc2 	bl	800be0c <vPortEnterCritical>
 800a288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a28a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a28e:	b25b      	sxtb	r3, r3
 800a290:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a294:	d103      	bne.n	800a29e <xQueueReceive+0x12e>
 800a296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a298:	2200      	movs	r2, #0
 800a29a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2a4:	b25b      	sxtb	r3, r3
 800a2a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2aa:	d103      	bne.n	800a2b4 <xQueueReceive+0x144>
 800a2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2b4:	f001 fdde 	bl	800be74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2b8:	1d3a      	adds	r2, r7, #4
 800a2ba:	f107 0310 	add.w	r3, r7, #16
 800a2be:	4611      	mov	r1, r2
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f000 fecf 	bl	800b064 <xTaskCheckForTimeOut>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d123      	bne.n	800a314 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a2cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2ce:	f000 f917 	bl	800a500 <prvIsQueueEmpty>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d017      	beq.n	800a308 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2da:	3324      	adds	r3, #36	; 0x24
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	4611      	mov	r1, r2
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f000 fdef 	bl	800aec4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a2e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2e8:	f000 f8b8 	bl	800a45c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a2ec:	f000 fbee 	bl	800aacc <xTaskResumeAll>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d189      	bne.n	800a20a <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800a2f6:	4b10      	ldr	r3, [pc, #64]	; (800a338 <xQueueReceive+0x1c8>)
 800a2f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2fc:	601a      	str	r2, [r3, #0]
 800a2fe:	f3bf 8f4f 	dsb	sy
 800a302:	f3bf 8f6f 	isb	sy
 800a306:	e780      	b.n	800a20a <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a30a:	f000 f8a7 	bl	800a45c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a30e:	f000 fbdd 	bl	800aacc <xTaskResumeAll>
 800a312:	e77a      	b.n	800a20a <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a316:	f000 f8a1 	bl	800a45c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a31a:	f000 fbd7 	bl	800aacc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a31e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a320:	f000 f8ee 	bl	800a500 <prvIsQueueEmpty>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	f43f af6f 	beq.w	800a20a <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a32c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3730      	adds	r7, #48	; 0x30
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	e000ed04 	.word	0xe000ed04

0800a33c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b086      	sub	sp, #24
 800a340:	af00      	add	r7, sp, #0
 800a342:	60f8      	str	r0, [r7, #12]
 800a344:	60b9      	str	r1, [r7, #8]
 800a346:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a348:	2300      	movs	r3, #0
 800a34a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a350:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a356:	2b00      	cmp	r3, #0
 800a358:	d10d      	bne.n	800a376 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d14d      	bne.n	800a3fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	4618      	mov	r0, r3
 800a368:	f001 f81e 	bl	800b3a8 <xTaskPriorityDisinherit>
 800a36c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2200      	movs	r2, #0
 800a372:	609a      	str	r2, [r3, #8]
 800a374:	e043      	b.n	800a3fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d119      	bne.n	800a3b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	6858      	ldr	r0, [r3, #4]
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a384:	461a      	mov	r2, r3
 800a386:	68b9      	ldr	r1, [r7, #8]
 800a388:	f002 f880 	bl	800c48c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	685a      	ldr	r2, [r3, #4]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a394:	441a      	add	r2, r3
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	685a      	ldr	r2, [r3, #4]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	689b      	ldr	r3, [r3, #8]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	d32b      	bcc.n	800a3fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	605a      	str	r2, [r3, #4]
 800a3ae:	e026      	b.n	800a3fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	68d8      	ldr	r0, [r3, #12]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	68b9      	ldr	r1, [r7, #8]
 800a3bc:	f002 f866 	bl	800c48c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	68da      	ldr	r2, [r3, #12]
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3c8:	425b      	negs	r3, r3
 800a3ca:	441a      	add	r2, r3
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	68da      	ldr	r2, [r3, #12]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d207      	bcs.n	800a3ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	689a      	ldr	r2, [r3, #8]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e4:	425b      	negs	r3, r3
 800a3e6:	441a      	add	r2, r3
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2b02      	cmp	r3, #2
 800a3f0:	d105      	bne.n	800a3fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d002      	beq.n	800a3fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a3f8:	693b      	ldr	r3, [r7, #16]
 800a3fa:	3b01      	subs	r3, #1
 800a3fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	1c5a      	adds	r2, r3, #1
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a406:	697b      	ldr	r3, [r7, #20]
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3718      	adds	r7, #24
 800a40c:	46bd      	mov	sp, r7
 800a40e:	bd80      	pop	{r7, pc}

0800a410 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b082      	sub	sp, #8
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d018      	beq.n	800a454 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	68da      	ldr	r2, [r3, #12]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a42a:	441a      	add	r2, r3
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	68da      	ldr	r2, [r3, #12]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d303      	bcc.n	800a444 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	68d9      	ldr	r1, [r3, #12]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a44c:	461a      	mov	r2, r3
 800a44e:	6838      	ldr	r0, [r7, #0]
 800a450:	f002 f81c 	bl	800c48c <memcpy>
	}
}
 800a454:	bf00      	nop
 800a456:	3708      	adds	r7, #8
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a464:	f001 fcd2 	bl	800be0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a46e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a470:	e011      	b.n	800a496 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a476:	2b00      	cmp	r3, #0
 800a478:	d012      	beq.n	800a4a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	3324      	adds	r3, #36	; 0x24
 800a47e:	4618      	mov	r0, r3
 800a480:	f000 fd74 	bl	800af6c <xTaskRemoveFromEventList>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d001      	beq.n	800a48e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a48a:	f000 fe51 	bl	800b130 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a48e:	7bfb      	ldrb	r3, [r7, #15]
 800a490:	3b01      	subs	r3, #1
 800a492:	b2db      	uxtb	r3, r3
 800a494:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	dce9      	bgt.n	800a472 <prvUnlockQueue+0x16>
 800a49e:	e000      	b.n	800a4a2 <prvUnlockQueue+0x46>
					break;
 800a4a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	22ff      	movs	r2, #255	; 0xff
 800a4a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a4aa:	f001 fce3 	bl	800be74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a4ae:	f001 fcad 	bl	800be0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a4ba:	e011      	b.n	800a4e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	691b      	ldr	r3, [r3, #16]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d012      	beq.n	800a4ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	3310      	adds	r3, #16
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f000 fd4f 	bl	800af6c <xTaskRemoveFromEventList>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d001      	beq.n	800a4d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a4d4:	f000 fe2c 	bl	800b130 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a4d8:	7bbb      	ldrb	r3, [r7, #14]
 800a4da:	3b01      	subs	r3, #1
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a4e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	dce9      	bgt.n	800a4bc <prvUnlockQueue+0x60>
 800a4e8:	e000      	b.n	800a4ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a4ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	22ff      	movs	r2, #255	; 0xff
 800a4f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a4f4:	f001 fcbe 	bl	800be74 <vPortExitCritical>
}
 800a4f8:	bf00      	nop
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a508:	f001 fc80 	bl	800be0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a510:	2b00      	cmp	r3, #0
 800a512:	d102      	bne.n	800a51a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a514:	2301      	movs	r3, #1
 800a516:	60fb      	str	r3, [r7, #12]
 800a518:	e001      	b.n	800a51e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a51a:	2300      	movs	r3, #0
 800a51c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a51e:	f001 fca9 	bl	800be74 <vPortExitCritical>

	return xReturn;
 800a522:	68fb      	ldr	r3, [r7, #12]
}
 800a524:	4618      	mov	r0, r3
 800a526:	3710      	adds	r7, #16
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}

0800a52c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a534:	f001 fc6a 	bl	800be0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a540:	429a      	cmp	r2, r3
 800a542:	d102      	bne.n	800a54a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a544:	2301      	movs	r3, #1
 800a546:	60fb      	str	r3, [r7, #12]
 800a548:	e001      	b.n	800a54e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a54a:	2300      	movs	r3, #0
 800a54c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a54e:	f001 fc91 	bl	800be74 <vPortExitCritical>

	return xReturn;
 800a552:	68fb      	ldr	r3, [r7, #12]
}
 800a554:	4618      	mov	r0, r3
 800a556:	3710      	adds	r7, #16
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a55c:	b480      	push	{r7}
 800a55e:	b085      	sub	sp, #20
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a566:	2300      	movs	r3, #0
 800a568:	60fb      	str	r3, [r7, #12]
 800a56a:	e014      	b.n	800a596 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a56c:	4a0f      	ldr	r2, [pc, #60]	; (800a5ac <vQueueAddToRegistry+0x50>)
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d10b      	bne.n	800a590 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a578:	490c      	ldr	r1, [pc, #48]	; (800a5ac <vQueueAddToRegistry+0x50>)
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	683a      	ldr	r2, [r7, #0]
 800a57e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a582:	4a0a      	ldr	r2, [pc, #40]	; (800a5ac <vQueueAddToRegistry+0x50>)
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	00db      	lsls	r3, r3, #3
 800a588:	4413      	add	r3, r2
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a58e:	e006      	b.n	800a59e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	3301      	adds	r3, #1
 800a594:	60fb      	str	r3, [r7, #12]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2b07      	cmp	r3, #7
 800a59a:	d9e7      	bls.n	800a56c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a59c:	bf00      	nop
 800a59e:	bf00      	nop
 800a5a0:	3714      	adds	r7, #20
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr
 800a5aa:	bf00      	nop
 800a5ac:	200011e4 	.word	0x200011e4

0800a5b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b086      	sub	sp, #24
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a5c0:	f001 fc24 	bl	800be0c <vPortEnterCritical>
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5ca:	b25b      	sxtb	r3, r3
 800a5cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5d0:	d103      	bne.n	800a5da <vQueueWaitForMessageRestricted+0x2a>
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5e0:	b25b      	sxtb	r3, r3
 800a5e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a5e6:	d103      	bne.n	800a5f0 <vQueueWaitForMessageRestricted+0x40>
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5f0:	f001 fc40 	bl	800be74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d106      	bne.n	800a60a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	3324      	adds	r3, #36	; 0x24
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	68b9      	ldr	r1, [r7, #8]
 800a604:	4618      	mov	r0, r3
 800a606:	f000 fc83 	bl	800af10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a60a:	6978      	ldr	r0, [r7, #20]
 800a60c:	f7ff ff26 	bl	800a45c <prvUnlockQueue>
	}
 800a610:	bf00      	nop
 800a612:	3718      	adds	r7, #24
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b08e      	sub	sp, #56	; 0x38
 800a61c:	af04      	add	r7, sp, #16
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	607a      	str	r2, [r7, #4]
 800a624:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d10c      	bne.n	800a646 <xTaskCreateStatic+0x2e>
	__asm volatile
 800a62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a630:	b672      	cpsid	i
 800a632:	f383 8811 	msr	BASEPRI, r3
 800a636:	f3bf 8f6f 	isb	sy
 800a63a:	f3bf 8f4f 	dsb	sy
 800a63e:	b662      	cpsie	i
 800a640:	623b      	str	r3, [r7, #32]
}
 800a642:	bf00      	nop
 800a644:	e7fe      	b.n	800a644 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800a646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d10c      	bne.n	800a666 <xTaskCreateStatic+0x4e>
	__asm volatile
 800a64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a650:	b672      	cpsid	i
 800a652:	f383 8811 	msr	BASEPRI, r3
 800a656:	f3bf 8f6f 	isb	sy
 800a65a:	f3bf 8f4f 	dsb	sy
 800a65e:	b662      	cpsie	i
 800a660:	61fb      	str	r3, [r7, #28]
}
 800a662:	bf00      	nop
 800a664:	e7fe      	b.n	800a664 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a666:	2360      	movs	r3, #96	; 0x60
 800a668:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	2b60      	cmp	r3, #96	; 0x60
 800a66e:	d00c      	beq.n	800a68a <xTaskCreateStatic+0x72>
	__asm volatile
 800a670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a674:	b672      	cpsid	i
 800a676:	f383 8811 	msr	BASEPRI, r3
 800a67a:	f3bf 8f6f 	isb	sy
 800a67e:	f3bf 8f4f 	dsb	sy
 800a682:	b662      	cpsie	i
 800a684:	61bb      	str	r3, [r7, #24]
}
 800a686:	bf00      	nop
 800a688:	e7fe      	b.n	800a688 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a68a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a68c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d01e      	beq.n	800a6d0 <xTaskCreateStatic+0xb8>
 800a692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a694:	2b00      	cmp	r3, #0
 800a696:	d01b      	beq.n	800a6d0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a69a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a4:	2202      	movs	r2, #2
 800a6a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	9303      	str	r3, [sp, #12]
 800a6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b0:	9302      	str	r3, [sp, #8]
 800a6b2:	f107 0314 	add.w	r3, r7, #20
 800a6b6:	9301      	str	r3, [sp, #4]
 800a6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ba:	9300      	str	r3, [sp, #0]
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	68b9      	ldr	r1, [r7, #8]
 800a6c2:	68f8      	ldr	r0, [r7, #12]
 800a6c4:	f000 f850 	bl	800a768 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a6c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a6ca:	f000 f8e1 	bl	800a890 <prvAddNewTaskToReadyList>
 800a6ce:	e001      	b.n	800a6d4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a6d4:	697b      	ldr	r3, [r7, #20]
	}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3728      	adds	r7, #40	; 0x28
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b08c      	sub	sp, #48	; 0x30
 800a6e2:	af04      	add	r7, sp, #16
 800a6e4:	60f8      	str	r0, [r7, #12]
 800a6e6:	60b9      	str	r1, [r7, #8]
 800a6e8:	603b      	str	r3, [r7, #0]
 800a6ea:	4613      	mov	r3, r2
 800a6ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a6ee:	88fb      	ldrh	r3, [r7, #6]
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f001 fcb6 	bl	800c064 <pvPortMalloc>
 800a6f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d00e      	beq.n	800a71e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a700:	2060      	movs	r0, #96	; 0x60
 800a702:	f001 fcaf 	bl	800c064 <pvPortMalloc>
 800a706:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a708:	69fb      	ldr	r3, [r7, #28]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d003      	beq.n	800a716 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a70e:	69fb      	ldr	r3, [r7, #28]
 800a710:	697a      	ldr	r2, [r7, #20]
 800a712:	631a      	str	r2, [r3, #48]	; 0x30
 800a714:	e005      	b.n	800a722 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a716:	6978      	ldr	r0, [r7, #20]
 800a718:	f001 fd74 	bl	800c204 <vPortFree>
 800a71c:	e001      	b.n	800a722 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a71e:	2300      	movs	r3, #0
 800a720:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a722:	69fb      	ldr	r3, [r7, #28]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d017      	beq.n	800a758 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a728:	69fb      	ldr	r3, [r7, #28]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a730:	88fa      	ldrh	r2, [r7, #6]
 800a732:	2300      	movs	r3, #0
 800a734:	9303      	str	r3, [sp, #12]
 800a736:	69fb      	ldr	r3, [r7, #28]
 800a738:	9302      	str	r3, [sp, #8]
 800a73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a73c:	9301      	str	r3, [sp, #4]
 800a73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a740:	9300      	str	r3, [sp, #0]
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	68b9      	ldr	r1, [r7, #8]
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f000 f80e 	bl	800a768 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a74c:	69f8      	ldr	r0, [r7, #28]
 800a74e:	f000 f89f 	bl	800a890 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a752:	2301      	movs	r3, #1
 800a754:	61bb      	str	r3, [r7, #24]
 800a756:	e002      	b.n	800a75e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a758:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a75c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a75e:	69bb      	ldr	r3, [r7, #24]
	}
 800a760:	4618      	mov	r0, r3
 800a762:	3720      	adds	r7, #32
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b088      	sub	sp, #32
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	60b9      	str	r1, [r7, #8]
 800a772:	607a      	str	r2, [r7, #4]
 800a774:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a778:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	461a      	mov	r2, r3
 800a780:	21a5      	movs	r1, #165	; 0xa5
 800a782:	f001 fe91 	bl	800c4a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a78a:	6879      	ldr	r1, [r7, #4]
 800a78c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a790:	440b      	add	r3, r1
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	4413      	add	r3, r2
 800a796:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a798:	69bb      	ldr	r3, [r7, #24]
 800a79a:	f023 0307 	bic.w	r3, r3, #7
 800a79e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a7a0:	69bb      	ldr	r3, [r7, #24]
 800a7a2:	f003 0307 	and.w	r3, r3, #7
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d00c      	beq.n	800a7c4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800a7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ae:	b672      	cpsid	i
 800a7b0:	f383 8811 	msr	BASEPRI, r3
 800a7b4:	f3bf 8f6f 	isb	sy
 800a7b8:	f3bf 8f4f 	dsb	sy
 800a7bc:	b662      	cpsie	i
 800a7be:	617b      	str	r3, [r7, #20]
}
 800a7c0:	bf00      	nop
 800a7c2:	e7fe      	b.n	800a7c2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d01f      	beq.n	800a80a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	61fb      	str	r3, [r7, #28]
 800a7ce:	e012      	b.n	800a7f6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a7d0:	68ba      	ldr	r2, [r7, #8]
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	4413      	add	r3, r2
 800a7d6:	7819      	ldrb	r1, [r3, #0]
 800a7d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7da:	69fb      	ldr	r3, [r7, #28]
 800a7dc:	4413      	add	r3, r2
 800a7de:	3334      	adds	r3, #52	; 0x34
 800a7e0:	460a      	mov	r2, r1
 800a7e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a7e4:	68ba      	ldr	r2, [r7, #8]
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d006      	beq.n	800a7fe <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a7f0:	69fb      	ldr	r3, [r7, #28]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	61fb      	str	r3, [r7, #28]
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	2b0f      	cmp	r3, #15
 800a7fa:	d9e9      	bls.n	800a7d0 <prvInitialiseNewTask+0x68>
 800a7fc:	e000      	b.n	800a800 <prvInitialiseNewTask+0x98>
			{
				break;
 800a7fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a802:	2200      	movs	r2, #0
 800a804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a808:	e003      	b.n	800a812 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80c:	2200      	movs	r2, #0
 800a80e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a814:	2b37      	cmp	r3, #55	; 0x37
 800a816:	d901      	bls.n	800a81c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a818:	2337      	movs	r3, #55	; 0x37
 800a81a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a81e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a820:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a826:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a82a:	2200      	movs	r2, #0
 800a82c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a830:	3304      	adds	r3, #4
 800a832:	4618      	mov	r0, r3
 800a834:	f7ff f952 	bl	8009adc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a83a:	3318      	adds	r3, #24
 800a83c:	4618      	mov	r0, r3
 800a83e:	f7ff f94d 	bl	8009adc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a846:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a84a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a850:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a856:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800a858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a85a:	2200      	movs	r2, #0
 800a85c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a860:	2200      	movs	r2, #0
 800a862:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a866:	2200      	movs	r2, #0
 800a868:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a86c:	683a      	ldr	r2, [r7, #0]
 800a86e:	68f9      	ldr	r1, [r7, #12]
 800a870:	69b8      	ldr	r0, [r7, #24]
 800a872:	f001 f9bb 	bl	800bbec <pxPortInitialiseStack>
 800a876:	4602      	mov	r2, r0
 800a878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d002      	beq.n	800a888 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a886:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a888:	bf00      	nop
 800a88a:	3720      	adds	r7, #32
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b082      	sub	sp, #8
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a898:	f001 fab8 	bl	800be0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a89c:	4b2d      	ldr	r3, [pc, #180]	; (800a954 <prvAddNewTaskToReadyList+0xc4>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	4a2c      	ldr	r2, [pc, #176]	; (800a954 <prvAddNewTaskToReadyList+0xc4>)
 800a8a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a8a6:	4b2c      	ldr	r3, [pc, #176]	; (800a958 <prvAddNewTaskToReadyList+0xc8>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d109      	bne.n	800a8c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a8ae:	4a2a      	ldr	r2, [pc, #168]	; (800a958 <prvAddNewTaskToReadyList+0xc8>)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a8b4:	4b27      	ldr	r3, [pc, #156]	; (800a954 <prvAddNewTaskToReadyList+0xc4>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d110      	bne.n	800a8de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a8bc:	f000 fc5e 	bl	800b17c <prvInitialiseTaskLists>
 800a8c0:	e00d      	b.n	800a8de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a8c2:	4b26      	ldr	r3, [pc, #152]	; (800a95c <prvAddNewTaskToReadyList+0xcc>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d109      	bne.n	800a8de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a8ca:	4b23      	ldr	r3, [pc, #140]	; (800a958 <prvAddNewTaskToReadyList+0xc8>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d802      	bhi.n	800a8de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a8d8:	4a1f      	ldr	r2, [pc, #124]	; (800a958 <prvAddNewTaskToReadyList+0xc8>)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a8de:	4b20      	ldr	r3, [pc, #128]	; (800a960 <prvAddNewTaskToReadyList+0xd0>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	4a1e      	ldr	r2, [pc, #120]	; (800a960 <prvAddNewTaskToReadyList+0xd0>)
 800a8e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a8e8:	4b1d      	ldr	r3, [pc, #116]	; (800a960 <prvAddNewTaskToReadyList+0xd0>)
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8f4:	4b1b      	ldr	r3, [pc, #108]	; (800a964 <prvAddNewTaskToReadyList+0xd4>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d903      	bls.n	800a904 <prvAddNewTaskToReadyList+0x74>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a900:	4a18      	ldr	r2, [pc, #96]	; (800a964 <prvAddNewTaskToReadyList+0xd4>)
 800a902:	6013      	str	r3, [r2, #0]
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a908:	4613      	mov	r3, r2
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	4413      	add	r3, r2
 800a90e:	009b      	lsls	r3, r3, #2
 800a910:	4a15      	ldr	r2, [pc, #84]	; (800a968 <prvAddNewTaskToReadyList+0xd8>)
 800a912:	441a      	add	r2, r3
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	3304      	adds	r3, #4
 800a918:	4619      	mov	r1, r3
 800a91a:	4610      	mov	r0, r2
 800a91c:	f7ff f8eb 	bl	8009af6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a920:	f001 faa8 	bl	800be74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a924:	4b0d      	ldr	r3, [pc, #52]	; (800a95c <prvAddNewTaskToReadyList+0xcc>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d00e      	beq.n	800a94a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a92c:	4b0a      	ldr	r3, [pc, #40]	; (800a958 <prvAddNewTaskToReadyList+0xc8>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a936:	429a      	cmp	r2, r3
 800a938:	d207      	bcs.n	800a94a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a93a:	4b0c      	ldr	r3, [pc, #48]	; (800a96c <prvAddNewTaskToReadyList+0xdc>)
 800a93c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a940:	601a      	str	r2, [r3, #0]
 800a942:	f3bf 8f4f 	dsb	sy
 800a946:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a94a:	bf00      	nop
 800a94c:	3708      	adds	r7, #8
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
 800a952:	bf00      	nop
 800a954:	200016f8 	.word	0x200016f8
 800a958:	20001224 	.word	0x20001224
 800a95c:	20001704 	.word	0x20001704
 800a960:	20001714 	.word	0x20001714
 800a964:	20001700 	.word	0x20001700
 800a968:	20001228 	.word	0x20001228
 800a96c:	e000ed04 	.word	0xe000ed04

0800a970 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a978:	2300      	movs	r3, #0
 800a97a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d019      	beq.n	800a9b6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a982:	4b14      	ldr	r3, [pc, #80]	; (800a9d4 <vTaskDelay+0x64>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d00c      	beq.n	800a9a4 <vTaskDelay+0x34>
	__asm volatile
 800a98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a98e:	b672      	cpsid	i
 800a990:	f383 8811 	msr	BASEPRI, r3
 800a994:	f3bf 8f6f 	isb	sy
 800a998:	f3bf 8f4f 	dsb	sy
 800a99c:	b662      	cpsie	i
 800a99e:	60bb      	str	r3, [r7, #8]
}
 800a9a0:	bf00      	nop
 800a9a2:	e7fe      	b.n	800a9a2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800a9a4:	f000 f884 	bl	800aab0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a9a8:	2100      	movs	r1, #0
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 fd6e 	bl	800b48c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a9b0:	f000 f88c 	bl	800aacc <xTaskResumeAll>
 800a9b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d107      	bne.n	800a9cc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800a9bc:	4b06      	ldr	r3, [pc, #24]	; (800a9d8 <vTaskDelay+0x68>)
 800a9be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9c2:	601a      	str	r2, [r3, #0]
 800a9c4:	f3bf 8f4f 	dsb	sy
 800a9c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a9cc:	bf00      	nop
 800a9ce:	3710      	adds	r7, #16
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	bd80      	pop	{r7, pc}
 800a9d4:	20001720 	.word	0x20001720
 800a9d8:	e000ed04 	.word	0xe000ed04

0800a9dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b08a      	sub	sp, #40	; 0x28
 800a9e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a9ea:	463a      	mov	r2, r7
 800a9ec:	1d39      	adds	r1, r7, #4
 800a9ee:	f107 0308 	add.w	r3, r7, #8
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7ff f81e 	bl	8009a34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a9f8:	6839      	ldr	r1, [r7, #0]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	68ba      	ldr	r2, [r7, #8]
 800a9fe:	9202      	str	r2, [sp, #8]
 800aa00:	9301      	str	r3, [sp, #4]
 800aa02:	2300      	movs	r3, #0
 800aa04:	9300      	str	r3, [sp, #0]
 800aa06:	2300      	movs	r3, #0
 800aa08:	460a      	mov	r2, r1
 800aa0a:	4923      	ldr	r1, [pc, #140]	; (800aa98 <vTaskStartScheduler+0xbc>)
 800aa0c:	4823      	ldr	r0, [pc, #140]	; (800aa9c <vTaskStartScheduler+0xc0>)
 800aa0e:	f7ff fe03 	bl	800a618 <xTaskCreateStatic>
 800aa12:	4603      	mov	r3, r0
 800aa14:	4a22      	ldr	r2, [pc, #136]	; (800aaa0 <vTaskStartScheduler+0xc4>)
 800aa16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aa18:	4b21      	ldr	r3, [pc, #132]	; (800aaa0 <vTaskStartScheduler+0xc4>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d002      	beq.n	800aa26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aa20:	2301      	movs	r3, #1
 800aa22:	617b      	str	r3, [r7, #20]
 800aa24:	e001      	b.n	800aa2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aa26:	2300      	movs	r3, #0
 800aa28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d102      	bne.n	800aa36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800aa30:	f000 fd80 	bl	800b534 <xTimerCreateTimerTask>
 800aa34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	d118      	bne.n	800aa6e <vTaskStartScheduler+0x92>
	__asm volatile
 800aa3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa40:	b672      	cpsid	i
 800aa42:	f383 8811 	msr	BASEPRI, r3
 800aa46:	f3bf 8f6f 	isb	sy
 800aa4a:	f3bf 8f4f 	dsb	sy
 800aa4e:	b662      	cpsie	i
 800aa50:	613b      	str	r3, [r7, #16]
}
 800aa52:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aa54:	4b13      	ldr	r3, [pc, #76]	; (800aaa4 <vTaskStartScheduler+0xc8>)
 800aa56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aa5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aa5c:	4b12      	ldr	r3, [pc, #72]	; (800aaa8 <vTaskStartScheduler+0xcc>)
 800aa5e:	2201      	movs	r2, #1
 800aa60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aa62:	4b12      	ldr	r3, [pc, #72]	; (800aaac <vTaskStartScheduler+0xd0>)
 800aa64:	2200      	movs	r2, #0
 800aa66:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aa68:	f001 f952 	bl	800bd10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aa6c:	e010      	b.n	800aa90 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa74:	d10c      	bne.n	800aa90 <vTaskStartScheduler+0xb4>
	__asm volatile
 800aa76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa7a:	b672      	cpsid	i
 800aa7c:	f383 8811 	msr	BASEPRI, r3
 800aa80:	f3bf 8f6f 	isb	sy
 800aa84:	f3bf 8f4f 	dsb	sy
 800aa88:	b662      	cpsie	i
 800aa8a:	60fb      	str	r3, [r7, #12]
}
 800aa8c:	bf00      	nop
 800aa8e:	e7fe      	b.n	800aa8e <vTaskStartScheduler+0xb2>
}
 800aa90:	bf00      	nop
 800aa92:	3718      	adds	r7, #24
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	0800cddc 	.word	0x0800cddc
 800aa9c:	0800b149 	.word	0x0800b149
 800aaa0:	2000171c 	.word	0x2000171c
 800aaa4:	20001718 	.word	0x20001718
 800aaa8:	20001704 	.word	0x20001704
 800aaac:	200016fc 	.word	0x200016fc

0800aab0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aab0:	b480      	push	{r7}
 800aab2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800aab4:	4b04      	ldr	r3, [pc, #16]	; (800aac8 <vTaskSuspendAll+0x18>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	3301      	adds	r3, #1
 800aaba:	4a03      	ldr	r2, [pc, #12]	; (800aac8 <vTaskSuspendAll+0x18>)
 800aabc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800aabe:	bf00      	nop
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr
 800aac8:	20001720 	.word	0x20001720

0800aacc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aad2:	2300      	movs	r3, #0
 800aad4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aad6:	2300      	movs	r3, #0
 800aad8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aada:	4b43      	ldr	r3, [pc, #268]	; (800abe8 <xTaskResumeAll+0x11c>)
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d10c      	bne.n	800aafc <xTaskResumeAll+0x30>
	__asm volatile
 800aae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae6:	b672      	cpsid	i
 800aae8:	f383 8811 	msr	BASEPRI, r3
 800aaec:	f3bf 8f6f 	isb	sy
 800aaf0:	f3bf 8f4f 	dsb	sy
 800aaf4:	b662      	cpsie	i
 800aaf6:	603b      	str	r3, [r7, #0]
}
 800aaf8:	bf00      	nop
 800aafa:	e7fe      	b.n	800aafa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aafc:	f001 f986 	bl	800be0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ab00:	4b39      	ldr	r3, [pc, #228]	; (800abe8 <xTaskResumeAll+0x11c>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	3b01      	subs	r3, #1
 800ab06:	4a38      	ldr	r2, [pc, #224]	; (800abe8 <xTaskResumeAll+0x11c>)
 800ab08:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab0a:	4b37      	ldr	r3, [pc, #220]	; (800abe8 <xTaskResumeAll+0x11c>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d162      	bne.n	800abd8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ab12:	4b36      	ldr	r3, [pc, #216]	; (800abec <xTaskResumeAll+0x120>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d05e      	beq.n	800abd8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab1a:	e02f      	b.n	800ab7c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab1c:	4b34      	ldr	r3, [pc, #208]	; (800abf0 <xTaskResumeAll+0x124>)
 800ab1e:	68db      	ldr	r3, [r3, #12]
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	3318      	adds	r3, #24
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7ff f841 	bl	8009bb0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	3304      	adds	r3, #4
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7ff f83c 	bl	8009bb0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab3c:	4b2d      	ldr	r3, [pc, #180]	; (800abf4 <xTaskResumeAll+0x128>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d903      	bls.n	800ab4c <xTaskResumeAll+0x80>
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab48:	4a2a      	ldr	r2, [pc, #168]	; (800abf4 <xTaskResumeAll+0x128>)
 800ab4a:	6013      	str	r3, [r2, #0]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab50:	4613      	mov	r3, r2
 800ab52:	009b      	lsls	r3, r3, #2
 800ab54:	4413      	add	r3, r2
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	4a27      	ldr	r2, [pc, #156]	; (800abf8 <xTaskResumeAll+0x12c>)
 800ab5a:	441a      	add	r2, r3
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	3304      	adds	r3, #4
 800ab60:	4619      	mov	r1, r3
 800ab62:	4610      	mov	r0, r2
 800ab64:	f7fe ffc7 	bl	8009af6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab6c:	4b23      	ldr	r3, [pc, #140]	; (800abfc <xTaskResumeAll+0x130>)
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d302      	bcc.n	800ab7c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800ab76:	4b22      	ldr	r3, [pc, #136]	; (800ac00 <xTaskResumeAll+0x134>)
 800ab78:	2201      	movs	r2, #1
 800ab7a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab7c:	4b1c      	ldr	r3, [pc, #112]	; (800abf0 <xTaskResumeAll+0x124>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d1cb      	bne.n	800ab1c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d001      	beq.n	800ab8e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ab8a:	f000 fbcf 	bl	800b32c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ab8e:	4b1d      	ldr	r3, [pc, #116]	; (800ac04 <xTaskResumeAll+0x138>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d010      	beq.n	800abbc <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ab9a:	f000 f853 	bl	800ac44 <xTaskIncrementTick>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d002      	beq.n	800abaa <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800aba4:	4b16      	ldr	r3, [pc, #88]	; (800ac00 <xTaskResumeAll+0x134>)
 800aba6:	2201      	movs	r2, #1
 800aba8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	3b01      	subs	r3, #1
 800abae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d1f1      	bne.n	800ab9a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800abb6:	4b13      	ldr	r3, [pc, #76]	; (800ac04 <xTaskResumeAll+0x138>)
 800abb8:	2200      	movs	r2, #0
 800abba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800abbc:	4b10      	ldr	r3, [pc, #64]	; (800ac00 <xTaskResumeAll+0x134>)
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d009      	beq.n	800abd8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800abc4:	2301      	movs	r3, #1
 800abc6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800abc8:	4b0f      	ldr	r3, [pc, #60]	; (800ac08 <xTaskResumeAll+0x13c>)
 800abca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abce:	601a      	str	r2, [r3, #0]
 800abd0:	f3bf 8f4f 	dsb	sy
 800abd4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800abd8:	f001 f94c 	bl	800be74 <vPortExitCritical>

	return xAlreadyYielded;
 800abdc:	68bb      	ldr	r3, [r7, #8]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3710      	adds	r7, #16
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop
 800abe8:	20001720 	.word	0x20001720
 800abec:	200016f8 	.word	0x200016f8
 800abf0:	200016b8 	.word	0x200016b8
 800abf4:	20001700 	.word	0x20001700
 800abf8:	20001228 	.word	0x20001228
 800abfc:	20001224 	.word	0x20001224
 800ac00:	2000170c 	.word	0x2000170c
 800ac04:	20001708 	.word	0x20001708
 800ac08:	e000ed04 	.word	0xe000ed04

0800ac0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ac12:	4b05      	ldr	r3, [pc, #20]	; (800ac28 <xTaskGetTickCount+0x1c>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ac18:	687b      	ldr	r3, [r7, #4]
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	370c      	adds	r7, #12
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr
 800ac26:	bf00      	nop
 800ac28:	200016fc 	.word	0x200016fc

0800ac2c <uxTaskGetNumberOfTasks>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 800ac30:	4b03      	ldr	r3, [pc, #12]	; (800ac40 <uxTaskGetNumberOfTasks+0x14>)
 800ac32:	681b      	ldr	r3, [r3, #0]
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	200016f8 	.word	0x200016f8

0800ac44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b086      	sub	sp, #24
 800ac48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac4e:	4b50      	ldr	r3, [pc, #320]	; (800ad90 <xTaskIncrementTick+0x14c>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	f040 808b 	bne.w	800ad6e <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ac58:	4b4e      	ldr	r3, [pc, #312]	; (800ad94 <xTaskIncrementTick+0x150>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ac60:	4a4c      	ldr	r2, [pc, #304]	; (800ad94 <xTaskIncrementTick+0x150>)
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d122      	bne.n	800acb2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800ac6c:	4b4a      	ldr	r3, [pc, #296]	; (800ad98 <xTaskIncrementTick+0x154>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d00c      	beq.n	800ac90 <xTaskIncrementTick+0x4c>
	__asm volatile
 800ac76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7a:	b672      	cpsid	i
 800ac7c:	f383 8811 	msr	BASEPRI, r3
 800ac80:	f3bf 8f6f 	isb	sy
 800ac84:	f3bf 8f4f 	dsb	sy
 800ac88:	b662      	cpsie	i
 800ac8a:	603b      	str	r3, [r7, #0]
}
 800ac8c:	bf00      	nop
 800ac8e:	e7fe      	b.n	800ac8e <xTaskIncrementTick+0x4a>
 800ac90:	4b41      	ldr	r3, [pc, #260]	; (800ad98 <xTaskIncrementTick+0x154>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	60fb      	str	r3, [r7, #12]
 800ac96:	4b41      	ldr	r3, [pc, #260]	; (800ad9c <xTaskIncrementTick+0x158>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a3f      	ldr	r2, [pc, #252]	; (800ad98 <xTaskIncrementTick+0x154>)
 800ac9c:	6013      	str	r3, [r2, #0]
 800ac9e:	4a3f      	ldr	r2, [pc, #252]	; (800ad9c <xTaskIncrementTick+0x158>)
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	6013      	str	r3, [r2, #0]
 800aca4:	4b3e      	ldr	r3, [pc, #248]	; (800ada0 <xTaskIncrementTick+0x15c>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	3301      	adds	r3, #1
 800acaa:	4a3d      	ldr	r2, [pc, #244]	; (800ada0 <xTaskIncrementTick+0x15c>)
 800acac:	6013      	str	r3, [r2, #0]
 800acae:	f000 fb3d 	bl	800b32c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800acb2:	4b3c      	ldr	r3, [pc, #240]	; (800ada4 <xTaskIncrementTick+0x160>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	693a      	ldr	r2, [r7, #16]
 800acb8:	429a      	cmp	r2, r3
 800acba:	d349      	bcc.n	800ad50 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acbc:	4b36      	ldr	r3, [pc, #216]	; (800ad98 <xTaskIncrementTick+0x154>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d104      	bne.n	800acd0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acc6:	4b37      	ldr	r3, [pc, #220]	; (800ada4 <xTaskIncrementTick+0x160>)
 800acc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800accc:	601a      	str	r2, [r3, #0]
					break;
 800acce:	e03f      	b.n	800ad50 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acd0:	4b31      	ldr	r3, [pc, #196]	; (800ad98 <xTaskIncrementTick+0x154>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	68db      	ldr	r3, [r3, #12]
 800acd6:	68db      	ldr	r3, [r3, #12]
 800acd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ace0:	693a      	ldr	r2, [r7, #16]
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d203      	bcs.n	800acf0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ace8:	4a2e      	ldr	r2, [pc, #184]	; (800ada4 <xTaskIncrementTick+0x160>)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800acee:	e02f      	b.n	800ad50 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	3304      	adds	r3, #4
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7fe ff5b 	bl	8009bb0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d004      	beq.n	800ad0c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	3318      	adds	r3, #24
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7fe ff52 	bl	8009bb0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad10:	4b25      	ldr	r3, [pc, #148]	; (800ada8 <xTaskIncrementTick+0x164>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d903      	bls.n	800ad20 <xTaskIncrementTick+0xdc>
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad1c:	4a22      	ldr	r2, [pc, #136]	; (800ada8 <xTaskIncrementTick+0x164>)
 800ad1e:	6013      	str	r3, [r2, #0]
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad24:	4613      	mov	r3, r2
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	4413      	add	r3, r2
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	4a1f      	ldr	r2, [pc, #124]	; (800adac <xTaskIncrementTick+0x168>)
 800ad2e:	441a      	add	r2, r3
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	3304      	adds	r3, #4
 800ad34:	4619      	mov	r1, r3
 800ad36:	4610      	mov	r0, r2
 800ad38:	f7fe fedd 	bl	8009af6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad40:	4b1b      	ldr	r3, [pc, #108]	; (800adb0 <xTaskIncrementTick+0x16c>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d3b8      	bcc.n	800acbc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad4e:	e7b5      	b.n	800acbc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ad50:	4b17      	ldr	r3, [pc, #92]	; (800adb0 <xTaskIncrementTick+0x16c>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad56:	4915      	ldr	r1, [pc, #84]	; (800adac <xTaskIncrementTick+0x168>)
 800ad58:	4613      	mov	r3, r2
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	4413      	add	r3, r2
 800ad5e:	009b      	lsls	r3, r3, #2
 800ad60:	440b      	add	r3, r1
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d907      	bls.n	800ad78 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	617b      	str	r3, [r7, #20]
 800ad6c:	e004      	b.n	800ad78 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ad6e:	4b11      	ldr	r3, [pc, #68]	; (800adb4 <xTaskIncrementTick+0x170>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	3301      	adds	r3, #1
 800ad74:	4a0f      	ldr	r2, [pc, #60]	; (800adb4 <xTaskIncrementTick+0x170>)
 800ad76:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ad78:	4b0f      	ldr	r3, [pc, #60]	; (800adb8 <xTaskIncrementTick+0x174>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d001      	beq.n	800ad84 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800ad80:	2301      	movs	r3, #1
 800ad82:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ad84:	697b      	ldr	r3, [r7, #20]
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3718      	adds	r7, #24
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	20001720 	.word	0x20001720
 800ad94:	200016fc 	.word	0x200016fc
 800ad98:	200016b0 	.word	0x200016b0
 800ad9c:	200016b4 	.word	0x200016b4
 800ada0:	20001710 	.word	0x20001710
 800ada4:	20001718 	.word	0x20001718
 800ada8:	20001700 	.word	0x20001700
 800adac:	20001228 	.word	0x20001228
 800adb0:	20001224 	.word	0x20001224
 800adb4:	20001708 	.word	0x20001708
 800adb8:	2000170c 	.word	0x2000170c

0800adbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b086      	sub	sp, #24
 800adc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800adc2:	4b3b      	ldr	r3, [pc, #236]	; (800aeb0 <vTaskSwitchContext+0xf4>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d003      	beq.n	800add2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800adca:	4b3a      	ldr	r3, [pc, #232]	; (800aeb4 <vTaskSwitchContext+0xf8>)
 800adcc:	2201      	movs	r2, #1
 800adce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800add0:	e06a      	b.n	800aea8 <vTaskSwitchContext+0xec>
		xYieldPending = pdFALSE;
 800add2:	4b38      	ldr	r3, [pc, #224]	; (800aeb4 <vTaskSwitchContext+0xf8>)
 800add4:	2200      	movs	r2, #0
 800add6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800add8:	4b37      	ldr	r3, [pc, #220]	; (800aeb8 <vTaskSwitchContext+0xfc>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adde:	613b      	str	r3, [r7, #16]
 800ade0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800ade4:	60fb      	str	r3, [r7, #12]
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	68fa      	ldr	r2, [r7, #12]
 800adec:	429a      	cmp	r2, r3
 800adee:	d111      	bne.n	800ae14 <vTaskSwitchContext+0x58>
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	3304      	adds	r3, #4
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	68fa      	ldr	r2, [r7, #12]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d10b      	bne.n	800ae14 <vTaskSwitchContext+0x58>
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	3308      	adds	r3, #8
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	68fa      	ldr	r2, [r7, #12]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d105      	bne.n	800ae14 <vTaskSwitchContext+0x58>
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	330c      	adds	r3, #12
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	68fa      	ldr	r2, [r7, #12]
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d008      	beq.n	800ae26 <vTaskSwitchContext+0x6a>
 800ae14:	4b28      	ldr	r3, [pc, #160]	; (800aeb8 <vTaskSwitchContext+0xfc>)
 800ae16:	681a      	ldr	r2, [r3, #0]
 800ae18:	4b27      	ldr	r3, [pc, #156]	; (800aeb8 <vTaskSwitchContext+0xfc>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	3334      	adds	r3, #52	; 0x34
 800ae1e:	4619      	mov	r1, r3
 800ae20:	4610      	mov	r0, r2
 800ae22:	f7f5 fbe6 	bl	80005f2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae26:	4b25      	ldr	r3, [pc, #148]	; (800aebc <vTaskSwitchContext+0x100>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	617b      	str	r3, [r7, #20]
 800ae2c:	e012      	b.n	800ae54 <vTaskSwitchContext+0x98>
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d10c      	bne.n	800ae4e <vTaskSwitchContext+0x92>
	__asm volatile
 800ae34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae38:	b672      	cpsid	i
 800ae3a:	f383 8811 	msr	BASEPRI, r3
 800ae3e:	f3bf 8f6f 	isb	sy
 800ae42:	f3bf 8f4f 	dsb	sy
 800ae46:	b662      	cpsie	i
 800ae48:	607b      	str	r3, [r7, #4]
}
 800ae4a:	bf00      	nop
 800ae4c:	e7fe      	b.n	800ae4c <vTaskSwitchContext+0x90>
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	3b01      	subs	r3, #1
 800ae52:	617b      	str	r3, [r7, #20]
 800ae54:	491a      	ldr	r1, [pc, #104]	; (800aec0 <vTaskSwitchContext+0x104>)
 800ae56:	697a      	ldr	r2, [r7, #20]
 800ae58:	4613      	mov	r3, r2
 800ae5a:	009b      	lsls	r3, r3, #2
 800ae5c:	4413      	add	r3, r2
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	440b      	add	r3, r1
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d0e2      	beq.n	800ae2e <vTaskSwitchContext+0x72>
 800ae68:	697a      	ldr	r2, [r7, #20]
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	009b      	lsls	r3, r3, #2
 800ae6e:	4413      	add	r3, r2
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	4a13      	ldr	r2, [pc, #76]	; (800aec0 <vTaskSwitchContext+0x104>)
 800ae74:	4413      	add	r3, r2
 800ae76:	60bb      	str	r3, [r7, #8]
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	685a      	ldr	r2, [r3, #4]
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	605a      	str	r2, [r3, #4]
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	685a      	ldr	r2, [r3, #4]
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	3308      	adds	r3, #8
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d104      	bne.n	800ae98 <vTaskSwitchContext+0xdc>
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	685a      	ldr	r2, [r3, #4]
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	605a      	str	r2, [r3, #4]
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	4a06      	ldr	r2, [pc, #24]	; (800aeb8 <vTaskSwitchContext+0xfc>)
 800aea0:	6013      	str	r3, [r2, #0]
 800aea2:	4a06      	ldr	r2, [pc, #24]	; (800aebc <vTaskSwitchContext+0x100>)
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	6013      	str	r3, [r2, #0]
}
 800aea8:	bf00      	nop
 800aeaa:	3718      	adds	r7, #24
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	20001720 	.word	0x20001720
 800aeb4:	2000170c 	.word	0x2000170c
 800aeb8:	20001224 	.word	0x20001224
 800aebc:	20001700 	.word	0x20001700
 800aec0:	20001228 	.word	0x20001228

0800aec4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d10c      	bne.n	800aeee <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800aed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed8:	b672      	cpsid	i
 800aeda:	f383 8811 	msr	BASEPRI, r3
 800aede:	f3bf 8f6f 	isb	sy
 800aee2:	f3bf 8f4f 	dsb	sy
 800aee6:	b662      	cpsie	i
 800aee8:	60fb      	str	r3, [r7, #12]
}
 800aeea:	bf00      	nop
 800aeec:	e7fe      	b.n	800aeec <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aeee:	4b07      	ldr	r3, [pc, #28]	; (800af0c <vTaskPlaceOnEventList+0x48>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	3318      	adds	r3, #24
 800aef4:	4619      	mov	r1, r3
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f7fe fe21 	bl	8009b3e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aefc:	2101      	movs	r1, #1
 800aefe:	6838      	ldr	r0, [r7, #0]
 800af00:	f000 fac4 	bl	800b48c <prvAddCurrentTaskToDelayedList>
}
 800af04:	bf00      	nop
 800af06:	3710      	adds	r7, #16
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	20001224 	.word	0x20001224

0800af10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800af10:	b580      	push	{r7, lr}
 800af12:	b086      	sub	sp, #24
 800af14:	af00      	add	r7, sp, #0
 800af16:	60f8      	str	r0, [r7, #12]
 800af18:	60b9      	str	r1, [r7, #8]
 800af1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d10c      	bne.n	800af3c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800af22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af26:	b672      	cpsid	i
 800af28:	f383 8811 	msr	BASEPRI, r3
 800af2c:	f3bf 8f6f 	isb	sy
 800af30:	f3bf 8f4f 	dsb	sy
 800af34:	b662      	cpsie	i
 800af36:	617b      	str	r3, [r7, #20]
}
 800af38:	bf00      	nop
 800af3a:	e7fe      	b.n	800af3a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800af3c:	4b0a      	ldr	r3, [pc, #40]	; (800af68 <vTaskPlaceOnEventListRestricted+0x58>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	3318      	adds	r3, #24
 800af42:	4619      	mov	r1, r3
 800af44:	68f8      	ldr	r0, [r7, #12]
 800af46:	f7fe fdd6 	bl	8009af6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d002      	beq.n	800af56 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800af50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af54:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800af56:	6879      	ldr	r1, [r7, #4]
 800af58:	68b8      	ldr	r0, [r7, #8]
 800af5a:	f000 fa97 	bl	800b48c <prvAddCurrentTaskToDelayedList>
	}
 800af5e:	bf00      	nop
 800af60:	3718      	adds	r7, #24
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	20001224 	.word	0x20001224

0800af6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b086      	sub	sp, #24
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	68db      	ldr	r3, [r3, #12]
 800af78:	68db      	ldr	r3, [r3, #12]
 800af7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d10c      	bne.n	800af9c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800af82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af86:	b672      	cpsid	i
 800af88:	f383 8811 	msr	BASEPRI, r3
 800af8c:	f3bf 8f6f 	isb	sy
 800af90:	f3bf 8f4f 	dsb	sy
 800af94:	b662      	cpsie	i
 800af96:	60fb      	str	r3, [r7, #12]
}
 800af98:	bf00      	nop
 800af9a:	e7fe      	b.n	800af9a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	3318      	adds	r3, #24
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7fe fe05 	bl	8009bb0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afa6:	4b1e      	ldr	r3, [pc, #120]	; (800b020 <xTaskRemoveFromEventList+0xb4>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d11d      	bne.n	800afea <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	3304      	adds	r3, #4
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7fe fdfc 	bl	8009bb0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afbc:	4b19      	ldr	r3, [pc, #100]	; (800b024 <xTaskRemoveFromEventList+0xb8>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d903      	bls.n	800afcc <xTaskRemoveFromEventList+0x60>
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc8:	4a16      	ldr	r2, [pc, #88]	; (800b024 <xTaskRemoveFromEventList+0xb8>)
 800afca:	6013      	str	r3, [r2, #0]
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afd0:	4613      	mov	r3, r2
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	4413      	add	r3, r2
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	4a13      	ldr	r2, [pc, #76]	; (800b028 <xTaskRemoveFromEventList+0xbc>)
 800afda:	441a      	add	r2, r3
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	3304      	adds	r3, #4
 800afe0:	4619      	mov	r1, r3
 800afe2:	4610      	mov	r0, r2
 800afe4:	f7fe fd87 	bl	8009af6 <vListInsertEnd>
 800afe8:	e005      	b.n	800aff6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	3318      	adds	r3, #24
 800afee:	4619      	mov	r1, r3
 800aff0:	480e      	ldr	r0, [pc, #56]	; (800b02c <xTaskRemoveFromEventList+0xc0>)
 800aff2:	f7fe fd80 	bl	8009af6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800affa:	4b0d      	ldr	r3, [pc, #52]	; (800b030 <xTaskRemoveFromEventList+0xc4>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b000:	429a      	cmp	r2, r3
 800b002:	d905      	bls.n	800b010 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b004:	2301      	movs	r3, #1
 800b006:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b008:	4b0a      	ldr	r3, [pc, #40]	; (800b034 <xTaskRemoveFromEventList+0xc8>)
 800b00a:	2201      	movs	r2, #1
 800b00c:	601a      	str	r2, [r3, #0]
 800b00e:	e001      	b.n	800b014 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800b010:	2300      	movs	r3, #0
 800b012:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b014:	697b      	ldr	r3, [r7, #20]
}
 800b016:	4618      	mov	r0, r3
 800b018:	3718      	adds	r7, #24
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	20001720 	.word	0x20001720
 800b024:	20001700 	.word	0x20001700
 800b028:	20001228 	.word	0x20001228
 800b02c:	200016b8 	.word	0x200016b8
 800b030:	20001224 	.word	0x20001224
 800b034:	2000170c 	.word	0x2000170c

0800b038 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b038:	b480      	push	{r7}
 800b03a:	b083      	sub	sp, #12
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b040:	4b06      	ldr	r3, [pc, #24]	; (800b05c <vTaskInternalSetTimeOutState+0x24>)
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b048:	4b05      	ldr	r3, [pc, #20]	; (800b060 <vTaskInternalSetTimeOutState+0x28>)
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	605a      	str	r2, [r3, #4]
}
 800b050:	bf00      	nop
 800b052:	370c      	adds	r7, #12
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr
 800b05c:	20001710 	.word	0x20001710
 800b060:	200016fc 	.word	0x200016fc

0800b064 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b088      	sub	sp, #32
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d10c      	bne.n	800b08e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800b074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b078:	b672      	cpsid	i
 800b07a:	f383 8811 	msr	BASEPRI, r3
 800b07e:	f3bf 8f6f 	isb	sy
 800b082:	f3bf 8f4f 	dsb	sy
 800b086:	b662      	cpsie	i
 800b088:	613b      	str	r3, [r7, #16]
}
 800b08a:	bf00      	nop
 800b08c:	e7fe      	b.n	800b08c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10c      	bne.n	800b0ae <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800b094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b098:	b672      	cpsid	i
 800b09a:	f383 8811 	msr	BASEPRI, r3
 800b09e:	f3bf 8f6f 	isb	sy
 800b0a2:	f3bf 8f4f 	dsb	sy
 800b0a6:	b662      	cpsie	i
 800b0a8:	60fb      	str	r3, [r7, #12]
}
 800b0aa:	bf00      	nop
 800b0ac:	e7fe      	b.n	800b0ac <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800b0ae:	f000 fead 	bl	800be0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b0b2:	4b1d      	ldr	r3, [pc, #116]	; (800b128 <xTaskCheckForTimeOut+0xc4>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	69ba      	ldr	r2, [r7, #24]
 800b0be:	1ad3      	subs	r3, r2, r3
 800b0c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b0ca:	d102      	bne.n	800b0d2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	61fb      	str	r3, [r7, #28]
 800b0d0:	e023      	b.n	800b11a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681a      	ldr	r2, [r3, #0]
 800b0d6:	4b15      	ldr	r3, [pc, #84]	; (800b12c <xTaskCheckForTimeOut+0xc8>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d007      	beq.n	800b0ee <xTaskCheckForTimeOut+0x8a>
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	69ba      	ldr	r2, [r7, #24]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d302      	bcc.n	800b0ee <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	61fb      	str	r3, [r7, #28]
 800b0ec:	e015      	b.n	800b11a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	697a      	ldr	r2, [r7, #20]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	d20b      	bcs.n	800b110 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	681a      	ldr	r2, [r3, #0]
 800b0fc:	697b      	ldr	r3, [r7, #20]
 800b0fe:	1ad2      	subs	r2, r2, r3
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f7ff ff97 	bl	800b038 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b10a:	2300      	movs	r3, #0
 800b10c:	61fb      	str	r3, [r7, #28]
 800b10e:	e004      	b.n	800b11a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	2200      	movs	r2, #0
 800b114:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b116:	2301      	movs	r3, #1
 800b118:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b11a:	f000 feab 	bl	800be74 <vPortExitCritical>

	return xReturn;
 800b11e:	69fb      	ldr	r3, [r7, #28]
}
 800b120:	4618      	mov	r0, r3
 800b122:	3720      	adds	r7, #32
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}
 800b128:	200016fc 	.word	0x200016fc
 800b12c:	20001710 	.word	0x20001710

0800b130 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b130:	b480      	push	{r7}
 800b132:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b134:	4b03      	ldr	r3, [pc, #12]	; (800b144 <vTaskMissedYield+0x14>)
 800b136:	2201      	movs	r2, #1
 800b138:	601a      	str	r2, [r3, #0]
}
 800b13a:	bf00      	nop
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr
 800b144:	2000170c 	.word	0x2000170c

0800b148 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b082      	sub	sp, #8
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b150:	f000 f854 	bl	800b1fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b154:	4b07      	ldr	r3, [pc, #28]	; (800b174 <prvIdleTask+0x2c>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d907      	bls.n	800b16c <prvIdleTask+0x24>
			{
				taskYIELD();
 800b15c:	4b06      	ldr	r3, [pc, #24]	; (800b178 <prvIdleTask+0x30>)
 800b15e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b162:	601a      	str	r2, [r3, #0]
 800b164:	f3bf 8f4f 	dsb	sy
 800b168:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800b16c:	f7f5 fa3a 	bl	80005e4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800b170:	e7ee      	b.n	800b150 <prvIdleTask+0x8>
 800b172:	bf00      	nop
 800b174:	20001228 	.word	0x20001228
 800b178:	e000ed04 	.word	0xe000ed04

0800b17c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b082      	sub	sp, #8
 800b180:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b182:	2300      	movs	r3, #0
 800b184:	607b      	str	r3, [r7, #4]
 800b186:	e00c      	b.n	800b1a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	4613      	mov	r3, r2
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	4413      	add	r3, r2
 800b190:	009b      	lsls	r3, r3, #2
 800b192:	4a12      	ldr	r2, [pc, #72]	; (800b1dc <prvInitialiseTaskLists+0x60>)
 800b194:	4413      	add	r3, r2
 800b196:	4618      	mov	r0, r3
 800b198:	f7fe fc80 	bl	8009a9c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	3301      	adds	r3, #1
 800b1a0:	607b      	str	r3, [r7, #4]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2b37      	cmp	r3, #55	; 0x37
 800b1a6:	d9ef      	bls.n	800b188 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b1a8:	480d      	ldr	r0, [pc, #52]	; (800b1e0 <prvInitialiseTaskLists+0x64>)
 800b1aa:	f7fe fc77 	bl	8009a9c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b1ae:	480d      	ldr	r0, [pc, #52]	; (800b1e4 <prvInitialiseTaskLists+0x68>)
 800b1b0:	f7fe fc74 	bl	8009a9c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b1b4:	480c      	ldr	r0, [pc, #48]	; (800b1e8 <prvInitialiseTaskLists+0x6c>)
 800b1b6:	f7fe fc71 	bl	8009a9c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b1ba:	480c      	ldr	r0, [pc, #48]	; (800b1ec <prvInitialiseTaskLists+0x70>)
 800b1bc:	f7fe fc6e 	bl	8009a9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b1c0:	480b      	ldr	r0, [pc, #44]	; (800b1f0 <prvInitialiseTaskLists+0x74>)
 800b1c2:	f7fe fc6b 	bl	8009a9c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b1c6:	4b0b      	ldr	r3, [pc, #44]	; (800b1f4 <prvInitialiseTaskLists+0x78>)
 800b1c8:	4a05      	ldr	r2, [pc, #20]	; (800b1e0 <prvInitialiseTaskLists+0x64>)
 800b1ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b1cc:	4b0a      	ldr	r3, [pc, #40]	; (800b1f8 <prvInitialiseTaskLists+0x7c>)
 800b1ce:	4a05      	ldr	r2, [pc, #20]	; (800b1e4 <prvInitialiseTaskLists+0x68>)
 800b1d0:	601a      	str	r2, [r3, #0]
}
 800b1d2:	bf00      	nop
 800b1d4:	3708      	adds	r7, #8
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}
 800b1da:	bf00      	nop
 800b1dc:	20001228 	.word	0x20001228
 800b1e0:	20001688 	.word	0x20001688
 800b1e4:	2000169c 	.word	0x2000169c
 800b1e8:	200016b8 	.word	0x200016b8
 800b1ec:	200016cc 	.word	0x200016cc
 800b1f0:	200016e4 	.word	0x200016e4
 800b1f4:	200016b0 	.word	0x200016b0
 800b1f8:	200016b4 	.word	0x200016b4

0800b1fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b202:	e019      	b.n	800b238 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b204:	f000 fe02 	bl	800be0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b208:	4b10      	ldr	r3, [pc, #64]	; (800b24c <prvCheckTasksWaitingTermination+0x50>)
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	68db      	ldr	r3, [r3, #12]
 800b20e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	3304      	adds	r3, #4
 800b214:	4618      	mov	r0, r3
 800b216:	f7fe fccb 	bl	8009bb0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b21a:	4b0d      	ldr	r3, [pc, #52]	; (800b250 <prvCheckTasksWaitingTermination+0x54>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	3b01      	subs	r3, #1
 800b220:	4a0b      	ldr	r2, [pc, #44]	; (800b250 <prvCheckTasksWaitingTermination+0x54>)
 800b222:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b224:	4b0b      	ldr	r3, [pc, #44]	; (800b254 <prvCheckTasksWaitingTermination+0x58>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	3b01      	subs	r3, #1
 800b22a:	4a0a      	ldr	r2, [pc, #40]	; (800b254 <prvCheckTasksWaitingTermination+0x58>)
 800b22c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b22e:	f000 fe21 	bl	800be74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 f848 	bl	800b2c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b238:	4b06      	ldr	r3, [pc, #24]	; (800b254 <prvCheckTasksWaitingTermination+0x58>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d1e1      	bne.n	800b204 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b240:	bf00      	nop
 800b242:	bf00      	nop
 800b244:	3708      	adds	r7, #8
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	200016cc 	.word	0x200016cc
 800b250:	200016f8 	.word	0x200016f8
 800b254:	200016e0 	.word	0x200016e0

0800b258 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800b258:	b480      	push	{r7}
 800b25a:	b085      	sub	sp, #20
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800b260:	2300      	movs	r3, #0
 800b262:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b264:	e005      	b.n	800b272 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	3301      	adds	r3, #1
 800b26a:	607b      	str	r3, [r7, #4]
			ulCount++;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	3301      	adds	r3, #1
 800b270:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	2ba5      	cmp	r3, #165	; 0xa5
 800b278:	d0f5      	beq.n	800b266 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	089b      	lsrs	r3, r3, #2
 800b27e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	b29b      	uxth	r3, r3
	}
 800b284:	4618      	mov	r0, r3
 800b286:	3714      	adds	r7, #20
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800b290:	b580      	push	{r7, lr}
 800b292:	b086      	sub	sp, #24
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d102      	bne.n	800b2a4 <uxTaskGetStackHighWaterMark+0x14>
 800b29e:	4b09      	ldr	r3, [pc, #36]	; (800b2c4 <uxTaskGetStackHighWaterMark+0x34>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	e000      	b.n	800b2a6 <uxTaskGetStackHighWaterMark+0x16>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ac:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800b2ae:	6938      	ldr	r0, [r7, #16]
 800b2b0:	f7ff ffd2 	bl	800b258 <prvTaskCheckFreeStackSpace>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
	}
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	3718      	adds	r7, #24
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	20001224 	.word	0x20001224

0800b2c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d108      	bne.n	800b2ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f000 ff90 	bl	800c204 <vPortFree>
				vPortFree( pxTCB );
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 ff8d 	bl	800c204 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b2ea:	e01a      	b.n	800b322 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d103      	bne.n	800b2fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 ff84 	bl	800c204 <vPortFree>
	}
 800b2fc:	e011      	b.n	800b322 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b304:	2b02      	cmp	r3, #2
 800b306:	d00c      	beq.n	800b322 <prvDeleteTCB+0x5a>
	__asm volatile
 800b308:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b30c:	b672      	cpsid	i
 800b30e:	f383 8811 	msr	BASEPRI, r3
 800b312:	f3bf 8f6f 	isb	sy
 800b316:	f3bf 8f4f 	dsb	sy
 800b31a:	b662      	cpsie	i
 800b31c:	60fb      	str	r3, [r7, #12]
}
 800b31e:	bf00      	nop
 800b320:	e7fe      	b.n	800b320 <prvDeleteTCB+0x58>
	}
 800b322:	bf00      	nop
 800b324:	3710      	adds	r7, #16
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
	...

0800b32c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b32c:	b480      	push	{r7}
 800b32e:	b083      	sub	sp, #12
 800b330:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b332:	4b0c      	ldr	r3, [pc, #48]	; (800b364 <prvResetNextTaskUnblockTime+0x38>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d104      	bne.n	800b346 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b33c:	4b0a      	ldr	r3, [pc, #40]	; (800b368 <prvResetNextTaskUnblockTime+0x3c>)
 800b33e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b342:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b344:	e008      	b.n	800b358 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b346:	4b07      	ldr	r3, [pc, #28]	; (800b364 <prvResetNextTaskUnblockTime+0x38>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	68db      	ldr	r3, [r3, #12]
 800b34c:	68db      	ldr	r3, [r3, #12]
 800b34e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	4a04      	ldr	r2, [pc, #16]	; (800b368 <prvResetNextTaskUnblockTime+0x3c>)
 800b356:	6013      	str	r3, [r2, #0]
}
 800b358:	bf00      	nop
 800b35a:	370c      	adds	r7, #12
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr
 800b364:	200016b0 	.word	0x200016b0
 800b368:	20001718 	.word	0x20001718

0800b36c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b372:	4b0b      	ldr	r3, [pc, #44]	; (800b3a0 <xTaskGetSchedulerState+0x34>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d102      	bne.n	800b380 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b37a:	2301      	movs	r3, #1
 800b37c:	607b      	str	r3, [r7, #4]
 800b37e:	e008      	b.n	800b392 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b380:	4b08      	ldr	r3, [pc, #32]	; (800b3a4 <xTaskGetSchedulerState+0x38>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d102      	bne.n	800b38e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b388:	2302      	movs	r3, #2
 800b38a:	607b      	str	r3, [r7, #4]
 800b38c:	e001      	b.n	800b392 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b38e:	2300      	movs	r3, #0
 800b390:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b392:	687b      	ldr	r3, [r7, #4]
	}
 800b394:	4618      	mov	r0, r3
 800b396:	370c      	adds	r7, #12
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr
 800b3a0:	20001704 	.word	0x20001704
 800b3a4:	20001720 	.word	0x20001720

0800b3a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b086      	sub	sp, #24
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d05a      	beq.n	800b474 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b3be:	4b30      	ldr	r3, [pc, #192]	; (800b480 <xTaskPriorityDisinherit+0xd8>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	693a      	ldr	r2, [r7, #16]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d00c      	beq.n	800b3e2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800b3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3cc:	b672      	cpsid	i
 800b3ce:	f383 8811 	msr	BASEPRI, r3
 800b3d2:	f3bf 8f6f 	isb	sy
 800b3d6:	f3bf 8f4f 	dsb	sy
 800b3da:	b662      	cpsie	i
 800b3dc:	60fb      	str	r3, [r7, #12]
}
 800b3de:	bf00      	nop
 800b3e0:	e7fe      	b.n	800b3e0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800b3e2:	693b      	ldr	r3, [r7, #16]
 800b3e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d10c      	bne.n	800b404 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800b3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ee:	b672      	cpsid	i
 800b3f0:	f383 8811 	msr	BASEPRI, r3
 800b3f4:	f3bf 8f6f 	isb	sy
 800b3f8:	f3bf 8f4f 	dsb	sy
 800b3fc:	b662      	cpsie	i
 800b3fe:	60bb      	str	r3, [r7, #8]
}
 800b400:	bf00      	nop
 800b402:	e7fe      	b.n	800b402 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b408:	1e5a      	subs	r2, r3, #1
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b416:	429a      	cmp	r2, r3
 800b418:	d02c      	beq.n	800b474 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d128      	bne.n	800b474 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	3304      	adds	r3, #4
 800b426:	4618      	mov	r0, r3
 800b428:	f7fe fbc2 	bl	8009bb0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b438:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b440:	693b      	ldr	r3, [r7, #16]
 800b442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b444:	4b0f      	ldr	r3, [pc, #60]	; (800b484 <xTaskPriorityDisinherit+0xdc>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	429a      	cmp	r2, r3
 800b44a:	d903      	bls.n	800b454 <xTaskPriorityDisinherit+0xac>
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b450:	4a0c      	ldr	r2, [pc, #48]	; (800b484 <xTaskPriorityDisinherit+0xdc>)
 800b452:	6013      	str	r3, [r2, #0]
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b458:	4613      	mov	r3, r2
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	4413      	add	r3, r2
 800b45e:	009b      	lsls	r3, r3, #2
 800b460:	4a09      	ldr	r2, [pc, #36]	; (800b488 <xTaskPriorityDisinherit+0xe0>)
 800b462:	441a      	add	r2, r3
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	3304      	adds	r3, #4
 800b468:	4619      	mov	r1, r3
 800b46a:	4610      	mov	r0, r2
 800b46c:	f7fe fb43 	bl	8009af6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b470:	2301      	movs	r3, #1
 800b472:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b474:	697b      	ldr	r3, [r7, #20]
	}
 800b476:	4618      	mov	r0, r3
 800b478:	3718      	adds	r7, #24
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	20001224 	.word	0x20001224
 800b484:	20001700 	.word	0x20001700
 800b488:	20001228 	.word	0x20001228

0800b48c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b084      	sub	sp, #16
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b496:	4b21      	ldr	r3, [pc, #132]	; (800b51c <prvAddCurrentTaskToDelayedList+0x90>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b49c:	4b20      	ldr	r3, [pc, #128]	; (800b520 <prvAddCurrentTaskToDelayedList+0x94>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	3304      	adds	r3, #4
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7fe fb84 	bl	8009bb0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4ae:	d10a      	bne.n	800b4c6 <prvAddCurrentTaskToDelayedList+0x3a>
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d007      	beq.n	800b4c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4b6:	4b1a      	ldr	r3, [pc, #104]	; (800b520 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	3304      	adds	r3, #4
 800b4bc:	4619      	mov	r1, r3
 800b4be:	4819      	ldr	r0, [pc, #100]	; (800b524 <prvAddCurrentTaskToDelayedList+0x98>)
 800b4c0:	f7fe fb19 	bl	8009af6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b4c4:	e026      	b.n	800b514 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b4c6:	68fa      	ldr	r2, [r7, #12]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	4413      	add	r3, r2
 800b4cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b4ce:	4b14      	ldr	r3, [pc, #80]	; (800b520 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	68ba      	ldr	r2, [r7, #8]
 800b4d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b4d6:	68ba      	ldr	r2, [r7, #8]
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d209      	bcs.n	800b4f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4de:	4b12      	ldr	r3, [pc, #72]	; (800b528 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b4e0:	681a      	ldr	r2, [r3, #0]
 800b4e2:	4b0f      	ldr	r3, [pc, #60]	; (800b520 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	3304      	adds	r3, #4
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	4610      	mov	r0, r2
 800b4ec:	f7fe fb27 	bl	8009b3e <vListInsert>
}
 800b4f0:	e010      	b.n	800b514 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4f2:	4b0e      	ldr	r3, [pc, #56]	; (800b52c <prvAddCurrentTaskToDelayedList+0xa0>)
 800b4f4:	681a      	ldr	r2, [r3, #0]
 800b4f6:	4b0a      	ldr	r3, [pc, #40]	; (800b520 <prvAddCurrentTaskToDelayedList+0x94>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	3304      	adds	r3, #4
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	4610      	mov	r0, r2
 800b500:	f7fe fb1d 	bl	8009b3e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b504:	4b0a      	ldr	r3, [pc, #40]	; (800b530 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	68ba      	ldr	r2, [r7, #8]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d202      	bcs.n	800b514 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b50e:	4a08      	ldr	r2, [pc, #32]	; (800b530 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	6013      	str	r3, [r2, #0]
}
 800b514:	bf00      	nop
 800b516:	3710      	adds	r7, #16
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	200016fc 	.word	0x200016fc
 800b520:	20001224 	.word	0x20001224
 800b524:	200016e4 	.word	0x200016e4
 800b528:	200016b4 	.word	0x200016b4
 800b52c:	200016b0 	.word	0x200016b0
 800b530:	20001718 	.word	0x20001718

0800b534 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b08a      	sub	sp, #40	; 0x28
 800b538:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b53a:	2300      	movs	r3, #0
 800b53c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b53e:	f000 fb15 	bl	800bb6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b542:	4b1d      	ldr	r3, [pc, #116]	; (800b5b8 <xTimerCreateTimerTask+0x84>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d021      	beq.n	800b58e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b54a:	2300      	movs	r3, #0
 800b54c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b54e:	2300      	movs	r3, #0
 800b550:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b552:	1d3a      	adds	r2, r7, #4
 800b554:	f107 0108 	add.w	r1, r7, #8
 800b558:	f107 030c 	add.w	r3, r7, #12
 800b55c:	4618      	mov	r0, r3
 800b55e:	f7fe fa83 	bl	8009a68 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b562:	6879      	ldr	r1, [r7, #4]
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	68fa      	ldr	r2, [r7, #12]
 800b568:	9202      	str	r2, [sp, #8]
 800b56a:	9301      	str	r3, [sp, #4]
 800b56c:	2302      	movs	r3, #2
 800b56e:	9300      	str	r3, [sp, #0]
 800b570:	2300      	movs	r3, #0
 800b572:	460a      	mov	r2, r1
 800b574:	4911      	ldr	r1, [pc, #68]	; (800b5bc <xTimerCreateTimerTask+0x88>)
 800b576:	4812      	ldr	r0, [pc, #72]	; (800b5c0 <xTimerCreateTimerTask+0x8c>)
 800b578:	f7ff f84e 	bl	800a618 <xTaskCreateStatic>
 800b57c:	4603      	mov	r3, r0
 800b57e:	4a11      	ldr	r2, [pc, #68]	; (800b5c4 <xTimerCreateTimerTask+0x90>)
 800b580:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b582:	4b10      	ldr	r3, [pc, #64]	; (800b5c4 <xTimerCreateTimerTask+0x90>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d001      	beq.n	800b58e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b58a:	2301      	movs	r3, #1
 800b58c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d10c      	bne.n	800b5ae <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800b594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b598:	b672      	cpsid	i
 800b59a:	f383 8811 	msr	BASEPRI, r3
 800b59e:	f3bf 8f6f 	isb	sy
 800b5a2:	f3bf 8f4f 	dsb	sy
 800b5a6:	b662      	cpsie	i
 800b5a8:	613b      	str	r3, [r7, #16]
}
 800b5aa:	bf00      	nop
 800b5ac:	e7fe      	b.n	800b5ac <xTimerCreateTimerTask+0x78>
	return xReturn;
 800b5ae:	697b      	ldr	r3, [r7, #20]
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3718      	adds	r7, #24
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}
 800b5b8:	20001754 	.word	0x20001754
 800b5bc:	0800cde4 	.word	0x0800cde4
 800b5c0:	0800b705 	.word	0x0800b705
 800b5c4:	20001758 	.word	0x20001758

0800b5c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b08a      	sub	sp, #40	; 0x28
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	60b9      	str	r1, [r7, #8]
 800b5d2:	607a      	str	r2, [r7, #4]
 800b5d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d10c      	bne.n	800b5fa <xTimerGenericCommand+0x32>
	__asm volatile
 800b5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e4:	b672      	cpsid	i
 800b5e6:	f383 8811 	msr	BASEPRI, r3
 800b5ea:	f3bf 8f6f 	isb	sy
 800b5ee:	f3bf 8f4f 	dsb	sy
 800b5f2:	b662      	cpsie	i
 800b5f4:	623b      	str	r3, [r7, #32]
}
 800b5f6:	bf00      	nop
 800b5f8:	e7fe      	b.n	800b5f8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b5fa:	4b1a      	ldr	r3, [pc, #104]	; (800b664 <xTimerGenericCommand+0x9c>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d02a      	beq.n	800b658 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	2b05      	cmp	r3, #5
 800b612:	dc18      	bgt.n	800b646 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b614:	f7ff feaa 	bl	800b36c <xTaskGetSchedulerState>
 800b618:	4603      	mov	r3, r0
 800b61a:	2b02      	cmp	r3, #2
 800b61c:	d109      	bne.n	800b632 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b61e:	4b11      	ldr	r3, [pc, #68]	; (800b664 <xTimerGenericCommand+0x9c>)
 800b620:	6818      	ldr	r0, [r3, #0]
 800b622:	f107 0110 	add.w	r1, r7, #16
 800b626:	2300      	movs	r3, #0
 800b628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b62a:	f7fe fbfb 	bl	8009e24 <xQueueGenericSend>
 800b62e:	6278      	str	r0, [r7, #36]	; 0x24
 800b630:	e012      	b.n	800b658 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b632:	4b0c      	ldr	r3, [pc, #48]	; (800b664 <xTimerGenericCommand+0x9c>)
 800b634:	6818      	ldr	r0, [r3, #0]
 800b636:	f107 0110 	add.w	r1, r7, #16
 800b63a:	2300      	movs	r3, #0
 800b63c:	2200      	movs	r2, #0
 800b63e:	f7fe fbf1 	bl	8009e24 <xQueueGenericSend>
 800b642:	6278      	str	r0, [r7, #36]	; 0x24
 800b644:	e008      	b.n	800b658 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b646:	4b07      	ldr	r3, [pc, #28]	; (800b664 <xTimerGenericCommand+0x9c>)
 800b648:	6818      	ldr	r0, [r3, #0]
 800b64a:	f107 0110 	add.w	r1, r7, #16
 800b64e:	2300      	movs	r3, #0
 800b650:	683a      	ldr	r2, [r7, #0]
 800b652:	f7fe fced 	bl	800a030 <xQueueGenericSendFromISR>
 800b656:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3728      	adds	r7, #40	; 0x28
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
 800b662:	bf00      	nop
 800b664:	20001754 	.word	0x20001754

0800b668 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b088      	sub	sp, #32
 800b66c:	af02      	add	r7, sp, #8
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b672:	4b23      	ldr	r3, [pc, #140]	; (800b700 <prvProcessExpiredTimer+0x98>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	68db      	ldr	r3, [r3, #12]
 800b67a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	3304      	adds	r3, #4
 800b680:	4618      	mov	r0, r3
 800b682:	f7fe fa95 	bl	8009bb0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b68c:	f003 0304 	and.w	r3, r3, #4
 800b690:	2b00      	cmp	r3, #0
 800b692:	d024      	beq.n	800b6de <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	699a      	ldr	r2, [r3, #24]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	18d1      	adds	r1, r2, r3
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	683a      	ldr	r2, [r7, #0]
 800b6a0:	6978      	ldr	r0, [r7, #20]
 800b6a2:	f000 f8d3 	bl	800b84c <prvInsertTimerInActiveList>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d021      	beq.n	800b6f0 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	9300      	str	r3, [sp, #0]
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	687a      	ldr	r2, [r7, #4]
 800b6b4:	2100      	movs	r1, #0
 800b6b6:	6978      	ldr	r0, [r7, #20]
 800b6b8:	f7ff ff86 	bl	800b5c8 <xTimerGenericCommand>
 800b6bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d115      	bne.n	800b6f0 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800b6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6c8:	b672      	cpsid	i
 800b6ca:	f383 8811 	msr	BASEPRI, r3
 800b6ce:	f3bf 8f6f 	isb	sy
 800b6d2:	f3bf 8f4f 	dsb	sy
 800b6d6:	b662      	cpsie	i
 800b6d8:	60fb      	str	r3, [r7, #12]
}
 800b6da:	bf00      	nop
 800b6dc:	e7fe      	b.n	800b6dc <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6e4:	f023 0301 	bic.w	r3, r3, #1
 800b6e8:	b2da      	uxtb	r2, r3
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	6a1b      	ldr	r3, [r3, #32]
 800b6f4:	6978      	ldr	r0, [r7, #20]
 800b6f6:	4798      	blx	r3
}
 800b6f8:	bf00      	nop
 800b6fa:	3718      	adds	r7, #24
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}
 800b700:	2000174c 	.word	0x2000174c

0800b704 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b084      	sub	sp, #16
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b70c:	f107 0308 	add.w	r3, r7, #8
 800b710:	4618      	mov	r0, r3
 800b712:	f000 f857 	bl	800b7c4 <prvGetNextExpireTime>
 800b716:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	4619      	mov	r1, r3
 800b71c:	68f8      	ldr	r0, [r7, #12]
 800b71e:	f000 f803 	bl	800b728 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b722:	f000 f8d5 	bl	800b8d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b726:	e7f1      	b.n	800b70c <prvTimerTask+0x8>

0800b728 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b732:	f7ff f9bd 	bl	800aab0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b736:	f107 0308 	add.w	r3, r7, #8
 800b73a:	4618      	mov	r0, r3
 800b73c:	f000 f866 	bl	800b80c <prvSampleTimeNow>
 800b740:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d130      	bne.n	800b7aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d10a      	bne.n	800b764 <prvProcessTimerOrBlockTask+0x3c>
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	429a      	cmp	r2, r3
 800b754:	d806      	bhi.n	800b764 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b756:	f7ff f9b9 	bl	800aacc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b75a:	68f9      	ldr	r1, [r7, #12]
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f7ff ff83 	bl	800b668 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b762:	e024      	b.n	800b7ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d008      	beq.n	800b77c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b76a:	4b13      	ldr	r3, [pc, #76]	; (800b7b8 <prvProcessTimerOrBlockTask+0x90>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d101      	bne.n	800b778 <prvProcessTimerOrBlockTask+0x50>
 800b774:	2301      	movs	r3, #1
 800b776:	e000      	b.n	800b77a <prvProcessTimerOrBlockTask+0x52>
 800b778:	2300      	movs	r3, #0
 800b77a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b77c:	4b0f      	ldr	r3, [pc, #60]	; (800b7bc <prvProcessTimerOrBlockTask+0x94>)
 800b77e:	6818      	ldr	r0, [r3, #0]
 800b780:	687a      	ldr	r2, [r7, #4]
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	1ad3      	subs	r3, r2, r3
 800b786:	683a      	ldr	r2, [r7, #0]
 800b788:	4619      	mov	r1, r3
 800b78a:	f7fe ff11 	bl	800a5b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b78e:	f7ff f99d 	bl	800aacc <xTaskResumeAll>
 800b792:	4603      	mov	r3, r0
 800b794:	2b00      	cmp	r3, #0
 800b796:	d10a      	bne.n	800b7ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b798:	4b09      	ldr	r3, [pc, #36]	; (800b7c0 <prvProcessTimerOrBlockTask+0x98>)
 800b79a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b79e:	601a      	str	r2, [r3, #0]
 800b7a0:	f3bf 8f4f 	dsb	sy
 800b7a4:	f3bf 8f6f 	isb	sy
}
 800b7a8:	e001      	b.n	800b7ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b7aa:	f7ff f98f 	bl	800aacc <xTaskResumeAll>
}
 800b7ae:	bf00      	nop
 800b7b0:	3710      	adds	r7, #16
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	20001750 	.word	0x20001750
 800b7bc:	20001754 	.word	0x20001754
 800b7c0:	e000ed04 	.word	0xe000ed04

0800b7c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b085      	sub	sp, #20
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b7cc:	4b0e      	ldr	r3, [pc, #56]	; (800b808 <prvGetNextExpireTime+0x44>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d101      	bne.n	800b7da <prvGetNextExpireTime+0x16>
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	e000      	b.n	800b7dc <prvGetNextExpireTime+0x18>
 800b7da:	2200      	movs	r2, #0
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d105      	bne.n	800b7f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b7e8:	4b07      	ldr	r3, [pc, #28]	; (800b808 <prvGetNextExpireTime+0x44>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	68db      	ldr	r3, [r3, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	60fb      	str	r3, [r7, #12]
 800b7f2:	e001      	b.n	800b7f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3714      	adds	r7, #20
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr
 800b806:	bf00      	nop
 800b808:	2000174c 	.word	0x2000174c

0800b80c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b084      	sub	sp, #16
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b814:	f7ff f9fa 	bl	800ac0c <xTaskGetTickCount>
 800b818:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b81a:	4b0b      	ldr	r3, [pc, #44]	; (800b848 <prvSampleTimeNow+0x3c>)
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	68fa      	ldr	r2, [r7, #12]
 800b820:	429a      	cmp	r2, r3
 800b822:	d205      	bcs.n	800b830 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b824:	f000 f93c 	bl	800baa0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	601a      	str	r2, [r3, #0]
 800b82e:	e002      	b.n	800b836 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2200      	movs	r2, #0
 800b834:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b836:	4a04      	ldr	r2, [pc, #16]	; (800b848 <prvSampleTimeNow+0x3c>)
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b83c:	68fb      	ldr	r3, [r7, #12]
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3710      	adds	r7, #16
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	2000175c 	.word	0x2000175c

0800b84c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b086      	sub	sp, #24
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	607a      	str	r2, [r7, #4]
 800b858:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b85a:	2300      	movs	r3, #0
 800b85c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	68ba      	ldr	r2, [r7, #8]
 800b862:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	68fa      	ldr	r2, [r7, #12]
 800b868:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b86a:	68ba      	ldr	r2, [r7, #8]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	429a      	cmp	r2, r3
 800b870:	d812      	bhi.n	800b898 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	1ad2      	subs	r2, r2, r3
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	699b      	ldr	r3, [r3, #24]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d302      	bcc.n	800b886 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b880:	2301      	movs	r3, #1
 800b882:	617b      	str	r3, [r7, #20]
 800b884:	e01b      	b.n	800b8be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b886:	4b10      	ldr	r3, [pc, #64]	; (800b8c8 <prvInsertTimerInActiveList+0x7c>)
 800b888:	681a      	ldr	r2, [r3, #0]
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	3304      	adds	r3, #4
 800b88e:	4619      	mov	r1, r3
 800b890:	4610      	mov	r0, r2
 800b892:	f7fe f954 	bl	8009b3e <vListInsert>
 800b896:	e012      	b.n	800b8be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d206      	bcs.n	800b8ae <prvInsertTimerInActiveList+0x62>
 800b8a0:	68ba      	ldr	r2, [r7, #8]
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d302      	bcc.n	800b8ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	617b      	str	r3, [r7, #20]
 800b8ac:	e007      	b.n	800b8be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b8ae:	4b07      	ldr	r3, [pc, #28]	; (800b8cc <prvInsertTimerInActiveList+0x80>)
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	3304      	adds	r3, #4
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	4610      	mov	r0, r2
 800b8ba:	f7fe f940 	bl	8009b3e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b8be:	697b      	ldr	r3, [r7, #20]
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3718      	adds	r7, #24
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}
 800b8c8:	20001750 	.word	0x20001750
 800b8cc:	2000174c 	.word	0x2000174c

0800b8d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b08e      	sub	sp, #56	; 0x38
 800b8d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b8d6:	e0d0      	b.n	800ba7a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	da1a      	bge.n	800b914 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b8de:	1d3b      	adds	r3, r7, #4
 800b8e0:	3304      	adds	r3, #4
 800b8e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d10c      	bne.n	800b904 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800b8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ee:	b672      	cpsid	i
 800b8f0:	f383 8811 	msr	BASEPRI, r3
 800b8f4:	f3bf 8f6f 	isb	sy
 800b8f8:	f3bf 8f4f 	dsb	sy
 800b8fc:	b662      	cpsie	i
 800b8fe:	61fb      	str	r3, [r7, #28]
}
 800b900:	bf00      	nop
 800b902:	e7fe      	b.n	800b902 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b90a:	6850      	ldr	r0, [r2, #4]
 800b90c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b90e:	6892      	ldr	r2, [r2, #8]
 800b910:	4611      	mov	r1, r2
 800b912:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2b00      	cmp	r3, #0
 800b918:	f2c0 80ae 	blt.w	800ba78 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b922:	695b      	ldr	r3, [r3, #20]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d004      	beq.n	800b932 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b92a:	3304      	adds	r3, #4
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7fe f93f 	bl	8009bb0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b932:	463b      	mov	r3, r7
 800b934:	4618      	mov	r0, r3
 800b936:	f7ff ff69 	bl	800b80c <prvSampleTimeNow>
 800b93a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2b09      	cmp	r3, #9
 800b940:	f200 809b 	bhi.w	800ba7a <prvProcessReceivedCommands+0x1aa>
 800b944:	a201      	add	r2, pc, #4	; (adr r2, 800b94c <prvProcessReceivedCommands+0x7c>)
 800b946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b94a:	bf00      	nop
 800b94c:	0800b975 	.word	0x0800b975
 800b950:	0800b975 	.word	0x0800b975
 800b954:	0800b975 	.word	0x0800b975
 800b958:	0800b9ed 	.word	0x0800b9ed
 800b95c:	0800ba01 	.word	0x0800ba01
 800b960:	0800ba4f 	.word	0x0800ba4f
 800b964:	0800b975 	.word	0x0800b975
 800b968:	0800b975 	.word	0x0800b975
 800b96c:	0800b9ed 	.word	0x0800b9ed
 800b970:	0800ba01 	.word	0x0800ba01
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b976:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b97a:	f043 0301 	orr.w	r3, r3, #1
 800b97e:	b2da      	uxtb	r2, r3
 800b980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b982:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b986:	68ba      	ldr	r2, [r7, #8]
 800b988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98a:	699b      	ldr	r3, [r3, #24]
 800b98c:	18d1      	adds	r1, r2, r3
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b992:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b994:	f7ff ff5a 	bl	800b84c <prvInsertTimerInActiveList>
 800b998:	4603      	mov	r3, r0
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d06d      	beq.n	800ba7a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a0:	6a1b      	ldr	r3, [r3, #32]
 800b9a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9ac:	f003 0304 	and.w	r3, r3, #4
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d062      	beq.n	800ba7a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b9b4:	68ba      	ldr	r2, [r7, #8]
 800b9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b8:	699b      	ldr	r3, [r3, #24]
 800b9ba:	441a      	add	r2, r3
 800b9bc:	2300      	movs	r3, #0
 800b9be:	9300      	str	r3, [sp, #0]
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	2100      	movs	r1, #0
 800b9c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b9c6:	f7ff fdff 	bl	800b5c8 <xTimerGenericCommand>
 800b9ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b9cc:	6a3b      	ldr	r3, [r7, #32]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d153      	bne.n	800ba7a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800b9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d6:	b672      	cpsid	i
 800b9d8:	f383 8811 	msr	BASEPRI, r3
 800b9dc:	f3bf 8f6f 	isb	sy
 800b9e0:	f3bf 8f4f 	dsb	sy
 800b9e4:	b662      	cpsie	i
 800b9e6:	61bb      	str	r3, [r7, #24]
}
 800b9e8:	bf00      	nop
 800b9ea:	e7fe      	b.n	800b9ea <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b9f2:	f023 0301 	bic.w	r3, r3, #1
 800b9f6:	b2da      	uxtb	r2, r3
 800b9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b9fe:	e03c      	b.n	800ba7a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ba00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba06:	f043 0301 	orr.w	r3, r3, #1
 800ba0a:	b2da      	uxtb	r2, r3
 800ba0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ba12:	68ba      	ldr	r2, [r7, #8]
 800ba14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba16:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ba18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba1a:	699b      	ldr	r3, [r3, #24]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d10c      	bne.n	800ba3a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800ba20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba24:	b672      	cpsid	i
 800ba26:	f383 8811 	msr	BASEPRI, r3
 800ba2a:	f3bf 8f6f 	isb	sy
 800ba2e:	f3bf 8f4f 	dsb	sy
 800ba32:	b662      	cpsie	i
 800ba34:	617b      	str	r3, [r7, #20]
}
 800ba36:	bf00      	nop
 800ba38:	e7fe      	b.n	800ba38 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ba3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba3c:	699a      	ldr	r2, [r3, #24]
 800ba3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba40:	18d1      	adds	r1, r2, r3
 800ba42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba48:	f7ff ff00 	bl	800b84c <prvInsertTimerInActiveList>
					break;
 800ba4c:	e015      	b.n	800ba7a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ba4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba54:	f003 0302 	and.w	r3, r3, #2
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d103      	bne.n	800ba64 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800ba5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ba5e:	f000 fbd1 	bl	800c204 <vPortFree>
 800ba62:	e00a      	b.n	800ba7a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba6a:	f023 0301 	bic.w	r3, r3, #1
 800ba6e:	b2da      	uxtb	r2, r3
 800ba70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ba76:	e000      	b.n	800ba7a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ba78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba7a:	4b08      	ldr	r3, [pc, #32]	; (800ba9c <prvProcessReceivedCommands+0x1cc>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	1d39      	adds	r1, r7, #4
 800ba80:	2200      	movs	r2, #0
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7fe fb74 	bl	800a170 <xQueueReceive>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	f47f af24 	bne.w	800b8d8 <prvProcessReceivedCommands+0x8>
	}
}
 800ba90:	bf00      	nop
 800ba92:	bf00      	nop
 800ba94:	3730      	adds	r7, #48	; 0x30
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	20001754 	.word	0x20001754

0800baa0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b088      	sub	sp, #32
 800baa4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800baa6:	e04a      	b.n	800bb3e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800baa8:	4b2e      	ldr	r3, [pc, #184]	; (800bb64 <prvSwitchTimerLists+0xc4>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	68db      	ldr	r3, [r3, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bab2:	4b2c      	ldr	r3, [pc, #176]	; (800bb64 <prvSwitchTimerLists+0xc4>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	68db      	ldr	r3, [r3, #12]
 800bab8:	68db      	ldr	r3, [r3, #12]
 800baba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	3304      	adds	r3, #4
 800bac0:	4618      	mov	r0, r3
 800bac2:	f7fe f875 	bl	8009bb0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	6a1b      	ldr	r3, [r3, #32]
 800baca:	68f8      	ldr	r0, [r7, #12]
 800bacc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bad4:	f003 0304 	and.w	r3, r3, #4
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d030      	beq.n	800bb3e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	699b      	ldr	r3, [r3, #24]
 800bae0:	693a      	ldr	r2, [r7, #16]
 800bae2:	4413      	add	r3, r2
 800bae4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bae6:	68ba      	ldr	r2, [r7, #8]
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	429a      	cmp	r2, r3
 800baec:	d90e      	bls.n	800bb0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	68ba      	ldr	r2, [r7, #8]
 800baf2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	68fa      	ldr	r2, [r7, #12]
 800baf8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bafa:	4b1a      	ldr	r3, [pc, #104]	; (800bb64 <prvSwitchTimerLists+0xc4>)
 800bafc:	681a      	ldr	r2, [r3, #0]
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	3304      	adds	r3, #4
 800bb02:	4619      	mov	r1, r3
 800bb04:	4610      	mov	r0, r2
 800bb06:	f7fe f81a 	bl	8009b3e <vListInsert>
 800bb0a:	e018      	b.n	800bb3e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	9300      	str	r3, [sp, #0]
 800bb10:	2300      	movs	r3, #0
 800bb12:	693a      	ldr	r2, [r7, #16]
 800bb14:	2100      	movs	r1, #0
 800bb16:	68f8      	ldr	r0, [r7, #12]
 800bb18:	f7ff fd56 	bl	800b5c8 <xTimerGenericCommand>
 800bb1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d10c      	bne.n	800bb3e <prvSwitchTimerLists+0x9e>
	__asm volatile
 800bb24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb28:	b672      	cpsid	i
 800bb2a:	f383 8811 	msr	BASEPRI, r3
 800bb2e:	f3bf 8f6f 	isb	sy
 800bb32:	f3bf 8f4f 	dsb	sy
 800bb36:	b662      	cpsie	i
 800bb38:	603b      	str	r3, [r7, #0]
}
 800bb3a:	bf00      	nop
 800bb3c:	e7fe      	b.n	800bb3c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bb3e:	4b09      	ldr	r3, [pc, #36]	; (800bb64 <prvSwitchTimerLists+0xc4>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d1af      	bne.n	800baa8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bb48:	4b06      	ldr	r3, [pc, #24]	; (800bb64 <prvSwitchTimerLists+0xc4>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bb4e:	4b06      	ldr	r3, [pc, #24]	; (800bb68 <prvSwitchTimerLists+0xc8>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4a04      	ldr	r2, [pc, #16]	; (800bb64 <prvSwitchTimerLists+0xc4>)
 800bb54:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bb56:	4a04      	ldr	r2, [pc, #16]	; (800bb68 <prvSwitchTimerLists+0xc8>)
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	6013      	str	r3, [r2, #0]
}
 800bb5c:	bf00      	nop
 800bb5e:	3718      	adds	r7, #24
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}
 800bb64:	2000174c 	.word	0x2000174c
 800bb68:	20001750 	.word	0x20001750

0800bb6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bb72:	f000 f94b 	bl	800be0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bb76:	4b15      	ldr	r3, [pc, #84]	; (800bbcc <prvCheckForValidListAndQueue+0x60>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d120      	bne.n	800bbc0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bb7e:	4814      	ldr	r0, [pc, #80]	; (800bbd0 <prvCheckForValidListAndQueue+0x64>)
 800bb80:	f7fd ff8c 	bl	8009a9c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bb84:	4813      	ldr	r0, [pc, #76]	; (800bbd4 <prvCheckForValidListAndQueue+0x68>)
 800bb86:	f7fd ff89 	bl	8009a9c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bb8a:	4b13      	ldr	r3, [pc, #76]	; (800bbd8 <prvCheckForValidListAndQueue+0x6c>)
 800bb8c:	4a10      	ldr	r2, [pc, #64]	; (800bbd0 <prvCheckForValidListAndQueue+0x64>)
 800bb8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bb90:	4b12      	ldr	r3, [pc, #72]	; (800bbdc <prvCheckForValidListAndQueue+0x70>)
 800bb92:	4a10      	ldr	r2, [pc, #64]	; (800bbd4 <prvCheckForValidListAndQueue+0x68>)
 800bb94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bb96:	2300      	movs	r3, #0
 800bb98:	9300      	str	r3, [sp, #0]
 800bb9a:	4b11      	ldr	r3, [pc, #68]	; (800bbe0 <prvCheckForValidListAndQueue+0x74>)
 800bb9c:	4a11      	ldr	r2, [pc, #68]	; (800bbe4 <prvCheckForValidListAndQueue+0x78>)
 800bb9e:	2110      	movs	r1, #16
 800bba0:	200a      	movs	r0, #10
 800bba2:	f7fe f899 	bl	8009cd8 <xQueueGenericCreateStatic>
 800bba6:	4603      	mov	r3, r0
 800bba8:	4a08      	ldr	r2, [pc, #32]	; (800bbcc <prvCheckForValidListAndQueue+0x60>)
 800bbaa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bbac:	4b07      	ldr	r3, [pc, #28]	; (800bbcc <prvCheckForValidListAndQueue+0x60>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d005      	beq.n	800bbc0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bbb4:	4b05      	ldr	r3, [pc, #20]	; (800bbcc <prvCheckForValidListAndQueue+0x60>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	490b      	ldr	r1, [pc, #44]	; (800bbe8 <prvCheckForValidListAndQueue+0x7c>)
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7fe fcce 	bl	800a55c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bbc0:	f000 f958 	bl	800be74 <vPortExitCritical>
}
 800bbc4:	bf00      	nop
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}
 800bbca:	bf00      	nop
 800bbcc:	20001754 	.word	0x20001754
 800bbd0:	20001724 	.word	0x20001724
 800bbd4:	20001738 	.word	0x20001738
 800bbd8:	2000174c 	.word	0x2000174c
 800bbdc:	20001750 	.word	0x20001750
 800bbe0:	20001800 	.word	0x20001800
 800bbe4:	20001760 	.word	0x20001760
 800bbe8:	0800cdec 	.word	0x0800cdec

0800bbec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bbec:	b480      	push	{r7}
 800bbee:	b085      	sub	sp, #20
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	60f8      	str	r0, [r7, #12]
 800bbf4:	60b9      	str	r1, [r7, #8]
 800bbf6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	3b04      	subs	r3, #4
 800bbfc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bc04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	3b04      	subs	r3, #4
 800bc0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	f023 0201 	bic.w	r2, r3, #1
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	3b04      	subs	r3, #4
 800bc1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bc1c:	4a0c      	ldr	r2, [pc, #48]	; (800bc50 <pxPortInitialiseStack+0x64>)
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	3b14      	subs	r3, #20
 800bc26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	3b04      	subs	r3, #4
 800bc32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f06f 0202 	mvn.w	r2, #2
 800bc3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	3b20      	subs	r3, #32
 800bc40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bc42:	68fb      	ldr	r3, [r7, #12]
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3714      	adds	r7, #20
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr
 800bc50:	0800bc55 	.word	0x0800bc55

0800bc54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bc54:	b480      	push	{r7}
 800bc56:	b085      	sub	sp, #20
 800bc58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bc5e:	4b14      	ldr	r3, [pc, #80]	; (800bcb0 <prvTaskExitError+0x5c>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc66:	d00c      	beq.n	800bc82 <prvTaskExitError+0x2e>
	__asm volatile
 800bc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc6c:	b672      	cpsid	i
 800bc6e:	f383 8811 	msr	BASEPRI, r3
 800bc72:	f3bf 8f6f 	isb	sy
 800bc76:	f3bf 8f4f 	dsb	sy
 800bc7a:	b662      	cpsie	i
 800bc7c:	60fb      	str	r3, [r7, #12]
}
 800bc7e:	bf00      	nop
 800bc80:	e7fe      	b.n	800bc80 <prvTaskExitError+0x2c>
	__asm volatile
 800bc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc86:	b672      	cpsid	i
 800bc88:	f383 8811 	msr	BASEPRI, r3
 800bc8c:	f3bf 8f6f 	isb	sy
 800bc90:	f3bf 8f4f 	dsb	sy
 800bc94:	b662      	cpsie	i
 800bc96:	60bb      	str	r3, [r7, #8]
}
 800bc98:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bc9a:	bf00      	nop
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d0fc      	beq.n	800bc9c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bca2:	bf00      	nop
 800bca4:	bf00      	nop
 800bca6:	3714      	adds	r7, #20
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr
 800bcb0:	20000048 	.word	0x20000048
	...

0800bcc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bcc0:	4b07      	ldr	r3, [pc, #28]	; (800bce0 <pxCurrentTCBConst2>)
 800bcc2:	6819      	ldr	r1, [r3, #0]
 800bcc4:	6808      	ldr	r0, [r1, #0]
 800bcc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcca:	f380 8809 	msr	PSP, r0
 800bcce:	f3bf 8f6f 	isb	sy
 800bcd2:	f04f 0000 	mov.w	r0, #0
 800bcd6:	f380 8811 	msr	BASEPRI, r0
 800bcda:	4770      	bx	lr
 800bcdc:	f3af 8000 	nop.w

0800bce0 <pxCurrentTCBConst2>:
 800bce0:	20001224 	.word	0x20001224
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bce4:	bf00      	nop
 800bce6:	bf00      	nop

0800bce8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bce8:	4808      	ldr	r0, [pc, #32]	; (800bd0c <prvPortStartFirstTask+0x24>)
 800bcea:	6800      	ldr	r0, [r0, #0]
 800bcec:	6800      	ldr	r0, [r0, #0]
 800bcee:	f380 8808 	msr	MSP, r0
 800bcf2:	f04f 0000 	mov.w	r0, #0
 800bcf6:	f380 8814 	msr	CONTROL, r0
 800bcfa:	b662      	cpsie	i
 800bcfc:	b661      	cpsie	f
 800bcfe:	f3bf 8f4f 	dsb	sy
 800bd02:	f3bf 8f6f 	isb	sy
 800bd06:	df00      	svc	0
 800bd08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bd0a:	bf00      	nop
 800bd0c:	e000ed08 	.word	0xe000ed08

0800bd10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bd16:	4b37      	ldr	r3, [pc, #220]	; (800bdf4 <xPortStartScheduler+0xe4>)
 800bd18:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	b2db      	uxtb	r3, r3
 800bd20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	22ff      	movs	r2, #255	; 0xff
 800bd26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	b2db      	uxtb	r3, r3
 800bd2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bd30:	78fb      	ldrb	r3, [r7, #3]
 800bd32:	b2db      	uxtb	r3, r3
 800bd34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bd38:	b2da      	uxtb	r2, r3
 800bd3a:	4b2f      	ldr	r3, [pc, #188]	; (800bdf8 <xPortStartScheduler+0xe8>)
 800bd3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bd3e:	4b2f      	ldr	r3, [pc, #188]	; (800bdfc <xPortStartScheduler+0xec>)
 800bd40:	2207      	movs	r2, #7
 800bd42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd44:	e009      	b.n	800bd5a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800bd46:	4b2d      	ldr	r3, [pc, #180]	; (800bdfc <xPortStartScheduler+0xec>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	3b01      	subs	r3, #1
 800bd4c:	4a2b      	ldr	r2, [pc, #172]	; (800bdfc <xPortStartScheduler+0xec>)
 800bd4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bd50:	78fb      	ldrb	r3, [r7, #3]
 800bd52:	b2db      	uxtb	r3, r3
 800bd54:	005b      	lsls	r3, r3, #1
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd5a:	78fb      	ldrb	r3, [r7, #3]
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd62:	2b80      	cmp	r3, #128	; 0x80
 800bd64:	d0ef      	beq.n	800bd46 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bd66:	4b25      	ldr	r3, [pc, #148]	; (800bdfc <xPortStartScheduler+0xec>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f1c3 0307 	rsb	r3, r3, #7
 800bd6e:	2b04      	cmp	r3, #4
 800bd70:	d00c      	beq.n	800bd8c <xPortStartScheduler+0x7c>
	__asm volatile
 800bd72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd76:	b672      	cpsid	i
 800bd78:	f383 8811 	msr	BASEPRI, r3
 800bd7c:	f3bf 8f6f 	isb	sy
 800bd80:	f3bf 8f4f 	dsb	sy
 800bd84:	b662      	cpsie	i
 800bd86:	60bb      	str	r3, [r7, #8]
}
 800bd88:	bf00      	nop
 800bd8a:	e7fe      	b.n	800bd8a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bd8c:	4b1b      	ldr	r3, [pc, #108]	; (800bdfc <xPortStartScheduler+0xec>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	021b      	lsls	r3, r3, #8
 800bd92:	4a1a      	ldr	r2, [pc, #104]	; (800bdfc <xPortStartScheduler+0xec>)
 800bd94:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bd96:	4b19      	ldr	r3, [pc, #100]	; (800bdfc <xPortStartScheduler+0xec>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bd9e:	4a17      	ldr	r2, [pc, #92]	; (800bdfc <xPortStartScheduler+0xec>)
 800bda0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	b2da      	uxtb	r2, r3
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bdaa:	4b15      	ldr	r3, [pc, #84]	; (800be00 <xPortStartScheduler+0xf0>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4a14      	ldr	r2, [pc, #80]	; (800be00 <xPortStartScheduler+0xf0>)
 800bdb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bdb4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bdb6:	4b12      	ldr	r3, [pc, #72]	; (800be00 <xPortStartScheduler+0xf0>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4a11      	ldr	r2, [pc, #68]	; (800be00 <xPortStartScheduler+0xf0>)
 800bdbc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bdc0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bdc2:	f000 f8dd 	bl	800bf80 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bdc6:	4b0f      	ldr	r3, [pc, #60]	; (800be04 <xPortStartScheduler+0xf4>)
 800bdc8:	2200      	movs	r2, #0
 800bdca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bdcc:	f000 f8fc 	bl	800bfc8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bdd0:	4b0d      	ldr	r3, [pc, #52]	; (800be08 <xPortStartScheduler+0xf8>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4a0c      	ldr	r2, [pc, #48]	; (800be08 <xPortStartScheduler+0xf8>)
 800bdd6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bdda:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bddc:	f7ff ff84 	bl	800bce8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bde0:	f7fe ffec 	bl	800adbc <vTaskSwitchContext>
	prvTaskExitError();
 800bde4:	f7ff ff36 	bl	800bc54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bde8:	2300      	movs	r3, #0
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3710      	adds	r7, #16
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	e000e400 	.word	0xe000e400
 800bdf8:	20001850 	.word	0x20001850
 800bdfc:	20001854 	.word	0x20001854
 800be00:	e000ed20 	.word	0xe000ed20
 800be04:	20000048 	.word	0x20000048
 800be08:	e000ef34 	.word	0xe000ef34

0800be0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800be0c:	b480      	push	{r7}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
	__asm volatile
 800be12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be16:	b672      	cpsid	i
 800be18:	f383 8811 	msr	BASEPRI, r3
 800be1c:	f3bf 8f6f 	isb	sy
 800be20:	f3bf 8f4f 	dsb	sy
 800be24:	b662      	cpsie	i
 800be26:	607b      	str	r3, [r7, #4]
}
 800be28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800be2a:	4b10      	ldr	r3, [pc, #64]	; (800be6c <vPortEnterCritical+0x60>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	3301      	adds	r3, #1
 800be30:	4a0e      	ldr	r2, [pc, #56]	; (800be6c <vPortEnterCritical+0x60>)
 800be32:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800be34:	4b0d      	ldr	r3, [pc, #52]	; (800be6c <vPortEnterCritical+0x60>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	2b01      	cmp	r3, #1
 800be3a:	d111      	bne.n	800be60 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800be3c:	4b0c      	ldr	r3, [pc, #48]	; (800be70 <vPortEnterCritical+0x64>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	b2db      	uxtb	r3, r3
 800be42:	2b00      	cmp	r3, #0
 800be44:	d00c      	beq.n	800be60 <vPortEnterCritical+0x54>
	__asm volatile
 800be46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be4a:	b672      	cpsid	i
 800be4c:	f383 8811 	msr	BASEPRI, r3
 800be50:	f3bf 8f6f 	isb	sy
 800be54:	f3bf 8f4f 	dsb	sy
 800be58:	b662      	cpsie	i
 800be5a:	603b      	str	r3, [r7, #0]
}
 800be5c:	bf00      	nop
 800be5e:	e7fe      	b.n	800be5e <vPortEnterCritical+0x52>
	}
}
 800be60:	bf00      	nop
 800be62:	370c      	adds	r7, #12
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr
 800be6c:	20000048 	.word	0x20000048
 800be70:	e000ed04 	.word	0xe000ed04

0800be74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800be74:	b480      	push	{r7}
 800be76:	b083      	sub	sp, #12
 800be78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800be7a:	4b13      	ldr	r3, [pc, #76]	; (800bec8 <vPortExitCritical+0x54>)
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d10c      	bne.n	800be9c <vPortExitCritical+0x28>
	__asm volatile
 800be82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be86:	b672      	cpsid	i
 800be88:	f383 8811 	msr	BASEPRI, r3
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	b662      	cpsie	i
 800be96:	607b      	str	r3, [r7, #4]
}
 800be98:	bf00      	nop
 800be9a:	e7fe      	b.n	800be9a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800be9c:	4b0a      	ldr	r3, [pc, #40]	; (800bec8 <vPortExitCritical+0x54>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	3b01      	subs	r3, #1
 800bea2:	4a09      	ldr	r2, [pc, #36]	; (800bec8 <vPortExitCritical+0x54>)
 800bea4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bea6:	4b08      	ldr	r3, [pc, #32]	; (800bec8 <vPortExitCritical+0x54>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d105      	bne.n	800beba <vPortExitCritical+0x46>
 800beae:	2300      	movs	r3, #0
 800beb0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	f383 8811 	msr	BASEPRI, r3
}
 800beb8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800beba:	bf00      	nop
 800bebc:	370c      	adds	r7, #12
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr
 800bec6:	bf00      	nop
 800bec8:	20000048 	.word	0x20000048
 800becc:	00000000 	.word	0x00000000

0800bed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bed0:	f3ef 8009 	mrs	r0, PSP
 800bed4:	f3bf 8f6f 	isb	sy
 800bed8:	4b15      	ldr	r3, [pc, #84]	; (800bf30 <pxCurrentTCBConst>)
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	f01e 0f10 	tst.w	lr, #16
 800bee0:	bf08      	it	eq
 800bee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beea:	6010      	str	r0, [r2, #0]
 800beec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bef4:	b672      	cpsid	i
 800bef6:	f380 8811 	msr	BASEPRI, r0
 800befa:	f3bf 8f4f 	dsb	sy
 800befe:	f3bf 8f6f 	isb	sy
 800bf02:	b662      	cpsie	i
 800bf04:	f7fe ff5a 	bl	800adbc <vTaskSwitchContext>
 800bf08:	f04f 0000 	mov.w	r0, #0
 800bf0c:	f380 8811 	msr	BASEPRI, r0
 800bf10:	bc09      	pop	{r0, r3}
 800bf12:	6819      	ldr	r1, [r3, #0]
 800bf14:	6808      	ldr	r0, [r1, #0]
 800bf16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf1a:	f01e 0f10 	tst.w	lr, #16
 800bf1e:	bf08      	it	eq
 800bf20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bf24:	f380 8809 	msr	PSP, r0
 800bf28:	f3bf 8f6f 	isb	sy
 800bf2c:	4770      	bx	lr
 800bf2e:	bf00      	nop

0800bf30 <pxCurrentTCBConst>:
 800bf30:	20001224 	.word	0x20001224
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bf34:	bf00      	nop
 800bf36:	bf00      	nop

0800bf38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af00      	add	r7, sp, #0
	__asm volatile
 800bf3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf42:	b672      	cpsid	i
 800bf44:	f383 8811 	msr	BASEPRI, r3
 800bf48:	f3bf 8f6f 	isb	sy
 800bf4c:	f3bf 8f4f 	dsb	sy
 800bf50:	b662      	cpsie	i
 800bf52:	607b      	str	r3, [r7, #4]
}
 800bf54:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bf56:	f7fe fe75 	bl	800ac44 <xTaskIncrementTick>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d003      	beq.n	800bf68 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bf60:	4b06      	ldr	r3, [pc, #24]	; (800bf7c <SysTick_Handler+0x44>)
 800bf62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf66:	601a      	str	r2, [r3, #0]
 800bf68:	2300      	movs	r3, #0
 800bf6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	f383 8811 	msr	BASEPRI, r3
}
 800bf72:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bf74:	bf00      	nop
 800bf76:	3708      	adds	r7, #8
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}
 800bf7c:	e000ed04 	.word	0xe000ed04

0800bf80 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bf80:	b480      	push	{r7}
 800bf82:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bf84:	4b0b      	ldr	r3, [pc, #44]	; (800bfb4 <vPortSetupTimerInterrupt+0x34>)
 800bf86:	2200      	movs	r2, #0
 800bf88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bf8a:	4b0b      	ldr	r3, [pc, #44]	; (800bfb8 <vPortSetupTimerInterrupt+0x38>)
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bf90:	4b0a      	ldr	r3, [pc, #40]	; (800bfbc <vPortSetupTimerInterrupt+0x3c>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4a0a      	ldr	r2, [pc, #40]	; (800bfc0 <vPortSetupTimerInterrupt+0x40>)
 800bf96:	fba2 2303 	umull	r2, r3, r2, r3
 800bf9a:	099b      	lsrs	r3, r3, #6
 800bf9c:	4a09      	ldr	r2, [pc, #36]	; (800bfc4 <vPortSetupTimerInterrupt+0x44>)
 800bf9e:	3b01      	subs	r3, #1
 800bfa0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bfa2:	4b04      	ldr	r3, [pc, #16]	; (800bfb4 <vPortSetupTimerInterrupt+0x34>)
 800bfa4:	2207      	movs	r2, #7
 800bfa6:	601a      	str	r2, [r3, #0]
}
 800bfa8:	bf00      	nop
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb0:	4770      	bx	lr
 800bfb2:	bf00      	nop
 800bfb4:	e000e010 	.word	0xe000e010
 800bfb8:	e000e018 	.word	0xe000e018
 800bfbc:	20000000 	.word	0x20000000
 800bfc0:	10624dd3 	.word	0x10624dd3
 800bfc4:	e000e014 	.word	0xe000e014

0800bfc8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bfc8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bfd8 <vPortEnableVFP+0x10>
 800bfcc:	6801      	ldr	r1, [r0, #0]
 800bfce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bfd2:	6001      	str	r1, [r0, #0]
 800bfd4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bfd6:	bf00      	nop
 800bfd8:	e000ed88 	.word	0xe000ed88

0800bfdc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bfdc:	b480      	push	{r7}
 800bfde:	b085      	sub	sp, #20
 800bfe0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bfe2:	f3ef 8305 	mrs	r3, IPSR
 800bfe6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2b0f      	cmp	r3, #15
 800bfec:	d916      	bls.n	800c01c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bfee:	4a19      	ldr	r2, [pc, #100]	; (800c054 <vPortValidateInterruptPriority+0x78>)
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	4413      	add	r3, r2
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bff8:	4b17      	ldr	r3, [pc, #92]	; (800c058 <vPortValidateInterruptPriority+0x7c>)
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	7afa      	ldrb	r2, [r7, #11]
 800bffe:	429a      	cmp	r2, r3
 800c000:	d20c      	bcs.n	800c01c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800c002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c006:	b672      	cpsid	i
 800c008:	f383 8811 	msr	BASEPRI, r3
 800c00c:	f3bf 8f6f 	isb	sy
 800c010:	f3bf 8f4f 	dsb	sy
 800c014:	b662      	cpsie	i
 800c016:	607b      	str	r3, [r7, #4]
}
 800c018:	bf00      	nop
 800c01a:	e7fe      	b.n	800c01a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c01c:	4b0f      	ldr	r3, [pc, #60]	; (800c05c <vPortValidateInterruptPriority+0x80>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c024:	4b0e      	ldr	r3, [pc, #56]	; (800c060 <vPortValidateInterruptPriority+0x84>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	429a      	cmp	r2, r3
 800c02a:	d90c      	bls.n	800c046 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800c02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c030:	b672      	cpsid	i
 800c032:	f383 8811 	msr	BASEPRI, r3
 800c036:	f3bf 8f6f 	isb	sy
 800c03a:	f3bf 8f4f 	dsb	sy
 800c03e:	b662      	cpsie	i
 800c040:	603b      	str	r3, [r7, #0]
}
 800c042:	bf00      	nop
 800c044:	e7fe      	b.n	800c044 <vPortValidateInterruptPriority+0x68>
	}
 800c046:	bf00      	nop
 800c048:	3714      	adds	r7, #20
 800c04a:	46bd      	mov	sp, r7
 800c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c050:	4770      	bx	lr
 800c052:	bf00      	nop
 800c054:	e000e3f0 	.word	0xe000e3f0
 800c058:	20001850 	.word	0x20001850
 800c05c:	e000ed0c 	.word	0xe000ed0c
 800c060:	20001854 	.word	0x20001854

0800c064 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b08a      	sub	sp, #40	; 0x28
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c06c:	2300      	movs	r3, #0
 800c06e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c070:	f7fe fd1e 	bl	800aab0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c074:	4b5e      	ldr	r3, [pc, #376]	; (800c1f0 <pvPortMalloc+0x18c>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d101      	bne.n	800c080 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c07c:	f000 f920 	bl	800c2c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c080:	4b5c      	ldr	r3, [pc, #368]	; (800c1f4 <pvPortMalloc+0x190>)
 800c082:	681a      	ldr	r2, [r3, #0]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	4013      	ands	r3, r2
 800c088:	2b00      	cmp	r3, #0
 800c08a:	f040 8092 	bne.w	800c1b2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d01f      	beq.n	800c0d4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800c094:	2208      	movs	r2, #8
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	4413      	add	r3, r2
 800c09a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f003 0307 	and.w	r3, r3, #7
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d016      	beq.n	800c0d4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f023 0307 	bic.w	r3, r3, #7
 800c0ac:	3308      	adds	r3, #8
 800c0ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f003 0307 	and.w	r3, r3, #7
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d00c      	beq.n	800c0d4 <pvPortMalloc+0x70>
	__asm volatile
 800c0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0be:	b672      	cpsid	i
 800c0c0:	f383 8811 	msr	BASEPRI, r3
 800c0c4:	f3bf 8f6f 	isb	sy
 800c0c8:	f3bf 8f4f 	dsb	sy
 800c0cc:	b662      	cpsie	i
 800c0ce:	617b      	str	r3, [r7, #20]
}
 800c0d0:	bf00      	nop
 800c0d2:	e7fe      	b.n	800c0d2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d06b      	beq.n	800c1b2 <pvPortMalloc+0x14e>
 800c0da:	4b47      	ldr	r3, [pc, #284]	; (800c1f8 <pvPortMalloc+0x194>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	687a      	ldr	r2, [r7, #4]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d866      	bhi.n	800c1b2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c0e4:	4b45      	ldr	r3, [pc, #276]	; (800c1fc <pvPortMalloc+0x198>)
 800c0e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c0e8:	4b44      	ldr	r3, [pc, #272]	; (800c1fc <pvPortMalloc+0x198>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c0ee:	e004      	b.n	800c0fa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800c0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	429a      	cmp	r2, r3
 800c102:	d903      	bls.n	800c10c <pvPortMalloc+0xa8>
 800c104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d1f1      	bne.n	800c0f0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c10c:	4b38      	ldr	r3, [pc, #224]	; (800c1f0 <pvPortMalloc+0x18c>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c112:	429a      	cmp	r2, r3
 800c114:	d04d      	beq.n	800c1b2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c116:	6a3b      	ldr	r3, [r7, #32]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	2208      	movs	r2, #8
 800c11c:	4413      	add	r3, r2
 800c11e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c122:	681a      	ldr	r2, [r3, #0]
 800c124:	6a3b      	ldr	r3, [r7, #32]
 800c126:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c12a:	685a      	ldr	r2, [r3, #4]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	1ad2      	subs	r2, r2, r3
 800c130:	2308      	movs	r3, #8
 800c132:	005b      	lsls	r3, r3, #1
 800c134:	429a      	cmp	r2, r3
 800c136:	d921      	bls.n	800c17c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	4413      	add	r3, r2
 800c13e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	f003 0307 	and.w	r3, r3, #7
 800c146:	2b00      	cmp	r3, #0
 800c148:	d00c      	beq.n	800c164 <pvPortMalloc+0x100>
	__asm volatile
 800c14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14e:	b672      	cpsid	i
 800c150:	f383 8811 	msr	BASEPRI, r3
 800c154:	f3bf 8f6f 	isb	sy
 800c158:	f3bf 8f4f 	dsb	sy
 800c15c:	b662      	cpsie	i
 800c15e:	613b      	str	r3, [r7, #16]
}
 800c160:	bf00      	nop
 800c162:	e7fe      	b.n	800c162 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c166:	685a      	ldr	r2, [r3, #4]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	1ad2      	subs	r2, r2, r3
 800c16c:	69bb      	ldr	r3, [r7, #24]
 800c16e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c172:	687a      	ldr	r2, [r7, #4]
 800c174:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c176:	69b8      	ldr	r0, [r7, #24]
 800c178:	f000 f904 	bl	800c384 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c17c:	4b1e      	ldr	r3, [pc, #120]	; (800c1f8 <pvPortMalloc+0x194>)
 800c17e:	681a      	ldr	r2, [r3, #0]
 800c180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	1ad3      	subs	r3, r2, r3
 800c186:	4a1c      	ldr	r2, [pc, #112]	; (800c1f8 <pvPortMalloc+0x194>)
 800c188:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c18a:	4b1b      	ldr	r3, [pc, #108]	; (800c1f8 <pvPortMalloc+0x194>)
 800c18c:	681a      	ldr	r2, [r3, #0]
 800c18e:	4b1c      	ldr	r3, [pc, #112]	; (800c200 <pvPortMalloc+0x19c>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	429a      	cmp	r2, r3
 800c194:	d203      	bcs.n	800c19e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c196:	4b18      	ldr	r3, [pc, #96]	; (800c1f8 <pvPortMalloc+0x194>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4a19      	ldr	r2, [pc, #100]	; (800c200 <pvPortMalloc+0x19c>)
 800c19c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a0:	685a      	ldr	r2, [r3, #4]
 800c1a2:	4b14      	ldr	r3, [pc, #80]	; (800c1f4 <pvPortMalloc+0x190>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	431a      	orrs	r2, r3
 800c1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c1b2:	f7fe fc8b 	bl	800aacc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800c1b6:	69fb      	ldr	r3, [r7, #28]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d101      	bne.n	800c1c0 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800c1bc:	f7f4 fa24 	bl	8000608 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1c0:	69fb      	ldr	r3, [r7, #28]
 800c1c2:	f003 0307 	and.w	r3, r3, #7
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d00c      	beq.n	800c1e4 <pvPortMalloc+0x180>
	__asm volatile
 800c1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ce:	b672      	cpsid	i
 800c1d0:	f383 8811 	msr	BASEPRI, r3
 800c1d4:	f3bf 8f6f 	isb	sy
 800c1d8:	f3bf 8f4f 	dsb	sy
 800c1dc:	b662      	cpsie	i
 800c1de:	60fb      	str	r3, [r7, #12]
}
 800c1e0:	bf00      	nop
 800c1e2:	e7fe      	b.n	800c1e2 <pvPortMalloc+0x17e>
	return pvReturn;
 800c1e4:	69fb      	ldr	r3, [r7, #28]
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3728      	adds	r7, #40	; 0x28
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	20009860 	.word	0x20009860
 800c1f4:	2000986c 	.word	0x2000986c
 800c1f8:	20009864 	.word	0x20009864
 800c1fc:	20009858 	.word	0x20009858
 800c200:	20009868 	.word	0x20009868

0800c204 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b086      	sub	sp, #24
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d04c      	beq.n	800c2b0 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c216:	2308      	movs	r3, #8
 800c218:	425b      	negs	r3, r3
 800c21a:	697a      	ldr	r2, [r7, #20]
 800c21c:	4413      	add	r3, r2
 800c21e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c224:	693b      	ldr	r3, [r7, #16]
 800c226:	685a      	ldr	r2, [r3, #4]
 800c228:	4b23      	ldr	r3, [pc, #140]	; (800c2b8 <vPortFree+0xb4>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4013      	ands	r3, r2
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d10c      	bne.n	800c24c <vPortFree+0x48>
	__asm volatile
 800c232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c236:	b672      	cpsid	i
 800c238:	f383 8811 	msr	BASEPRI, r3
 800c23c:	f3bf 8f6f 	isb	sy
 800c240:	f3bf 8f4f 	dsb	sy
 800c244:	b662      	cpsie	i
 800c246:	60fb      	str	r3, [r7, #12]
}
 800c248:	bf00      	nop
 800c24a:	e7fe      	b.n	800c24a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d00c      	beq.n	800c26e <vPortFree+0x6a>
	__asm volatile
 800c254:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c258:	b672      	cpsid	i
 800c25a:	f383 8811 	msr	BASEPRI, r3
 800c25e:	f3bf 8f6f 	isb	sy
 800c262:	f3bf 8f4f 	dsb	sy
 800c266:	b662      	cpsie	i
 800c268:	60bb      	str	r3, [r7, #8]
}
 800c26a:	bf00      	nop
 800c26c:	e7fe      	b.n	800c26c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	685a      	ldr	r2, [r3, #4]
 800c272:	4b11      	ldr	r3, [pc, #68]	; (800c2b8 <vPortFree+0xb4>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	4013      	ands	r3, r2
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d019      	beq.n	800c2b0 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d115      	bne.n	800c2b0 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	685a      	ldr	r2, [r3, #4]
 800c288:	4b0b      	ldr	r3, [pc, #44]	; (800c2b8 <vPortFree+0xb4>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	43db      	mvns	r3, r3
 800c28e:	401a      	ands	r2, r3
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c294:	f7fe fc0c 	bl	800aab0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	685a      	ldr	r2, [r3, #4]
 800c29c:	4b07      	ldr	r3, [pc, #28]	; (800c2bc <vPortFree+0xb8>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4413      	add	r3, r2
 800c2a2:	4a06      	ldr	r2, [pc, #24]	; (800c2bc <vPortFree+0xb8>)
 800c2a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c2a6:	6938      	ldr	r0, [r7, #16]
 800c2a8:	f000 f86c 	bl	800c384 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c2ac:	f7fe fc0e 	bl	800aacc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c2b0:	bf00      	nop
 800c2b2:	3718      	adds	r7, #24
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}
 800c2b8:	2000986c 	.word	0x2000986c
 800c2bc:	20009864 	.word	0x20009864

0800c2c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c2c0:	b480      	push	{r7}
 800c2c2:	b085      	sub	sp, #20
 800c2c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c2c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c2ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c2cc:	4b27      	ldr	r3, [pc, #156]	; (800c36c <prvHeapInit+0xac>)
 800c2ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	f003 0307 	and.w	r3, r3, #7
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d00c      	beq.n	800c2f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	3307      	adds	r3, #7
 800c2de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	f023 0307 	bic.w	r3, r3, #7
 800c2e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c2e8:	68ba      	ldr	r2, [r7, #8]
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	1ad3      	subs	r3, r2, r3
 800c2ee:	4a1f      	ldr	r2, [pc, #124]	; (800c36c <prvHeapInit+0xac>)
 800c2f0:	4413      	add	r3, r2
 800c2f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c2f8:	4a1d      	ldr	r2, [pc, #116]	; (800c370 <prvHeapInit+0xb0>)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c2fe:	4b1c      	ldr	r3, [pc, #112]	; (800c370 <prvHeapInit+0xb0>)
 800c300:	2200      	movs	r2, #0
 800c302:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	68ba      	ldr	r2, [r7, #8]
 800c308:	4413      	add	r3, r2
 800c30a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c30c:	2208      	movs	r2, #8
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	1a9b      	subs	r3, r3, r2
 800c312:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	f023 0307 	bic.w	r3, r3, #7
 800c31a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	4a15      	ldr	r2, [pc, #84]	; (800c374 <prvHeapInit+0xb4>)
 800c320:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c322:	4b14      	ldr	r3, [pc, #80]	; (800c374 <prvHeapInit+0xb4>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	2200      	movs	r2, #0
 800c328:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c32a:	4b12      	ldr	r3, [pc, #72]	; (800c374 <prvHeapInit+0xb4>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	2200      	movs	r2, #0
 800c330:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	68fa      	ldr	r2, [r7, #12]
 800c33a:	1ad2      	subs	r2, r2, r3
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c340:	4b0c      	ldr	r3, [pc, #48]	; (800c374 <prvHeapInit+0xb4>)
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	685b      	ldr	r3, [r3, #4]
 800c34c:	4a0a      	ldr	r2, [pc, #40]	; (800c378 <prvHeapInit+0xb8>)
 800c34e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	685b      	ldr	r3, [r3, #4]
 800c354:	4a09      	ldr	r2, [pc, #36]	; (800c37c <prvHeapInit+0xbc>)
 800c356:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c358:	4b09      	ldr	r3, [pc, #36]	; (800c380 <prvHeapInit+0xc0>)
 800c35a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c35e:	601a      	str	r2, [r3, #0]
}
 800c360:	bf00      	nop
 800c362:	3714      	adds	r7, #20
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr
 800c36c:	20001858 	.word	0x20001858
 800c370:	20009858 	.word	0x20009858
 800c374:	20009860 	.word	0x20009860
 800c378:	20009868 	.word	0x20009868
 800c37c:	20009864 	.word	0x20009864
 800c380:	2000986c 	.word	0x2000986c

0800c384 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c384:	b480      	push	{r7}
 800c386:	b085      	sub	sp, #20
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c38c:	4b28      	ldr	r3, [pc, #160]	; (800c430 <prvInsertBlockIntoFreeList+0xac>)
 800c38e:	60fb      	str	r3, [r7, #12]
 800c390:	e002      	b.n	800c398 <prvInsertBlockIntoFreeList+0x14>
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	60fb      	str	r3, [r7, #12]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	687a      	ldr	r2, [r7, #4]
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d8f7      	bhi.n	800c392 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	68ba      	ldr	r2, [r7, #8]
 800c3ac:	4413      	add	r3, r2
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d108      	bne.n	800c3c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	685a      	ldr	r2, [r3, #4]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	441a      	add	r2, r3
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	685b      	ldr	r3, [r3, #4]
 800c3ce:	68ba      	ldr	r2, [r7, #8]
 800c3d0:	441a      	add	r2, r3
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	429a      	cmp	r2, r3
 800c3d8:	d118      	bne.n	800c40c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681a      	ldr	r2, [r3, #0]
 800c3de:	4b15      	ldr	r3, [pc, #84]	; (800c434 <prvInsertBlockIntoFreeList+0xb0>)
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	429a      	cmp	r2, r3
 800c3e4:	d00d      	beq.n	800c402 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	685a      	ldr	r2, [r3, #4]
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	441a      	add	r2, r3
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	681a      	ldr	r2, [r3, #0]
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	601a      	str	r2, [r3, #0]
 800c400:	e008      	b.n	800c414 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c402:	4b0c      	ldr	r3, [pc, #48]	; (800c434 <prvInsertBlockIntoFreeList+0xb0>)
 800c404:	681a      	ldr	r2, [r3, #0]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	601a      	str	r2, [r3, #0]
 800c40a:	e003      	b.n	800c414 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681a      	ldr	r2, [r3, #0]
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c414:	68fa      	ldr	r2, [r7, #12]
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	429a      	cmp	r2, r3
 800c41a:	d002      	beq.n	800c422 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	687a      	ldr	r2, [r7, #4]
 800c420:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c422:	bf00      	nop
 800c424:	3714      	adds	r7, #20
 800c426:	46bd      	mov	sp, r7
 800c428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42c:	4770      	bx	lr
 800c42e:	bf00      	nop
 800c430:	20009858 	.word	0x20009858
 800c434:	20009860 	.word	0x20009860

0800c438 <__errno>:
 800c438:	4b01      	ldr	r3, [pc, #4]	; (800c440 <__errno+0x8>)
 800c43a:	6818      	ldr	r0, [r3, #0]
 800c43c:	4770      	bx	lr
 800c43e:	bf00      	nop
 800c440:	2000004c 	.word	0x2000004c

0800c444 <__libc_init_array>:
 800c444:	b570      	push	{r4, r5, r6, lr}
 800c446:	4d0d      	ldr	r5, [pc, #52]	; (800c47c <__libc_init_array+0x38>)
 800c448:	4c0d      	ldr	r4, [pc, #52]	; (800c480 <__libc_init_array+0x3c>)
 800c44a:	1b64      	subs	r4, r4, r5
 800c44c:	10a4      	asrs	r4, r4, #2
 800c44e:	2600      	movs	r6, #0
 800c450:	42a6      	cmp	r6, r4
 800c452:	d109      	bne.n	800c468 <__libc_init_array+0x24>
 800c454:	4d0b      	ldr	r5, [pc, #44]	; (800c484 <__libc_init_array+0x40>)
 800c456:	4c0c      	ldr	r4, [pc, #48]	; (800c488 <__libc_init_array+0x44>)
 800c458:	f000 fc8e 	bl	800cd78 <_init>
 800c45c:	1b64      	subs	r4, r4, r5
 800c45e:	10a4      	asrs	r4, r4, #2
 800c460:	2600      	movs	r6, #0
 800c462:	42a6      	cmp	r6, r4
 800c464:	d105      	bne.n	800c472 <__libc_init_array+0x2e>
 800c466:	bd70      	pop	{r4, r5, r6, pc}
 800c468:	f855 3b04 	ldr.w	r3, [r5], #4
 800c46c:	4798      	blx	r3
 800c46e:	3601      	adds	r6, #1
 800c470:	e7ee      	b.n	800c450 <__libc_init_array+0xc>
 800c472:	f855 3b04 	ldr.w	r3, [r5], #4
 800c476:	4798      	blx	r3
 800c478:	3601      	adds	r6, #1
 800c47a:	e7f2      	b.n	800c462 <__libc_init_array+0x1e>
 800c47c:	0800ebac 	.word	0x0800ebac
 800c480:	0800ebac 	.word	0x0800ebac
 800c484:	0800ebac 	.word	0x0800ebac
 800c488:	0800ebb0 	.word	0x0800ebb0

0800c48c <memcpy>:
 800c48c:	440a      	add	r2, r1
 800c48e:	4291      	cmp	r1, r2
 800c490:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c494:	d100      	bne.n	800c498 <memcpy+0xc>
 800c496:	4770      	bx	lr
 800c498:	b510      	push	{r4, lr}
 800c49a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c49e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c4a2:	4291      	cmp	r1, r2
 800c4a4:	d1f9      	bne.n	800c49a <memcpy+0xe>
 800c4a6:	bd10      	pop	{r4, pc}

0800c4a8 <memset>:
 800c4a8:	4402      	add	r2, r0
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d100      	bne.n	800c4b2 <memset+0xa>
 800c4b0:	4770      	bx	lr
 800c4b2:	f803 1b01 	strb.w	r1, [r3], #1
 800c4b6:	e7f9      	b.n	800c4ac <memset+0x4>

0800c4b8 <siprintf>:
 800c4b8:	b40e      	push	{r1, r2, r3}
 800c4ba:	b500      	push	{lr}
 800c4bc:	b09c      	sub	sp, #112	; 0x70
 800c4be:	ab1d      	add	r3, sp, #116	; 0x74
 800c4c0:	9002      	str	r0, [sp, #8]
 800c4c2:	9006      	str	r0, [sp, #24]
 800c4c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c4c8:	4809      	ldr	r0, [pc, #36]	; (800c4f0 <siprintf+0x38>)
 800c4ca:	9107      	str	r1, [sp, #28]
 800c4cc:	9104      	str	r1, [sp, #16]
 800c4ce:	4909      	ldr	r1, [pc, #36]	; (800c4f4 <siprintf+0x3c>)
 800c4d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4d4:	9105      	str	r1, [sp, #20]
 800c4d6:	6800      	ldr	r0, [r0, #0]
 800c4d8:	9301      	str	r3, [sp, #4]
 800c4da:	a902      	add	r1, sp, #8
 800c4dc:	f000 f868 	bl	800c5b0 <_svfiprintf_r>
 800c4e0:	9b02      	ldr	r3, [sp, #8]
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	701a      	strb	r2, [r3, #0]
 800c4e6:	b01c      	add	sp, #112	; 0x70
 800c4e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4ec:	b003      	add	sp, #12
 800c4ee:	4770      	bx	lr
 800c4f0:	2000004c 	.word	0x2000004c
 800c4f4:	ffff0208 	.word	0xffff0208

0800c4f8 <__ssputs_r>:
 800c4f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4fc:	688e      	ldr	r6, [r1, #8]
 800c4fe:	429e      	cmp	r6, r3
 800c500:	4682      	mov	sl, r0
 800c502:	460c      	mov	r4, r1
 800c504:	4690      	mov	r8, r2
 800c506:	461f      	mov	r7, r3
 800c508:	d838      	bhi.n	800c57c <__ssputs_r+0x84>
 800c50a:	898a      	ldrh	r2, [r1, #12]
 800c50c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c510:	d032      	beq.n	800c578 <__ssputs_r+0x80>
 800c512:	6825      	ldr	r5, [r4, #0]
 800c514:	6909      	ldr	r1, [r1, #16]
 800c516:	eba5 0901 	sub.w	r9, r5, r1
 800c51a:	6965      	ldr	r5, [r4, #20]
 800c51c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c520:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c524:	3301      	adds	r3, #1
 800c526:	444b      	add	r3, r9
 800c528:	106d      	asrs	r5, r5, #1
 800c52a:	429d      	cmp	r5, r3
 800c52c:	bf38      	it	cc
 800c52e:	461d      	movcc	r5, r3
 800c530:	0553      	lsls	r3, r2, #21
 800c532:	d531      	bpl.n	800c598 <__ssputs_r+0xa0>
 800c534:	4629      	mov	r1, r5
 800c536:	f000 fb55 	bl	800cbe4 <_malloc_r>
 800c53a:	4606      	mov	r6, r0
 800c53c:	b950      	cbnz	r0, 800c554 <__ssputs_r+0x5c>
 800c53e:	230c      	movs	r3, #12
 800c540:	f8ca 3000 	str.w	r3, [sl]
 800c544:	89a3      	ldrh	r3, [r4, #12]
 800c546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c54a:	81a3      	strh	r3, [r4, #12]
 800c54c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c554:	6921      	ldr	r1, [r4, #16]
 800c556:	464a      	mov	r2, r9
 800c558:	f7ff ff98 	bl	800c48c <memcpy>
 800c55c:	89a3      	ldrh	r3, [r4, #12]
 800c55e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c562:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c566:	81a3      	strh	r3, [r4, #12]
 800c568:	6126      	str	r6, [r4, #16]
 800c56a:	6165      	str	r5, [r4, #20]
 800c56c:	444e      	add	r6, r9
 800c56e:	eba5 0509 	sub.w	r5, r5, r9
 800c572:	6026      	str	r6, [r4, #0]
 800c574:	60a5      	str	r5, [r4, #8]
 800c576:	463e      	mov	r6, r7
 800c578:	42be      	cmp	r6, r7
 800c57a:	d900      	bls.n	800c57e <__ssputs_r+0x86>
 800c57c:	463e      	mov	r6, r7
 800c57e:	6820      	ldr	r0, [r4, #0]
 800c580:	4632      	mov	r2, r6
 800c582:	4641      	mov	r1, r8
 800c584:	f000 faa8 	bl	800cad8 <memmove>
 800c588:	68a3      	ldr	r3, [r4, #8]
 800c58a:	1b9b      	subs	r3, r3, r6
 800c58c:	60a3      	str	r3, [r4, #8]
 800c58e:	6823      	ldr	r3, [r4, #0]
 800c590:	4433      	add	r3, r6
 800c592:	6023      	str	r3, [r4, #0]
 800c594:	2000      	movs	r0, #0
 800c596:	e7db      	b.n	800c550 <__ssputs_r+0x58>
 800c598:	462a      	mov	r2, r5
 800c59a:	f000 fb97 	bl	800cccc <_realloc_r>
 800c59e:	4606      	mov	r6, r0
 800c5a0:	2800      	cmp	r0, #0
 800c5a2:	d1e1      	bne.n	800c568 <__ssputs_r+0x70>
 800c5a4:	6921      	ldr	r1, [r4, #16]
 800c5a6:	4650      	mov	r0, sl
 800c5a8:	f000 fab0 	bl	800cb0c <_free_r>
 800c5ac:	e7c7      	b.n	800c53e <__ssputs_r+0x46>
	...

0800c5b0 <_svfiprintf_r>:
 800c5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b4:	4698      	mov	r8, r3
 800c5b6:	898b      	ldrh	r3, [r1, #12]
 800c5b8:	061b      	lsls	r3, r3, #24
 800c5ba:	b09d      	sub	sp, #116	; 0x74
 800c5bc:	4607      	mov	r7, r0
 800c5be:	460d      	mov	r5, r1
 800c5c0:	4614      	mov	r4, r2
 800c5c2:	d50e      	bpl.n	800c5e2 <_svfiprintf_r+0x32>
 800c5c4:	690b      	ldr	r3, [r1, #16]
 800c5c6:	b963      	cbnz	r3, 800c5e2 <_svfiprintf_r+0x32>
 800c5c8:	2140      	movs	r1, #64	; 0x40
 800c5ca:	f000 fb0b 	bl	800cbe4 <_malloc_r>
 800c5ce:	6028      	str	r0, [r5, #0]
 800c5d0:	6128      	str	r0, [r5, #16]
 800c5d2:	b920      	cbnz	r0, 800c5de <_svfiprintf_r+0x2e>
 800c5d4:	230c      	movs	r3, #12
 800c5d6:	603b      	str	r3, [r7, #0]
 800c5d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5dc:	e0d1      	b.n	800c782 <_svfiprintf_r+0x1d2>
 800c5de:	2340      	movs	r3, #64	; 0x40
 800c5e0:	616b      	str	r3, [r5, #20]
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	9309      	str	r3, [sp, #36]	; 0x24
 800c5e6:	2320      	movs	r3, #32
 800c5e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5ec:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5f0:	2330      	movs	r3, #48	; 0x30
 800c5f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c79c <_svfiprintf_r+0x1ec>
 800c5f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5fa:	f04f 0901 	mov.w	r9, #1
 800c5fe:	4623      	mov	r3, r4
 800c600:	469a      	mov	sl, r3
 800c602:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c606:	b10a      	cbz	r2, 800c60c <_svfiprintf_r+0x5c>
 800c608:	2a25      	cmp	r2, #37	; 0x25
 800c60a:	d1f9      	bne.n	800c600 <_svfiprintf_r+0x50>
 800c60c:	ebba 0b04 	subs.w	fp, sl, r4
 800c610:	d00b      	beq.n	800c62a <_svfiprintf_r+0x7a>
 800c612:	465b      	mov	r3, fp
 800c614:	4622      	mov	r2, r4
 800c616:	4629      	mov	r1, r5
 800c618:	4638      	mov	r0, r7
 800c61a:	f7ff ff6d 	bl	800c4f8 <__ssputs_r>
 800c61e:	3001      	adds	r0, #1
 800c620:	f000 80aa 	beq.w	800c778 <_svfiprintf_r+0x1c8>
 800c624:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c626:	445a      	add	r2, fp
 800c628:	9209      	str	r2, [sp, #36]	; 0x24
 800c62a:	f89a 3000 	ldrb.w	r3, [sl]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	f000 80a2 	beq.w	800c778 <_svfiprintf_r+0x1c8>
 800c634:	2300      	movs	r3, #0
 800c636:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c63a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c63e:	f10a 0a01 	add.w	sl, sl, #1
 800c642:	9304      	str	r3, [sp, #16]
 800c644:	9307      	str	r3, [sp, #28]
 800c646:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c64a:	931a      	str	r3, [sp, #104]	; 0x68
 800c64c:	4654      	mov	r4, sl
 800c64e:	2205      	movs	r2, #5
 800c650:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c654:	4851      	ldr	r0, [pc, #324]	; (800c79c <_svfiprintf_r+0x1ec>)
 800c656:	f7f3 fdf3 	bl	8000240 <memchr>
 800c65a:	9a04      	ldr	r2, [sp, #16]
 800c65c:	b9d8      	cbnz	r0, 800c696 <_svfiprintf_r+0xe6>
 800c65e:	06d0      	lsls	r0, r2, #27
 800c660:	bf44      	itt	mi
 800c662:	2320      	movmi	r3, #32
 800c664:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c668:	0711      	lsls	r1, r2, #28
 800c66a:	bf44      	itt	mi
 800c66c:	232b      	movmi	r3, #43	; 0x2b
 800c66e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c672:	f89a 3000 	ldrb.w	r3, [sl]
 800c676:	2b2a      	cmp	r3, #42	; 0x2a
 800c678:	d015      	beq.n	800c6a6 <_svfiprintf_r+0xf6>
 800c67a:	9a07      	ldr	r2, [sp, #28]
 800c67c:	4654      	mov	r4, sl
 800c67e:	2000      	movs	r0, #0
 800c680:	f04f 0c0a 	mov.w	ip, #10
 800c684:	4621      	mov	r1, r4
 800c686:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c68a:	3b30      	subs	r3, #48	; 0x30
 800c68c:	2b09      	cmp	r3, #9
 800c68e:	d94e      	bls.n	800c72e <_svfiprintf_r+0x17e>
 800c690:	b1b0      	cbz	r0, 800c6c0 <_svfiprintf_r+0x110>
 800c692:	9207      	str	r2, [sp, #28]
 800c694:	e014      	b.n	800c6c0 <_svfiprintf_r+0x110>
 800c696:	eba0 0308 	sub.w	r3, r0, r8
 800c69a:	fa09 f303 	lsl.w	r3, r9, r3
 800c69e:	4313      	orrs	r3, r2
 800c6a0:	9304      	str	r3, [sp, #16]
 800c6a2:	46a2      	mov	sl, r4
 800c6a4:	e7d2      	b.n	800c64c <_svfiprintf_r+0x9c>
 800c6a6:	9b03      	ldr	r3, [sp, #12]
 800c6a8:	1d19      	adds	r1, r3, #4
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	9103      	str	r1, [sp, #12]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	bfbb      	ittet	lt
 800c6b2:	425b      	neglt	r3, r3
 800c6b4:	f042 0202 	orrlt.w	r2, r2, #2
 800c6b8:	9307      	strge	r3, [sp, #28]
 800c6ba:	9307      	strlt	r3, [sp, #28]
 800c6bc:	bfb8      	it	lt
 800c6be:	9204      	strlt	r2, [sp, #16]
 800c6c0:	7823      	ldrb	r3, [r4, #0]
 800c6c2:	2b2e      	cmp	r3, #46	; 0x2e
 800c6c4:	d10c      	bne.n	800c6e0 <_svfiprintf_r+0x130>
 800c6c6:	7863      	ldrb	r3, [r4, #1]
 800c6c8:	2b2a      	cmp	r3, #42	; 0x2a
 800c6ca:	d135      	bne.n	800c738 <_svfiprintf_r+0x188>
 800c6cc:	9b03      	ldr	r3, [sp, #12]
 800c6ce:	1d1a      	adds	r2, r3, #4
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	9203      	str	r2, [sp, #12]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	bfb8      	it	lt
 800c6d8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c6dc:	3402      	adds	r4, #2
 800c6de:	9305      	str	r3, [sp, #20]
 800c6e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c7ac <_svfiprintf_r+0x1fc>
 800c6e4:	7821      	ldrb	r1, [r4, #0]
 800c6e6:	2203      	movs	r2, #3
 800c6e8:	4650      	mov	r0, sl
 800c6ea:	f7f3 fda9 	bl	8000240 <memchr>
 800c6ee:	b140      	cbz	r0, 800c702 <_svfiprintf_r+0x152>
 800c6f0:	2340      	movs	r3, #64	; 0x40
 800c6f2:	eba0 000a 	sub.w	r0, r0, sl
 800c6f6:	fa03 f000 	lsl.w	r0, r3, r0
 800c6fa:	9b04      	ldr	r3, [sp, #16]
 800c6fc:	4303      	orrs	r3, r0
 800c6fe:	3401      	adds	r4, #1
 800c700:	9304      	str	r3, [sp, #16]
 800c702:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c706:	4826      	ldr	r0, [pc, #152]	; (800c7a0 <_svfiprintf_r+0x1f0>)
 800c708:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c70c:	2206      	movs	r2, #6
 800c70e:	f7f3 fd97 	bl	8000240 <memchr>
 800c712:	2800      	cmp	r0, #0
 800c714:	d038      	beq.n	800c788 <_svfiprintf_r+0x1d8>
 800c716:	4b23      	ldr	r3, [pc, #140]	; (800c7a4 <_svfiprintf_r+0x1f4>)
 800c718:	bb1b      	cbnz	r3, 800c762 <_svfiprintf_r+0x1b2>
 800c71a:	9b03      	ldr	r3, [sp, #12]
 800c71c:	3307      	adds	r3, #7
 800c71e:	f023 0307 	bic.w	r3, r3, #7
 800c722:	3308      	adds	r3, #8
 800c724:	9303      	str	r3, [sp, #12]
 800c726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c728:	4433      	add	r3, r6
 800c72a:	9309      	str	r3, [sp, #36]	; 0x24
 800c72c:	e767      	b.n	800c5fe <_svfiprintf_r+0x4e>
 800c72e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c732:	460c      	mov	r4, r1
 800c734:	2001      	movs	r0, #1
 800c736:	e7a5      	b.n	800c684 <_svfiprintf_r+0xd4>
 800c738:	2300      	movs	r3, #0
 800c73a:	3401      	adds	r4, #1
 800c73c:	9305      	str	r3, [sp, #20]
 800c73e:	4619      	mov	r1, r3
 800c740:	f04f 0c0a 	mov.w	ip, #10
 800c744:	4620      	mov	r0, r4
 800c746:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c74a:	3a30      	subs	r2, #48	; 0x30
 800c74c:	2a09      	cmp	r2, #9
 800c74e:	d903      	bls.n	800c758 <_svfiprintf_r+0x1a8>
 800c750:	2b00      	cmp	r3, #0
 800c752:	d0c5      	beq.n	800c6e0 <_svfiprintf_r+0x130>
 800c754:	9105      	str	r1, [sp, #20]
 800c756:	e7c3      	b.n	800c6e0 <_svfiprintf_r+0x130>
 800c758:	fb0c 2101 	mla	r1, ip, r1, r2
 800c75c:	4604      	mov	r4, r0
 800c75e:	2301      	movs	r3, #1
 800c760:	e7f0      	b.n	800c744 <_svfiprintf_r+0x194>
 800c762:	ab03      	add	r3, sp, #12
 800c764:	9300      	str	r3, [sp, #0]
 800c766:	462a      	mov	r2, r5
 800c768:	4b0f      	ldr	r3, [pc, #60]	; (800c7a8 <_svfiprintf_r+0x1f8>)
 800c76a:	a904      	add	r1, sp, #16
 800c76c:	4638      	mov	r0, r7
 800c76e:	f3af 8000 	nop.w
 800c772:	1c42      	adds	r2, r0, #1
 800c774:	4606      	mov	r6, r0
 800c776:	d1d6      	bne.n	800c726 <_svfiprintf_r+0x176>
 800c778:	89ab      	ldrh	r3, [r5, #12]
 800c77a:	065b      	lsls	r3, r3, #25
 800c77c:	f53f af2c 	bmi.w	800c5d8 <_svfiprintf_r+0x28>
 800c780:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c782:	b01d      	add	sp, #116	; 0x74
 800c784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c788:	ab03      	add	r3, sp, #12
 800c78a:	9300      	str	r3, [sp, #0]
 800c78c:	462a      	mov	r2, r5
 800c78e:	4b06      	ldr	r3, [pc, #24]	; (800c7a8 <_svfiprintf_r+0x1f8>)
 800c790:	a904      	add	r1, sp, #16
 800c792:	4638      	mov	r0, r7
 800c794:	f000 f87a 	bl	800c88c <_printf_i>
 800c798:	e7eb      	b.n	800c772 <_svfiprintf_r+0x1c2>
 800c79a:	bf00      	nop
 800c79c:	0800eb70 	.word	0x0800eb70
 800c7a0:	0800eb7a 	.word	0x0800eb7a
 800c7a4:	00000000 	.word	0x00000000
 800c7a8:	0800c4f9 	.word	0x0800c4f9
 800c7ac:	0800eb76 	.word	0x0800eb76

0800c7b0 <_printf_common>:
 800c7b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7b4:	4616      	mov	r6, r2
 800c7b6:	4699      	mov	r9, r3
 800c7b8:	688a      	ldr	r2, [r1, #8]
 800c7ba:	690b      	ldr	r3, [r1, #16]
 800c7bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	bfb8      	it	lt
 800c7c4:	4613      	movlt	r3, r2
 800c7c6:	6033      	str	r3, [r6, #0]
 800c7c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c7cc:	4607      	mov	r7, r0
 800c7ce:	460c      	mov	r4, r1
 800c7d0:	b10a      	cbz	r2, 800c7d6 <_printf_common+0x26>
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	6033      	str	r3, [r6, #0]
 800c7d6:	6823      	ldr	r3, [r4, #0]
 800c7d8:	0699      	lsls	r1, r3, #26
 800c7da:	bf42      	ittt	mi
 800c7dc:	6833      	ldrmi	r3, [r6, #0]
 800c7de:	3302      	addmi	r3, #2
 800c7e0:	6033      	strmi	r3, [r6, #0]
 800c7e2:	6825      	ldr	r5, [r4, #0]
 800c7e4:	f015 0506 	ands.w	r5, r5, #6
 800c7e8:	d106      	bne.n	800c7f8 <_printf_common+0x48>
 800c7ea:	f104 0a19 	add.w	sl, r4, #25
 800c7ee:	68e3      	ldr	r3, [r4, #12]
 800c7f0:	6832      	ldr	r2, [r6, #0]
 800c7f2:	1a9b      	subs	r3, r3, r2
 800c7f4:	42ab      	cmp	r3, r5
 800c7f6:	dc26      	bgt.n	800c846 <_printf_common+0x96>
 800c7f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c7fc:	1e13      	subs	r3, r2, #0
 800c7fe:	6822      	ldr	r2, [r4, #0]
 800c800:	bf18      	it	ne
 800c802:	2301      	movne	r3, #1
 800c804:	0692      	lsls	r2, r2, #26
 800c806:	d42b      	bmi.n	800c860 <_printf_common+0xb0>
 800c808:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c80c:	4649      	mov	r1, r9
 800c80e:	4638      	mov	r0, r7
 800c810:	47c0      	blx	r8
 800c812:	3001      	adds	r0, #1
 800c814:	d01e      	beq.n	800c854 <_printf_common+0xa4>
 800c816:	6823      	ldr	r3, [r4, #0]
 800c818:	68e5      	ldr	r5, [r4, #12]
 800c81a:	6832      	ldr	r2, [r6, #0]
 800c81c:	f003 0306 	and.w	r3, r3, #6
 800c820:	2b04      	cmp	r3, #4
 800c822:	bf08      	it	eq
 800c824:	1aad      	subeq	r5, r5, r2
 800c826:	68a3      	ldr	r3, [r4, #8]
 800c828:	6922      	ldr	r2, [r4, #16]
 800c82a:	bf0c      	ite	eq
 800c82c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c830:	2500      	movne	r5, #0
 800c832:	4293      	cmp	r3, r2
 800c834:	bfc4      	itt	gt
 800c836:	1a9b      	subgt	r3, r3, r2
 800c838:	18ed      	addgt	r5, r5, r3
 800c83a:	2600      	movs	r6, #0
 800c83c:	341a      	adds	r4, #26
 800c83e:	42b5      	cmp	r5, r6
 800c840:	d11a      	bne.n	800c878 <_printf_common+0xc8>
 800c842:	2000      	movs	r0, #0
 800c844:	e008      	b.n	800c858 <_printf_common+0xa8>
 800c846:	2301      	movs	r3, #1
 800c848:	4652      	mov	r2, sl
 800c84a:	4649      	mov	r1, r9
 800c84c:	4638      	mov	r0, r7
 800c84e:	47c0      	blx	r8
 800c850:	3001      	adds	r0, #1
 800c852:	d103      	bne.n	800c85c <_printf_common+0xac>
 800c854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c85c:	3501      	adds	r5, #1
 800c85e:	e7c6      	b.n	800c7ee <_printf_common+0x3e>
 800c860:	18e1      	adds	r1, r4, r3
 800c862:	1c5a      	adds	r2, r3, #1
 800c864:	2030      	movs	r0, #48	; 0x30
 800c866:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c86a:	4422      	add	r2, r4
 800c86c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c870:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c874:	3302      	adds	r3, #2
 800c876:	e7c7      	b.n	800c808 <_printf_common+0x58>
 800c878:	2301      	movs	r3, #1
 800c87a:	4622      	mov	r2, r4
 800c87c:	4649      	mov	r1, r9
 800c87e:	4638      	mov	r0, r7
 800c880:	47c0      	blx	r8
 800c882:	3001      	adds	r0, #1
 800c884:	d0e6      	beq.n	800c854 <_printf_common+0xa4>
 800c886:	3601      	adds	r6, #1
 800c888:	e7d9      	b.n	800c83e <_printf_common+0x8e>
	...

0800c88c <_printf_i>:
 800c88c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c890:	7e0f      	ldrb	r7, [r1, #24]
 800c892:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c894:	2f78      	cmp	r7, #120	; 0x78
 800c896:	4691      	mov	r9, r2
 800c898:	4680      	mov	r8, r0
 800c89a:	460c      	mov	r4, r1
 800c89c:	469a      	mov	sl, r3
 800c89e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c8a2:	d807      	bhi.n	800c8b4 <_printf_i+0x28>
 800c8a4:	2f62      	cmp	r7, #98	; 0x62
 800c8a6:	d80a      	bhi.n	800c8be <_printf_i+0x32>
 800c8a8:	2f00      	cmp	r7, #0
 800c8aa:	f000 80d8 	beq.w	800ca5e <_printf_i+0x1d2>
 800c8ae:	2f58      	cmp	r7, #88	; 0x58
 800c8b0:	f000 80a3 	beq.w	800c9fa <_printf_i+0x16e>
 800c8b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c8bc:	e03a      	b.n	800c934 <_printf_i+0xa8>
 800c8be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c8c2:	2b15      	cmp	r3, #21
 800c8c4:	d8f6      	bhi.n	800c8b4 <_printf_i+0x28>
 800c8c6:	a101      	add	r1, pc, #4	; (adr r1, 800c8cc <_printf_i+0x40>)
 800c8c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c8cc:	0800c925 	.word	0x0800c925
 800c8d0:	0800c939 	.word	0x0800c939
 800c8d4:	0800c8b5 	.word	0x0800c8b5
 800c8d8:	0800c8b5 	.word	0x0800c8b5
 800c8dc:	0800c8b5 	.word	0x0800c8b5
 800c8e0:	0800c8b5 	.word	0x0800c8b5
 800c8e4:	0800c939 	.word	0x0800c939
 800c8e8:	0800c8b5 	.word	0x0800c8b5
 800c8ec:	0800c8b5 	.word	0x0800c8b5
 800c8f0:	0800c8b5 	.word	0x0800c8b5
 800c8f4:	0800c8b5 	.word	0x0800c8b5
 800c8f8:	0800ca45 	.word	0x0800ca45
 800c8fc:	0800c969 	.word	0x0800c969
 800c900:	0800ca27 	.word	0x0800ca27
 800c904:	0800c8b5 	.word	0x0800c8b5
 800c908:	0800c8b5 	.word	0x0800c8b5
 800c90c:	0800ca67 	.word	0x0800ca67
 800c910:	0800c8b5 	.word	0x0800c8b5
 800c914:	0800c969 	.word	0x0800c969
 800c918:	0800c8b5 	.word	0x0800c8b5
 800c91c:	0800c8b5 	.word	0x0800c8b5
 800c920:	0800ca2f 	.word	0x0800ca2f
 800c924:	682b      	ldr	r3, [r5, #0]
 800c926:	1d1a      	adds	r2, r3, #4
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	602a      	str	r2, [r5, #0]
 800c92c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c930:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c934:	2301      	movs	r3, #1
 800c936:	e0a3      	b.n	800ca80 <_printf_i+0x1f4>
 800c938:	6820      	ldr	r0, [r4, #0]
 800c93a:	6829      	ldr	r1, [r5, #0]
 800c93c:	0606      	lsls	r6, r0, #24
 800c93e:	f101 0304 	add.w	r3, r1, #4
 800c942:	d50a      	bpl.n	800c95a <_printf_i+0xce>
 800c944:	680e      	ldr	r6, [r1, #0]
 800c946:	602b      	str	r3, [r5, #0]
 800c948:	2e00      	cmp	r6, #0
 800c94a:	da03      	bge.n	800c954 <_printf_i+0xc8>
 800c94c:	232d      	movs	r3, #45	; 0x2d
 800c94e:	4276      	negs	r6, r6
 800c950:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c954:	485e      	ldr	r0, [pc, #376]	; (800cad0 <_printf_i+0x244>)
 800c956:	230a      	movs	r3, #10
 800c958:	e019      	b.n	800c98e <_printf_i+0x102>
 800c95a:	680e      	ldr	r6, [r1, #0]
 800c95c:	602b      	str	r3, [r5, #0]
 800c95e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c962:	bf18      	it	ne
 800c964:	b236      	sxthne	r6, r6
 800c966:	e7ef      	b.n	800c948 <_printf_i+0xbc>
 800c968:	682b      	ldr	r3, [r5, #0]
 800c96a:	6820      	ldr	r0, [r4, #0]
 800c96c:	1d19      	adds	r1, r3, #4
 800c96e:	6029      	str	r1, [r5, #0]
 800c970:	0601      	lsls	r1, r0, #24
 800c972:	d501      	bpl.n	800c978 <_printf_i+0xec>
 800c974:	681e      	ldr	r6, [r3, #0]
 800c976:	e002      	b.n	800c97e <_printf_i+0xf2>
 800c978:	0646      	lsls	r6, r0, #25
 800c97a:	d5fb      	bpl.n	800c974 <_printf_i+0xe8>
 800c97c:	881e      	ldrh	r6, [r3, #0]
 800c97e:	4854      	ldr	r0, [pc, #336]	; (800cad0 <_printf_i+0x244>)
 800c980:	2f6f      	cmp	r7, #111	; 0x6f
 800c982:	bf0c      	ite	eq
 800c984:	2308      	moveq	r3, #8
 800c986:	230a      	movne	r3, #10
 800c988:	2100      	movs	r1, #0
 800c98a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c98e:	6865      	ldr	r5, [r4, #4]
 800c990:	60a5      	str	r5, [r4, #8]
 800c992:	2d00      	cmp	r5, #0
 800c994:	bfa2      	ittt	ge
 800c996:	6821      	ldrge	r1, [r4, #0]
 800c998:	f021 0104 	bicge.w	r1, r1, #4
 800c99c:	6021      	strge	r1, [r4, #0]
 800c99e:	b90e      	cbnz	r6, 800c9a4 <_printf_i+0x118>
 800c9a0:	2d00      	cmp	r5, #0
 800c9a2:	d04d      	beq.n	800ca40 <_printf_i+0x1b4>
 800c9a4:	4615      	mov	r5, r2
 800c9a6:	fbb6 f1f3 	udiv	r1, r6, r3
 800c9aa:	fb03 6711 	mls	r7, r3, r1, r6
 800c9ae:	5dc7      	ldrb	r7, [r0, r7]
 800c9b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c9b4:	4637      	mov	r7, r6
 800c9b6:	42bb      	cmp	r3, r7
 800c9b8:	460e      	mov	r6, r1
 800c9ba:	d9f4      	bls.n	800c9a6 <_printf_i+0x11a>
 800c9bc:	2b08      	cmp	r3, #8
 800c9be:	d10b      	bne.n	800c9d8 <_printf_i+0x14c>
 800c9c0:	6823      	ldr	r3, [r4, #0]
 800c9c2:	07de      	lsls	r6, r3, #31
 800c9c4:	d508      	bpl.n	800c9d8 <_printf_i+0x14c>
 800c9c6:	6923      	ldr	r3, [r4, #16]
 800c9c8:	6861      	ldr	r1, [r4, #4]
 800c9ca:	4299      	cmp	r1, r3
 800c9cc:	bfde      	ittt	le
 800c9ce:	2330      	movle	r3, #48	; 0x30
 800c9d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c9d4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c9d8:	1b52      	subs	r2, r2, r5
 800c9da:	6122      	str	r2, [r4, #16]
 800c9dc:	f8cd a000 	str.w	sl, [sp]
 800c9e0:	464b      	mov	r3, r9
 800c9e2:	aa03      	add	r2, sp, #12
 800c9e4:	4621      	mov	r1, r4
 800c9e6:	4640      	mov	r0, r8
 800c9e8:	f7ff fee2 	bl	800c7b0 <_printf_common>
 800c9ec:	3001      	adds	r0, #1
 800c9ee:	d14c      	bne.n	800ca8a <_printf_i+0x1fe>
 800c9f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c9f4:	b004      	add	sp, #16
 800c9f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9fa:	4835      	ldr	r0, [pc, #212]	; (800cad0 <_printf_i+0x244>)
 800c9fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ca00:	6829      	ldr	r1, [r5, #0]
 800ca02:	6823      	ldr	r3, [r4, #0]
 800ca04:	f851 6b04 	ldr.w	r6, [r1], #4
 800ca08:	6029      	str	r1, [r5, #0]
 800ca0a:	061d      	lsls	r5, r3, #24
 800ca0c:	d514      	bpl.n	800ca38 <_printf_i+0x1ac>
 800ca0e:	07df      	lsls	r7, r3, #31
 800ca10:	bf44      	itt	mi
 800ca12:	f043 0320 	orrmi.w	r3, r3, #32
 800ca16:	6023      	strmi	r3, [r4, #0]
 800ca18:	b91e      	cbnz	r6, 800ca22 <_printf_i+0x196>
 800ca1a:	6823      	ldr	r3, [r4, #0]
 800ca1c:	f023 0320 	bic.w	r3, r3, #32
 800ca20:	6023      	str	r3, [r4, #0]
 800ca22:	2310      	movs	r3, #16
 800ca24:	e7b0      	b.n	800c988 <_printf_i+0xfc>
 800ca26:	6823      	ldr	r3, [r4, #0]
 800ca28:	f043 0320 	orr.w	r3, r3, #32
 800ca2c:	6023      	str	r3, [r4, #0]
 800ca2e:	2378      	movs	r3, #120	; 0x78
 800ca30:	4828      	ldr	r0, [pc, #160]	; (800cad4 <_printf_i+0x248>)
 800ca32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ca36:	e7e3      	b.n	800ca00 <_printf_i+0x174>
 800ca38:	0659      	lsls	r1, r3, #25
 800ca3a:	bf48      	it	mi
 800ca3c:	b2b6      	uxthmi	r6, r6
 800ca3e:	e7e6      	b.n	800ca0e <_printf_i+0x182>
 800ca40:	4615      	mov	r5, r2
 800ca42:	e7bb      	b.n	800c9bc <_printf_i+0x130>
 800ca44:	682b      	ldr	r3, [r5, #0]
 800ca46:	6826      	ldr	r6, [r4, #0]
 800ca48:	6961      	ldr	r1, [r4, #20]
 800ca4a:	1d18      	adds	r0, r3, #4
 800ca4c:	6028      	str	r0, [r5, #0]
 800ca4e:	0635      	lsls	r5, r6, #24
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	d501      	bpl.n	800ca58 <_printf_i+0x1cc>
 800ca54:	6019      	str	r1, [r3, #0]
 800ca56:	e002      	b.n	800ca5e <_printf_i+0x1d2>
 800ca58:	0670      	lsls	r0, r6, #25
 800ca5a:	d5fb      	bpl.n	800ca54 <_printf_i+0x1c8>
 800ca5c:	8019      	strh	r1, [r3, #0]
 800ca5e:	2300      	movs	r3, #0
 800ca60:	6123      	str	r3, [r4, #16]
 800ca62:	4615      	mov	r5, r2
 800ca64:	e7ba      	b.n	800c9dc <_printf_i+0x150>
 800ca66:	682b      	ldr	r3, [r5, #0]
 800ca68:	1d1a      	adds	r2, r3, #4
 800ca6a:	602a      	str	r2, [r5, #0]
 800ca6c:	681d      	ldr	r5, [r3, #0]
 800ca6e:	6862      	ldr	r2, [r4, #4]
 800ca70:	2100      	movs	r1, #0
 800ca72:	4628      	mov	r0, r5
 800ca74:	f7f3 fbe4 	bl	8000240 <memchr>
 800ca78:	b108      	cbz	r0, 800ca7e <_printf_i+0x1f2>
 800ca7a:	1b40      	subs	r0, r0, r5
 800ca7c:	6060      	str	r0, [r4, #4]
 800ca7e:	6863      	ldr	r3, [r4, #4]
 800ca80:	6123      	str	r3, [r4, #16]
 800ca82:	2300      	movs	r3, #0
 800ca84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca88:	e7a8      	b.n	800c9dc <_printf_i+0x150>
 800ca8a:	6923      	ldr	r3, [r4, #16]
 800ca8c:	462a      	mov	r2, r5
 800ca8e:	4649      	mov	r1, r9
 800ca90:	4640      	mov	r0, r8
 800ca92:	47d0      	blx	sl
 800ca94:	3001      	adds	r0, #1
 800ca96:	d0ab      	beq.n	800c9f0 <_printf_i+0x164>
 800ca98:	6823      	ldr	r3, [r4, #0]
 800ca9a:	079b      	lsls	r3, r3, #30
 800ca9c:	d413      	bmi.n	800cac6 <_printf_i+0x23a>
 800ca9e:	68e0      	ldr	r0, [r4, #12]
 800caa0:	9b03      	ldr	r3, [sp, #12]
 800caa2:	4298      	cmp	r0, r3
 800caa4:	bfb8      	it	lt
 800caa6:	4618      	movlt	r0, r3
 800caa8:	e7a4      	b.n	800c9f4 <_printf_i+0x168>
 800caaa:	2301      	movs	r3, #1
 800caac:	4632      	mov	r2, r6
 800caae:	4649      	mov	r1, r9
 800cab0:	4640      	mov	r0, r8
 800cab2:	47d0      	blx	sl
 800cab4:	3001      	adds	r0, #1
 800cab6:	d09b      	beq.n	800c9f0 <_printf_i+0x164>
 800cab8:	3501      	adds	r5, #1
 800caba:	68e3      	ldr	r3, [r4, #12]
 800cabc:	9903      	ldr	r1, [sp, #12]
 800cabe:	1a5b      	subs	r3, r3, r1
 800cac0:	42ab      	cmp	r3, r5
 800cac2:	dcf2      	bgt.n	800caaa <_printf_i+0x21e>
 800cac4:	e7eb      	b.n	800ca9e <_printf_i+0x212>
 800cac6:	2500      	movs	r5, #0
 800cac8:	f104 0619 	add.w	r6, r4, #25
 800cacc:	e7f5      	b.n	800caba <_printf_i+0x22e>
 800cace:	bf00      	nop
 800cad0:	0800eb81 	.word	0x0800eb81
 800cad4:	0800eb92 	.word	0x0800eb92

0800cad8 <memmove>:
 800cad8:	4288      	cmp	r0, r1
 800cada:	b510      	push	{r4, lr}
 800cadc:	eb01 0402 	add.w	r4, r1, r2
 800cae0:	d902      	bls.n	800cae8 <memmove+0x10>
 800cae2:	4284      	cmp	r4, r0
 800cae4:	4623      	mov	r3, r4
 800cae6:	d807      	bhi.n	800caf8 <memmove+0x20>
 800cae8:	1e43      	subs	r3, r0, #1
 800caea:	42a1      	cmp	r1, r4
 800caec:	d008      	beq.n	800cb00 <memmove+0x28>
 800caee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800caf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800caf6:	e7f8      	b.n	800caea <memmove+0x12>
 800caf8:	4402      	add	r2, r0
 800cafa:	4601      	mov	r1, r0
 800cafc:	428a      	cmp	r2, r1
 800cafe:	d100      	bne.n	800cb02 <memmove+0x2a>
 800cb00:	bd10      	pop	{r4, pc}
 800cb02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb0a:	e7f7      	b.n	800cafc <memmove+0x24>

0800cb0c <_free_r>:
 800cb0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb0e:	2900      	cmp	r1, #0
 800cb10:	d044      	beq.n	800cb9c <_free_r+0x90>
 800cb12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb16:	9001      	str	r0, [sp, #4]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	f1a1 0404 	sub.w	r4, r1, #4
 800cb1e:	bfb8      	it	lt
 800cb20:	18e4      	addlt	r4, r4, r3
 800cb22:	f000 f913 	bl	800cd4c <__malloc_lock>
 800cb26:	4a1e      	ldr	r2, [pc, #120]	; (800cba0 <_free_r+0x94>)
 800cb28:	9801      	ldr	r0, [sp, #4]
 800cb2a:	6813      	ldr	r3, [r2, #0]
 800cb2c:	b933      	cbnz	r3, 800cb3c <_free_r+0x30>
 800cb2e:	6063      	str	r3, [r4, #4]
 800cb30:	6014      	str	r4, [r2, #0]
 800cb32:	b003      	add	sp, #12
 800cb34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb38:	f000 b90e 	b.w	800cd58 <__malloc_unlock>
 800cb3c:	42a3      	cmp	r3, r4
 800cb3e:	d908      	bls.n	800cb52 <_free_r+0x46>
 800cb40:	6825      	ldr	r5, [r4, #0]
 800cb42:	1961      	adds	r1, r4, r5
 800cb44:	428b      	cmp	r3, r1
 800cb46:	bf01      	itttt	eq
 800cb48:	6819      	ldreq	r1, [r3, #0]
 800cb4a:	685b      	ldreq	r3, [r3, #4]
 800cb4c:	1949      	addeq	r1, r1, r5
 800cb4e:	6021      	streq	r1, [r4, #0]
 800cb50:	e7ed      	b.n	800cb2e <_free_r+0x22>
 800cb52:	461a      	mov	r2, r3
 800cb54:	685b      	ldr	r3, [r3, #4]
 800cb56:	b10b      	cbz	r3, 800cb5c <_free_r+0x50>
 800cb58:	42a3      	cmp	r3, r4
 800cb5a:	d9fa      	bls.n	800cb52 <_free_r+0x46>
 800cb5c:	6811      	ldr	r1, [r2, #0]
 800cb5e:	1855      	adds	r5, r2, r1
 800cb60:	42a5      	cmp	r5, r4
 800cb62:	d10b      	bne.n	800cb7c <_free_r+0x70>
 800cb64:	6824      	ldr	r4, [r4, #0]
 800cb66:	4421      	add	r1, r4
 800cb68:	1854      	adds	r4, r2, r1
 800cb6a:	42a3      	cmp	r3, r4
 800cb6c:	6011      	str	r1, [r2, #0]
 800cb6e:	d1e0      	bne.n	800cb32 <_free_r+0x26>
 800cb70:	681c      	ldr	r4, [r3, #0]
 800cb72:	685b      	ldr	r3, [r3, #4]
 800cb74:	6053      	str	r3, [r2, #4]
 800cb76:	4421      	add	r1, r4
 800cb78:	6011      	str	r1, [r2, #0]
 800cb7a:	e7da      	b.n	800cb32 <_free_r+0x26>
 800cb7c:	d902      	bls.n	800cb84 <_free_r+0x78>
 800cb7e:	230c      	movs	r3, #12
 800cb80:	6003      	str	r3, [r0, #0]
 800cb82:	e7d6      	b.n	800cb32 <_free_r+0x26>
 800cb84:	6825      	ldr	r5, [r4, #0]
 800cb86:	1961      	adds	r1, r4, r5
 800cb88:	428b      	cmp	r3, r1
 800cb8a:	bf04      	itt	eq
 800cb8c:	6819      	ldreq	r1, [r3, #0]
 800cb8e:	685b      	ldreq	r3, [r3, #4]
 800cb90:	6063      	str	r3, [r4, #4]
 800cb92:	bf04      	itt	eq
 800cb94:	1949      	addeq	r1, r1, r5
 800cb96:	6021      	streq	r1, [r4, #0]
 800cb98:	6054      	str	r4, [r2, #4]
 800cb9a:	e7ca      	b.n	800cb32 <_free_r+0x26>
 800cb9c:	b003      	add	sp, #12
 800cb9e:	bd30      	pop	{r4, r5, pc}
 800cba0:	20009870 	.word	0x20009870

0800cba4 <sbrk_aligned>:
 800cba4:	b570      	push	{r4, r5, r6, lr}
 800cba6:	4e0e      	ldr	r6, [pc, #56]	; (800cbe0 <sbrk_aligned+0x3c>)
 800cba8:	460c      	mov	r4, r1
 800cbaa:	6831      	ldr	r1, [r6, #0]
 800cbac:	4605      	mov	r5, r0
 800cbae:	b911      	cbnz	r1, 800cbb6 <sbrk_aligned+0x12>
 800cbb0:	f000 f8bc 	bl	800cd2c <_sbrk_r>
 800cbb4:	6030      	str	r0, [r6, #0]
 800cbb6:	4621      	mov	r1, r4
 800cbb8:	4628      	mov	r0, r5
 800cbba:	f000 f8b7 	bl	800cd2c <_sbrk_r>
 800cbbe:	1c43      	adds	r3, r0, #1
 800cbc0:	d00a      	beq.n	800cbd8 <sbrk_aligned+0x34>
 800cbc2:	1cc4      	adds	r4, r0, #3
 800cbc4:	f024 0403 	bic.w	r4, r4, #3
 800cbc8:	42a0      	cmp	r0, r4
 800cbca:	d007      	beq.n	800cbdc <sbrk_aligned+0x38>
 800cbcc:	1a21      	subs	r1, r4, r0
 800cbce:	4628      	mov	r0, r5
 800cbd0:	f000 f8ac 	bl	800cd2c <_sbrk_r>
 800cbd4:	3001      	adds	r0, #1
 800cbd6:	d101      	bne.n	800cbdc <sbrk_aligned+0x38>
 800cbd8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cbdc:	4620      	mov	r0, r4
 800cbde:	bd70      	pop	{r4, r5, r6, pc}
 800cbe0:	20009874 	.word	0x20009874

0800cbe4 <_malloc_r>:
 800cbe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbe8:	1ccd      	adds	r5, r1, #3
 800cbea:	f025 0503 	bic.w	r5, r5, #3
 800cbee:	3508      	adds	r5, #8
 800cbf0:	2d0c      	cmp	r5, #12
 800cbf2:	bf38      	it	cc
 800cbf4:	250c      	movcc	r5, #12
 800cbf6:	2d00      	cmp	r5, #0
 800cbf8:	4607      	mov	r7, r0
 800cbfa:	db01      	blt.n	800cc00 <_malloc_r+0x1c>
 800cbfc:	42a9      	cmp	r1, r5
 800cbfe:	d905      	bls.n	800cc0c <_malloc_r+0x28>
 800cc00:	230c      	movs	r3, #12
 800cc02:	603b      	str	r3, [r7, #0]
 800cc04:	2600      	movs	r6, #0
 800cc06:	4630      	mov	r0, r6
 800cc08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc0c:	4e2e      	ldr	r6, [pc, #184]	; (800ccc8 <_malloc_r+0xe4>)
 800cc0e:	f000 f89d 	bl	800cd4c <__malloc_lock>
 800cc12:	6833      	ldr	r3, [r6, #0]
 800cc14:	461c      	mov	r4, r3
 800cc16:	bb34      	cbnz	r4, 800cc66 <_malloc_r+0x82>
 800cc18:	4629      	mov	r1, r5
 800cc1a:	4638      	mov	r0, r7
 800cc1c:	f7ff ffc2 	bl	800cba4 <sbrk_aligned>
 800cc20:	1c43      	adds	r3, r0, #1
 800cc22:	4604      	mov	r4, r0
 800cc24:	d14d      	bne.n	800ccc2 <_malloc_r+0xde>
 800cc26:	6834      	ldr	r4, [r6, #0]
 800cc28:	4626      	mov	r6, r4
 800cc2a:	2e00      	cmp	r6, #0
 800cc2c:	d140      	bne.n	800ccb0 <_malloc_r+0xcc>
 800cc2e:	6823      	ldr	r3, [r4, #0]
 800cc30:	4631      	mov	r1, r6
 800cc32:	4638      	mov	r0, r7
 800cc34:	eb04 0803 	add.w	r8, r4, r3
 800cc38:	f000 f878 	bl	800cd2c <_sbrk_r>
 800cc3c:	4580      	cmp	r8, r0
 800cc3e:	d13a      	bne.n	800ccb6 <_malloc_r+0xd2>
 800cc40:	6821      	ldr	r1, [r4, #0]
 800cc42:	3503      	adds	r5, #3
 800cc44:	1a6d      	subs	r5, r5, r1
 800cc46:	f025 0503 	bic.w	r5, r5, #3
 800cc4a:	3508      	adds	r5, #8
 800cc4c:	2d0c      	cmp	r5, #12
 800cc4e:	bf38      	it	cc
 800cc50:	250c      	movcc	r5, #12
 800cc52:	4629      	mov	r1, r5
 800cc54:	4638      	mov	r0, r7
 800cc56:	f7ff ffa5 	bl	800cba4 <sbrk_aligned>
 800cc5a:	3001      	adds	r0, #1
 800cc5c:	d02b      	beq.n	800ccb6 <_malloc_r+0xd2>
 800cc5e:	6823      	ldr	r3, [r4, #0]
 800cc60:	442b      	add	r3, r5
 800cc62:	6023      	str	r3, [r4, #0]
 800cc64:	e00e      	b.n	800cc84 <_malloc_r+0xa0>
 800cc66:	6822      	ldr	r2, [r4, #0]
 800cc68:	1b52      	subs	r2, r2, r5
 800cc6a:	d41e      	bmi.n	800ccaa <_malloc_r+0xc6>
 800cc6c:	2a0b      	cmp	r2, #11
 800cc6e:	d916      	bls.n	800cc9e <_malloc_r+0xba>
 800cc70:	1961      	adds	r1, r4, r5
 800cc72:	42a3      	cmp	r3, r4
 800cc74:	6025      	str	r5, [r4, #0]
 800cc76:	bf18      	it	ne
 800cc78:	6059      	strne	r1, [r3, #4]
 800cc7a:	6863      	ldr	r3, [r4, #4]
 800cc7c:	bf08      	it	eq
 800cc7e:	6031      	streq	r1, [r6, #0]
 800cc80:	5162      	str	r2, [r4, r5]
 800cc82:	604b      	str	r3, [r1, #4]
 800cc84:	4638      	mov	r0, r7
 800cc86:	f104 060b 	add.w	r6, r4, #11
 800cc8a:	f000 f865 	bl	800cd58 <__malloc_unlock>
 800cc8e:	f026 0607 	bic.w	r6, r6, #7
 800cc92:	1d23      	adds	r3, r4, #4
 800cc94:	1af2      	subs	r2, r6, r3
 800cc96:	d0b6      	beq.n	800cc06 <_malloc_r+0x22>
 800cc98:	1b9b      	subs	r3, r3, r6
 800cc9a:	50a3      	str	r3, [r4, r2]
 800cc9c:	e7b3      	b.n	800cc06 <_malloc_r+0x22>
 800cc9e:	6862      	ldr	r2, [r4, #4]
 800cca0:	42a3      	cmp	r3, r4
 800cca2:	bf0c      	ite	eq
 800cca4:	6032      	streq	r2, [r6, #0]
 800cca6:	605a      	strne	r2, [r3, #4]
 800cca8:	e7ec      	b.n	800cc84 <_malloc_r+0xa0>
 800ccaa:	4623      	mov	r3, r4
 800ccac:	6864      	ldr	r4, [r4, #4]
 800ccae:	e7b2      	b.n	800cc16 <_malloc_r+0x32>
 800ccb0:	4634      	mov	r4, r6
 800ccb2:	6876      	ldr	r6, [r6, #4]
 800ccb4:	e7b9      	b.n	800cc2a <_malloc_r+0x46>
 800ccb6:	230c      	movs	r3, #12
 800ccb8:	603b      	str	r3, [r7, #0]
 800ccba:	4638      	mov	r0, r7
 800ccbc:	f000 f84c 	bl	800cd58 <__malloc_unlock>
 800ccc0:	e7a1      	b.n	800cc06 <_malloc_r+0x22>
 800ccc2:	6025      	str	r5, [r4, #0]
 800ccc4:	e7de      	b.n	800cc84 <_malloc_r+0xa0>
 800ccc6:	bf00      	nop
 800ccc8:	20009870 	.word	0x20009870

0800cccc <_realloc_r>:
 800cccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccd0:	4680      	mov	r8, r0
 800ccd2:	4614      	mov	r4, r2
 800ccd4:	460e      	mov	r6, r1
 800ccd6:	b921      	cbnz	r1, 800cce2 <_realloc_r+0x16>
 800ccd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccdc:	4611      	mov	r1, r2
 800ccde:	f7ff bf81 	b.w	800cbe4 <_malloc_r>
 800cce2:	b92a      	cbnz	r2, 800ccf0 <_realloc_r+0x24>
 800cce4:	f7ff ff12 	bl	800cb0c <_free_r>
 800cce8:	4625      	mov	r5, r4
 800ccea:	4628      	mov	r0, r5
 800ccec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccf0:	f000 f838 	bl	800cd64 <_malloc_usable_size_r>
 800ccf4:	4284      	cmp	r4, r0
 800ccf6:	4607      	mov	r7, r0
 800ccf8:	d802      	bhi.n	800cd00 <_realloc_r+0x34>
 800ccfa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ccfe:	d812      	bhi.n	800cd26 <_realloc_r+0x5a>
 800cd00:	4621      	mov	r1, r4
 800cd02:	4640      	mov	r0, r8
 800cd04:	f7ff ff6e 	bl	800cbe4 <_malloc_r>
 800cd08:	4605      	mov	r5, r0
 800cd0a:	2800      	cmp	r0, #0
 800cd0c:	d0ed      	beq.n	800ccea <_realloc_r+0x1e>
 800cd0e:	42bc      	cmp	r4, r7
 800cd10:	4622      	mov	r2, r4
 800cd12:	4631      	mov	r1, r6
 800cd14:	bf28      	it	cs
 800cd16:	463a      	movcs	r2, r7
 800cd18:	f7ff fbb8 	bl	800c48c <memcpy>
 800cd1c:	4631      	mov	r1, r6
 800cd1e:	4640      	mov	r0, r8
 800cd20:	f7ff fef4 	bl	800cb0c <_free_r>
 800cd24:	e7e1      	b.n	800ccea <_realloc_r+0x1e>
 800cd26:	4635      	mov	r5, r6
 800cd28:	e7df      	b.n	800ccea <_realloc_r+0x1e>
	...

0800cd2c <_sbrk_r>:
 800cd2c:	b538      	push	{r3, r4, r5, lr}
 800cd2e:	4d06      	ldr	r5, [pc, #24]	; (800cd48 <_sbrk_r+0x1c>)
 800cd30:	2300      	movs	r3, #0
 800cd32:	4604      	mov	r4, r0
 800cd34:	4608      	mov	r0, r1
 800cd36:	602b      	str	r3, [r5, #0]
 800cd38:	f7f4 fb6c 	bl	8001414 <_sbrk>
 800cd3c:	1c43      	adds	r3, r0, #1
 800cd3e:	d102      	bne.n	800cd46 <_sbrk_r+0x1a>
 800cd40:	682b      	ldr	r3, [r5, #0]
 800cd42:	b103      	cbz	r3, 800cd46 <_sbrk_r+0x1a>
 800cd44:	6023      	str	r3, [r4, #0]
 800cd46:	bd38      	pop	{r3, r4, r5, pc}
 800cd48:	20009878 	.word	0x20009878

0800cd4c <__malloc_lock>:
 800cd4c:	4801      	ldr	r0, [pc, #4]	; (800cd54 <__malloc_lock+0x8>)
 800cd4e:	f000 b811 	b.w	800cd74 <__retarget_lock_acquire_recursive>
 800cd52:	bf00      	nop
 800cd54:	2000987c 	.word	0x2000987c

0800cd58 <__malloc_unlock>:
 800cd58:	4801      	ldr	r0, [pc, #4]	; (800cd60 <__malloc_unlock+0x8>)
 800cd5a:	f000 b80c 	b.w	800cd76 <__retarget_lock_release_recursive>
 800cd5e:	bf00      	nop
 800cd60:	2000987c 	.word	0x2000987c

0800cd64 <_malloc_usable_size_r>:
 800cd64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd68:	1f18      	subs	r0, r3, #4
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	bfbc      	itt	lt
 800cd6e:	580b      	ldrlt	r3, [r1, r0]
 800cd70:	18c0      	addlt	r0, r0, r3
 800cd72:	4770      	bx	lr

0800cd74 <__retarget_lock_acquire_recursive>:
 800cd74:	4770      	bx	lr

0800cd76 <__retarget_lock_release_recursive>:
 800cd76:	4770      	bx	lr

0800cd78 <_init>:
 800cd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7a:	bf00      	nop
 800cd7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd7e:	bc08      	pop	{r3}
 800cd80:	469e      	mov	lr, r3
 800cd82:	4770      	bx	lr

0800cd84 <_fini>:
 800cd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd86:	bf00      	nop
 800cd88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd8a:	bc08      	pop	{r3}
 800cd8c:	469e      	mov	lr, r3
 800cd8e:	4770      	bx	lr
