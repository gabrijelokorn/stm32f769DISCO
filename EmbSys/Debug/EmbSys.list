
EmbSys.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e190  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e64  0800e390  0800e390  0001e390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080101f4  080101f4  000300b8  2**0
                  CONTENTS
  4 .ARM          00000008  080101f4  080101f4  000201f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080101fc  080101fc  000300b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080101fc  080101fc  000201fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010200  08010200  00020200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08010204  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000982c  200000b8  080102bc  000300b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200098e4  080102bc  000398e4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000365f4  00000000  00000000  000300e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d48  00000000  00000000  000666da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000026d8  00000000  00000000  0006c428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002440  00000000  00000000  0006eb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a6cc  00000000  00000000  00070f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030bd8  00000000  00000000  000ab60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001574c6  00000000  00000000  000dc1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002336aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a8ec  00000000  00000000  002336fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200000b8 	.word	0x200000b8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e378 	.word	0x0800e378

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200000bc 	.word	0x200000bc
 800023c:	0800e378 	.word	0x0800e378

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr

08000602 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000602:	b480      	push	{r7}
 8000604:	b083      	sub	sp, #12
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
 800060a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
	...

08000628 <integer_length>:
	int stack_size;
	uint32_t sent_messages;
	int time_running;
} thread_info;

int integer_length(int num) {
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	int result = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	60fb      	str	r3, [r7, #12]
	if (num == 0) {
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d10c      	bne.n	8000654 <integer_length+0x2c>
		return 1;
 800063a:	2301      	movs	r3, #1
 800063c:	e00e      	b.n	800065c <integer_length+0x34>
	}

	while (num > 0) {
		num /= 10;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4a09      	ldr	r2, [pc, #36]	; (8000668 <integer_length+0x40>)
 8000642:	fb82 1203 	smull	r1, r2, r2, r3
 8000646:	1092      	asrs	r2, r2, #2
 8000648:	17db      	asrs	r3, r3, #31
 800064a:	1ad3      	subs	r3, r2, r3
 800064c:	607b      	str	r3, [r7, #4]
		result++;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	3301      	adds	r3, #1
 8000652:	60fb      	str	r3, [r7, #12]
	while (num > 0) {
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2b00      	cmp	r3, #0
 8000658:	dcf1      	bgt.n	800063e <integer_length+0x16>
	}
	return result;
 800065a:	68fb      	ldr	r3, [r7, #12]
}
 800065c:	4618      	mov	r0, r3
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	66666667 	.word	0x66666667

0800066c <fibonacci_display_num>:


void fibonacci_display_num() {
 800066c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000670:	b085      	sub	sp, #20
 8000672:	af00      	add	r7, sp, #0
 8000674:	466b      	mov	r3, sp
 8000676:	461e      	mov	r6, r3
	int number_strlen = integer_length(calculating);
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <fibonacci_display_num+0x8c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	f7ff ffd3 	bl	8000628 <integer_length>
 8000682:	60f8      	str	r0, [r7, #12]
	char number[number_strlen];
 8000684:	68f9      	ldr	r1, [r7, #12]
 8000686:	1e4b      	subs	r3, r1, #1
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	460a      	mov	r2, r1
 800068c:	2300      	movs	r3, #0
 800068e:	4690      	mov	r8, r2
 8000690:	4699      	mov	r9, r3
 8000692:	f04f 0200 	mov.w	r2, #0
 8000696:	f04f 0300 	mov.w	r3, #0
 800069a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800069e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80006a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80006a6:	460a      	mov	r2, r1
 80006a8:	2300      	movs	r3, #0
 80006aa:	4614      	mov	r4, r2
 80006ac:	461d      	mov	r5, r3
 80006ae:	f04f 0200 	mov.w	r2, #0
 80006b2:	f04f 0300 	mov.w	r3, #0
 80006b6:	00eb      	lsls	r3, r5, #3
 80006b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80006bc:	00e2      	lsls	r2, r4, #3
 80006be:	460b      	mov	r3, r1
 80006c0:	3307      	adds	r3, #7
 80006c2:	08db      	lsrs	r3, r3, #3
 80006c4:	00db      	lsls	r3, r3, #3
 80006c6:	ebad 0d03 	sub.w	sp, sp, r3
 80006ca:	466b      	mov	r3, sp
 80006cc:	3300      	adds	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
	sprintf(number, "%02d", calculating);
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <fibonacci_display_num+0x8c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	461a      	mov	r2, r3
 80006d6:	4909      	ldr	r1, [pc, #36]	; (80006fc <fibonacci_display_num+0x90>)
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f00d fadd 	bl	800dc98 <siprintf>
	BSP_LCD_DisplayStringAt(460, 230, (uint8_t*) number, LEFT_MODE);
 80006de:	2303      	movs	r3, #3
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	21e6      	movs	r1, #230	; 0xe6
 80006e4:	f44f 70e6 	mov.w	r0, #460	; 0x1cc
 80006e8:	f002 fcd2 	bl	8003090 <BSP_LCD_DisplayStringAt>
 80006ec:	46b5      	mov	sp, r6
}
 80006ee:	bf00      	nop
 80006f0:	3714      	adds	r7, #20
 80006f2:	46bd      	mov	sp, r7
 80006f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80006f8:	20000000 	.word	0x20000000
 80006fc:	0800e3b0 	.word	0x0800e3b0

08000700 <fibonacci_prepare>:

void fibonacci_prepare() {
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	BSP_LCD_FillRect(300, 150, 150, 200);
 8000704:	23c8      	movs	r3, #200	; 0xc8
 8000706:	2296      	movs	r2, #150	; 0x96
 8000708:	2196      	movs	r1, #150	; 0x96
 800070a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800070e:	f002 fe07 	bl	8003320 <BSP_LCD_FillRect>
	BSP_LCD_DisplayStringAt(370, 230, (uint8_t*) "-", LEFT_MODE);
 8000712:	2303      	movs	r3, #3
 8000714:	4a0b      	ldr	r2, [pc, #44]	; (8000744 <fibonacci_prepare+0x44>)
 8000716:	21e6      	movs	r1, #230	; 0xe6
 8000718:	f44f 70b9 	mov.w	r0, #370	; 0x172
 800071c:	f002 fcb8 	bl	8003090 <BSP_LCD_DisplayStringAt>
	BSP_LCD_FillRect(500, 150, 150, 200);
 8000720:	23c8      	movs	r3, #200	; 0xc8
 8000722:	2296      	movs	r2, #150	; 0x96
 8000724:	2196      	movs	r1, #150	; 0x96
 8000726:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800072a:	f002 fdf9 	bl	8003320 <BSP_LCD_FillRect>
	BSP_LCD_DisplayStringAt(570, 230, (uint8_t*) "+", LEFT_MODE);
 800072e:	2303      	movs	r3, #3
 8000730:	4a05      	ldr	r2, [pc, #20]	; (8000748 <fibonacci_prepare+0x48>)
 8000732:	21e6      	movs	r1, #230	; 0xe6
 8000734:	f240 203a 	movw	r0, #570	; 0x23a
 8000738:	f002 fcaa 	bl	8003090 <BSP_LCD_DisplayStringAt>
	fibonacci_display_num();
 800073c:	f7ff ff96 	bl	800066c <fibonacci_display_num>
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	0800e3b8 	.word	0x0800e3b8
 8000748:	0800e3bc 	.word	0x0800e3bc

0800074c <fibonacci_inc>:

int fibonacci_inc (int num) {
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	return ++num;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	3301      	adds	r3, #1
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
}
 800075c:	4618      	mov	r0, r3
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <fibonacci_dec>:

int fibonacci_dec (int num) {
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	if (num <= 1) return 1;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2b01      	cmp	r3, #1
 8000774:	dc01      	bgt.n	800077a <fibonacci_dec+0x12>
 8000776:	2301      	movs	r3, #1
 8000778:	e003      	b.n	8000782 <fibonacci_dec+0x1a>
	else return --num;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	3b01      	subs	r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
}
 8000782:	4618      	mov	r0, r3
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr

0800078e <fibonnaci_f>:

int fibonnaci_f (int num) {
 800078e:	b590      	push	{r4, r7, lr}
 8000790:	b083      	sub	sp, #12
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]

	if (num == 0) {
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d101      	bne.n	80007a0 <fibonnaci_f+0x12>
		return 0;
 800079c:	2300      	movs	r3, #0
 800079e:	e011      	b.n	80007c4 <fibonnaci_f+0x36>
	} else if (num == 1) {
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d101      	bne.n	80007aa <fibonnaci_f+0x1c>
		return 1;
 80007a6:	2301      	movs	r3, #1
 80007a8:	e00c      	b.n	80007c4 <fibonnaci_f+0x36>
	} else {
		return (fibonnaci_f(num - 1) + fibonnaci_f(num - 2));
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	3b01      	subs	r3, #1
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff ffed 	bl	800078e <fibonnaci_f>
 80007b4:	4604      	mov	r4, r0
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	3b02      	subs	r3, #2
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff ffe7 	bl	800078e <fibonnaci_f>
 80007c0:	4603      	mov	r3, r0
 80007c2:	4423      	add	r3, r4
	}
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd90      	pop	{r4, r7, pc}

080007cc <fibonacci_t>:

void fibonacci_t (void* args) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]

	thread_info *fibonacci_info = malloc(sizeof(thread_info));
 80007d4:	2014      	movs	r0, #20
 80007d6:	f00d f951 	bl	800da7c <malloc>
 80007da:	4603      	mov	r3, r0
 80007dc:	60bb      	str	r3, [r7, #8]
	fibonacci_info->pid = FIB + 1;
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	2201      	movs	r2, #1
 80007e2:	701a      	strb	r2, [r3, #0]
	fibonacci_info->sent_messages = 0;
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
	fibonacci_info->stack_size = FIBBIONACI_STACK_CAPACITY;
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007f0:	609a      	str	r2, [r3, #8]
	fibonacci_info->time_running = 0;
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]

	while (1) {
		fibonnaci_f(calculating);
 80007f8:	4b3d      	ldr	r3, [pc, #244]	; (80008f0 <fibonacci_t+0x124>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4618      	mov	r0, r3
 80007fe:	f7ff ffc6 	bl	800078e <fibonnaci_f>

		if (APP_PAGE == FIB) {
 8000802:	4b3c      	ldr	r3, [pc, #240]	; (80008f4 <fibonacci_t+0x128>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d16d      	bne.n	80008e6 <fibonacci_t+0x11a>
			int stack_space = osThreadGetStackSpace(fibonacci_taskHandle);
 800080a:	4b3b      	ldr	r3, [pc, #236]	; (80008f8 <fibonacci_t+0x12c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4618      	mov	r0, r3
 8000810:	f009 fea0 	bl	800a554 <osThreadGetStackSpace>
 8000814:	4603      	mov	r3, r0
 8000816:	60fb      	str	r3, [r7, #12]
			fibonacci_info->stack_space = stack_space;
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	605a      	str	r2, [r3, #4]

			if (osMessageQueuePut(thread_manager_message, &fibonacci_info, 0, osWaitForever) == osOK) {
 800081e:	4b37      	ldr	r3, [pc, #220]	; (80008fc <fibonacci_t+0x130>)
 8000820:	6818      	ldr	r0, [r3, #0]
 8000822:	f107 0108 	add.w	r1, r7, #8
 8000826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800082a:	2200      	movs	r2, #0
 800082c:	f00a f8b4 	bl	800a998 <osMessageQueuePut>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d104      	bne.n	8000840 <fibonacci_t+0x74>
				fibonacci_info->sent_messages += 1;
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	68da      	ldr	r2, [r3, #12]
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	3201      	adds	r2, #1
 800083e:	60da      	str	r2, [r3, #12]
			}
			BSP_TS_GetState(&TS_State);
 8000840:	482f      	ldr	r0, [pc, #188]	; (8000900 <fibonacci_t+0x134>)
 8000842:	f003 f9c3 	bl	8003bcc <BSP_TS_GetState>
			if (TS_State.touchDetected > 0) {
 8000846:	4b2e      	ldr	r3, [pc, #184]	; (8000900 <fibonacci_t+0x134>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d04b      	beq.n	80008e6 <fibonacci_t+0x11a>
				if (TS_State.touchY[0] > 300 && TS_State.touchX[0] < STACK_VIEW_WIDTH) {
 800084e:	4b2c      	ldr	r3, [pc, #176]	; (8000900 <fibonacci_t+0x134>)
 8000850:	88db      	ldrh	r3, [r3, #6]
 8000852:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000856:	d909      	bls.n	800086c <fibonacci_t+0xa0>
 8000858:	4b29      	ldr	r3, [pc, #164]	; (8000900 <fibonacci_t+0x134>)
 800085a:	885b      	ldrh	r3, [r3, #2]
 800085c:	2bc7      	cmp	r3, #199	; 0xc7
 800085e:	d805      	bhi.n	800086c <fibonacci_t+0xa0>
					osThreadTerminate(fibonacci_taskHandle);
 8000860:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <fibonacci_t+0x12c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4618      	mov	r0, r3
 8000866:	f009 fea3 	bl	800a5b0 <osThreadTerminate>
 800086a:	e037      	b.n	80008dc <fibonacci_t+0x110>
//					osThreadYield();
				} else if (TS_State.touchX[0] > 300 && TS_State.touchX[0] < 450 && TS_State.touchY[0] > 150 && TS_State.touchY[0] < 350) {
 800086c:	4b24      	ldr	r3, [pc, #144]	; (8000900 <fibonacci_t+0x134>)
 800086e:	885b      	ldrh	r3, [r3, #2]
 8000870:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000874:	d916      	bls.n	80008a4 <fibonacci_t+0xd8>
 8000876:	4b22      	ldr	r3, [pc, #136]	; (8000900 <fibonacci_t+0x134>)
 8000878:	885b      	ldrh	r3, [r3, #2]
 800087a:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 800087e:	d211      	bcs.n	80008a4 <fibonacci_t+0xd8>
 8000880:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <fibonacci_t+0x134>)
 8000882:	88db      	ldrh	r3, [r3, #6]
 8000884:	2b96      	cmp	r3, #150	; 0x96
 8000886:	d90d      	bls.n	80008a4 <fibonacci_t+0xd8>
 8000888:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <fibonacci_t+0x134>)
 800088a:	88db      	ldrh	r3, [r3, #6]
 800088c:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000890:	d208      	bcs.n	80008a4 <fibonacci_t+0xd8>
					calculating = fibonacci_dec(calculating);
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <fibonacci_t+0x124>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff ff66 	bl	8000768 <fibonacci_dec>
 800089c:	4603      	mov	r3, r0
 800089e:	4a14      	ldr	r2, [pc, #80]	; (80008f0 <fibonacci_t+0x124>)
 80008a0:	6013      	str	r3, [r2, #0]
 80008a2:	e01b      	b.n	80008dc <fibonacci_t+0x110>
				} else if (TS_State.touchX[0] > 500 && TS_State.touchX[0] < 650 && TS_State.touchY[0] > 150 && TS_State.touchY[0] < 350) {
 80008a4:	4b16      	ldr	r3, [pc, #88]	; (8000900 <fibonacci_t+0x134>)
 80008a6:	885b      	ldrh	r3, [r3, #2]
 80008a8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008ac:	d916      	bls.n	80008dc <fibonacci_t+0x110>
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <fibonacci_t+0x134>)
 80008b0:	885b      	ldrh	r3, [r3, #2]
 80008b2:	f240 2289 	movw	r2, #649	; 0x289
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d810      	bhi.n	80008dc <fibonacci_t+0x110>
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <fibonacci_t+0x134>)
 80008bc:	88db      	ldrh	r3, [r3, #6]
 80008be:	2b96      	cmp	r3, #150	; 0x96
 80008c0:	d90c      	bls.n	80008dc <fibonacci_t+0x110>
 80008c2:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <fibonacci_t+0x134>)
 80008c4:	88db      	ldrh	r3, [r3, #6]
 80008c6:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 80008ca:	d207      	bcs.n	80008dc <fibonacci_t+0x110>
					calculating = fibonacci_inc(calculating);
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <fibonacci_t+0x124>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff ff3b 	bl	800074c <fibonacci_inc>
 80008d6:	4603      	mov	r3, r0
 80008d8:	4a05      	ldr	r2, [pc, #20]	; (80008f0 <fibonacci_t+0x124>)
 80008da:	6013      	str	r3, [r2, #0]
				}
				fibonacci_display_num(calculating);
 80008dc:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <fibonacci_t+0x124>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fec3 	bl	800066c <fibonacci_display_num>
			}
		}

		osDelay(20);
 80008e6:	2014      	movs	r0, #20
 80008e8:	f009 fec8 	bl	800a67c <osDelay>
		fibonnaci_f(calculating);
 80008ec:	e784      	b.n	80007f8 <fibonacci_t+0x2c>
 80008ee:	bf00      	nop
 80008f0:	20000000 	.word	0x20000000
 80008f4:	20000760 	.word	0x20000760
 80008f8:	2000073c 	.word	0x2000073c
 80008fc:	2000075c 	.word	0x2000075c
 8000900:	20000750 	.word	0x20000750

08000904 <prepare_gol>:

bool grid[GOL_CELLS][GOL_CELLS];
osTimerId_t timer_gol;
bool GOL_running = true;

void prepare_gol() {
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800090a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800090e:	f002 fb07 	bl	8002f20 <BSP_LCD_SetTextColor>
	BSP_LCD_FillRect(GOL_STARTPOINT_X, GOL_STARTPOINT_Y, GOL_BOX_SIZE, GOL_BOX_SIZE);
 8000912:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000916:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800091a:	2164      	movs	r1, #100	; 0x64
 800091c:	20fa      	movs	r0, #250	; 0xfa
 800091e:	f002 fcff 	bl	8003320 <BSP_LCD_FillRect>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000922:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000926:	f002 fafb 	bl	8002f20 <BSP_LCD_SetTextColor>

	// draw horizontal lines
	for (int i = 0; i < GOL_CELLS; i++) {
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	e011      	b.n	8000954 <prepare_gol+0x50>
		BSP_LCD_DrawHLine(GOL_STARTPOINT_X, GOL_STARTPOINT_Y + i * GOL_CELL_SIZE, GOL_BOX_SIZE);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	b29b      	uxth	r3, r3
 8000934:	461a      	mov	r2, r3
 8000936:	0092      	lsls	r2, r2, #2
 8000938:	4413      	add	r3, r2
 800093a:	00db      	lsls	r3, r3, #3
 800093c:	b29b      	uxth	r3, r3
 800093e:	3364      	adds	r3, #100	; 0x64
 8000940:	b29b      	uxth	r3, r3
 8000942:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000946:	4619      	mov	r1, r3
 8000948:	20fa      	movs	r0, #250	; 0xfa
 800094a:	f002 fc69 	bl	8003220 <BSP_LCD_DrawHLine>
	for (int i = 0; i < GOL_CELLS; i++) {
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3301      	adds	r3, #1
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b08      	cmp	r3, #8
 8000958:	ddea      	ble.n	8000930 <prepare_gol+0x2c>
	}

	// draw vertical lines
	for (int i = 0; i < GOL_CELLS; i++) {
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	e011      	b.n	8000984 <prepare_gol+0x80>
		BSP_LCD_DrawVLine(GOL_STARTPOINT_X + i * GOL_CELL_SIZE, GOL_STARTPOINT_Y, GOL_BOX_SIZE);
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	b29b      	uxth	r3, r3
 8000964:	461a      	mov	r2, r3
 8000966:	0092      	lsls	r2, r2, #2
 8000968:	4413      	add	r3, r2
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	b29b      	uxth	r3, r3
 800096e:	33fa      	adds	r3, #250	; 0xfa
 8000970:	b29b      	uxth	r3, r3
 8000972:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000976:	2164      	movs	r1, #100	; 0x64
 8000978:	4618      	mov	r0, r3
 800097a:	f002 fc8f 	bl	800329c <BSP_LCD_DrawVLine>
	for (int i = 0; i < GOL_CELLS; i++) {
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	3301      	adds	r3, #1
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	2b08      	cmp	r3, #8
 8000988:	ddea      	ble.n	8000960 <prepare_gol+0x5c>
	}
}
 800098a:	bf00      	nop
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <gol_display_grid>:

void gol_display_grid(bool grid[][GOL_CELLS]) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	// draw horizontal lines
	for (int i = 0; i < GOL_CELLS; i++) {
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	e011      	b.n	80009c6 <gol_display_grid+0x32>
		BSP_LCD_DrawHLine(GOL_STARTPOINT_X, GOL_STARTPOINT_Y + i * GOL_CELL_SIZE, GOL_BOX_SIZE);
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	461a      	mov	r2, r3
 80009a8:	0092      	lsls	r2, r2, #2
 80009aa:	4413      	add	r3, r2
 80009ac:	00db      	lsls	r3, r3, #3
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	3364      	adds	r3, #100	; 0x64
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80009b8:	4619      	mov	r1, r3
 80009ba:	20fa      	movs	r0, #250	; 0xfa
 80009bc:	f002 fc30 	bl	8003220 <BSP_LCD_DrawHLine>
	for (int i = 0; i < GOL_CELLS; i++) {
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	3301      	adds	r3, #1
 80009c4:	617b      	str	r3, [r7, #20]
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	2b08      	cmp	r3, #8
 80009ca:	ddea      	ble.n	80009a2 <gol_display_grid+0xe>
	}

	// draw vertical lines
	for (int i = 0; i < GOL_CELLS; i++) {
 80009cc:	2300      	movs	r3, #0
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	e011      	b.n	80009f6 <gol_display_grid+0x62>
		BSP_LCD_DrawVLine(GOL_STARTPOINT_X + i * GOL_CELL_SIZE, GOL_STARTPOINT_Y, GOL_BOX_SIZE);
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	461a      	mov	r2, r3
 80009d8:	0092      	lsls	r2, r2, #2
 80009da:	4413      	add	r3, r2
 80009dc:	00db      	lsls	r3, r3, #3
 80009de:	b29b      	uxth	r3, r3
 80009e0:	33fa      	adds	r3, #250	; 0xfa
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80009e8:	2164      	movs	r1, #100	; 0x64
 80009ea:	4618      	mov	r0, r3
 80009ec:	f002 fc56 	bl	800329c <BSP_LCD_DrawVLine>
	for (int i = 0; i < GOL_CELLS; i++) {
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	3301      	adds	r3, #1
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	2b08      	cmp	r3, #8
 80009fa:	ddea      	ble.n	80009d2 <gol_display_grid+0x3e>
	}

	for (int i = 0; i < GOL_CELLS; i++) {
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	e035      	b.n	8000a6e <gol_display_grid+0xda>
		for (int j = 0; j < GOL_CELLS; j++) {
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	e02c      	b.n	8000a62 <gol_display_grid+0xce>
			if (grid[i][j] == true) {
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	4413      	add	r3, r2
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	441a      	add	r2, r3
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	4413      	add	r3, r2
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d004      	beq.n	8000a28 <gol_display_grid+0x94>
				BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000a1e:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000a22:	f002 fa7d 	bl	8002f20 <BSP_LCD_SetTextColor>
 8000a26:	e003      	b.n	8000a30 <gol_display_grid+0x9c>
			} else {
				BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a2c:	f002 fa78 	bl	8002f20 <BSP_LCD_SetTextColor>
			}
			BSP_LCD_FillRect(GOL_STARTPOINT_X + j * GOL_CELL_SIZE + 1, GOL_STARTPOINT_Y + i * GOL_CELL_SIZE + 1, GOL_CELL_SIZE - 1, GOL_CELL_SIZE - 1);
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	461a      	mov	r2, r3
 8000a36:	0092      	lsls	r2, r2, #2
 8000a38:	4413      	add	r3, r2
 8000a3a:	00db      	lsls	r3, r3, #3
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	33fb      	adds	r3, #251	; 0xfb
 8000a40:	b298      	uxth	r0, r3
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	461a      	mov	r2, r3
 8000a48:	0092      	lsls	r2, r2, #2
 8000a4a:	4413      	add	r3, r2
 8000a4c:	00db      	lsls	r3, r3, #3
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	3365      	adds	r3, #101	; 0x65
 8000a52:	b299      	uxth	r1, r3
 8000a54:	2327      	movs	r3, #39	; 0x27
 8000a56:	2227      	movs	r2, #39	; 0x27
 8000a58:	f002 fc62 	bl	8003320 <BSP_LCD_FillRect>
		for (int j = 0; j < GOL_CELLS; j++) {
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	60bb      	str	r3, [r7, #8]
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	2b08      	cmp	r3, #8
 8000a66:	ddcf      	ble.n	8000a08 <gol_display_grid+0x74>
	for (int i = 0; i < GOL_CELLS; i++) {
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	2b08      	cmp	r3, #8
 8000a72:	ddc6      	ble.n	8000a02 <gol_display_grid+0x6e>
		}
	}
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000a74:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000a78:	f002 fa52 	bl	8002f20 <BSP_LCD_SetTextColor>
}
 8000a7c:	bf00      	nop
 8000a7e:	3718      	adds	r7, #24
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <gol_next_gen>:


void gol_next_gen(bool grid[][GOL_CELLS]) {
 8000a84:	b480      	push	{r7}
 8000a86:	b09f      	sub	sp, #124	; 0x7c
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]

	bool next_gen[GOL_CELLS][GOL_CELLS];

	for (int i = 0; i < GOL_CELLS; i++) {
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	677b      	str	r3, [r7, #116]	; 0x74
 8000a90:	e01f      	b.n	8000ad2 <gol_next_gen+0x4e>
		for (int j = 0; j < GOL_CELLS; j++) {
 8000a92:	2300      	movs	r3, #0
 8000a94:	673b      	str	r3, [r7, #112]	; 0x70
 8000a96:	e016      	b.n	8000ac6 <gol_next_gen+0x42>
			next_gen[i][j] = grid[i][j];
 8000a98:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	4413      	add	r3, r2
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	441a      	add	r2, r3
 8000aa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000aa6:	4413      	add	r3, r2
 8000aa8:	7819      	ldrb	r1, [r3, #0]
 8000aaa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000aac:	4613      	mov	r3, r2
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	4413      	add	r3, r2
 8000ab2:	3378      	adds	r3, #120	; 0x78
 8000ab4:	19da      	adds	r2, r3, r7
 8000ab6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ab8:	4413      	add	r3, r2
 8000aba:	3b70      	subs	r3, #112	; 0x70
 8000abc:	460a      	mov	r2, r1
 8000abe:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < GOL_CELLS; j++) {
 8000ac0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	673b      	str	r3, [r7, #112]	; 0x70
 8000ac6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000ac8:	2b08      	cmp	r3, #8
 8000aca:	dde5      	ble.n	8000a98 <gol_next_gen+0x14>
	for (int i = 0; i < GOL_CELLS; i++) {
 8000acc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ace:	3301      	adds	r3, #1
 8000ad0:	677b      	str	r3, [r7, #116]	; 0x74
 8000ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ad4:	2b08      	cmp	r3, #8
 8000ad6:	dddc      	ble.n	8000a92 <gol_next_gen+0xe>
		}
	}

	for (int i = 0; i < GOL_CELLS; i++) {
 8000ad8:	2300      	movs	r3, #0
 8000ada:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000adc:	e0db      	b.n	8000c96 <gol_next_gen+0x212>
		for (int j = 0; j < GOL_CELLS; j++) {
 8000ade:	2300      	movs	r3, #0
 8000ae0:	66bb      	str	r3, [r7, #104]	; 0x68
 8000ae2:	e0d1      	b.n	8000c88 <gol_next_gen+0x204>

			uint8_t neigh = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			// count neigbours
			if (i > 0) {
 8000aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	dd38      	ble.n	8000b62 <gol_next_gen+0xde>
				if (j > 0) {
 8000af0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	dd10      	ble.n	8000b18 <gol_next_gen+0x94>
					if (grid[i - 1][j - 1]) neigh++; // 1 - levo gor
 8000af6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000af8:	4613      	mov	r3, r2
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	4413      	add	r3, r2
 8000afe:	3b09      	subs	r3, #9
 8000b00:	687a      	ldr	r2, [r7, #4]
 8000b02:	441a      	add	r2, r3
 8000b04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b06:	3b01      	subs	r3, #1
 8000b08:	5cd3      	ldrb	r3, [r2, r3]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d004      	beq.n	8000b18 <gol_next_gen+0x94>
 8000b0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b12:	3301      	adds	r3, #1
 8000b14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (grid[i - 1][j]) neigh++; // 2 - gor
 8000b18:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000b1a:	4613      	mov	r3, r2
 8000b1c:	00db      	lsls	r3, r3, #3
 8000b1e:	4413      	add	r3, r2
 8000b20:	3b09      	subs	r3, #9
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	441a      	add	r2, r3
 8000b26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b28:	4413      	add	r3, r2
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d004      	beq.n	8000b3a <gol_next_gen+0xb6>
 8000b30:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b34:	3301      	adds	r3, #1
 8000b36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (j < GOL_CELLS - 1) {
 8000b3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b3c:	2b07      	cmp	r3, #7
 8000b3e:	dc10      	bgt.n	8000b62 <gol_next_gen+0xde>
					if (grid[i - 1][j + 1]) neigh++; // 3 - desno gor
 8000b40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000b42:	4613      	mov	r3, r2
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	4413      	add	r3, r2
 8000b48:	3b09      	subs	r3, #9
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	441a      	add	r2, r3
 8000b4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b50:	3301      	adds	r3, #1
 8000b52:	5cd3      	ldrb	r3, [r2, r3]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d004      	beq.n	8000b62 <gol_next_gen+0xde>
 8000b58:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (i < GOL_CELLS - 1) {
 8000b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b64:	2b07      	cmp	r3, #7
 8000b66:	dc38      	bgt.n	8000bda <gol_next_gen+0x156>
				if (j > 0) {
 8000b68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	dd10      	ble.n	8000b90 <gol_next_gen+0x10c>
					if (grid[i + 1][j - 1]) neigh++; // 4 - levo dol
 8000b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b70:	1c5a      	adds	r2, r3, #1
 8000b72:	4613      	mov	r3, r2
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	4413      	add	r3, r2
 8000b78:	687a      	ldr	r2, [r7, #4]
 8000b7a:	441a      	add	r2, r3
 8000b7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b7e:	3b01      	subs	r3, #1
 8000b80:	5cd3      	ldrb	r3, [r2, r3]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d004      	beq.n	8000b90 <gol_next_gen+0x10c>
 8000b86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
				if (grid[i + 1][j]) neigh++; // 5 - dol
 8000b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000b92:	1c5a      	adds	r2, r3, #1
 8000b94:	4613      	mov	r3, r2
 8000b96:	00db      	lsls	r3, r3, #3
 8000b98:	4413      	add	r3, r2
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	441a      	add	r2, r3
 8000b9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ba0:	4413      	add	r3, r2
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d004      	beq.n	8000bb2 <gol_next_gen+0x12e>
 8000ba8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000bac:	3301      	adds	r3, #1
 8000bae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				if (j < GOL_CELLS - 1) {
 8000bb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bb4:	2b07      	cmp	r3, #7
 8000bb6:	dc10      	bgt.n	8000bda <gol_next_gen+0x156>
					if (grid[i + 1][j + 1]) neigh++; // 6 - desno dol
 8000bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bba:	1c5a      	adds	r2, r3, #1
 8000bbc:	4613      	mov	r3, r2
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	4413      	add	r3, r2
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	441a      	add	r2, r3
 8000bc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bc8:	3301      	adds	r3, #1
 8000bca:	5cd3      	ldrb	r3, [r2, r3]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d004      	beq.n	8000bda <gol_next_gen+0x156>
 8000bd0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (j > 0) {
 8000bda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	dd0f      	ble.n	8000c00 <gol_next_gen+0x17c>
					if (grid[i][j - 1]) neigh++; // 7 - levo
 8000be0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000be2:	4613      	mov	r3, r2
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	4413      	add	r3, r2
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	441a      	add	r2, r3
 8000bec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	5cd3      	ldrb	r3, [r2, r3]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d004      	beq.n	8000c00 <gol_next_gen+0x17c>
 8000bf6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
			if (j < GOL_CELLS - 1) {
 8000c00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c02:	2b07      	cmp	r3, #7
 8000c04:	dc0f      	bgt.n	8000c26 <gol_next_gen+0x1a2>
					if (grid[i][j + 1]) neigh++; // 8 - desno
 8000c06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000c08:	4613      	mov	r3, r2
 8000c0a:	00db      	lsls	r3, r3, #3
 8000c0c:	4413      	add	r3, r2
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	441a      	add	r2, r3
 8000c12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c14:	3301      	adds	r3, #1
 8000c16:	5cd3      	ldrb	r3, [r2, r3]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d004      	beq.n	8000c26 <gol_next_gen+0x1a2>
 8000c1c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c20:	3301      	adds	r3, #1
 8000c22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}

			if (grid[i][j]) {
 8000c26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000c28:	4613      	mov	r3, r2
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	4413      	add	r3, r2
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	441a      	add	r2, r3
 8000c32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c34:	4413      	add	r3, r2
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d013      	beq.n	8000c64 <gol_next_gen+0x1e0>
				if (!(neigh == 2 || neigh == 3)) {
 8000c3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d01e      	beq.n	8000c82 <gol_next_gen+0x1fe>
 8000c44:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c48:	2b03      	cmp	r3, #3
 8000c4a:	d01a      	beq.n	8000c82 <gol_next_gen+0x1fe>
					next_gen[i][j] = false;
 8000c4c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000c4e:	4613      	mov	r3, r2
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	4413      	add	r3, r2
 8000c54:	3378      	adds	r3, #120	; 0x78
 8000c56:	19da      	adds	r2, r3, r7
 8000c58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c5a:	4413      	add	r3, r2
 8000c5c:	3b70      	subs	r3, #112	; 0x70
 8000c5e:	2200      	movs	r2, #0
 8000c60:	701a      	strb	r2, [r3, #0]
 8000c62:	e00e      	b.n	8000c82 <gol_next_gen+0x1fe>
				}
			} else {
				if (neigh == 3) {
 8000c64:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c68:	2b03      	cmp	r3, #3
 8000c6a:	d10a      	bne.n	8000c82 <gol_next_gen+0x1fe>
					next_gen[i][j] = true;
 8000c6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000c6e:	4613      	mov	r3, r2
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	4413      	add	r3, r2
 8000c74:	3378      	adds	r3, #120	; 0x78
 8000c76:	19da      	adds	r2, r3, r7
 8000c78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c7a:	4413      	add	r3, r2
 8000c7c:	3b70      	subs	r3, #112	; 0x70
 8000c7e:	2201      	movs	r2, #1
 8000c80:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < GOL_CELLS; j++) {
 8000c82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c84:	3301      	adds	r3, #1
 8000c86:	66bb      	str	r3, [r7, #104]	; 0x68
 8000c88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000c8a:	2b08      	cmp	r3, #8
 8000c8c:	f77f af2a 	ble.w	8000ae4 <gol_next_gen+0x60>
	for (int i = 0; i < GOL_CELLS; i++) {
 8000c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c92:	3301      	adds	r3, #1
 8000c94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c98:	2b08      	cmp	r3, #8
 8000c9a:	f77f af20 	ble.w	8000ade <gol_next_gen+0x5a>
				}
			}

		}
	}
	for (int i = 0; i < GOL_CELLS; i++) {
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	663b      	str	r3, [r7, #96]	; 0x60
 8000ca2:	e01e      	b.n	8000ce2 <gol_next_gen+0x25e>
		for (int j = 0; j < GOL_CELLS; j++) {
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000ca8:	e015      	b.n	8000cd6 <gol_next_gen+0x252>
			grid[i][j] = next_gen[i][j];
 8000caa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000cac:	4613      	mov	r3, r2
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	4413      	add	r3, r2
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	18d1      	adds	r1, r2, r3
 8000cb6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000cb8:	4613      	mov	r3, r2
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	4413      	add	r3, r2
 8000cbe:	3378      	adds	r3, #120	; 0x78
 8000cc0:	19da      	adds	r2, r3, r7
 8000cc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cc4:	4413      	add	r3, r2
 8000cc6:	3b70      	subs	r3, #112	; 0x70
 8000cc8:	781a      	ldrb	r2, [r3, #0]
 8000cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ccc:	440b      	add	r3, r1
 8000cce:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < GOL_CELLS; j++) {
 8000cd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000cd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cd8:	2b08      	cmp	r3, #8
 8000cda:	dde6      	ble.n	8000caa <gol_next_gen+0x226>
	for (int i = 0; i < GOL_CELLS; i++) {
 8000cdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000cde:	3301      	adds	r3, #1
 8000ce0:	663b      	str	r3, [r7, #96]	; 0x60
 8000ce2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000ce4:	2b08      	cmp	r3, #8
 8000ce6:	dddd      	ble.n	8000ca4 <gol_next_gen+0x220>
		}
	}
}
 8000ce8:	bf00      	nop
 8000cea:	bf00      	nop
 8000cec:	377c      	adds	r7, #124	; 0x7c
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
	...

08000cf8 <gol_timer_func>:

// && (osThreadGetState(game_of_life_taskHandle) == osThreadRunning || osThreadGetState(game_of_life_taskHandle) == osThreadReady)
void gol_timer_func(){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	if (APP_PAGE == GOL && GOL_running) {
 8000cfc:	4b07      	ldr	r3, [pc, #28]	; (8000d1c <gol_timer_func+0x24>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d109      	bne.n	8000d18 <gol_timer_func+0x20>
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <gol_timer_func+0x28>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d005      	beq.n	8000d18 <gol_timer_func+0x20>
		gol_display_grid(grid);
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <gol_timer_func+0x2c>)
 8000d0e:	f7ff fe41 	bl	8000994 <gol_display_grid>
		gol_next_gen(grid);
 8000d12:	4804      	ldr	r0, [pc, #16]	; (8000d24 <gol_timer_func+0x2c>)
 8000d14:	f7ff feb6 	bl	8000a84 <gol_next_gen>
	}
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000760 	.word	0x20000760
 8000d20:	20000004 	.word	0x20000004
 8000d24:	20000768 	.word	0x20000768

08000d28 <game_of_life_t>:



void game_of_life_t (void* args) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b088      	sub	sp, #32
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]

	thread_info *gol_info = malloc(sizeof(thread_info));
 8000d30:	2014      	movs	r0, #20
 8000d32:	f00c fea3 	bl	800da7c <malloc>
 8000d36:	4603      	mov	r3, r0
 8000d38:	60fb      	str	r3, [r7, #12]
	gol_info->pid = GOL + 1;
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	2202      	movs	r2, #2
 8000d3e:	701a      	strb	r2, [r3, #0]
	gol_info->sent_messages = 0;
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
	gol_info->stack_size = GOL_STACK_CAPACITY;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d4c:	609a      	str	r2, [r3, #8]
	gol_info->time_running = 4;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	2204      	movs	r2, #4
 8000d52:	611a      	str	r2, [r3, #16]


	// initiate grid

	for (int i = 0; i < GOL_CELLS; i++) {
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
 8000d58:	e015      	b.n	8000d86 <game_of_life_t+0x5e>
		for (int j = 0; j < GOL_CELLS; j++) {
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
 8000d5e:	e00c      	b.n	8000d7a <game_of_life_t+0x52>
			grid[i][j] = false;
 8000d60:	4948      	ldr	r1, [pc, #288]	; (8000e84 <game_of_life_t+0x15c>)
 8000d62:	69fa      	ldr	r2, [r7, #28]
 8000d64:	4613      	mov	r3, r2
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	4413      	add	r3, r2
 8000d6a:	18ca      	adds	r2, r1, r3
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	4413      	add	r3, r2
 8000d70:	2200      	movs	r2, #0
 8000d72:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < GOL_CELLS; j++) {
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	3301      	adds	r3, #1
 8000d78:	61bb      	str	r3, [r7, #24]
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	2b08      	cmp	r3, #8
 8000d7e:	ddef      	ble.n	8000d60 <game_of_life_t+0x38>
	for (int i = 0; i < GOL_CELLS; i++) {
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	3301      	adds	r3, #1
 8000d84:	61fb      	str	r3, [r7, #28]
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	2b08      	cmp	r3, #8
 8000d8a:	dde6      	ble.n	8000d5a <game_of_life_t+0x32>
		}
	}

	grid[3][4] = true;
 8000d8c:	4b3d      	ldr	r3, [pc, #244]	; (8000e84 <game_of_life_t+0x15c>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	77da      	strb	r2, [r3, #31]
	grid[4][3] = true;
 8000d92:	4b3c      	ldr	r3, [pc, #240]	; (8000e84 <game_of_life_t+0x15c>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	grid[4][4] = true;
 8000d9a:	4b3a      	ldr	r3, [pc, #232]	; (8000e84 <game_of_life_t+0x15c>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	grid[4][5] = true;
 8000da2:	4b38      	ldr	r3, [pc, #224]	; (8000e84 <game_of_life_t+0x15c>)
 8000da4:	2201      	movs	r2, #1
 8000da6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	while(1) {
		if (APP_PAGE == GOL) {
 8000daa:	4b37      	ldr	r3, [pc, #220]	; (8000e88 <game_of_life_t+0x160>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d163      	bne.n	8000e7a <game_of_life_t+0x152>
			int stack_space = osThreadGetStackSpace(game_of_life_taskHandle);
 8000db2:	4b36      	ldr	r3, [pc, #216]	; (8000e8c <game_of_life_t+0x164>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4618      	mov	r0, r3
 8000db8:	f009 fbcc 	bl	800a554 <osThreadGetStackSpace>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	617b      	str	r3, [r7, #20]
			gol_info->stack_space = stack_space;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	697a      	ldr	r2, [r7, #20]
 8000dc4:	605a      	str	r2, [r3, #4]

			if(osMessageQueuePut(thread_manager_message, &gol_info, 0, osWaitForever) == osOK) {
 8000dc6:	4b32      	ldr	r3, [pc, #200]	; (8000e90 <game_of_life_t+0x168>)
 8000dc8:	6818      	ldr	r0, [r3, #0]
 8000dca:	f107 010c 	add.w	r1, r7, #12
 8000dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f009 fde0 	bl	800a998 <osMessageQueuePut>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d104      	bne.n	8000de8 <game_of_life_t+0xc0>
				gol_info->sent_messages += 1;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	68da      	ldr	r2, [r3, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	3201      	adds	r2, #1
 8000de6:	60da      	str	r2, [r3, #12]
			}

			BSP_TS_GetState(&TS_State);
 8000de8:	482a      	ldr	r0, [pc, #168]	; (8000e94 <game_of_life_t+0x16c>)
 8000dea:	f002 feef 	bl	8003bcc <BSP_TS_GetState>
			if (TS_State.touchDetected > 0) {
 8000dee:	4b29      	ldr	r3, [pc, #164]	; (8000e94 <game_of_life_t+0x16c>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d041      	beq.n	8000e7a <game_of_life_t+0x152>

				if (TS_State.touchX[0] > GOL_STARTPOINT_X && TS_State.touchX[0] < GOL_STARTPOINT_X + GOL_BOX_SIZE &&
 8000df6:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <game_of_life_t+0x16c>)
 8000df8:	885b      	ldrh	r3, [r3, #2]
 8000dfa:	2bfa      	cmp	r3, #250	; 0xfa
 8000dfc:	d92c      	bls.n	8000e58 <game_of_life_t+0x130>
 8000dfe:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <game_of_life_t+0x16c>)
 8000e00:	885b      	ldrh	r3, [r3, #2]
 8000e02:	f240 2261 	movw	r2, #609	; 0x261
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d826      	bhi.n	8000e58 <game_of_life_t+0x130>
						TS_State.touchY[0] > GOL_STARTPOINT_Y && TS_State.touchY[0] < GOL_STARTPOINT_Y + GOL_BOX_SIZE) {
 8000e0a:	4b22      	ldr	r3, [pc, #136]	; (8000e94 <game_of_life_t+0x16c>)
 8000e0c:	88db      	ldrh	r3, [r3, #6]
				if (TS_State.touchX[0] > GOL_STARTPOINT_X && TS_State.touchX[0] < GOL_STARTPOINT_X + GOL_BOX_SIZE &&
 8000e0e:	2b64      	cmp	r3, #100	; 0x64
 8000e10:	d922      	bls.n	8000e58 <game_of_life_t+0x130>
						TS_State.touchY[0] > GOL_STARTPOINT_Y && TS_State.touchY[0] < GOL_STARTPOINT_Y + GOL_BOX_SIZE) {
 8000e12:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <game_of_life_t+0x16c>)
 8000e14:	88db      	ldrh	r3, [r3, #6]
 8000e16:	f5b3 7fe6 	cmp.w	r3, #460	; 0x1cc
 8000e1a:	d21d      	bcs.n	8000e58 <game_of_life_t+0x130>
						uint16_t x = (TS_State.touchX[0] - GOL_STARTPOINT_X) / GOL_CELL_SIZE;
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <game_of_life_t+0x16c>)
 8000e1e:	885b      	ldrh	r3, [r3, #2]
 8000e20:	3bfa      	subs	r3, #250	; 0xfa
 8000e22:	4a1d      	ldr	r2, [pc, #116]	; (8000e98 <game_of_life_t+0x170>)
 8000e24:	fb82 1203 	smull	r1, r2, r2, r3
 8000e28:	1112      	asrs	r2, r2, #4
 8000e2a:	17db      	asrs	r3, r3, #31
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	827b      	strh	r3, [r7, #18]
						uint16_t y = (TS_State.touchY[0] - GOL_STARTPOINT_Y) / GOL_CELL_SIZE;
 8000e30:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <game_of_life_t+0x16c>)
 8000e32:	88db      	ldrh	r3, [r3, #6]
 8000e34:	3b64      	subs	r3, #100	; 0x64
 8000e36:	4a18      	ldr	r2, [pc, #96]	; (8000e98 <game_of_life_t+0x170>)
 8000e38:	fb82 1203 	smull	r1, r2, r2, r3
 8000e3c:	1112      	asrs	r2, r2, #4
 8000e3e:	17db      	asrs	r3, r3, #31
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	823b      	strh	r3, [r7, #16]

						grid[y][x] = true;
 8000e44:	8a3a      	ldrh	r2, [r7, #16]
 8000e46:	8a79      	ldrh	r1, [r7, #18]
 8000e48:	480e      	ldr	r0, [pc, #56]	; (8000e84 <game_of_life_t+0x15c>)
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	4413      	add	r3, r2
 8000e50:	4403      	add	r3, r0
 8000e52:	440b      	add	r3, r1
 8000e54:	2201      	movs	r2, #1
 8000e56:	701a      	strb	r2, [r3, #0]
				}

				if (TS_State.touchY[0] > 300 && TS_State.touchX[0] < STACK_VIEW_WIDTH) {
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <game_of_life_t+0x16c>)
 8000e5a:	88db      	ldrh	r3, [r3, #6]
 8000e5c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000e60:	d90b      	bls.n	8000e7a <game_of_life_t+0x152>
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <game_of_life_t+0x16c>)
 8000e64:	885b      	ldrh	r3, [r3, #2]
 8000e66:	2bc7      	cmp	r3, #199	; 0xc7
 8000e68:	d807      	bhi.n	8000e7a <game_of_life_t+0x152>
					GOL_running = false;
 8000e6a:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <game_of_life_t+0x174>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
					osThreadTerminate(game_of_life_taskHandle);
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <game_of_life_t+0x164>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f009 fb9b 	bl	800a5b0 <osThreadTerminate>
				}
			}
		}


		osDelay(50);
 8000e7a:	2032      	movs	r0, #50	; 0x32
 8000e7c:	f009 fbfe 	bl	800a67c <osDelay>
		if (APP_PAGE == GOL) {
 8000e80:	e793      	b.n	8000daa <game_of_life_t+0x82>
 8000e82:	bf00      	nop
 8000e84:	20000768 	.word	0x20000768
 8000e88:	20000760 	.word	0x20000760
 8000e8c:	20000740 	.word	0x20000740
 8000e90:	2000075c 	.word	0x2000075c
 8000e94:	20000750 	.word	0x20000750
 8000e98:	66666667 	.word	0x66666667
 8000e9c:	20000004 	.word	0x20000004

08000ea0 <wireworld_t>:
	}
}

void wireworld_t (void* args) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]

	thread_info *ww_info = malloc(sizeof(thread_info));
 8000ea8:	2014      	movs	r0, #20
 8000eaa:	f00c fde7 	bl	800da7c <malloc>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	60bb      	str	r3, [r7, #8]
	ww_info->pid = WW + 1;
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	701a      	strb	r2, [r3, #0]
	ww_info->sent_messages = 0;
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
	ww_info->stack_size = WW_STACK_CAPACITY;
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ec4:	609a      	str	r2, [r3, #8]
	ww_info->time_running = 0;
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	611a      	str	r2, [r3, #16]

	while(1) {

		if (APP_PAGE == WW) {
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <wireworld_t+0x74>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d11a      	bne.n	8000f0a <wireworld_t+0x6a>
			int stack_space = osThreadGetStackSpace(wirewolrd_taskHandle);
 8000ed4:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <wireworld_t+0x78>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f009 fb3b 	bl	800a554 <osThreadGetStackSpace>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	60fb      	str	r3, [r7, #12]

			ww_info->stack_space = stack_space;
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	68fa      	ldr	r2, [r7, #12]
 8000ee6:	605a      	str	r2, [r3, #4]
			if(osMessageQueuePut(thread_manager_message, &ww_info, 0, osWaitForever) == osOK) {
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <wireworld_t+0x7c>)
 8000eea:	6818      	ldr	r0, [r3, #0]
 8000eec:	f107 0108 	add.w	r1, r7, #8
 8000ef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f009 fd4f 	bl	800a998 <osMessageQueuePut>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d104      	bne.n	8000f0a <wireworld_t+0x6a>
				ww_info->sent_messages += 1;
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	3201      	adds	r2, #1
 8000f08:	60da      	str	r2, [r3, #12]
			}
		}

		osDelay(20);
 8000f0a:	2014      	movs	r0, #20
 8000f0c:	f009 fbb6 	bl	800a67c <osDelay>
		if (APP_PAGE == WW) {
 8000f10:	e7dc      	b.n	8000ecc <wireworld_t+0x2c>
 8000f12:	bf00      	nop
 8000f14:	20000760 	.word	0x20000760
 8000f18:	20000744 	.word	0x20000744
 8000f1c:	2000075c 	.word	0x2000075c

08000f20 <prepare_pages>:
	}
}

void prepare_pages() {
 8000f20:	b598      	push	{r3, r4, r7, lr}
 8000f22:	af00      	add	r7, sp, #0
		BSP_LCD_SetTextColor(LCD_COLOR_DARKGRAY);
 8000f24:	4813      	ldr	r0, [pc, #76]	; (8000f74 <prepare_pages+0x54>)
 8000f26:	f001 fffb 	bl	8002f20 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(STACK_VIEW_WIDTH, MENU_HEIGHT, BSP_LCD_GetXSize() - STACK_VIEW_WIDTH, BSP_LCD_GetYSize() - MENU_HEIGHT);
 8000f2a:	f001 ff81 	bl	8002e30 <BSP_LCD_GetXSize>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	3bc8      	subs	r3, #200	; 0xc8
 8000f34:	b29c      	uxth	r4, r3
 8000f36:	f001 ff87 	bl	8002e48 <BSP_LCD_GetYSize>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	3b4b      	subs	r3, #75	; 0x4b
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	4622      	mov	r2, r4
 8000f44:	214b      	movs	r1, #75	; 0x4b
 8000f46:	20c8      	movs	r0, #200	; 0xc8
 8000f48:	f002 f9ea 	bl	8003320 <BSP_LCD_FillRect>
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000f4c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000f50:	f001 ffe6 	bl	8002f20 <BSP_LCD_SetTextColor>
		if (APP_PAGE == FIB) {
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <prepare_pages+0x58>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <prepare_pages+0x42>
			fibonacci_prepare();
 8000f5c:	f7ff fbd0 	bl	8000700 <fibonacci_prepare>
		} else if (APP_PAGE == GOL) {
			prepare_gol();
		} else {

		}
}
 8000f60:	e005      	b.n	8000f6e <prepare_pages+0x4e>
		} else if (APP_PAGE == GOL) {
 8000f62:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <prepare_pages+0x58>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d101      	bne.n	8000f6e <prepare_pages+0x4e>
			prepare_gol();
 8000f6a:	f7ff fccb 	bl	8000904 <prepare_gol>
}
 8000f6e:	bf00      	nop
 8000f70:	bd98      	pop	{r3, r4, r7, pc}
 8000f72:	bf00      	nop
 8000f74:	ff404040 	.word	0xff404040
 8000f78:	20000760 	.word	0x20000760

08000f7c <refresh_navigation>:

void refresh_navigation() {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	if (prev_page != APP_PAGE) {
 8000f80:	4b35      	ldr	r3, [pc, #212]	; (8001058 <refresh_navigation+0xdc>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	4b35      	ldr	r3, [pc, #212]	; (800105c <refresh_navigation+0xe0>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d05f      	beq.n	800104c <refresh_navigation+0xd0>
		BSP_LCD_DisplayStringAt(50, 20, (uint8_t*) "Fibonacci", LEFT_MODE);
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	4a34      	ldr	r2, [pc, #208]	; (8001060 <refresh_navigation+0xe4>)
 8000f90:	2114      	movs	r1, #20
 8000f92:	2032      	movs	r0, #50	; 0x32
 8000f94:	f002 f87c 	bl	8003090 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(300, 20, (uint8_t*) "Game of Life", LEFT_MODE);
 8000f98:	2303      	movs	r3, #3
 8000f9a:	4a32      	ldr	r2, [pc, #200]	; (8001064 <refresh_navigation+0xe8>)
 8000f9c:	2114      	movs	r1, #20
 8000f9e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000fa2:	f002 f875 	bl	8003090 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(580, 20, (uint8_t*) "Worldwire", LEFT_MODE);
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	4a2f      	ldr	r2, [pc, #188]	; (8001068 <refresh_navigation+0xec>)
 8000faa:	2114      	movs	r1, #20
 8000fac:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000fb0:	f002 f86e 	bl	8003090 <BSP_LCD_DisplayStringAt>

		BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fb8:	f001 ffb2 	bl	8002f20 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000fbc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000fc0:	f001 ffc6 	bl	8002f50 <BSP_LCD_SetBackColor>
		if (APP_PAGE == FIB) {
 8000fc4:	4b25      	ldr	r3, [pc, #148]	; (800105c <refresh_navigation+0xe0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d106      	bne.n	8000fda <refresh_navigation+0x5e>
			BSP_LCD_DisplayStringAt(50, 20, (uint8_t*) "Fibonacci", LEFT_MODE);
 8000fcc:	2303      	movs	r3, #3
 8000fce:	4a24      	ldr	r2, [pc, #144]	; (8001060 <refresh_navigation+0xe4>)
 8000fd0:	2114      	movs	r1, #20
 8000fd2:	2032      	movs	r0, #50	; 0x32
 8000fd4:	f002 f85c 	bl	8003090 <BSP_LCD_DisplayStringAt>
 8000fd8:	e012      	b.n	8001000 <refresh_navigation+0x84>
		} else if (APP_PAGE == GOL) {
 8000fda:	4b20      	ldr	r3, [pc, #128]	; (800105c <refresh_navigation+0xe0>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d107      	bne.n	8000ff2 <refresh_navigation+0x76>
			BSP_LCD_DisplayStringAt(300, 20, (uint8_t*) "Game of Life", LEFT_MODE);
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	4a1f      	ldr	r2, [pc, #124]	; (8001064 <refresh_navigation+0xe8>)
 8000fe6:	2114      	movs	r1, #20
 8000fe8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000fec:	f002 f850 	bl	8003090 <BSP_LCD_DisplayStringAt>
 8000ff0:	e006      	b.n	8001000 <refresh_navigation+0x84>
		} else {
			BSP_LCD_DisplayStringAt(580, 20, (uint8_t*) "Wireworld", LEFT_MODE);
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	4a1d      	ldr	r2, [pc, #116]	; (800106c <refresh_navigation+0xf0>)
 8000ff6:	2114      	movs	r1, #20
 8000ff8:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000ffc:	f002 f848 	bl	8003090 <BSP_LCD_DisplayStringAt>
		}
		BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8001000:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001004:	f001 ff8c 	bl	8002f20 <BSP_LCD_SetTextColor>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800100c:	f001 ffa0 	bl	8002f50 <BSP_LCD_SetBackColor>

		BSP_LCD_DisplayStringAt(10, 100, (uint8_t*) "           ", LEFT_MODE);
 8001010:	2303      	movs	r3, #3
 8001012:	4a17      	ldr	r2, [pc, #92]	; (8001070 <refresh_navigation+0xf4>)
 8001014:	2164      	movs	r1, #100	; 0x64
 8001016:	200a      	movs	r0, #10
 8001018:	f002 f83a 	bl	8003090 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(10, 130, (uint8_t*) "           ", LEFT_MODE);
 800101c:	2303      	movs	r3, #3
 800101e:	4a14      	ldr	r2, [pc, #80]	; (8001070 <refresh_navigation+0xf4>)
 8001020:	2182      	movs	r1, #130	; 0x82
 8001022:	200a      	movs	r0, #10
 8001024:	f002 f834 	bl	8003090 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(10, 160, (uint8_t*) "           ", LEFT_MODE);
 8001028:	2303      	movs	r3, #3
 800102a:	4a11      	ldr	r2, [pc, #68]	; (8001070 <refresh_navigation+0xf4>)
 800102c:	21a0      	movs	r1, #160	; 0xa0
 800102e:	200a      	movs	r0, #10
 8001030:	f002 f82e 	bl	8003090 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(10, 190, (uint8_t*) "           ", LEFT_MODE);
 8001034:	2303      	movs	r3, #3
 8001036:	4a0e      	ldr	r2, [pc, #56]	; (8001070 <refresh_navigation+0xf4>)
 8001038:	21be      	movs	r1, #190	; 0xbe
 800103a:	200a      	movs	r0, #10
 800103c:	f002 f828 	bl	8003090 <BSP_LCD_DisplayStringAt>

		prepare_pages();
 8001040:	f7ff ff6e 	bl	8000f20 <prepare_pages>
		prev_page = APP_PAGE;
 8001044:	4b05      	ldr	r3, [pc, #20]	; (800105c <refresh_navigation+0xe0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a03      	ldr	r2, [pc, #12]	; (8001058 <refresh_navigation+0xdc>)
 800104a:	6013      	str	r3, [r2, #0]
	}
	osDelay(20);
 800104c:	2014      	movs	r0, #20
 800104e:	f009 fb15 	bl	800a67c <osDelay>

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000764 	.word	0x20000764
 800105c:	20000760 	.word	0x20000760
 8001060:	0800e3c0 	.word	0x0800e3c0
 8001064:	0800e3cc 	.word	0x0800e3cc
 8001068:	0800e3dc 	.word	0x0800e3dc
 800106c:	0800e3e8 	.word	0x0800e3e8
 8001070:	0800e3f4 	.word	0x0800e3f4

08001074 <prepare_navigation>:

void prepare_navigation() {
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	BSP_LCD_DisplayStringAt(10, 100, (uint8_t*) "           ", LEFT_MODE);
 8001078:	2303      	movs	r3, #3
 800107a:	4a2e      	ldr	r2, [pc, #184]	; (8001134 <prepare_navigation+0xc0>)
 800107c:	2164      	movs	r1, #100	; 0x64
 800107e:	200a      	movs	r0, #10
 8001080:	f002 f806 	bl	8003090 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(10, 130, (uint8_t*) "           ", LEFT_MODE);
 8001084:	2303      	movs	r3, #3
 8001086:	4a2b      	ldr	r2, [pc, #172]	; (8001134 <prepare_navigation+0xc0>)
 8001088:	2182      	movs	r1, #130	; 0x82
 800108a:	200a      	movs	r0, #10
 800108c:	f002 f800 	bl	8003090 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(10, 160, (uint8_t*) "           ", LEFT_MODE);
 8001090:	2303      	movs	r3, #3
 8001092:	4a28      	ldr	r2, [pc, #160]	; (8001134 <prepare_navigation+0xc0>)
 8001094:	21a0      	movs	r1, #160	; 0xa0
 8001096:	200a      	movs	r0, #10
 8001098:	f001 fffa 	bl	8003090 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(10, 190, (uint8_t*) "           ", LEFT_MODE);
 800109c:	2303      	movs	r3, #3
 800109e:	4a25      	ldr	r2, [pc, #148]	; (8001134 <prepare_navigation+0xc0>)
 80010a0:	21be      	movs	r1, #190	; 0xbe
 80010a2:	200a      	movs	r0, #10
 80010a4:	f001 fff4 	bl	8003090 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(50, 20, (uint8_t*) "Fibonacci", LEFT_MODE);
 80010a8:	2303      	movs	r3, #3
 80010aa:	4a23      	ldr	r2, [pc, #140]	; (8001138 <prepare_navigation+0xc4>)
 80010ac:	2114      	movs	r1, #20
 80010ae:	2032      	movs	r0, #50	; 0x32
 80010b0:	f001 ffee 	bl	8003090 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(300, 20, (uint8_t*) "Game of Life", LEFT_MODE);
 80010b4:	2303      	movs	r3, #3
 80010b6:	4a21      	ldr	r2, [pc, #132]	; (800113c <prepare_navigation+0xc8>)
 80010b8:	2114      	movs	r1, #20
 80010ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80010be:	f001 ffe7 	bl	8003090 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(580, 20, (uint8_t*) "Worldwire", LEFT_MODE);
 80010c2:	2303      	movs	r3, #3
 80010c4:	4a1e      	ldr	r2, [pc, #120]	; (8001140 <prepare_navigation+0xcc>)
 80010c6:	2114      	movs	r1, #20
 80010c8:	f44f 7011 	mov.w	r0, #580	; 0x244
 80010cc:	f001 ffe0 	bl	8003090 <BSP_LCD_DisplayStringAt>

	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010d4:	f001 ff24 	bl	8002f20 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80010d8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80010dc:	f001 ff38 	bl	8002f50 <BSP_LCD_SetBackColor>
	if (APP_PAGE == FIB) {
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <prepare_navigation+0xd0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d106      	bne.n	80010f6 <prepare_navigation+0x82>
	BSP_LCD_DisplayStringAt(50, 20, (uint8_t*) "Fibonacci", LEFT_MODE);
 80010e8:	2303      	movs	r3, #3
 80010ea:	4a13      	ldr	r2, [pc, #76]	; (8001138 <prepare_navigation+0xc4>)
 80010ec:	2114      	movs	r1, #20
 80010ee:	2032      	movs	r0, #50	; 0x32
 80010f0:	f001 ffce 	bl	8003090 <BSP_LCD_DisplayStringAt>
 80010f4:	e012      	b.n	800111c <prepare_navigation+0xa8>
	} else if (APP_PAGE == GOL) {
 80010f6:	4b13      	ldr	r3, [pc, #76]	; (8001144 <prepare_navigation+0xd0>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d107      	bne.n	800110e <prepare_navigation+0x9a>
	BSP_LCD_DisplayStringAt(300, 20, (uint8_t*) "Game of Life", LEFT_MODE);
 80010fe:	2303      	movs	r3, #3
 8001100:	4a0e      	ldr	r2, [pc, #56]	; (800113c <prepare_navigation+0xc8>)
 8001102:	2114      	movs	r1, #20
 8001104:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001108:	f001 ffc2 	bl	8003090 <BSP_LCD_DisplayStringAt>
 800110c:	e006      	b.n	800111c <prepare_navigation+0xa8>
	} else {
	BSP_LCD_DisplayStringAt(580, 20, (uint8_t*) "Worldwire", LEFT_MODE);
 800110e:	2303      	movs	r3, #3
 8001110:	4a0b      	ldr	r2, [pc, #44]	; (8001140 <prepare_navigation+0xcc>)
 8001112:	2114      	movs	r1, #20
 8001114:	f44f 7011 	mov.w	r0, #580	; 0x244
 8001118:	f001 ffba 	bl	8003090 <BSP_LCD_DisplayStringAt>
	}

	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800111c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001120:	f001 fefe 	bl	8002f20 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001128:	f001 ff12 	bl	8002f50 <BSP_LCD_SetBackColor>

	prepare_pages();
 800112c:	f7ff fef8 	bl	8000f20 <prepare_pages>
}
 8001130:	bf00      	nop
 8001132:	bd80      	pop	{r7, pc}
 8001134:	0800e3f4 	.word	0x0800e3f4
 8001138:	0800e3c0 	.word	0x0800e3c0
 800113c:	0800e3cc 	.word	0x0800e3cc
 8001140:	0800e3dc 	.word	0x0800e3dc
 8001144:	20000760 	.word	0x20000760

08001148 <LCD_manager_t>:

void LCD_manager_t (void* args) {
 8001148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800114c:	b0ad      	sub	sp, #180	; 0xb4
 800114e:	af00      	add	r7, sp, #0
 8001150:	63f8      	str	r0, [r7, #60]	; 0x3c

	prepare_navigation();
 8001152:	f7ff ff8f 	bl	8001074 <prepare_navigation>

	thread_info *received_message = malloc(sizeof(thread_info));
 8001156:	2014      	movs	r0, #20
 8001158:	f00c fc90 	bl	800da7c <malloc>
 800115c:	4603      	mov	r3, r0
 800115e:	65fb      	str	r3, [r7, #92]	; 0x5c

	while(1) {
 8001160:	466b      	mov	r3, sp
 8001162:	461e      	mov	r6, r3
		int number_of_active_threads = osThreadGetCount();
 8001164:	f009 fa64 	bl	800a630 <osThreadGetCount>
 8001168:	4603      	mov	r3, r0
 800116a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		int number_of_active_threads_strlen = integer_length(number_of_active_threads);
 800116e:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8001172:	f7ff fa59 	bl	8000628 <integer_length>
 8001176:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
		char number_of_active_threads_str[number_of_active_threads_strlen];
 800117a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 800117e:	1e4b      	subs	r3, r1, #1
 8001180:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001184:	460a      	mov	r2, r1
 8001186:	2300      	movs	r3, #0
 8001188:	633a      	str	r2, [r7, #48]	; 0x30
 800118a:	637b      	str	r3, [r7, #52]	; 0x34
 800118c:	f04f 0200 	mov.w	r2, #0
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001196:	00c3      	lsls	r3, r0, #3
 8001198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800119a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800119e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011a0:	00c2      	lsls	r2, r0, #3
 80011a2:	460a      	mov	r2, r1
 80011a4:	2300      	movs	r3, #0
 80011a6:	4614      	mov	r4, r2
 80011a8:	461d      	mov	r5, r3
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	f04f 0300 	mov.w	r3, #0
 80011b2:	00eb      	lsls	r3, r5, #3
 80011b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80011b8:	00e2      	lsls	r2, r4, #3
 80011ba:	460b      	mov	r3, r1
 80011bc:	3307      	adds	r3, #7
 80011be:	08db      	lsrs	r3, r3, #3
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	ebad 0d03 	sub.w	sp, sp, r3
 80011c6:	466b      	mov	r3, sp
 80011c8:	3300      	adds	r3, #0
 80011ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		sprintf(number_of_active_threads_str, "Threads: %d", number_of_active_threads);
 80011ce:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80011d2:	49ba      	ldr	r1, [pc, #744]	; (80014bc <LCD_manager_t+0x374>)
 80011d4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80011d8:	f00c fd5e 	bl	800dc98 <siprintf>
 		BSP_LCD_DisplayStringAt(10, 380, (uint8_t*) number_of_active_threads_str, LEFT_MODE);
 80011dc:	2303      	movs	r3, #3
 80011de:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 80011e2:	f44f 71be 	mov.w	r1, #380	; 0x17c
 80011e6:	200a      	movs	r0, #10
 80011e8:	f001 ff52 	bl	8003090 <BSP_LCD_DisplayStringAt>


		BSP_TS_GetState(&TS_State);
 80011ec:	48b4      	ldr	r0, [pc, #720]	; (80014c0 <LCD_manager_t+0x378>)
 80011ee:	f002 fced 	bl	8003bcc <BSP_TS_GetState>
		if (TS_State.touchDetected > 0) {
 80011f2:	4bb3      	ldr	r3, [pc, #716]	; (80014c0 <LCD_manager_t+0x378>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d01d      	beq.n	8001236 <LCD_manager_t+0xee>
			if (TS_State.touchY[0] < 75) {
 80011fa:	4bb1      	ldr	r3, [pc, #708]	; (80014c0 <LCD_manager_t+0x378>)
 80011fc:	88db      	ldrh	r3, [r3, #6]
 80011fe:	2b4a      	cmp	r3, #74	; 0x4a
 8001200:	d819      	bhi.n	8001236 <LCD_manager_t+0xee>
				if (TS_State.touchX[0] < 267) {
 8001202:	4baf      	ldr	r3, [pc, #700]	; (80014c0 <LCD_manager_t+0x378>)
 8001204:	885b      	ldrh	r3, [r3, #2]
 8001206:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 800120a:	d803      	bhi.n	8001214 <LCD_manager_t+0xcc>
					APP_PAGE = FIB;
 800120c:	4aad      	ldr	r2, [pc, #692]	; (80014c4 <LCD_manager_t+0x37c>)
 800120e:	2300      	movs	r3, #0
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e010      	b.n	8001236 <LCD_manager_t+0xee>
				} else if (TS_State.touchX[0] > 267 && TS_State.touchX[0] < 533) {
 8001214:	4baa      	ldr	r3, [pc, #680]	; (80014c0 <LCD_manager_t+0x378>)
 8001216:	885b      	ldrh	r3, [r3, #2]
 8001218:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 800121c:	d308      	bcc.n	8001230 <LCD_manager_t+0xe8>
 800121e:	4ba8      	ldr	r3, [pc, #672]	; (80014c0 <LCD_manager_t+0x378>)
 8001220:	885b      	ldrh	r3, [r3, #2]
 8001222:	f5b3 7f05 	cmp.w	r3, #532	; 0x214
 8001226:	d803      	bhi.n	8001230 <LCD_manager_t+0xe8>
					APP_PAGE = GOL;
 8001228:	4aa6      	ldr	r2, [pc, #664]	; (80014c4 <LCD_manager_t+0x37c>)
 800122a:	2301      	movs	r3, #1
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	e002      	b.n	8001236 <LCD_manager_t+0xee>
				} else {
					APP_PAGE = WW;
 8001230:	4aa4      	ldr	r2, [pc, #656]	; (80014c4 <LCD_manager_t+0x37c>)
 8001232:	2302      	movs	r3, #2
 8001234:	6013      	str	r3, [r2, #0]
				}
			}
		}
		refresh_navigation();
 8001236:	f7ff fea1 	bl	8000f7c <refresh_navigation>

		// stack view
		osMessageQueueGet(thread_manager_message, &received_message, NULL, osWaitForever);
 800123a:	4ba3      	ldr	r3, [pc, #652]	; (80014c8 <LCD_manager_t+0x380>)
 800123c:	6818      	ldr	r0, [r3, #0]
 800123e:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8001242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001246:	2200      	movs	r2, #0
 8001248:	f009 fc1a 	bl	800aa80 <osMessageQueueGet>

		int pid = received_message->pid;
 800124c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		int pid_strlen = integer_length(pid);
 8001254:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8001258:	f7ff f9e6 	bl	8000628 <integer_length>
 800125c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
		char PID[] = "PID";
 8001260:	4b9a      	ldr	r3, [pc, #616]	; (80014cc <LCD_manager_t+0x384>)
 8001262:	65bb      	str	r3, [r7, #88]	; 0x58
		char pid_str[strlen(PID) + pid_strlen];
 8001264:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001268:	4618      	mov	r0, r3
 800126a:	f7fe ffe9 	bl	8000240 <strlen>
 800126e:	4602      	mov	r2, r0
 8001270:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001274:	18d1      	adds	r1, r2, r3
 8001276:	460b      	mov	r3, r1
 8001278:	3b01      	subs	r3, #1
 800127a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800127e:	2300      	movs	r3, #0
 8001280:	62b9      	str	r1, [r7, #40]	; 0x28
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001284:	f04f 0200 	mov.w	r2, #0
 8001288:	f04f 0300 	mov.w	r3, #0
 800128c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800128e:	00c3      	lsls	r3, r0, #3
 8001290:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001292:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001296:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001298:	00c2      	lsls	r2, r0, #3
 800129a:	2300      	movs	r3, #0
 800129c:	6239      	str	r1, [r7, #32]
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
 80012a0:	f04f 0200 	mov.w	r2, #0
 80012a4:	f04f 0300 	mov.w	r3, #0
 80012a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012aa:	00c3      	lsls	r3, r0, #3
 80012ac:	6a38      	ldr	r0, [r7, #32]
 80012ae:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80012b2:	6a38      	ldr	r0, [r7, #32]
 80012b4:	00c2      	lsls	r2, r0, #3
 80012b6:	1dcb      	adds	r3, r1, #7
 80012b8:	08db      	lsrs	r3, r3, #3
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	ebad 0d03 	sub.w	sp, sp, r3
 80012c0:	466b      	mov	r3, sp
 80012c2:	3300      	adds	r3, #0
 80012c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		sprintf(pid_str, "%s:%d", PID, pid);
 80012c8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80012cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80012d0:	497f      	ldr	r1, [pc, #508]	; (80014d0 <LCD_manager_t+0x388>)
 80012d2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80012d6:	f00c fcdf 	bl	800dc98 <siprintf>
		BSP_LCD_DisplayStringAt(10, 100, (uint8_t*) pid_str, LEFT_MODE);
 80012da:	2303      	movs	r3, #3
 80012dc:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80012e0:	2164      	movs	r1, #100	; 0x64
 80012e2:	200a      	movs	r0, #10
 80012e4:	f001 fed4 	bl	8003090 <BSP_LCD_DisplayStringAt>

		int stack_space = received_message->stack_space;
 80012e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		int stack_space_strlen = integer_length(stack_space);
 80012f0:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80012f4:	f7ff f998 	bl	8000628 <integer_length>
 80012f8:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		char stack_sp[] = "Unused";
 80012fc:	4b75      	ldr	r3, [pc, #468]	; (80014d4 <LCD_manager_t+0x38c>)
 80012fe:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001302:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001306:	6010      	str	r0, [r2, #0]
 8001308:	3204      	adds	r2, #4
 800130a:	8011      	strh	r1, [r2, #0]
 800130c:	3202      	adds	r2, #2
 800130e:	0c0b      	lsrs	r3, r1, #16
 8001310:	7013      	strb	r3, [r2, #0]
		char stack_space_str[strlen(stack_sp) + stack_space_strlen];
 8001312:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001316:	4618      	mov	r0, r3
 8001318:	f7fe ff92 	bl	8000240 <strlen>
 800131c:	4602      	mov	r2, r0
 800131e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001322:	18d1      	adds	r1, r2, r3
 8001324:	460b      	mov	r3, r1
 8001326:	3b01      	subs	r3, #1
 8001328:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800132c:	2300      	movs	r3, #0
 800132e:	61b9      	str	r1, [r7, #24]
 8001330:	61fb      	str	r3, [r7, #28]
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	f04f 0300 	mov.w	r3, #0
 800133a:	69f8      	ldr	r0, [r7, #28]
 800133c:	00c3      	lsls	r3, r0, #3
 800133e:	69b8      	ldr	r0, [r7, #24]
 8001340:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001344:	69b8      	ldr	r0, [r7, #24]
 8001346:	00c2      	lsls	r2, r0, #3
 8001348:	2300      	movs	r3, #0
 800134a:	6139      	str	r1, [r7, #16]
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	f04f 0300 	mov.w	r3, #0
 8001356:	6978      	ldr	r0, [r7, #20]
 8001358:	00c3      	lsls	r3, r0, #3
 800135a:	6938      	ldr	r0, [r7, #16]
 800135c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001360:	6938      	ldr	r0, [r7, #16]
 8001362:	00c2      	lsls	r2, r0, #3
 8001364:	1dcb      	adds	r3, r1, #7
 8001366:	08db      	lsrs	r3, r3, #3
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	ebad 0d03 	sub.w	sp, sp, r3
 800136e:	466b      	mov	r3, sp
 8001370:	3300      	adds	r3, #0
 8001372:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		sprintf(stack_space_str, "%s:%04d", stack_sp, stack_space);
 8001376:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800137a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800137e:	4956      	ldr	r1, [pc, #344]	; (80014d8 <LCD_manager_t+0x390>)
 8001380:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001384:	f00c fc88 	bl	800dc98 <siprintf>
		BSP_LCD_DisplayStringAt(10, 130, (uint8_t*) stack_space_str, LEFT_MODE);
 8001388:	2303      	movs	r3, #3
 800138a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800138e:	2182      	movs	r1, #130	; 0x82
 8001390:	200a      	movs	r0, #10
 8001392:	f001 fe7d 	bl	8003090 <BSP_LCD_DisplayStringAt>

		int stack_size = received_message->stack_size;
 8001396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	67fb      	str	r3, [r7, #124]	; 0x7c
		int stack_size_strlen = integer_length(stack_size);
 800139c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800139e:	f7ff f943 	bl	8000628 <integer_length>
 80013a2:	67b8      	str	r0, [r7, #120]	; 0x78
		char stack_si[] = "Size";
 80013a4:	4a4d      	ldr	r2, [pc, #308]	; (80014dc <LCD_manager_t+0x394>)
 80013a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80013ae:	6018      	str	r0, [r3, #0]
 80013b0:	3304      	adds	r3, #4
 80013b2:	7019      	strb	r1, [r3, #0]
		char stack_size_str[strlen(stack_si) + stack_size_strlen];
 80013b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7fe ff41 	bl	8000240 <strlen>
 80013be:	4602      	mov	r2, r0
 80013c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80013c2:	18d1      	adds	r1, r2, r3
 80013c4:	460b      	mov	r3, r1
 80013c6:	3b01      	subs	r3, #1
 80013c8:	677b      	str	r3, [r7, #116]	; 0x74
 80013ca:	2300      	movs	r3, #0
 80013cc:	60b9      	str	r1, [r7, #8]
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	f04f 0300 	mov.w	r3, #0
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	00c3      	lsls	r3, r0, #3
 80013dc:	68b8      	ldr	r0, [r7, #8]
 80013de:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80013e2:	68b8      	ldr	r0, [r7, #8]
 80013e4:	00c2      	lsls	r2, r0, #3
 80013e6:	2300      	movs	r3, #0
 80013e8:	6039      	str	r1, [r7, #0]
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	f04f 0300 	mov.w	r3, #0
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	00c3      	lsls	r3, r0, #3
 80013f8:	6838      	ldr	r0, [r7, #0]
 80013fa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80013fe:	6838      	ldr	r0, [r7, #0]
 8001400:	00c2      	lsls	r2, r0, #3
 8001402:	1dcb      	adds	r3, r1, #7
 8001404:	08db      	lsrs	r3, r3, #3
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	ebad 0d03 	sub.w	sp, sp, r3
 800140c:	466b      	mov	r3, sp
 800140e:	3300      	adds	r3, #0
 8001410:	673b      	str	r3, [r7, #112]	; 0x70
		sprintf(stack_size_str, "%s:%04d", stack_si, stack_size);
 8001412:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001416:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001418:	492f      	ldr	r1, [pc, #188]	; (80014d8 <LCD_manager_t+0x390>)
 800141a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800141c:	f00c fc3c 	bl	800dc98 <siprintf>
		BSP_LCD_DisplayStringAt(10, 160, (uint8_t*) stack_size_str, LEFT_MODE);
 8001420:	2303      	movs	r3, #3
 8001422:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001424:	21a0      	movs	r1, #160	; 0xa0
 8001426:	200a      	movs	r0, #10
 8001428:	f001 fe32 	bl	8003090 <BSP_LCD_DisplayStringAt>

		int sent_messages = received_message->sent_messages;
 800142c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	66fb      	str	r3, [r7, #108]	; 0x6c
		int sent_messages_strlen = integer_length(sent_messages);
 8001432:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001434:	f7ff f8f8 	bl	8000628 <integer_length>
 8001438:	66b8      	str	r0, [r7, #104]	; 0x68
		char MSG[] = "MSG";
 800143a:	4b29      	ldr	r3, [pc, #164]	; (80014e0 <LCD_manager_t+0x398>)
 800143c:	647b      	str	r3, [r7, #68]	; 0x44
		char sent_messages_str[strlen(MSG) + sent_messages_strlen];
 800143e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001442:	4618      	mov	r0, r3
 8001444:	f7fe fefc 	bl	8000240 <strlen>
 8001448:	4602      	mov	r2, r0
 800144a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800144c:	18d1      	adds	r1, r2, r3
 800144e:	460b      	mov	r3, r1
 8001450:	3b01      	subs	r3, #1
 8001452:	667b      	str	r3, [r7, #100]	; 0x64
 8001454:	2300      	movs	r3, #0
 8001456:	468a      	mov	sl, r1
 8001458:	469b      	mov	fp, r3
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001466:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800146a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800146e:	2300      	movs	r3, #0
 8001470:	4688      	mov	r8, r1
 8001472:	4699      	mov	r9, r3
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	f04f 0300 	mov.w	r3, #0
 800147c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001480:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001484:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001488:	1dcb      	adds	r3, r1, #7
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	ebad 0d03 	sub.w	sp, sp, r3
 8001492:	466b      	mov	r3, sp
 8001494:	3300      	adds	r3, #0
 8001496:	663b      	str	r3, [r7, #96]	; 0x60
		sprintf(sent_messages_str, "%s:%04d", MSG, sent_messages);
 8001498:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800149c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800149e:	490e      	ldr	r1, [pc, #56]	; (80014d8 <LCD_manager_t+0x390>)
 80014a0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80014a2:	f00c fbf9 	bl	800dc98 <siprintf>
		BSP_LCD_DisplayStringAt(10, 190, (uint8_t*) sent_messages_str, LEFT_MODE);
 80014a6:	2303      	movs	r3, #3
 80014a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80014aa:	21be      	movs	r1, #190	; 0xbe
 80014ac:	200a      	movs	r0, #10
 80014ae:	f001 fdef 	bl	8003090 <BSP_LCD_DisplayStringAt>

		osDelay(50);
 80014b2:	2032      	movs	r0, #50	; 0x32
 80014b4:	f009 f8e2 	bl	800a67c <osDelay>
 80014b8:	46b5      	mov	sp, r6
	while(1) {
 80014ba:	e651      	b.n	8001160 <LCD_manager_t+0x18>
 80014bc:	0800e400 	.word	0x0800e400
 80014c0:	20000750 	.word	0x20000750
 80014c4:	20000760 	.word	0x20000760
 80014c8:	2000075c 	.word	0x2000075c
 80014cc:	00444950 	.word	0x00444950
 80014d0:	0800e40c 	.word	0x0800e40c
 80014d4:	0800e41c 	.word	0x0800e41c
 80014d8:	0800e414 	.word	0x0800e414
 80014dc:	0800e424 	.word	0x0800e424
 80014e0:	0047534d 	.word	0x0047534d

080014e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b087      	sub	sp, #28
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	extern int APP_PAGE;
	APP_PAGE = FIB;
 80014ea:	4b5c      	ldr	r3, [pc, #368]	; (800165c <main+0x178>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
	prev_page = APP_PAGE;
 80014f0:	4b5a      	ldr	r3, [pc, #360]	; (800165c <main+0x178>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a5a      	ldr	r2, [pc, #360]	; (8001660 <main+0x17c>)
 80014f6:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f8:	f002 fca2 	bl	8003e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014fc:	f000 f8d6 	bl	80016ac <SystemClock_Config>

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

	GPIO_InitTypeDef gumb_a;
	gumb_a.Pin = GPIO_PIN_0;
 8001500:	2301      	movs	r3, #1
 8001502:	607b      	str	r3, [r7, #4]
	gumb_a.Mode = GPIO_MODE_IT_RISING;
 8001504:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001508:	60bb      	str	r3, [r7, #8]
	gumb_a.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
	gumb_a.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &gumb_a);
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	4619      	mov	r1, r3
 8001516:	4853      	ldr	r0, [pc, #332]	; (8001664 <main+0x180>)
 8001518:	f004 fa20 	bl	800595c <HAL_GPIO_Init>

	HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 2);
 800151c:	2202      	movs	r2, #2
 800151e:	2101      	movs	r1, #1
 8001520:	2006      	movs	r0, #6
 8001522:	f002 feb7 	bl	8004294 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001526:	2006      	movs	r0, #6
 8001528:	f002 fed0 	bl	80042cc <HAL_NVIC_EnableIRQ>

  BSP_LCD_Init();
 800152c:	f001 fafb 	bl	8002b26 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8001530:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001534:	2000      	movs	r0, #0
 8001536:	f001 fc93 	bl	8002e60 <BSP_LCD_LayerDefaultInit>

  ts_status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800153a:	f001 fc79 	bl	8002e30 <BSP_LCD_GetXSize>
 800153e:	4603      	mov	r3, r0
 8001540:	b29c      	uxth	r4, r3
 8001542:	f001 fc81 	bl	8002e48 <BSP_LCD_GetYSize>
 8001546:	4603      	mov	r3, r0
 8001548:	b29b      	uxth	r3, r3
 800154a:	4619      	mov	r1, r3
 800154c:	4620      	mov	r0, r4
 800154e:	f002 faab 	bl	8003aa8 <BSP_TS_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	461a      	mov	r2, r3
 8001556:	4b44      	ldr	r3, [pc, #272]	; (8001668 <main+0x184>)
 8001558:	601a      	str	r2, [r3, #0]
  while(ts_status != TS_OK);
 800155a:	bf00      	nop
 800155c:	4b42      	ldr	r3, [pc, #264]	; (8001668 <main+0x184>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1fb      	bne.n	800155c <main+0x78>

  ts_status = BSP_TS_ITConfig();
 8001564:	f002 fb00 	bl	8003b68 <BSP_TS_ITConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	461a      	mov	r2, r3
 800156c:	4b3e      	ldr	r3, [pc, #248]	; (8001668 <main+0x184>)
 800156e:	601a      	str	r2, [r3, #0]
  while(ts_status != TS_OK);
 8001570:	bf00      	nop
 8001572:	4b3d      	ldr	r3, [pc, #244]	; (8001668 <main+0x184>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1fb      	bne.n	8001572 <main+0x8e>

  BSP_TS_INT_MspInit();
 800157a:	f002 fc3b 	bl	8003df4 <BSP_TS_INT_MspInit>

	BSP_LCD_Clear(LCD_COLOR_DARKCYAN);
 800157e:	483b      	ldr	r0, [pc, #236]	; (800166c <main+0x188>)
 8001580:	f001 fd1a 	bl	8002fb8 <BSP_LCD_Clear>
	BSP_LCD_DrawVLine(MENU_PANEL_WIDTH, 0, MENU_HEIGHT);
 8001584:	224b      	movs	r2, #75	; 0x4b
 8001586:	2100      	movs	r1, #0
 8001588:	f240 100b 	movw	r0, #267	; 0x10b
 800158c:	f001 fe86 	bl	800329c <BSP_LCD_DrawVLine>
	BSP_LCD_DrawVLine(2 * MENU_PANEL_WIDTH, 0, MENU_HEIGHT);
 8001590:	224b      	movs	r2, #75	; 0x4b
 8001592:	2100      	movs	r1, #0
 8001594:	f240 2016 	movw	r0, #534	; 0x216
 8001598:	f001 fe80 	bl	800329c <BSP_LCD_DrawVLine>

	BSP_LCD_DrawHLine(0, MENU_HEIGHT, BSP_LCD_GetXSize());
 800159c:	f001 fc48 	bl	8002e30 <BSP_LCD_GetXSize>
 80015a0:	4603      	mov	r3, r0
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	461a      	mov	r2, r3
 80015a6:	214b      	movs	r1, #75	; 0x4b
 80015a8:	2000      	movs	r0, #0
 80015aa:	f001 fe39 	bl	8003220 <BSP_LCD_DrawHLine>
	BSP_LCD_DrawVLine(STACK_VIEW_WIDTH, MENU_HEIGHT, BSP_LCD_GetYSize() - MENU_HEIGHT);
 80015ae:	f001 fc4b 	bl	8002e48 <BSP_LCD_GetYSize>
 80015b2:	4603      	mov	r3, r0
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	3b4b      	subs	r3, #75	; 0x4b
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	461a      	mov	r2, r3
 80015bc:	214b      	movs	r1, #75	; 0x4b
 80015be:	20c8      	movs	r0, #200	; 0xc8
 80015c0:	f001 fe6c 	bl	800329c <BSP_LCD_DrawVLine>

	BSP_LCD_FillRect(0, 300, STACK_VIEW_WIDTH, BSP_LCD_GetYSize());
 80015c4:	f001 fc40 	bl	8002e48 <BSP_LCD_GetYSize>
 80015c8:	4603      	mov	r3, r0
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	22c8      	movs	r2, #200	; 0xc8
 80015ce:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80015d2:	2000      	movs	r0, #0
 80015d4:	f001 fea4 	bl	8003320 <BSP_LCD_FillRect>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80015d8:	f008 feac 	bl	800a334 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  timer_gol = osTimerNew(gol_timer_func, osTimerPeriodic, NULL, NULL);
 80015dc:	2300      	movs	r3, #0
 80015de:	2200      	movs	r2, #0
 80015e0:	2101      	movs	r1, #1
 80015e2:	4823      	ldr	r0, [pc, #140]	; (8001670 <main+0x18c>)
 80015e4:	f009 f88e 	bl	800a704 <osTimerNew>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4a22      	ldr	r2, [pc, #136]	; (8001674 <main+0x190>)
 80015ec:	6013      	str	r3, [r2, #0]
  if (timer_gol != NULL) {
 80015ee:	4b21      	ldr	r3, [pc, #132]	; (8001674 <main+0x190>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d006      	beq.n	8001604 <main+0x120>
	  osTimerStart(timer_gol, 500);
 80015f6:	4b1f      	ldr	r3, [pc, #124]	; (8001674 <main+0x190>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80015fe:	4618      	mov	r0, r3
 8001600:	f009 f904 	bl	800a80c <osTimerStart>
  }
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  thread_manager_message = osMessageQueueNew(5, sizeof(thread_info), NULL);
 8001604:	2200      	movs	r2, #0
 8001606:	2114      	movs	r1, #20
 8001608:	2005      	movs	r0, #5
 800160a:	f009 f93f 	bl	800a88c <osMessageQueueNew>
 800160e:	4603      	mov	r3, r0
 8001610:	4a19      	ldr	r2, [pc, #100]	; (8001678 <main+0x194>)
 8001612:	6013      	str	r3, [r2, #0]
  /* creation of defaultTask */
//  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	fibonacci_taskHandle = osThreadNew(fibonacci_t, NULL, &fibonacci_Task_attributes);
 8001614:	4a19      	ldr	r2, [pc, #100]	; (800167c <main+0x198>)
 8001616:	2100      	movs	r1, #0
 8001618:	4819      	ldr	r0, [pc, #100]	; (8001680 <main+0x19c>)
 800161a:	f008 fef5 	bl	800a408 <osThreadNew>
 800161e:	4603      	mov	r3, r0
 8001620:	4a18      	ldr	r2, [pc, #96]	; (8001684 <main+0x1a0>)
 8001622:	6013      	str	r3, [r2, #0]
	game_of_life_taskHandle = osThreadNew(game_of_life_t, NULL, &game_of_life_Task_attributes);
 8001624:	4a18      	ldr	r2, [pc, #96]	; (8001688 <main+0x1a4>)
 8001626:	2100      	movs	r1, #0
 8001628:	4818      	ldr	r0, [pc, #96]	; (800168c <main+0x1a8>)
 800162a:	f008 feed 	bl	800a408 <osThreadNew>
 800162e:	4603      	mov	r3, r0
 8001630:	4a17      	ldr	r2, [pc, #92]	; (8001690 <main+0x1ac>)
 8001632:	6013      	str	r3, [r2, #0]
	wirewolrd_taskHandle = osThreadNew(wireworld_t, NULL, &wirewolrd_Task_attributes);
 8001634:	4a17      	ldr	r2, [pc, #92]	; (8001694 <main+0x1b0>)
 8001636:	2100      	movs	r1, #0
 8001638:	4817      	ldr	r0, [pc, #92]	; (8001698 <main+0x1b4>)
 800163a:	f008 fee5 	bl	800a408 <osThreadNew>
 800163e:	4603      	mov	r3, r0
 8001640:	4a16      	ldr	r2, [pc, #88]	; (800169c <main+0x1b8>)
 8001642:	6013      	str	r3, [r2, #0]
	LCD_manager_taskHandle = osThreadNew(LCD_manager_t, NULL, &LCD_manager_Task_attributes);
 8001644:	4a16      	ldr	r2, [pc, #88]	; (80016a0 <main+0x1bc>)
 8001646:	2100      	movs	r1, #0
 8001648:	4816      	ldr	r0, [pc, #88]	; (80016a4 <main+0x1c0>)
 800164a:	f008 fedd 	bl	800a408 <osThreadNew>
 800164e:	4603      	mov	r3, r0
 8001650:	4a15      	ldr	r2, [pc, #84]	; (80016a8 <main+0x1c4>)
 8001652:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001654:	f008 fea2 	bl	800a39c <osKernelStart>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001658:	e7fe      	b.n	8001658 <main+0x174>
 800165a:	bf00      	nop
 800165c:	20000760 	.word	0x20000760
 8001660:	20000764 	.word	0x20000764
 8001664:	40020000 	.word	0x40020000
 8001668:	2000074c 	.word	0x2000074c
 800166c:	ff008080 	.word	0xff008080
 8001670:	08000cf9 	.word	0x08000cf9
 8001674:	200007bc 	.word	0x200007bc
 8001678:	2000075c 	.word	0x2000075c
 800167c:	0800e444 	.word	0x0800e444
 8001680:	080007cd 	.word	0x080007cd
 8001684:	2000073c 	.word	0x2000073c
 8001688:	0800e468 	.word	0x0800e468
 800168c:	08000d29 	.word	0x08000d29
 8001690:	20000740 	.word	0x20000740
 8001694:	0800e48c 	.word	0x0800e48c
 8001698:	08000ea1 	.word	0x08000ea1
 800169c:	20000744 	.word	0x20000744
 80016a0:	0800e4b0 	.word	0x0800e4b0
 80016a4:	08001149 	.word	0x08001149
 80016a8:	20000748 	.word	0x20000748

080016ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b094      	sub	sp, #80	; 0x50
 80016b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	2234      	movs	r2, #52	; 0x34
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f00c f9f4 	bl	800daa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c0:	f107 0308 	add.w	r3, r7, #8
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80016d0:	f006 fcc4 	bl	800805c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d4:	4b31      	ldr	r3, [pc, #196]	; (800179c <SystemClock_Config+0xf0>)
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	4a30      	ldr	r2, [pc, #192]	; (800179c <SystemClock_Config+0xf0>)
 80016da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016de:	6413      	str	r3, [r2, #64]	; 0x40
 80016e0:	4b2e      	ldr	r3, [pc, #184]	; (800179c <SystemClock_Config+0xf0>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ec:	4b2c      	ldr	r3, [pc, #176]	; (80017a0 <SystemClock_Config+0xf4>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a2b      	ldr	r2, [pc, #172]	; (80017a0 <SystemClock_Config+0xf4>)
 80016f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	4b29      	ldr	r3, [pc, #164]	; (80017a0 <SystemClock_Config+0xf4>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001700:	603b      	str	r3, [r7, #0]
 8001702:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001704:	230b      	movs	r3, #11
 8001706:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001708:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800170c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800170e:	2301      	movs	r3, #1
 8001710:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001712:	2310      	movs	r3, #16
 8001714:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001716:	2301      	movs	r3, #1
 8001718:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800171a:	2302      	movs	r3, #2
 800171c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800171e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001722:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001724:	2319      	movs	r3, #25
 8001726:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001728:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800172c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800172e:	2302      	movs	r3, #2
 8001730:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001732:	2304      	movs	r3, #4
 8001734:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001736:	2302      	movs	r3, #2
 8001738:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800173a:	f107 031c 	add.w	r3, r7, #28
 800173e:	4618      	mov	r0, r3
 8001740:	f006 fcec 	bl	800811c <HAL_RCC_OscConfig>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800174a:	f000 f83d 	bl	80017c8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800174e:	f006 fc95 	bl	800807c <HAL_PWREx_EnableOverDrive>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001758:	f000 f836 	bl	80017c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800175c:	230f      	movs	r3, #15
 800175e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001760:	2302      	movs	r3, #2
 8001762:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001764:	2300      	movs	r3, #0
 8001766:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001768:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800176c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800176e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001772:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001774:	f107 0308 	add.w	r3, r7, #8
 8001778:	2107      	movs	r1, #7
 800177a:	4618      	mov	r0, r3
 800177c:	f006 ff7c 	bl	8008678 <HAL_RCC_ClockConfig>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001786:	f000 f81f 	bl	80017c8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800178a:	2200      	movs	r2, #0
 800178c:	2100      	movs	r1, #0
 800178e:	2000      	movs	r0, #0
 8001790:	f007 f85e 	bl	8008850 <HAL_RCC_MCOConfig>
}
 8001794:	bf00      	nop
 8001796:	3750      	adds	r7, #80	; 0x50
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	40023800 	.word	0x40023800
 80017a0:	40007000 	.word	0x40007000

080017a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d101      	bne.n	80017ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017b6:	f002 fb51 	bl	8003e5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40001000 	.word	0x40001000

080017c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017cc:	b672      	cpsid	i
}
 80017ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <Error_Handler+0x8>
	...

080017d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <HAL_MspInit+0x4c>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	4a10      	ldr	r2, [pc, #64]	; (8001820 <HAL_MspInit+0x4c>)
 80017e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e4:	6413      	str	r3, [r2, #64]	; 0x40
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <HAL_MspInit+0x4c>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <HAL_MspInit+0x4c>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <HAL_MspInit+0x4c>)
 80017f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017fc:	6453      	str	r3, [r2, #68]	; 0x44
 80017fe:	4b08      	ldr	r3, [pc, #32]	; (8001820 <HAL_MspInit+0x4c>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	210f      	movs	r1, #15
 800180e:	f06f 0001 	mvn.w	r0, #1
 8001812:	f002 fd3f 	bl	8004294 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40023800 	.word	0x40023800

08001824 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0d      	ldr	r2, [pc, #52]	; (8001868 <HAL_DMA2D_MspInit+0x44>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d113      	bne.n	800185e <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <HAL_DMA2D_MspInit+0x48>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a0c      	ldr	r2, [pc, #48]	; (800186c <HAL_DMA2D_MspInit+0x48>)
 800183c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_DMA2D_MspInit+0x48>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2105      	movs	r1, #5
 8001852:	205a      	movs	r0, #90	; 0x5a
 8001854:	f002 fd1e 	bl	8004294 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001858:	205a      	movs	r0, #90	; 0x5a
 800185a:	f002 fd37 	bl	80042cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800185e:	bf00      	nop
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	4002b000 	.word	0x4002b000
 800186c:	40023800 	.word	0x40023800

08001870 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	; 0x28
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a1b      	ldr	r2, [pc, #108]	; (80018fc <HAL_DSI_MspInit+0x8c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d12f      	bne.n	80018f2 <HAL_DSI_MspInit+0x82>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001892:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <HAL_DSI_MspInit+0x90>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001896:	4a1a      	ldr	r2, [pc, #104]	; (8001900 <HAL_DSI_MspInit+0x90>)
 8001898:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800189c:	6453      	str	r3, [r2, #68]	; 0x44
 800189e:	4b18      	ldr	r3, [pc, #96]	; (8001900 <HAL_DSI_MspInit+0x90>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <HAL_DSI_MspInit+0x90>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a14      	ldr	r2, [pc, #80]	; (8001900 <HAL_DSI_MspInit+0x90>)
 80018b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_DSI_MspInit+0x90>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSIHOST_TE_Pin;
 80018c2:	2304      	movs	r3, #4
 80018c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80018d2:	230d      	movs	r3, #13
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	4619      	mov	r1, r3
 80018dc:	4809      	ldr	r0, [pc, #36]	; (8001904 <HAL_DSI_MspInit+0x94>)
 80018de:	f004 f83d 	bl	800595c <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 80018e2:	2200      	movs	r2, #0
 80018e4:	2105      	movs	r1, #5
 80018e6:	2062      	movs	r0, #98	; 0x62
 80018e8:	f002 fcd4 	bl	8004294 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 80018ec:	2062      	movs	r0, #98	; 0x62
 80018ee:	f002 fced 	bl	80042cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 80018f2:	bf00      	nop
 80018f4:	3728      	adds	r7, #40	; 0x28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40016c00 	.word	0x40016c00
 8001900:	40023800 	.word	0x40023800
 8001904:	40022400 	.word	0x40022400

08001908 <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a09      	ldr	r2, [pc, #36]	; (800193c <HAL_DSI_MspDeInit+0x34>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d10c      	bne.n	8001934 <HAL_DSI_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 800191a:	4b09      	ldr	r3, [pc, #36]	; (8001940 <HAL_DSI_MspDeInit+0x38>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	4a08      	ldr	r2, [pc, #32]	; (8001940 <HAL_DSI_MspDeInit+0x38>)
 8001920:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001924:	6453      	str	r3, [r2, #68]	; 0x44

    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    HAL_GPIO_DeInit(DSIHOST_TE_GPIO_Port, DSIHOST_TE_Pin);
 8001926:	2104      	movs	r1, #4
 8001928:	4806      	ldr	r0, [pc, #24]	; (8001944 <HAL_DSI_MspDeInit+0x3c>)
 800192a:	f004 f9c3 	bl	8005cb4 <HAL_GPIO_DeInit>

    /* DSI interrupt DeInit */
    HAL_NVIC_DisableIRQ(DSI_IRQn);
 800192e:	2062      	movs	r0, #98	; 0x62
 8001930:	f002 fcda 	bl	80042e8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40016c00 	.word	0x40016c00
 8001940:	40023800 	.word	0x40023800
 8001944:	40022400 	.word	0x40022400

08001948 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b0b0      	sub	sp, #192	; 0xc0
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	2290      	movs	r2, #144	; 0x90
 8001966:	2100      	movs	r1, #0
 8001968:	4618      	mov	r0, r3
 800196a:	f00c f89d 	bl	800daa8 <memset>
  if(hi2c->Instance==I2C1)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a55      	ldr	r2, [pc, #340]	; (8001ac8 <HAL_I2C_MspInit+0x180>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d13e      	bne.n	80019f6 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001978:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800197c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800197e:	2300      	movs	r3, #0
 8001980:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	4618      	mov	r0, r3
 800198a:	f007 f8dd 	bl	8008b48 <HAL_RCCEx_PeriphCLKConfig>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001994:	f7ff ff18 	bl	80017c8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001998:	4b4c      	ldr	r3, [pc, #304]	; (8001acc <HAL_I2C_MspInit+0x184>)
 800199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199c:	4a4b      	ldr	r2, [pc, #300]	; (8001acc <HAL_I2C_MspInit+0x184>)
 800199e:	f043 0302 	orr.w	r3, r3, #2
 80019a2:	6313      	str	r3, [r2, #48]	; 0x30
 80019a4:	4b49      	ldr	r3, [pc, #292]	; (8001acc <HAL_I2C_MspInit+0x184>)
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	61bb      	str	r3, [r7, #24]
 80019ae:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80019b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019b8:	2312      	movs	r3, #18
 80019ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019be:	2301      	movs	r3, #1
 80019c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c4:	2300      	movs	r3, #0
 80019c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019ca:	2304      	movs	r3, #4
 80019cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80019d4:	4619      	mov	r1, r3
 80019d6:	483e      	ldr	r0, [pc, #248]	; (8001ad0 <HAL_I2C_MspInit+0x188>)
 80019d8:	f003 ffc0 	bl	800595c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019dc:	4b3b      	ldr	r3, [pc, #236]	; (8001acc <HAL_I2C_MspInit+0x184>)
 80019de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e0:	4a3a      	ldr	r2, [pc, #232]	; (8001acc <HAL_I2C_MspInit+0x184>)
 80019e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019e6:	6413      	str	r3, [r2, #64]	; 0x40
 80019e8:	4b38      	ldr	r3, [pc, #224]	; (8001acc <HAL_I2C_MspInit+0x184>)
 80019ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80019f4:	e063      	b.n	8001abe <HAL_I2C_MspInit+0x176>
  else if(hi2c->Instance==I2C4)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a36      	ldr	r2, [pc, #216]	; (8001ad4 <HAL_I2C_MspInit+0x18c>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d15e      	bne.n	8001abe <HAL_I2C_MspInit+0x176>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001a00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a04:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a0c:	f107 031c 	add.w	r3, r7, #28
 8001a10:	4618      	mov	r0, r3
 8001a12:	f007 f899 	bl	8008b48 <HAL_RCCEx_PeriphCLKConfig>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8001a1c:	f7ff fed4 	bl	80017c8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a20:	4b2a      	ldr	r3, [pc, #168]	; (8001acc <HAL_I2C_MspInit+0x184>)
 8001a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a24:	4a29      	ldr	r2, [pc, #164]	; (8001acc <HAL_I2C_MspInit+0x184>)
 8001a26:	f043 0302 	orr.w	r3, r3, #2
 8001a2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2c:	4b27      	ldr	r3, [pc, #156]	; (8001acc <HAL_I2C_MspInit+0x184>)
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a38:	4b24      	ldr	r3, [pc, #144]	; (8001acc <HAL_I2C_MspInit+0x184>)
 8001a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3c:	4a23      	ldr	r2, [pc, #140]	; (8001acc <HAL_I2C_MspInit+0x184>)
 8001a3e:	f043 0308 	orr.w	r3, r3, #8
 8001a42:	6313      	str	r3, [r2, #48]	; 0x30
 8001a44:	4b21      	ldr	r3, [pc, #132]	; (8001acc <HAL_I2C_MspInit+0x184>)
 8001a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a48:	f003 0308 	and.w	r3, r3, #8
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AUDIO_SDA_Pin;
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a56:	2312      	movs	r3, #18
 8001a58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a62:	2303      	movs	r3, #3
 8001a64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8001a68:	230b      	movs	r3, #11
 8001a6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8001a6e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a72:	4619      	mov	r1, r3
 8001a74:	4816      	ldr	r0, [pc, #88]	; (8001ad0 <HAL_I2C_MspInit+0x188>)
 8001a76:	f003 ff71 	bl	800595c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AUDIO_SCL_Pin;
 8001a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a82:	2312      	movs	r3, #18
 8001a84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001a94:	2304      	movs	r3, #4
 8001a96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8001a9a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	480d      	ldr	r0, [pc, #52]	; (8001ad8 <HAL_I2C_MspInit+0x190>)
 8001aa2:	f003 ff5b 	bl	800595c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <HAL_I2C_MspInit+0x184>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	4a08      	ldr	r2, [pc, #32]	; (8001acc <HAL_I2C_MspInit+0x184>)
 8001aac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_I2C_MspInit+0x184>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
}
 8001abe:	bf00      	nop
 8001ac0:	37c0      	adds	r7, #192	; 0xc0
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40005400 	.word	0x40005400
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40020400 	.word	0x40020400
 8001ad4:	40006000 	.word	0x40006000
 8001ad8:	40020c00 	.word	0x40020c00

08001adc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a15      	ldr	r2, [pc, #84]	; (8001b40 <HAL_I2C_MspDeInit+0x64>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d110      	bne.n	8001b10 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <HAL_I2C_MspDeInit+0x68>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	4a14      	ldr	r2, [pc, #80]	; (8001b44 <HAL_I2C_MspDeInit+0x68>)
 8001af4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001af8:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8001afa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001afe:	4812      	ldr	r0, [pc, #72]	; (8001b48 <HAL_I2C_MspDeInit+0x6c>)
 8001b00:	f004 f8d8 	bl	8005cb4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8001b04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b08:	480f      	ldr	r0, [pc, #60]	; (8001b48 <HAL_I2C_MspDeInit+0x6c>)
 8001b0a:	f004 f8d3 	bl	8005cb4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8001b0e:	e013      	b.n	8001b38 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C4)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a0d      	ldr	r2, [pc, #52]	; (8001b4c <HAL_I2C_MspDeInit+0x70>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d10e      	bne.n	8001b38 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C4_CLK_DISABLE();
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <HAL_I2C_MspDeInit+0x68>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	4a09      	ldr	r2, [pc, #36]	; (8001b44 <HAL_I2C_MspDeInit+0x68>)
 8001b20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b24:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(AUDIO_SDA_GPIO_Port, AUDIO_SDA_Pin);
 8001b26:	2180      	movs	r1, #128	; 0x80
 8001b28:	4807      	ldr	r0, [pc, #28]	; (8001b48 <HAL_I2C_MspDeInit+0x6c>)
 8001b2a:	f004 f8c3 	bl	8005cb4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(AUDIO_SCL_GPIO_Port, AUDIO_SCL_Pin);
 8001b2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b32:	4807      	ldr	r0, [pc, #28]	; (8001b50 <HAL_I2C_MspDeInit+0x74>)
 8001b34:	f004 f8be 	bl	8005cb4 <HAL_GPIO_DeInit>
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40005400 	.word	0x40005400
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40020400 	.word	0x40020400
 8001b4c:	40006000 	.word	0x40006000
 8001b50:	40020c00 	.word	0x40020c00

08001b54 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0d      	ldr	r2, [pc, #52]	; (8001b98 <HAL_LTDC_MspInit+0x44>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d113      	bne.n	8001b8e <HAL_LTDC_MspInit+0x3a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001b66:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <HAL_LTDC_MspInit+0x48>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	4a0c      	ldr	r2, [pc, #48]	; (8001b9c <HAL_LTDC_MspInit+0x48>)
 8001b6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b70:	6453      	str	r3, [r2, #68]	; 0x44
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <HAL_LTDC_MspInit+0x48>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2105      	movs	r1, #5
 8001b82:	2058      	movs	r0, #88	; 0x58
 8001b84:	f002 fb86 	bl	8004294 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001b88:	2058      	movs	r0, #88	; 0x58
 8001b8a:	f002 fb9f 	bl	80042cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001b8e:	bf00      	nop
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40016800 	.word	0x40016800
 8001b9c:	40023800 	.word	0x40023800

08001ba0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a1c      	ldr	r2, [pc, #112]	; (8001c20 <HAL_TIM_Base_MspInit+0x80>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d10c      	bne.n	8001bcc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bb2:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <HAL_TIM_Base_MspInit+0x84>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	4a1b      	ldr	r2, [pc, #108]	; (8001c24 <HAL_TIM_Base_MspInit+0x84>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bbe:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <HAL_TIM_Base_MspInit+0x84>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001bca:	e022      	b.n	8001c12 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM10)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a15      	ldr	r2, [pc, #84]	; (8001c28 <HAL_TIM_Base_MspInit+0x88>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d10c      	bne.n	8001bf0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001bd6:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <HAL_TIM_Base_MspInit+0x84>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	4a12      	ldr	r2, [pc, #72]	; (8001c24 <HAL_TIM_Base_MspInit+0x84>)
 8001bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be0:	6453      	str	r3, [r2, #68]	; 0x44
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <HAL_TIM_Base_MspInit+0x84>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]
}
 8001bee:	e010      	b.n	8001c12 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM11)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0d      	ldr	r2, [pc, #52]	; (8001c2c <HAL_TIM_Base_MspInit+0x8c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d10b      	bne.n	8001c12 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_TIM_Base_MspInit+0x84>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	4a09      	ldr	r2, [pc, #36]	; (8001c24 <HAL_TIM_Base_MspInit+0x84>)
 8001c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c04:	6453      	str	r3, [r2, #68]	; 0x44
 8001c06:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <HAL_TIM_Base_MspInit+0x84>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
}
 8001c12:	bf00      	nop
 8001c14:	371c      	adds	r7, #28
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40010000 	.word	0x40010000
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40014400 	.word	0x40014400
 8001c2c:	40014800 	.word	0x40014800

08001c30 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001c44:	4b3b      	ldr	r3, [pc, #236]	; (8001d34 <HAL_FMC_MspInit+0x104>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d16f      	bne.n	8001d2c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001c4c:	4b39      	ldr	r3, [pc, #228]	; (8001d34 <HAL_FMC_MspInit+0x104>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001c52:	4b39      	ldr	r3, [pc, #228]	; (8001d38 <HAL_FMC_MspInit+0x108>)
 8001c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c56:	4a38      	ldr	r2, [pc, #224]	; (8001d38 <HAL_FMC_MspInit+0x108>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6393      	str	r3, [r2, #56]	; 0x38
 8001c5e:	4b36      	ldr	r3, [pc, #216]	; (8001d38 <HAL_FMC_MspInit+0x108>)
 8001c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8001c6a:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001c6e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c70:	2302      	movs	r3, #2
 8001c72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c7c:	230c      	movs	r3, #12
 8001c7e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	4619      	mov	r1, r3
 8001c84:	482d      	ldr	r0, [pc, #180]	; (8001d3c <HAL_FMC_MspInit+0x10c>)
 8001c86:	f003 fe69 	bl	800595c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin
 8001c8a:	f248 1337 	movw	r3, #33079	; 0x8137
 8001c8e:	607b      	str	r3, [r7, #4]
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c90:	2302      	movs	r3, #2
 8001c92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c9c:	230c      	movs	r3, #12
 8001c9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4826      	ldr	r0, [pc, #152]	; (8001d40 <HAL_FMC_MspInit+0x110>)
 8001ca6:	f003 fe59 	bl	800595c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8001caa:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001cae:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cbc:	230c      	movs	r3, #12
 8001cbe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	481f      	ldr	r0, [pc, #124]	; (8001d44 <HAL_FMC_MspInit+0x114>)
 8001cc6:	f003 fe49 	bl	800595c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8001cca:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001cce:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cdc:	230c      	movs	r3, #12
 8001cde:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4818      	ldr	r0, [pc, #96]	; (8001d48 <HAL_FMC_MspInit+0x118>)
 8001ce6:	f003 fe39 	bl	800595c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8001cea:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001cee:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cfc:	230c      	movs	r3, #12
 8001cfe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	4619      	mov	r1, r3
 8001d04:	4811      	ldr	r0, [pc, #68]	; (8001d4c <HAL_FMC_MspInit+0x11c>)
 8001d06:	f003 fe29 	bl	800595c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin
 8001d0a:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8001d0e:	607b      	str	r3, [r7, #4]
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d10:	2302      	movs	r3, #2
 8001d12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d1c:	230c      	movs	r3, #12
 8001d1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	4619      	mov	r1, r3
 8001d24:	480a      	ldr	r0, [pc, #40]	; (8001d50 <HAL_FMC_MspInit+0x120>)
 8001d26:	f003 fe19 	bl	800595c <HAL_GPIO_Init>
 8001d2a:	e000      	b.n	8001d2e <HAL_FMC_MspInit+0xfe>
    return;
 8001d2c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	200007c0 	.word	0x200007c0
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40021800 	.word	0x40021800
 8001d44:	40020c00 	.word	0x40020c00
 8001d48:	40022000 	.word	0x40022000
 8001d4c:	40021400 	.word	0x40021400
 8001d50:	40021c00 	.word	0x40021c00

08001d54 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001d5c:	f7ff ff68 	bl	8001c30 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001d60:	bf00      	nop
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08e      	sub	sp, #56	; 0x38
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d78:	4b33      	ldr	r3, [pc, #204]	; (8001e48 <HAL_InitTick+0xe0>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	4a32      	ldr	r2, [pc, #200]	; (8001e48 <HAL_InitTick+0xe0>)
 8001d7e:	f043 0310 	orr.w	r3, r3, #16
 8001d82:	6413      	str	r3, [r2, #64]	; 0x40
 8001d84:	4b30      	ldr	r3, [pc, #192]	; (8001e48 <HAL_InitTick+0xe0>)
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	f003 0310 	and.w	r3, r3, #16
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d90:	f107 0210 	add.w	r2, r7, #16
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	4611      	mov	r1, r2
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f006 fea2 	bl	8008ae4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001da0:	6a3b      	ldr	r3, [r7, #32]
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d103      	bne.n	8001db2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001daa:	f006 fe87 	bl	8008abc <HAL_RCC_GetPCLK1Freq>
 8001dae:	6378      	str	r0, [r7, #52]	; 0x34
 8001db0:	e004      	b.n	8001dbc <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001db2:	f006 fe83 	bl	8008abc <HAL_RCC_GetPCLK1Freq>
 8001db6:	4603      	mov	r3, r0
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dbe:	4a23      	ldr	r2, [pc, #140]	; (8001e4c <HAL_InitTick+0xe4>)
 8001dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc4:	0c9b      	lsrs	r3, r3, #18
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001dca:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <HAL_InitTick+0xe8>)
 8001dcc:	4a21      	ldr	r2, [pc, #132]	; (8001e54 <HAL_InitTick+0xec>)
 8001dce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001dd0:	4b1f      	ldr	r3, [pc, #124]	; (8001e50 <HAL_InitTick+0xe8>)
 8001dd2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dd6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001dd8:	4a1d      	ldr	r2, [pc, #116]	; (8001e50 <HAL_InitTick+0xe8>)
 8001dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ddc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001dde:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <HAL_InitTick+0xe8>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de4:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <HAL_InitTick+0xe8>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dea:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <HAL_InitTick+0xe8>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001df0:	4817      	ldr	r0, [pc, #92]	; (8001e50 <HAL_InitTick+0xe8>)
 8001df2:	f007 fb62 	bl	80094ba <HAL_TIM_Base_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001dfc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d11b      	bne.n	8001e3c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001e04:	4812      	ldr	r0, [pc, #72]	; (8001e50 <HAL_InitTick+0xe8>)
 8001e06:	f007 fbaf 	bl	8009568 <HAL_TIM_Base_Start_IT>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001e10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d111      	bne.n	8001e3c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e18:	2036      	movs	r0, #54	; 0x36
 8001e1a:	f002 fa57 	bl	80042cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b0f      	cmp	r3, #15
 8001e22:	d808      	bhi.n	8001e36 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001e24:	2200      	movs	r2, #0
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	2036      	movs	r0, #54	; 0x36
 8001e2a:	f002 fa33 	bl	8004294 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <HAL_InitTick+0xf0>)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6013      	str	r3, [r2, #0]
 8001e34:	e002      	b.n	8001e3c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3738      	adds	r7, #56	; 0x38
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	431bde83 	.word	0x431bde83
 8001e50:	200007c4 	.word	0x200007c4
 8001e54:	40001000 	.word	0x40001000
 8001e58:	20000048 	.word	0x20000048

08001e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <NMI_Handler+0x4>

08001e62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e66:	e7fe      	b.n	8001e66 <HardFault_Handler+0x4>

08001e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <MemManage_Handler+0x4>

08001e6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e72:	e7fe      	b.n	8001e72 <BusFault_Handler+0x4>

08001e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <UsageFault_Handler+0x4>

08001e7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr

08001e88 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e8c:	4802      	ldr	r0, [pc, #8]	; (8001e98 <TIM6_DAC_IRQHandler+0x10>)
 8001e8e:	f007 fbe3 	bl	8009658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	200007c4 	.word	0x200007c4

08001e9c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <OTG_HS_IRQHandler+0x10>)
 8001ea2:	f005 f9a1 	bl	80071e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000234 	.word	0x20000234

08001eb0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <LTDC_IRQHandler+0x10>)
 8001eb6:	f004 fead 	bl	8006c14 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	2000018c 	.word	0x2000018c

08001ec4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001ec8:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <DMA2D_IRQHandler+0x10>)
 8001eca:	f002 fd47 	bl	800495c <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	200000d4 	.word	0x200000d4

08001ed8 <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 8001edc:	4802      	ldr	r0, [pc, #8]	; (8001ee8 <CEC_IRQHandler+0x10>)
 8001ede:	f002 f801 	bl	8003ee4 <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000148 	.word	0x20000148

08001eec <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001ef0:	4802      	ldr	r0, [pc, #8]	; (8001efc <DSI_IRQHandler+0x10>)
 8001ef2:	f003 f955 	bl	80051a0 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	2000012c 	.word	0x2000012c

08001f00 <EXTI0_IRQHandler>:

extern int APP_PAGE;
#define REFRESH_RATE 300
uint32_t lastClick = 0;

void EXTI0_IRQHandler() {
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0)) {
 8001f04:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <EXTI0_IRQHandler+0x64>)
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d023      	beq.n	8001f58 <EXTI0_IRQHandler+0x58>
		if (HAL_GetTick() - lastClick > REFRESH_RATE) {
 8001f10:	f001 ffb8 	bl	8003e84 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <EXTI0_IRQHandler+0x68>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001f20:	d91a      	bls.n	8001f58 <EXTI0_IRQHandler+0x58>
			APP_PAGE++;
 8001f22:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <EXTI0_IRQHandler+0x6c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	3301      	adds	r3, #1
 8001f28:	4a10      	ldr	r2, [pc, #64]	; (8001f6c <EXTI0_IRQHandler+0x6c>)
 8001f2a:	6013      	str	r3, [r2, #0]
			if (APP_PAGE > 2) APP_PAGE = APP_PAGE % 3;
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <EXTI0_IRQHandler+0x6c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	dd0c      	ble.n	8001f4e <EXTI0_IRQHandler+0x4e>
 8001f34:	4b0d      	ldr	r3, [pc, #52]	; (8001f6c <EXTI0_IRQHandler+0x6c>)
 8001f36:	6819      	ldr	r1, [r3, #0]
 8001f38:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <EXTI0_IRQHandler+0x70>)
 8001f3a:	fb83 3201 	smull	r3, r2, r3, r1
 8001f3e:	17cb      	asrs	r3, r1, #31
 8001f40:	1ad2      	subs	r2, r2, r3
 8001f42:	4613      	mov	r3, r2
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	4413      	add	r3, r2
 8001f48:	1aca      	subs	r2, r1, r3
 8001f4a:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <EXTI0_IRQHandler+0x6c>)
 8001f4c:	601a      	str	r2, [r3, #0]
			lastClick = HAL_GetTick();
 8001f4e:	f001 ff99 	bl	8003e84 <HAL_GetTick>
 8001f52:	4603      	mov	r3, r0
 8001f54:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <EXTI0_IRQHandler+0x68>)
 8001f56:	6013      	str	r3, [r2, #0]
		}
	}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8001f58:	4b02      	ldr	r3, [pc, #8]	; (8001f64 <EXTI0_IRQHandler+0x64>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	615a      	str	r2, [r3, #20]
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40013c00 	.word	0x40013c00
 8001f68:	20000810 	.word	0x20000810
 8001f6c:	20000760 	.word	0x20000760
 8001f70:	55555556 	.word	0x55555556

08001f74 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0

  HAL_GPIO_EXTI_IRQHandler(TS_INT_PIN); // Reset the GPIO_PIN_13 Interrupt - Touch Screen
 8001f78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f7c:	f003 ffc0 	bl	8005f00 <HAL_GPIO_EXTI_IRQHandler>

}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f8c:	4a14      	ldr	r2, [pc, #80]	; (8001fe0 <_sbrk+0x5c>)
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <_sbrk+0x60>)
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f98:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d102      	bne.n	8001fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <_sbrk+0x64>)
 8001fa2:	4a12      	ldr	r2, [pc, #72]	; (8001fec <_sbrk+0x68>)
 8001fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <_sbrk+0x64>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d207      	bcs.n	8001fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fb4:	f00b fd38 	bl	800da28 <__errno>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	220c      	movs	r2, #12
 8001fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fc2:	e009      	b.n	8001fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <_sbrk+0x64>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fca:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <_sbrk+0x64>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	4a05      	ldr	r2, [pc, #20]	; (8001fe8 <_sbrk+0x64>)
 8001fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20080000 	.word	0x20080000
 8001fe4:	00000400 	.word	0x00000400
 8001fe8:	20000814 	.word	0x20000814
 8001fec:	200098e8 	.word	0x200098e8

08001ff0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <SystemInit+0x20>)
 8001ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffa:	4a05      	ldr	r2, [pc, #20]	; (8002010 <SystemInit+0x20>)
 8001ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8002014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800204c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002018:	480d      	ldr	r0, [pc, #52]	; (8002050 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800201a:	490e      	ldr	r1, [pc, #56]	; (8002054 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800201c:	4a0e      	ldr	r2, [pc, #56]	; (8002058 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800201e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002020:	e002      	b.n	8002028 <LoopCopyDataInit>

08002022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002026:	3304      	adds	r3, #4

08002028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800202a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800202c:	d3f9      	bcc.n	8002022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800202e:	4a0b      	ldr	r2, [pc, #44]	; (800205c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002030:	4c0b      	ldr	r4, [pc, #44]	; (8002060 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002034:	e001      	b.n	800203a <LoopFillZerobss>

08002036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002038:	3204      	adds	r2, #4

0800203a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800203a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800203c:	d3fb      	bcc.n	8002036 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800203e:	f7ff ffd7 	bl	8001ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002042:	f00b fcf7 	bl	800da34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002046:	f7ff fa4d 	bl	80014e4 <main>
  bx  lr    
 800204a:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 800204c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002054:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8002058:	08010204 	.word	0x08010204
  ldr r2, =_sbss
 800205c:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8002060:	200098e4 	.word	0x200098e4

08002064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002064:	e7fe      	b.n	8002064 <ADC_IRQHandler>
	...

08002068 <ft6x06_Init>:
  *         from MCU to FT6206 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Init(uint16_t DeviceAddr)
{  
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = ft6x06_GetInstance(DeviceAddr);
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	4618      	mov	r0, r3
 8002076:	f000 f90d 	bl	8002294 <ft6x06_GetInstance>
 800207a:	4603      	mov	r3, r0
 800207c:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 800207e:	7bfb      	ldrb	r3, [r7, #15]
 8002080:	2bff      	cmp	r3, #255	; 0xff
 8002082:	d10e      	bne.n	80020a2 <ft6x06_Init+0x3a>
  {
    /* Look for empty instance */
    empty = ft6x06_GetInstance(0);
 8002084:	2000      	movs	r0, #0
 8002086:	f000 f905 	bl	8002294 <ft6x06_GetInstance>
 800208a:	4603      	mov	r3, r0
 800208c:	73bb      	strb	r3, [r7, #14]
    
    if(empty < FT6x06_MAX_INSTANCE)
 800208e:	7bbb      	ldrb	r3, [r7, #14]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d806      	bhi.n	80020a2 <ft6x06_Init+0x3a>
    {
      /* Register the current device instance */
      ft6x06[empty] = DeviceAddr;
 8002094:	7bbb      	ldrb	r3, [r7, #14]
 8002096:	88fa      	ldrh	r2, [r7, #6]
 8002098:	b2d1      	uxtb	r1, r2
 800209a:	4a04      	ldr	r2, [pc, #16]	; (80020ac <ft6x06_Init+0x44>)
 800209c:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      TS_IO_Init(); 
 800209e:	f000 fcd7 	bl	8002a50 <TS_IO_Init>
    }
  }
}
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000818 	.word	0x20000818

080020b0 <ft6x06_Reset>:
  *         @note : Not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr

080020c6 <ft6x06_ReadID>:
  *         able to read the FT6206 device ID, and verify this is a FT6206.
  * @param  DeviceAddr: I2C FT6x06 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft6x06_ReadID(uint16_t DeviceAddr)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	4603      	mov	r3, r0
 80020ce:	80fb      	strh	r3, [r7, #6]
  /* Initialize I2C link if needed */
  TS_IO_Init();
 80020d0:	f000 fcbe 	bl	8002a50 <TS_IO_Init>
  
  /* Return the device ID value */
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 80020d4:	88fb      	ldrh	r3, [r7, #6]
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	21a8      	movs	r1, #168	; 0xa8
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 fcdc 	bl	8002a98 <TS_IO_Read>
 80020e0:	4603      	mov	r3, r0
 80020e2:	b29b      	uxth	r3, r3
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <ft6x06_TS_Start>:
  *         the touch screen).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft6x06_TS_Start(uint16_t DeviceAddr)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	80fb      	strh	r3, [r7, #6]
  /* Hw Calibration sequence start : should be done once after each power up */
  /* This is called internal calibration of the touch screen                 */
  ft6x06_TS_Calibration(DeviceAddr);
#endif
  /* Minimum static configuration of FT6206 */
  ft6x06_TS_Configure(DeviceAddr);
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 f8bc 	bl	8002276 <ft6x06_TS_Configure>

  /* By default set FT6206 IC in Polling mode : no INT generation on FT6206 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft6x06_TS_DisableIT(DeviceAddr);
 80020fe:	88fb      	ldrh	r3, [r7, #6]
 8002100:	4618      	mov	r0, r3
 8002102:	f000 f88d 	bl	8002220 <ft6x06_TS_DisableIT>
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <ft6x06_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft6x06_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT6206_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 800211e:	88fb      	ldrh	r3, [r7, #6]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2102      	movs	r1, #2
 8002124:	4618      	mov	r0, r3
 8002126:	f000 fcb7 	bl	8002a98 <TS_IO_Read>
 800212a:	4603      	mov	r3, r0
 800212c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT6206_TD_STAT_MASK;
 800212e:	7bfb      	ldrb	r3, [r7, #15]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	b2db      	uxtb	r3, r3
 8002138:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <ft6x06_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft6x06 driver internal global : current number of active touches */
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8002146:	7bfb      	ldrb	r3, [r7, #15]
 8002148:	b2da      	uxtb	r2, r3
 800214a:	4b05      	ldr	r3, [pc, #20]	; (8002160 <ft6x06_TS_DetectTouch+0x50>)
 800214c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft6x06_handle.currActiveTouchIdx = 0;
 800214e:	4b04      	ldr	r3, [pc, #16]	; (8002160 <ft6x06_TS_DetectTouch+0x50>)
 8002150:	2200      	movs	r2, #0
 8002152:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	b2db      	uxtb	r3, r3
}
 8002158:	4618      	mov	r0, r3
 800215a:	3710      	adds	r7, #16
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	2000081c 	.word	0x2000081c

08002164 <ft6x06_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft6x06_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	81fb      	strh	r3, [r7, #14]
  uint8_t regAddress = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	75fb      	strb	r3, [r7, #23]
  uint8_t  dataxy[4];
  
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8002176:	4b1f      	ldr	r3, [pc, #124]	; (80021f4 <ft6x06_TS_GetXY+0x90>)
 8002178:	789a      	ldrb	r2, [r3, #2]
 800217a:	4b1e      	ldr	r3, [pc, #120]	; (80021f4 <ft6x06_TS_GetXY+0x90>)
 800217c:	785b      	ldrb	r3, [r3, #1]
 800217e:	429a      	cmp	r2, r3
 8002180:	d234      	bcs.n	80021ec <ft6x06_TS_GetXY+0x88>
  {
    switch(ft6x06_handle.currActiveTouchIdx)
 8002182:	4b1c      	ldr	r3, [pc, #112]	; (80021f4 <ft6x06_TS_GetXY+0x90>)
 8002184:	789b      	ldrb	r3, [r3, #2]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d002      	beq.n	8002190 <ft6x06_TS_GetXY+0x2c>
 800218a:	2b01      	cmp	r3, #1
 800218c:	d003      	beq.n	8002196 <ft6x06_TS_GetXY+0x32>
    case 1 :
      regAddress = FT6206_P2_XH_REG; 
      break;

    default :
      break;
 800218e:	e005      	b.n	800219c <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P1_XH_REG; 
 8002190:	2303      	movs	r3, #3
 8002192:	75fb      	strb	r3, [r7, #23]
      break;
 8002194:	e002      	b.n	800219c <ft6x06_TS_GetXY+0x38>
      regAddress = FT6206_P2_XH_REG; 
 8002196:	2309      	movs	r3, #9
 8002198:	75fb      	strb	r3, [r7, #23]
      break;
 800219a:	bf00      	nop
    }
    
    /* Read X and Y positions */
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 800219c:	89fb      	ldrh	r3, [r7, #14]
 800219e:	b2d8      	uxtb	r0, r3
 80021a0:	f107 0210 	add.w	r2, r7, #16
 80021a4:	7df9      	ldrb	r1, [r7, #23]
 80021a6:	2304      	movs	r3, #4
 80021a8:	f000 fc94 	bl	8002ad4 <TS_IO_ReadMultiple>

    /* Send back ready X position to caller */
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 80021ac:	7c3b      	ldrb	r3, [r7, #16]
 80021ae:	021b      	lsls	r3, r3, #8
 80021b0:	b21b      	sxth	r3, r3
 80021b2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80021b6:	b21a      	sxth	r2, r3
 80021b8:	7c7b      	ldrb	r3, [r7, #17]
 80021ba:	b21b      	sxth	r3, r3
 80021bc:	4313      	orrs	r3, r2
 80021be:	b21b      	sxth	r3, r3
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	801a      	strh	r2, [r3, #0]
    
    /* Send back ready Y position to caller */
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 80021c6:	7cbb      	ldrb	r3, [r7, #18]
 80021c8:	021b      	lsls	r3, r3, #8
 80021ca:	b21b      	sxth	r3, r3
 80021cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80021d0:	b21a      	sxth	r2, r3
 80021d2:	7cfb      	ldrb	r3, [r7, #19]
 80021d4:	b21b      	sxth	r3, r3
 80021d6:	4313      	orrs	r3, r2
 80021d8:	b21b      	sxth	r3, r3
 80021da:	b29a      	uxth	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	801a      	strh	r2, [r3, #0]
    
    ft6x06_handle.currActiveTouchIdx++;
 80021e0:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <ft6x06_TS_GetXY+0x90>)
 80021e2:	789b      	ldrb	r3, [r3, #2]
 80021e4:	3301      	adds	r3, #1
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	4b02      	ldr	r3, [pc, #8]	; (80021f4 <ft6x06_TS_GetXY+0x90>)
 80021ea:	709a      	strb	r2, [r3, #2]
  }
}
 80021ec:	bf00      	nop
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	2000081c 	.word	0x2000081c

080021f8 <ft6x06_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_EnableIT(uint16_t DeviceAddr)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_TRIGGER & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 8002206:	2301      	movs	r3, #1
 8002208:	73fb      	strb	r3, [r7, #15]
  
  /* Set interrupt trigger mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 800220a:	88fb      	ldrh	r3, [r7, #6]
 800220c:	b2db      	uxtb	r3, r3
 800220e:	7bfa      	ldrb	r2, [r7, #15]
 8002210:	21a4      	movs	r1, #164	; 0xa4
 8002212:	4618      	mov	r0, r3
 8002214:	f000 fc26 	bl	8002a64 <TS_IO_Write>
}
 8002218:	bf00      	nop
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <ft6x06_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT6206).
  * @retval None
  */
void ft6x06_TS_DisableIT(uint16_t DeviceAddr)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	73fb      	strb	r3, [r7, #15]
  regValue = (FT6206_G_MODE_INTERRUPT_POLLING & (FT6206_G_MODE_INTERRUPT_MASK >> FT6206_G_MODE_INTERRUPT_SHIFT)) << FT6206_G_MODE_INTERRUPT_SHIFT;
 800222e:	2300      	movs	r3, #0
 8002230:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT6206_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8002232:	88fb      	ldrh	r3, [r7, #6]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	7bfa      	ldrb	r2, [r7, #15]
 8002238:	21a4      	movs	r1, #164	; 0xa4
 800223a:	4618      	mov	r0, r3
 800223c:	f000 fc12 	bl	8002a64 <TS_IO_Write>
}
 8002240:	bf00      	nop
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <ft6x06_TS_ITStatus>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <ft6x06_TS_ClearIT>:
  *         @note : This feature is not applicable to FT6206.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT6206).
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT6206 */
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <ft6x06_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT6206 Device address for communication on I2C Bus.
  * @retval Status FT6206_STATUS_OK or FT6206_STATUS_NOT_OK.
  */
static uint32_t ft6x06_TS_Configure(uint16_t DeviceAddr)
{
 8002276:	b480      	push	{r7}
 8002278:	b085      	sub	sp, #20
 800227a:	af00      	add	r7, sp, #0
 800227c:	4603      	mov	r3, r0
 800227e:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT6206_STATUS_OK;
 8002280:	2300      	movs	r3, #0
 8002282:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT6206 */

  return(status);
 8002284:	68fb      	ldr	r3, [r7, #12]
}
 8002286:	4618      	mov	r0, r3
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
	...

08002294 <ft6x06_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 80022a2:	2300      	movs	r3, #0
 80022a4:	73fb      	strb	r3, [r7, #15]
 80022a6:	e00b      	b.n	80022c0 <ft6x06_GetInstance+0x2c>
  {
    if(ft6x06[idx] == DeviceAddr)
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	4a0a      	ldr	r2, [pc, #40]	; (80022d4 <ft6x06_GetInstance+0x40>)
 80022ac:	5cd3      	ldrb	r3, [r2, r3]
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	88fa      	ldrh	r2, [r7, #6]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d101      	bne.n	80022ba <ft6x06_GetInstance+0x26>
    {
      return idx; 
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	e006      	b.n	80022c8 <ft6x06_GetInstance+0x34>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
 80022bc:	3301      	adds	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d9f0      	bls.n	80022a8 <ft6x06_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 80022c6:	23ff      	movs	r3, #255	; 0xff
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	20000818 	.word	0x20000818

080022d8 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80022e2:	49c1      	ldr	r1, [pc, #772]	; (80025e8 <OTM8009A_Init+0x310>)
 80022e4:	2000      	movs	r0, #0
 80022e6:	f001 f875 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 80022ea:	49c0      	ldr	r1, [pc, #768]	; (80025ec <OTM8009A_Init+0x314>)
 80022ec:	2003      	movs	r0, #3
 80022ee:	f001 f871 	bl	80033d4 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 80022f2:	49bf      	ldr	r1, [pc, #764]	; (80025f0 <OTM8009A_Init+0x318>)
 80022f4:	2000      	movs	r0, #0
 80022f6:	f001 f86d 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 80022fa:	49be      	ldr	r1, [pc, #760]	; (80025f4 <OTM8009A_Init+0x31c>)
 80022fc:	2002      	movs	r0, #2
 80022fe:	f001 f869 	bl	80033d4 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8002302:	49bb      	ldr	r1, [pc, #748]	; (80025f0 <OTM8009A_Init+0x318>)
 8002304:	2000      	movs	r0, #0
 8002306:	f001 f865 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 800230a:	49bb      	ldr	r1, [pc, #748]	; (80025f8 <OTM8009A_Init+0x320>)
 800230c:	2000      	movs	r0, #0
 800230e:	f001 f861 	bl	80033d4 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8002312:	200a      	movs	r0, #10
 8002314:	f000 fbfc 	bl	8002b10 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8002318:	49b8      	ldr	r1, [pc, #736]	; (80025fc <OTM8009A_Init+0x324>)
 800231a:	2000      	movs	r0, #0
 800231c:	f001 f85a 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8002320:	49b7      	ldr	r1, [pc, #732]	; (8002600 <OTM8009A_Init+0x328>)
 8002322:	2000      	movs	r0, #0
 8002324:	f001 f856 	bl	80033d4 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8002328:	200a      	movs	r0, #10
 800232a:	f000 fbf1 	bl	8002b10 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 800232e:	49b5      	ldr	r1, [pc, #724]	; (8002604 <OTM8009A_Init+0x32c>)
 8002330:	2000      	movs	r0, #0
 8002332:	f001 f84f 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8002336:	49b4      	ldr	r1, [pc, #720]	; (8002608 <OTM8009A_Init+0x330>)
 8002338:	2000      	movs	r0, #0
 800233a:	f001 f84b 	bl	80033d4 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 800233e:	49b3      	ldr	r1, [pc, #716]	; (800260c <OTM8009A_Init+0x334>)
 8002340:	2000      	movs	r0, #0
 8002342:	f001 f847 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8002346:	49b2      	ldr	r1, [pc, #712]	; (8002610 <OTM8009A_Init+0x338>)
 8002348:	2000      	movs	r0, #0
 800234a:	f001 f843 	bl	80033d4 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 800234e:	49b1      	ldr	r1, [pc, #708]	; (8002614 <OTM8009A_Init+0x33c>)
 8002350:	2000      	movs	r0, #0
 8002352:	f001 f83f 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8002356:	49b0      	ldr	r1, [pc, #704]	; (8002618 <OTM8009A_Init+0x340>)
 8002358:	2000      	movs	r0, #0
 800235a:	f001 f83b 	bl	80033d4 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800235e:	49a2      	ldr	r1, [pc, #648]	; (80025e8 <OTM8009A_Init+0x310>)
 8002360:	2000      	movs	r0, #0
 8002362:	f001 f837 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8002366:	49ad      	ldr	r1, [pc, #692]	; (800261c <OTM8009A_Init+0x344>)
 8002368:	2000      	movs	r0, #0
 800236a:	f001 f833 	bl	80033d4 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800236e:	49ac      	ldr	r1, [pc, #688]	; (8002620 <OTM8009A_Init+0x348>)
 8002370:	2000      	movs	r0, #0
 8002372:	f001 f82f 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8002376:	49ab      	ldr	r1, [pc, #684]	; (8002624 <OTM8009A_Init+0x34c>)
 8002378:	2000      	movs	r0, #0
 800237a:	f001 f82b 	bl	80033d4 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800237e:	49aa      	ldr	r1, [pc, #680]	; (8002628 <OTM8009A_Init+0x350>)
 8002380:	2000      	movs	r0, #0
 8002382:	f001 f827 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8002386:	49a9      	ldr	r1, [pc, #676]	; (800262c <OTM8009A_Init+0x354>)
 8002388:	2000      	movs	r0, #0
 800238a:	f001 f823 	bl	80033d4 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 800238e:	49a8      	ldr	r1, [pc, #672]	; (8002630 <OTM8009A_Init+0x358>)
 8002390:	2000      	movs	r0, #0
 8002392:	f001 f81f 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8002396:	49a7      	ldr	r1, [pc, #668]	; (8002634 <OTM8009A_Init+0x35c>)
 8002398:	2000      	movs	r0, #0
 800239a:	f001 f81b 	bl	80033d4 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 800239e:	49a6      	ldr	r1, [pc, #664]	; (8002638 <OTM8009A_Init+0x360>)
 80023a0:	2000      	movs	r0, #0
 80023a2:	f001 f817 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80023a6:	499a      	ldr	r1, [pc, #616]	; (8002610 <OTM8009A_Init+0x338>)
 80023a8:	2000      	movs	r0, #0
 80023aa:	f001 f813 	bl	80033d4 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80023ae:	498e      	ldr	r1, [pc, #568]	; (80025e8 <OTM8009A_Init+0x310>)
 80023b0:	2000      	movs	r0, #0
 80023b2:	f001 f80f 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 80023b6:	49a1      	ldr	r1, [pc, #644]	; (800263c <OTM8009A_Init+0x364>)
 80023b8:	2002      	movs	r0, #2
 80023ba:	f001 f80b 	bl	80033d4 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 80023be:	49a0      	ldr	r1, [pc, #640]	; (8002640 <OTM8009A_Init+0x368>)
 80023c0:	2000      	movs	r0, #0
 80023c2:	f001 f807 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 80023c6:	499f      	ldr	r1, [pc, #636]	; (8002644 <OTM8009A_Init+0x36c>)
 80023c8:	2000      	movs	r0, #0
 80023ca:	f001 f803 	bl	80033d4 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 80023ce:	499e      	ldr	r1, [pc, #632]	; (8002648 <OTM8009A_Init+0x370>)
 80023d0:	2000      	movs	r0, #0
 80023d2:	f000 ffff 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 80023d6:	499d      	ldr	r1, [pc, #628]	; (800264c <OTM8009A_Init+0x374>)
 80023d8:	2000      	movs	r0, #0
 80023da:	f000 fffb 	bl	80033d4 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 80023de:	499c      	ldr	r1, [pc, #624]	; (8002650 <OTM8009A_Init+0x378>)
 80023e0:	2000      	movs	r0, #0
 80023e2:	f000 fff7 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 80023e6:	499b      	ldr	r1, [pc, #620]	; (8002654 <OTM8009A_Init+0x37c>)
 80023e8:	2000      	movs	r0, #0
 80023ea:	f000 fff3 	bl	80033d4 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80023ee:	498c      	ldr	r1, [pc, #560]	; (8002620 <OTM8009A_Init+0x348>)
 80023f0:	2000      	movs	r0, #0
 80023f2:	f000 ffef 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 80023f6:	4998      	ldr	r1, [pc, #608]	; (8002658 <OTM8009A_Init+0x380>)
 80023f8:	2000      	movs	r0, #0
 80023fa:	f000 ffeb 	bl	80033d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 80023fe:	498a      	ldr	r1, [pc, #552]	; (8002628 <OTM8009A_Init+0x350>)
 8002400:	2000      	movs	r0, #0
 8002402:	f000 ffe7 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8002406:	4995      	ldr	r1, [pc, #596]	; (800265c <OTM8009A_Init+0x384>)
 8002408:	2000      	movs	r0, #0
 800240a:	f000 ffe3 	bl	80033d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 800240e:	4994      	ldr	r1, [pc, #592]	; (8002660 <OTM8009A_Init+0x388>)
 8002410:	2000      	movs	r0, #0
 8002412:	f000 ffdf 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8002416:	4993      	ldr	r1, [pc, #588]	; (8002664 <OTM8009A_Init+0x38c>)
 8002418:	2002      	movs	r0, #2
 800241a:	f000 ffdb 	bl	80033d4 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800241e:	4974      	ldr	r1, [pc, #464]	; (80025f0 <OTM8009A_Init+0x318>)
 8002420:	2000      	movs	r0, #0
 8002422:	f000 ffd7 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8002426:	4990      	ldr	r1, [pc, #576]	; (8002668 <OTM8009A_Init+0x390>)
 8002428:	2006      	movs	r0, #6
 800242a:	f000 ffd3 	bl	80033d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800242e:	498f      	ldr	r1, [pc, #572]	; (800266c <OTM8009A_Init+0x394>)
 8002430:	2000      	movs	r0, #0
 8002432:	f000 ffcf 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8002436:	498e      	ldr	r1, [pc, #568]	; (8002670 <OTM8009A_Init+0x398>)
 8002438:	200e      	movs	r0, #14
 800243a:	f000 ffcb 	bl	80033d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800243e:	498d      	ldr	r1, [pc, #564]	; (8002674 <OTM8009A_Init+0x39c>)
 8002440:	2000      	movs	r0, #0
 8002442:	f000 ffc7 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8002446:	498c      	ldr	r1, [pc, #560]	; (8002678 <OTM8009A_Init+0x3a0>)
 8002448:	200e      	movs	r0, #14
 800244a:	f000 ffc3 	bl	80033d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800244e:	498b      	ldr	r1, [pc, #556]	; (800267c <OTM8009A_Init+0x3a4>)
 8002450:	2000      	movs	r0, #0
 8002452:	f000 ffbf 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8002456:	498a      	ldr	r1, [pc, #552]	; (8002680 <OTM8009A_Init+0x3a8>)
 8002458:	200a      	movs	r0, #10
 800245a:	f000 ffbb 	bl	80033d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800245e:	4989      	ldr	r1, [pc, #548]	; (8002684 <OTM8009A_Init+0x3ac>)
 8002460:	2000      	movs	r0, #0
 8002462:	f000 ffb7 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8002466:	4988      	ldr	r1, [pc, #544]	; (8002688 <OTM8009A_Init+0x3b0>)
 8002468:	2000      	movs	r0, #0
 800246a:	f000 ffb3 	bl	80033d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800246e:	4960      	ldr	r1, [pc, #384]	; (80025f0 <OTM8009A_Init+0x318>)
 8002470:	2000      	movs	r0, #0
 8002472:	f000 ffaf 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8002476:	4985      	ldr	r1, [pc, #532]	; (800268c <OTM8009A_Init+0x3b4>)
 8002478:	200a      	movs	r0, #10
 800247a:	f000 ffab 	bl	80033d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 800247e:	4984      	ldr	r1, [pc, #528]	; (8002690 <OTM8009A_Init+0x3b8>)
 8002480:	2000      	movs	r0, #0
 8002482:	f000 ffa7 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8002486:	4983      	ldr	r1, [pc, #524]	; (8002694 <OTM8009A_Init+0x3bc>)
 8002488:	200f      	movs	r0, #15
 800248a:	f000 ffa3 	bl	80033d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800248e:	4977      	ldr	r1, [pc, #476]	; (800266c <OTM8009A_Init+0x394>)
 8002490:	2000      	movs	r0, #0
 8002492:	f000 ff9f 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8002496:	4980      	ldr	r1, [pc, #512]	; (8002698 <OTM8009A_Init+0x3c0>)
 8002498:	200f      	movs	r0, #15
 800249a:	f000 ff9b 	bl	80033d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800249e:	4975      	ldr	r1, [pc, #468]	; (8002674 <OTM8009A_Init+0x39c>)
 80024a0:	2000      	movs	r0, #0
 80024a2:	f000 ff97 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 80024a6:	497d      	ldr	r1, [pc, #500]	; (800269c <OTM8009A_Init+0x3c4>)
 80024a8:	200a      	movs	r0, #10
 80024aa:	f000 ff93 	bl	80033d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80024ae:	4973      	ldr	r1, [pc, #460]	; (800267c <OTM8009A_Init+0x3a4>)
 80024b0:	2000      	movs	r0, #0
 80024b2:	f000 ff8f 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 80024b6:	497a      	ldr	r1, [pc, #488]	; (80026a0 <OTM8009A_Init+0x3c8>)
 80024b8:	200f      	movs	r0, #15
 80024ba:	f000 ff8b 	bl	80033d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80024be:	4971      	ldr	r1, [pc, #452]	; (8002684 <OTM8009A_Init+0x3ac>)
 80024c0:	2000      	movs	r0, #0
 80024c2:	f000 ff87 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 80024c6:	4977      	ldr	r1, [pc, #476]	; (80026a4 <OTM8009A_Init+0x3cc>)
 80024c8:	200f      	movs	r0, #15
 80024ca:	f000 ff83 	bl	80033d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 80024ce:	4976      	ldr	r1, [pc, #472]	; (80026a8 <OTM8009A_Init+0x3d0>)
 80024d0:	2000      	movs	r0, #0
 80024d2:	f000 ff7f 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 80024d6:	4975      	ldr	r1, [pc, #468]	; (80026ac <OTM8009A_Init+0x3d4>)
 80024d8:	200a      	movs	r0, #10
 80024da:	f000 ff7b 	bl	80033d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 80024de:	4974      	ldr	r1, [pc, #464]	; (80026b0 <OTM8009A_Init+0x3d8>)
 80024e0:	2000      	movs	r0, #0
 80024e2:	f000 ff77 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 80024e6:	4973      	ldr	r1, [pc, #460]	; (80026b4 <OTM8009A_Init+0x3dc>)
 80024e8:	200a      	movs	r0, #10
 80024ea:	f000 ff73 	bl	80033d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80024ee:	4940      	ldr	r1, [pc, #256]	; (80025f0 <OTM8009A_Init+0x318>)
 80024f0:	2000      	movs	r0, #0
 80024f2:	f000 ff6f 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 80024f6:	4970      	ldr	r1, [pc, #448]	; (80026b8 <OTM8009A_Init+0x3e0>)
 80024f8:	200a      	movs	r0, #10
 80024fa:	f000 ff6b 	bl	80033d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80024fe:	4964      	ldr	r1, [pc, #400]	; (8002690 <OTM8009A_Init+0x3b8>)
 8002500:	2000      	movs	r0, #0
 8002502:	f000 ff67 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8002506:	496d      	ldr	r1, [pc, #436]	; (80026bc <OTM8009A_Init+0x3e4>)
 8002508:	200f      	movs	r0, #15
 800250a:	f000 ff63 	bl	80033d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800250e:	4957      	ldr	r1, [pc, #348]	; (800266c <OTM8009A_Init+0x394>)
 8002510:	2000      	movs	r0, #0
 8002512:	f000 ff5f 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8002516:	496a      	ldr	r1, [pc, #424]	; (80026c0 <OTM8009A_Init+0x3e8>)
 8002518:	200f      	movs	r0, #15
 800251a:	f000 ff5b 	bl	80033d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 800251e:	4955      	ldr	r1, [pc, #340]	; (8002674 <OTM8009A_Init+0x39c>)
 8002520:	2000      	movs	r0, #0
 8002522:	f000 ff57 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8002526:	4967      	ldr	r1, [pc, #412]	; (80026c4 <OTM8009A_Init+0x3ec>)
 8002528:	200a      	movs	r0, #10
 800252a:	f000 ff53 	bl	80033d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800252e:	4953      	ldr	r1, [pc, #332]	; (800267c <OTM8009A_Init+0x3a4>)
 8002530:	2000      	movs	r0, #0
 8002532:	f000 ff4f 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8002536:	4964      	ldr	r1, [pc, #400]	; (80026c8 <OTM8009A_Init+0x3f0>)
 8002538:	200f      	movs	r0, #15
 800253a:	f000 ff4b 	bl	80033d4 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 800253e:	4951      	ldr	r1, [pc, #324]	; (8002684 <OTM8009A_Init+0x3ac>)
 8002540:	2000      	movs	r0, #0
 8002542:	f000 ff47 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8002546:	4961      	ldr	r1, [pc, #388]	; (80026cc <OTM8009A_Init+0x3f4>)
 8002548:	200f      	movs	r0, #15
 800254a:	f000 ff43 	bl	80033d4 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800254e:	4934      	ldr	r1, [pc, #208]	; (8002620 <OTM8009A_Init+0x348>)
 8002550:	2000      	movs	r0, #0
 8002552:	f000 ff3f 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8002556:	495e      	ldr	r1, [pc, #376]	; (80026d0 <OTM8009A_Init+0x3f8>)
 8002558:	2000      	movs	r0, #0
 800255a:	f000 ff3b 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 800255e:	495d      	ldr	r1, [pc, #372]	; (80026d4 <OTM8009A_Init+0x3fc>)
 8002560:	2000      	movs	r0, #0
 8002562:	f000 ff37 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8002566:	495c      	ldr	r1, [pc, #368]	; (80026d8 <OTM8009A_Init+0x400>)
 8002568:	2000      	movs	r0, #0
 800256a:	f000 ff33 	bl	80033d4 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 22,7kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 800256e:	495b      	ldr	r1, [pc, #364]	; (80026dc <OTM8009A_Init+0x404>)
 8002570:	2000      	movs	r0, #0
 8002572:	f000 ff2f 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8002576:	495a      	ldr	r1, [pc, #360]	; (80026e0 <OTM8009A_Init+0x408>)
 8002578:	2000      	movs	r0, #0
 800257a:	f000 ff2b 	bl	80033d4 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800257e:	491a      	ldr	r1, [pc, #104]	; (80025e8 <OTM8009A_Init+0x310>)
 8002580:	2000      	movs	r0, #0
 8002582:	f000 ff27 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8002586:	4957      	ldr	r1, [pc, #348]	; (80026e4 <OTM8009A_Init+0x40c>)
 8002588:	2003      	movs	r0, #3
 800258a:	f000 ff23 	bl	80033d4 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 800258e:	4916      	ldr	r1, [pc, #88]	; (80025e8 <OTM8009A_Init+0x310>)
 8002590:	2000      	movs	r0, #0
 8002592:	f000 ff1f 	bl	80033d4 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002596:	4914      	ldr	r1, [pc, #80]	; (80025e8 <OTM8009A_Init+0x310>)
 8002598:	2000      	movs	r0, #0
 800259a:	f000 ff1b 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 800259e:	4952      	ldr	r1, [pc, #328]	; (80026e8 <OTM8009A_Init+0x410>)
 80025a0:	2010      	movs	r0, #16
 80025a2:	f000 ff17 	bl	80033d4 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80025a6:	4910      	ldr	r1, [pc, #64]	; (80025e8 <OTM8009A_Init+0x310>)
 80025a8:	2000      	movs	r0, #0
 80025aa:	f000 ff13 	bl	80033d4 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 80025ae:	494f      	ldr	r1, [pc, #316]	; (80026ec <OTM8009A_Init+0x414>)
 80025b0:	2010      	movs	r0, #16
 80025b2:	f000 ff0f 	bl	80033d4 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 80025b6:	494e      	ldr	r1, [pc, #312]	; (80026f0 <OTM8009A_Init+0x418>)
 80025b8:	2000      	movs	r0, #0
 80025ba:	f000 ff0b 	bl	80033d4 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 80025be:	2078      	movs	r0, #120	; 0x78
 80025c0:	f000 faa6 	bl	8002b10 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d008      	beq.n	80025dc <OTM8009A_Init+0x304>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	f040 8095 	bne.w	80026fc <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 80025d2:	4948      	ldr	r1, [pc, #288]	; (80026f4 <OTM8009A_Init+0x41c>)
 80025d4:	2000      	movs	r0, #0
 80025d6:	f000 fefd 	bl	80033d4 <DSI_IO_WriteCmd>
    break;
 80025da:	e090      	b.n	80026fe <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 80025dc:	4946      	ldr	r1, [pc, #280]	; (80026f8 <OTM8009A_Init+0x420>)
 80025de:	2000      	movs	r0, #0
 80025e0:	f000 fef8 	bl	80033d4 <DSI_IO_WriteCmd>
    break;
 80025e4:	e08b      	b.n	80026fe <OTM8009A_Init+0x426>
 80025e6:	bf00      	nop
 80025e8:	0800e634 	.word	0x0800e634
 80025ec:	0800e4ec 	.word	0x0800e4ec
 80025f0:	0800e638 	.word	0x0800e638
 80025f4:	0800e4f0 	.word	0x0800e4f0
 80025f8:	0800e63c 	.word	0x0800e63c
 80025fc:	0800e640 	.word	0x0800e640
 8002600:	0800e644 	.word	0x0800e644
 8002604:	0800e648 	.word	0x0800e648
 8002608:	0800e64c 	.word	0x0800e64c
 800260c:	0800e650 	.word	0x0800e650
 8002610:	0800e654 	.word	0x0800e654
 8002614:	0800e658 	.word	0x0800e658
 8002618:	0800e65c 	.word	0x0800e65c
 800261c:	0800e660 	.word	0x0800e660
 8002620:	0800e664 	.word	0x0800e664
 8002624:	0800e668 	.word	0x0800e668
 8002628:	0800e66c 	.word	0x0800e66c
 800262c:	0800e670 	.word	0x0800e670
 8002630:	0800e674 	.word	0x0800e674
 8002634:	0800e678 	.word	0x0800e678
 8002638:	0800e67c 	.word	0x0800e67c
 800263c:	0800e51c 	.word	0x0800e51c
 8002640:	0800e680 	.word	0x0800e680
 8002644:	0800e684 	.word	0x0800e684
 8002648:	0800e688 	.word	0x0800e688
 800264c:	0800e68c 	.word	0x0800e68c
 8002650:	0800e690 	.word	0x0800e690
 8002654:	0800e694 	.word	0x0800e694
 8002658:	0800e698 	.word	0x0800e698
 800265c:	0800e69c 	.word	0x0800e69c
 8002660:	0800e6a0 	.word	0x0800e6a0
 8002664:	0800e520 	.word	0x0800e520
 8002668:	0800e524 	.word	0x0800e524
 800266c:	0800e6a4 	.word	0x0800e6a4
 8002670:	0800e52c 	.word	0x0800e52c
 8002674:	0800e6a8 	.word	0x0800e6a8
 8002678:	0800e53c 	.word	0x0800e53c
 800267c:	0800e6ac 	.word	0x0800e6ac
 8002680:	0800e54c 	.word	0x0800e54c
 8002684:	0800e6b0 	.word	0x0800e6b0
 8002688:	0800e6e8 	.word	0x0800e6e8
 800268c:	0800e558 	.word	0x0800e558
 8002690:	0800e6b4 	.word	0x0800e6b4
 8002694:	0800e564 	.word	0x0800e564
 8002698:	0800e574 	.word	0x0800e574
 800269c:	0800e584 	.word	0x0800e584
 80026a0:	0800e590 	.word	0x0800e590
 80026a4:	0800e5a0 	.word	0x0800e5a0
 80026a8:	0800e6b8 	.word	0x0800e6b8
 80026ac:	0800e5b0 	.word	0x0800e5b0
 80026b0:	0800e6bc 	.word	0x0800e6bc
 80026b4:	0800e5bc 	.word	0x0800e5bc
 80026b8:	0800e5c8 	.word	0x0800e5c8
 80026bc:	0800e5d4 	.word	0x0800e5d4
 80026c0:	0800e5e4 	.word	0x0800e5e4
 80026c4:	0800e5f4 	.word	0x0800e5f4
 80026c8:	0800e600 	.word	0x0800e600
 80026cc:	0800e610 	.word	0x0800e610
 80026d0:	0800e6ec 	.word	0x0800e6ec
 80026d4:	0800e6f0 	.word	0x0800e6f0
 80026d8:	0800e6f4 	.word	0x0800e6f4
 80026dc:	0800e6f8 	.word	0x0800e6f8
 80026e0:	0800e6fc 	.word	0x0800e6fc
 80026e4:	0800e620 	.word	0x0800e620
 80026e8:	0800e4f4 	.word	0x0800e4f4
 80026ec:	0800e508 	.word	0x0800e508
 80026f0:	0800e6c0 	.word	0x0800e6c0
 80026f4:	0800e6c4 	.word	0x0800e6c4
 80026f8:	0800e6c8 	.word	0x0800e6c8
  default :
    break;
 80026fc:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d10b      	bne.n	800271c <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8002704:	4916      	ldr	r1, [pc, #88]	; (8002760 <OTM8009A_Init+0x488>)
 8002706:	2000      	movs	r0, #0
 8002708:	f000 fe64 	bl	80033d4 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 800270c:	4915      	ldr	r1, [pc, #84]	; (8002764 <OTM8009A_Init+0x48c>)
 800270e:	2004      	movs	r0, #4
 8002710:	f000 fe60 	bl	80033d4 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8002714:	4914      	ldr	r1, [pc, #80]	; (8002768 <OTM8009A_Init+0x490>)
 8002716:	2004      	movs	r0, #4
 8002718:	f000 fe5c 	bl	80033d4 <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 800271c:	4913      	ldr	r1, [pc, #76]	; (800276c <OTM8009A_Init+0x494>)
 800271e:	2000      	movs	r0, #0
 8002720:	f000 fe58 	bl	80033d4 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8002724:	4912      	ldr	r1, [pc, #72]	; (8002770 <OTM8009A_Init+0x498>)
 8002726:	2000      	movs	r0, #0
 8002728:	f000 fe54 	bl	80033d4 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 800272c:	4911      	ldr	r1, [pc, #68]	; (8002774 <OTM8009A_Init+0x49c>)
 800272e:	2000      	movs	r0, #0
 8002730:	f000 fe50 	bl	80033d4 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8002734:	4910      	ldr	r1, [pc, #64]	; (8002778 <OTM8009A_Init+0x4a0>)
 8002736:	2000      	movs	r0, #0
 8002738:	f000 fe4c 	bl	80033d4 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 800273c:	490f      	ldr	r1, [pc, #60]	; (800277c <OTM8009A_Init+0x4a4>)
 800273e:	2000      	movs	r0, #0
 8002740:	f000 fe48 	bl	80033d4 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002744:	490e      	ldr	r1, [pc, #56]	; (8002780 <OTM8009A_Init+0x4a8>)
 8002746:	2000      	movs	r0, #0
 8002748:	f000 fe44 	bl	80033d4 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 800274c:	490d      	ldr	r1, [pc, #52]	; (8002784 <OTM8009A_Init+0x4ac>)
 800274e:	2000      	movs	r0, #0
 8002750:	f000 fe40 	bl	80033d4 <DSI_IO_WriteCmd>

  return 0;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	0800e6cc 	.word	0x0800e6cc
 8002764:	0800e624 	.word	0x0800e624
 8002768:	0800e62c 	.word	0x0800e62c
 800276c:	0800e6d0 	.word	0x0800e6d0
 8002770:	0800e6d4 	.word	0x0800e6d4
 8002774:	0800e6d8 	.word	0x0800e6d8
 8002778:	0800e6dc 	.word	0x0800e6dc
 800277c:	0800e6e0 	.word	0x0800e6e0
 8002780:	0800e634 	.word	0x0800e634
 8002784:	0800e6e4 	.word	0x0800e6e4

08002788 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08c      	sub	sp, #48	; 0x30
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a58      	ldr	r2, [pc, #352]	; (80028f4 <I2Cx_MspInit+0x16c>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d15b      	bne.n	8002850 <I2Cx_MspInit+0xc8>
  {
  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_AUDIO_I2Cx_SCL_GPIO_CLK_ENABLE();
 8002798:	4b57      	ldr	r3, [pc, #348]	; (80028f8 <I2Cx_MspInit+0x170>)
 800279a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279c:	4a56      	ldr	r2, [pc, #344]	; (80028f8 <I2Cx_MspInit+0x170>)
 800279e:	f043 0308 	orr.w	r3, r3, #8
 80027a2:	6313      	str	r3, [r2, #48]	; 0x30
 80027a4:	4b54      	ldr	r3, [pc, #336]	; (80028f8 <I2Cx_MspInit+0x170>)
 80027a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	61bb      	str	r3, [r7, #24]
 80027ae:	69bb      	ldr	r3, [r7, #24]
  DISCOVERY_AUDIO_I2Cx_SDA_GPIO_CLK_ENABLE();
 80027b0:	4b51      	ldr	r3, [pc, #324]	; (80028f8 <I2Cx_MspInit+0x170>)
 80027b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b4:	4a50      	ldr	r2, [pc, #320]	; (80028f8 <I2Cx_MspInit+0x170>)
 80027b6:	f043 0302 	orr.w	r3, r3, #2
 80027ba:	6313      	str	r3, [r2, #48]	; 0x30
 80027bc:	4b4e      	ldr	r3, [pc, #312]	; (80028f8 <I2Cx_MspInit+0x170>)
 80027be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	697b      	ldr	r3, [r7, #20]
  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80027c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027cc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80027ce:	2312      	movs	r3, #18
 80027d0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80027d2:	2300      	movs	r3, #0
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80027d6:	2302      	movs	r3, #2
 80027d8:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_AF;
 80027da:	2304      	movs	r3, #4
 80027dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_GPIO_PORT, &gpio_init_structure);
 80027de:	f107 031c 	add.w	r3, r7, #28
 80027e2:	4619      	mov	r1, r3
 80027e4:	4845      	ldr	r0, [pc, #276]	; (80028fc <I2Cx_MspInit+0x174>)
 80027e6:	f003 f8b9 	bl	800595c <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SDA_AF;
 80027ee:	230b      	movs	r3, #11
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SDA_GPIO_PORT, &gpio_init_structure);
 80027f2:	f107 031c 	add.w	r3, r7, #28
 80027f6:	4619      	mov	r1, r3
 80027f8:	4841      	ldr	r0, [pc, #260]	; (8002900 <I2Cx_MspInit+0x178>)
 80027fa:	f003 f8af 	bl	800595c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80027fe:	4b3e      	ldr	r3, [pc, #248]	; (80028f8 <I2Cx_MspInit+0x170>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	4a3d      	ldr	r2, [pc, #244]	; (80028f8 <I2Cx_MspInit+0x170>)
 8002804:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002808:	6413      	str	r3, [r2, #64]	; 0x40
 800280a:	4b3b      	ldr	r3, [pc, #236]	; (80028f8 <I2Cx_MspInit+0x170>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	693b      	ldr	r3, [r7, #16]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002816:	4b38      	ldr	r3, [pc, #224]	; (80028f8 <I2Cx_MspInit+0x170>)
 8002818:	6a1b      	ldr	r3, [r3, #32]
 800281a:	4a37      	ldr	r2, [pc, #220]	; (80028f8 <I2Cx_MspInit+0x170>)
 800281c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002820:	6213      	str	r3, [r2, #32]

  /* Release the I2C peripheral clock reset */
  DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002822:	4b35      	ldr	r3, [pc, #212]	; (80028f8 <I2Cx_MspInit+0x170>)
 8002824:	6a1b      	ldr	r3, [r3, #32]
 8002826:	4a34      	ldr	r2, [pc, #208]	; (80028f8 <I2Cx_MspInit+0x170>)
 8002828:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800282c:	6213      	str	r3, [r2, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800282e:	2200      	movs	r2, #0
 8002830:	210f      	movs	r1, #15
 8002832:	205f      	movs	r0, #95	; 0x5f
 8002834:	f001 fd2e 	bl	8004294 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002838:	205f      	movs	r0, #95	; 0x5f
 800283a:	f001 fd47 	bl	80042cc <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800283e:	2200      	movs	r2, #0
 8002840:	210f      	movs	r1, #15
 8002842:	2060      	movs	r0, #96	; 0x60
 8002844:	f001 fd26 	bl	8004294 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);    
 8002848:	2060      	movs	r0, #96	; 0x60
 800284a:	f001 fd3f 	bl	80042cc <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800284e:	e04d      	b.n	80028ec <I2Cx_MspInit+0x164>
  DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002850:	4b29      	ldr	r3, [pc, #164]	; (80028f8 <I2Cx_MspInit+0x170>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	4a28      	ldr	r2, [pc, #160]	; (80028f8 <I2Cx_MspInit+0x170>)
 8002856:	f043 0302 	orr.w	r3, r3, #2
 800285a:	6313      	str	r3, [r2, #48]	; 0x30
 800285c:	4b26      	ldr	r3, [pc, #152]	; (80028f8 <I2Cx_MspInit+0x170>)
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	68fb      	ldr	r3, [r7, #12]
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002868:	f44f 7380 	mov.w	r3, #256	; 0x100
 800286c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800286e:	2312      	movs	r3, #18
 8002870:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002876:	2302      	movs	r3, #2
 8002878:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800287a:	2304      	movs	r3, #4
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800287e:	f107 031c 	add.w	r3, r7, #28
 8002882:	4619      	mov	r1, r3
 8002884:	481e      	ldr	r0, [pc, #120]	; (8002900 <I2Cx_MspInit+0x178>)
 8002886:	f003 f869 	bl	800595c <HAL_GPIO_Init>
  gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800288a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800288e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002890:	f107 031c 	add.w	r3, r7, #28
 8002894:	4619      	mov	r1, r3
 8002896:	481a      	ldr	r0, [pc, #104]	; (8002900 <I2Cx_MspInit+0x178>)
 8002898:	f003 f860 	bl	800595c <HAL_GPIO_Init>
  DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800289c:	4b16      	ldr	r3, [pc, #88]	; (80028f8 <I2Cx_MspInit+0x170>)
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	4a15      	ldr	r2, [pc, #84]	; (80028f8 <I2Cx_MspInit+0x170>)
 80028a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028a6:	6413      	str	r3, [r2, #64]	; 0x40
 80028a8:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <I2Cx_MspInit+0x170>)
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	68bb      	ldr	r3, [r7, #8]
  DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80028b4:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <I2Cx_MspInit+0x170>)
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	4a0f      	ldr	r2, [pc, #60]	; (80028f8 <I2Cx_MspInit+0x170>)
 80028ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028be:	6213      	str	r3, [r2, #32]
  DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80028c0:	4b0d      	ldr	r3, [pc, #52]	; (80028f8 <I2Cx_MspInit+0x170>)
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	4a0c      	ldr	r2, [pc, #48]	; (80028f8 <I2Cx_MspInit+0x170>)
 80028c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028ca:	6213      	str	r3, [r2, #32]
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80028cc:	2200      	movs	r2, #0
 80028ce:	210f      	movs	r1, #15
 80028d0:	201f      	movs	r0, #31
 80028d2:	f001 fcdf 	bl	8004294 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80028d6:	201f      	movs	r0, #31
 80028d8:	f001 fcf8 	bl	80042cc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80028dc:	2200      	movs	r2, #0
 80028de:	210f      	movs	r1, #15
 80028e0:	2020      	movs	r0, #32
 80028e2:	f001 fcd7 	bl	8004294 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80028e6:	2020      	movs	r0, #32
 80028e8:	f001 fcf0 	bl	80042cc <HAL_NVIC_EnableIRQ>
}
 80028ec:	bf00      	nop
 80028ee:	3730      	adds	r7, #48	; 0x30
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	20000820 	.word	0x20000820
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40020c00 	.word	0x40020c00
 8002900:	40020400 	.word	0x40020400

08002904 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f003 fe09 	bl	8006524 <HAL_I2C_GetState>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d125      	bne.n	8002964 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a14      	ldr	r2, [pc, #80]	; (800296c <I2Cx_Init+0x68>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d103      	bne.n	8002928 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a13      	ldr	r2, [pc, #76]	; (8002970 <I2Cx_Init+0x6c>)
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	e002      	b.n	800292e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a12      	ldr	r2, [pc, #72]	; (8002974 <I2Cx_Init+0x70>)
 800292c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a11      	ldr	r2, [pc, #68]	; (8002978 <I2Cx_Init+0x74>)
 8002932:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff ff15 	bl	8002788 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f003 faf2 	bl	8005f48 <HAL_I2C_Init>
  }
}
 8002964:	bf00      	nop
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20000820 	.word	0x20000820
 8002970:	40006000 	.word	0x40006000
 8002974:	40005400 	.word	0x40005400
 8002978:	40912732 	.word	0x40912732

0800297c <I2Cx_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08a      	sub	sp, #40	; 0x28
 8002980:	af04      	add	r7, sp, #16
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	4608      	mov	r0, r1
 8002986:	4611      	mov	r1, r2
 8002988:	461a      	mov	r2, r3
 800298a:	4603      	mov	r3, r0
 800298c:	72fb      	strb	r3, [r7, #11]
 800298e:	460b      	mov	r3, r1
 8002990:	813b      	strh	r3, [r7, #8]
 8002992:	4613      	mov	r3, r2
 8002994:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002996:	2300      	movs	r3, #0
 8002998:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800299a:	7afb      	ldrb	r3, [r7, #11]
 800299c:	b299      	uxth	r1, r3
 800299e:	88f8      	ldrh	r0, [r7, #6]
 80029a0:	893a      	ldrh	r2, [r7, #8]
 80029a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029a6:	9302      	str	r3, [sp, #8]
 80029a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80029aa:	9301      	str	r3, [sp, #4]
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	4603      	mov	r3, r0
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f003 fc9c 	bl	80062f0 <HAL_I2C_Mem_Read>
 80029b8:	4603      	mov	r3, r0
 80029ba:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80029bc:	7dfb      	ldrb	r3, [r7, #23]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d004      	beq.n	80029cc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occured */
    I2Cx_Error(i2c_handler, Addr);
 80029c2:	7afb      	ldrb	r3, [r7, #11]
 80029c4:	4619      	mov	r1, r3
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 f832 	bl	8002a30 <I2Cx_Error>
  }
  return status;
 80029cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <I2Cx_WriteMultiple>:
  * @param  Buffer: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b08a      	sub	sp, #40	; 0x28
 80029da:	af04      	add	r7, sp, #16
 80029dc:	60f8      	str	r0, [r7, #12]
 80029de:	4608      	mov	r0, r1
 80029e0:	4611      	mov	r1, r2
 80029e2:	461a      	mov	r2, r3
 80029e4:	4603      	mov	r3, r0
 80029e6:	72fb      	strb	r3, [r7, #11]
 80029e8:	460b      	mov	r3, r1
 80029ea:	813b      	strh	r3, [r7, #8]
 80029ec:	4613      	mov	r3, r2
 80029ee:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80029f4:	7afb      	ldrb	r3, [r7, #11]
 80029f6:	b299      	uxth	r1, r3
 80029f8:	88f8      	ldrh	r0, [r7, #6]
 80029fa:	893a      	ldrh	r2, [r7, #8]
 80029fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a00:	9302      	str	r3, [sp, #8]
 8002a02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a04:	9301      	str	r3, [sp, #4]
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f003 fb5b 	bl	80060c8 <HAL_I2C_Mem_Write>
 8002a12:	4603      	mov	r3, r0
 8002a14:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002a16:	7dfb      	ldrb	r3, [r7, #23]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d004      	beq.n	8002a26 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002a1c:	7afb      	ldrb	r3, [r7, #11]
 8002a1e:	4619      	mov	r1, r3
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 f805 	bl	8002a30 <I2Cx_Error>
  }
  return status;
 8002a26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f003 fb13 	bl	8006068 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff ff5e 	bl	8002904 <I2Cx_Init>
}
 8002a48:	bf00      	nop
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002a54:	4802      	ldr	r0, [pc, #8]	; (8002a60 <TS_IO_Init+0x10>)
 8002a56:	f7ff ff55 	bl	8002904 <I2Cx_Init>
}
 8002a5a:	bf00      	nop
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000820 	.word	0x20000820

08002a64 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af02      	add	r7, sp, #8
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	71fb      	strb	r3, [r7, #7]
 8002a6e:	460b      	mov	r3, r1
 8002a70:	71bb      	strb	r3, [r7, #6]
 8002a72:	4613      	mov	r3, r2
 8002a74:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002a76:	79bb      	ldrb	r3, [r7, #6]
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	79f9      	ldrb	r1, [r7, #7]
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	9301      	str	r3, [sp, #4]
 8002a80:	1d7b      	adds	r3, r7, #5
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	2301      	movs	r3, #1
 8002a86:	4803      	ldr	r0, [pc, #12]	; (8002a94 <TS_IO_Write+0x30>)
 8002a88:	f7ff ffa5 	bl	80029d6 <I2Cx_WriteMultiple>
}
 8002a8c:	bf00      	nop
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	20000820 	.word	0x20000820

08002a98 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	460a      	mov	r2, r1
 8002aa2:	71fb      	strb	r3, [r7, #7]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002aac:	79bb      	ldrb	r3, [r7, #6]
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	79f9      	ldrb	r1, [r7, #7]
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	9301      	str	r3, [sp, #4]
 8002ab6:	f107 030f 	add.w	r3, r7, #15
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	2301      	movs	r3, #1
 8002abe:	4804      	ldr	r0, [pc, #16]	; (8002ad0 <TS_IO_Read+0x38>)
 8002ac0:	f7ff ff5c 	bl	800297c <I2Cx_ReadMultiple>

  return read_value;
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000820 	.word	0x20000820

08002ad4 <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	603a      	str	r2, [r7, #0]
 8002adc:	461a      	mov	r2, r3
 8002ade:	4603      	mov	r3, r0
 8002ae0:	71fb      	strb	r3, [r7, #7]
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	71bb      	strb	r3, [r7, #6]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002aea:	79bb      	ldrb	r3, [r7, #6]
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	79f9      	ldrb	r1, [r7, #7]
 8002af0:	88bb      	ldrh	r3, [r7, #4]
 8002af2:	9301      	str	r3, [sp, #4]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	2301      	movs	r3, #1
 8002afa:	4804      	ldr	r0, [pc, #16]	; (8002b0c <TS_IO_ReadMultiple+0x38>)
 8002afc:	f7ff ff3e 	bl	800297c <I2Cx_ReadMultiple>
 8002b00:	4603      	mov	r3, r0
 8002b02:	b29b      	uxth	r3, r3
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	20000820 	.word	0x20000820

08002b10 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f001 f9bf 	bl	8003e9c <HAL_Delay>
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8002b2a:	2001      	movs	r0, #1
 8002b2c:	f000 f804 	bl	8002b38 <BSP_LCD_InitEx>
 8002b30:	4603      	mov	r3, r0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b090      	sub	sp, #64	; 0x40
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 8002b42:	f646 3325 	movw	r3, #27429	; 0x6b25
 8002b46:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 8002b50:	f000 f936 	bl	8002dc0 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 8002b54:	f000 fc68 	bl	8003428 <LCD_IO_GetID>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 8002b5c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002b5e:	2b11      	cmp	r3, #17
 8002b60:	d001      	beq.n	8002b66 <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 8002b62:	2301      	movs	r3, #1
 8002b64:	e113      	b.n	8002d8e <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 8002b66:	f000 fc67 	bl	8003438 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 8002b6a:	4b8b      	ldr	r3, [pc, #556]	; (8002d98 <BSP_LCD_InitEx+0x260>)
 8002b6c:	4a8b      	ldr	r2, [pc, #556]	; (8002d9c <BSP_LCD_InitEx+0x264>)
 8002b6e:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8002b70:	4889      	ldr	r0, [pc, #548]	; (8002d98 <BSP_LCD_InitEx+0x260>)
 8002b72:	f002 faa1 	bl	80050b8 <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 8002b76:	2364      	movs	r3, #100	; 0x64
 8002b78:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 8002b7a:	2305      	movs	r3, #5
 8002b7c:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 8002b82:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002b86:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8002b88:	4b83      	ldr	r3, [pc, #524]	; (8002d98 <BSP_LCD_InitEx+0x260>)
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8002b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b90:	089b      	lsrs	r3, r3, #2
 8002b92:	4a83      	ldr	r2, [pc, #524]	; (8002da0 <BSP_LCD_InitEx+0x268>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	0a9b      	lsrs	r3, r3, #10
 8002b9a:	4a7f      	ldr	r2, [pc, #508]	; (8002d98 <BSP_LCD_InitEx+0x260>)
 8002b9c:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8002b9e:	f107 0308 	add.w	r3, r7, #8
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	487c      	ldr	r0, [pc, #496]	; (8002d98 <BSP_LCD_InitEx+0x260>)
 8002ba6:	f002 f96b 	bl	8004e80 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d108      	bne.n	8002bc2 <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8002bb0:	4b7c      	ldr	r3, [pc, #496]	; (8002da4 <BSP_LCD_InitEx+0x26c>)
 8002bb2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002bb6:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8002bb8:	4b7b      	ldr	r3, [pc, #492]	; (8002da8 <BSP_LCD_InitEx+0x270>)
 8002bba:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	e007      	b.n	8002bd2 <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 8002bc2:	4b78      	ldr	r3, [pc, #480]	; (8002da4 <BSP_LCD_InitEx+0x26c>)
 8002bc4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002bc8:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8002bca:	4b77      	ldr	r3, [pc, #476]	; (8002da8 <BSP_LCD_InitEx+0x270>)
 8002bcc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002bd0:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 8002bd2:	4b74      	ldr	r3, [pc, #464]	; (8002da4 <BSP_LCD_InitEx+0x26c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 8002bd8:	4b73      	ldr	r3, [pc, #460]	; (8002da8 <BSP_LCD_InitEx+0x270>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 8002bde:	2301      	movs	r3, #1
 8002be0:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 8002be2:	230f      	movs	r3, #15
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 8002be6:	2310      	movs	r3, #16
 8002be8:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 8002bea:	2302      	movs	r3, #2
 8002bec:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 8002bee:	2322      	movs	r3, #34	; 0x22
 8002bf0:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 8002bf2:	2322      	movs	r3, #34	; 0x22
 8002bf4:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 8002bf6:	4b6d      	ldr	r3, [pc, #436]	; (8002dac <BSP_LCD_InitEx+0x274>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8002bfc:	4b6b      	ldr	r3, [pc, #428]	; (8002dac <BSP_LCD_InitEx+0x274>)
 8002bfe:	2205      	movs	r2, #5
 8002c00:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8002c02:	4b6a      	ldr	r3, [pc, #424]	; (8002dac <BSP_LCD_InitEx+0x274>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8002c08:	4b68      	ldr	r3, [pc, #416]	; (8002dac <BSP_LCD_InitEx+0x274>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 8002c0e:	4b67      	ldr	r3, [pc, #412]	; (8002dac <BSP_LCD_InitEx+0x274>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 8002c14:	4b65      	ldr	r3, [pc, #404]	; (8002dac <BSP_LCD_InitEx+0x274>)
 8002c16:	2202      	movs	r2, #2
 8002c18:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 8002c1a:	4b64      	ldr	r3, [pc, #400]	; (8002dac <BSP_LCD_InitEx+0x274>)
 8002c1c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002c20:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 8002c22:	4b62      	ldr	r3, [pc, #392]	; (8002dac <BSP_LCD_InitEx+0x274>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 8002c28:	4a60      	ldr	r2, [pc, #384]	; (8002dac <BSP_LCD_InitEx+0x274>)
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2c:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c32:	fb03 f202 	mul.w	r2, r3, r2
 8002c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3c:	4a5b      	ldr	r2, [pc, #364]	; (8002dac <BSP_LCD_InitEx+0x274>)
 8002c3e:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c44:	fb03 f202 	mul.w	r2, r3, r2
 8002c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4e:	4a57      	ldr	r2, [pc, #348]	; (8002dac <BSP_LCD_InitEx+0x274>)
 8002c50:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 8002c52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	441a      	add	r2, r3
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	441a      	add	r2, r3
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	4413      	add	r3, r2
 8002c60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c62:	fb03 f202 	mul.w	r2, r3, r2
 8002c66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6c:	4a4f      	ldr	r2, [pc, #316]	; (8002dac <BSP_LCD_InitEx+0x274>)
 8002c6e:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8002c70:	4a4e      	ldr	r2, [pc, #312]	; (8002dac <BSP_LCD_InitEx+0x274>)
 8002c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c74:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 8002c76:	4a4d      	ldr	r2, [pc, #308]	; (8002dac <BSP_LCD_InitEx+0x274>)
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8002c7c:	4a4b      	ldr	r2, [pc, #300]	; (8002dac <BSP_LCD_InitEx+0x274>)
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 8002c82:	4a4a      	ldr	r2, [pc, #296]	; (8002dac <BSP_LCD_InitEx+0x274>)
 8002c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c86:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8002c88:	4b48      	ldr	r3, [pc, #288]	; (8002dac <BSP_LCD_InitEx+0x274>)
 8002c8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c8e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8002c90:	4b46      	ldr	r3, [pc, #280]	; (8002dac <BSP_LCD_InitEx+0x274>)
 8002c92:	2210      	movs	r2, #16
 8002c94:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 8002c96:	4b45      	ldr	r3, [pc, #276]	; (8002dac <BSP_LCD_InitEx+0x274>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8002c9c:	4b43      	ldr	r3, [pc, #268]	; (8002dac <BSP_LCD_InitEx+0x274>)
 8002c9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ca2:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 8002ca4:	4b41      	ldr	r3, [pc, #260]	; (8002dac <BSP_LCD_InitEx+0x274>)
 8002ca6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002caa:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8002cac:	4b3f      	ldr	r3, [pc, #252]	; (8002dac <BSP_LCD_InitEx+0x274>)
 8002cae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cb2:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 8002cb4:	4b3d      	ldr	r3, [pc, #244]	; (8002dac <BSP_LCD_InitEx+0x274>)
 8002cb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cba:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8002cbc:	4b3b      	ldr	r3, [pc, #236]	; (8002dac <BSP_LCD_InitEx+0x274>)
 8002cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cc2:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 8002cc4:	4b39      	ldr	r3, [pc, #228]	; (8002dac <BSP_LCD_InitEx+0x274>)
 8002cc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8002ccc:	4937      	ldr	r1, [pc, #220]	; (8002dac <BSP_LCD_InitEx+0x274>)
 8002cce:	4832      	ldr	r0, [pc, #200]	; (8002d98 <BSP_LCD_InitEx+0x260>)
 8002cd0:	f002 fb4e 	bl	8005370 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	4a35      	ldr	r2, [pc, #212]	; (8002db0 <BSP_LCD_InitEx+0x278>)
 8002cda:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8002cdc:	69fa      	ldr	r2, [r7, #28]
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	4a32      	ldr	r2, [pc, #200]	; (8002db0 <BSP_LCD_InitEx+0x278>)
 8002ce6:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8002ce8:	4b2e      	ldr	r3, [pc, #184]	; (8002da4 <BSP_LCD_InitEx+0x26c>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	441a      	add	r2, r3
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	4a2e      	ldr	r2, [pc, #184]	; (8002db0 <BSP_LCD_InitEx+0x278>)
 8002cf8:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8002cfa:	4b2a      	ldr	r3, [pc, #168]	; (8002da4 <BSP_LCD_InitEx+0x26c>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	441a      	add	r2, r3
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	441a      	add	r2, r3
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	4413      	add	r3, r2
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	4a28      	ldr	r2, [pc, #160]	; (8002db0 <BSP_LCD_InitEx+0x278>)
 8002d0e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 8002d10:	4b24      	ldr	r3, [pc, #144]	; (8002da4 <BSP_LCD_InitEx+0x26c>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a26      	ldr	r2, [pc, #152]	; (8002db0 <BSP_LCD_InitEx+0x278>)
 8002d16:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 8002d18:	4b23      	ldr	r3, [pc, #140]	; (8002da8 <BSP_LCD_InitEx+0x270>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a24      	ldr	r2, [pc, #144]	; (8002db0 <BSP_LCD_InitEx+0x278>)
 8002d1e:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002d20:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <BSP_LCD_InitEx+0x27c>)
 8002d22:	2208      	movs	r2, #8
 8002d24:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8002d26:	4b23      	ldr	r3, [pc, #140]	; (8002db4 <BSP_LCD_InitEx+0x27c>)
 8002d28:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002d2c:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 8002d2e:	4b21      	ldr	r3, [pc, #132]	; (8002db4 <BSP_LCD_InitEx+0x27c>)
 8002d30:	2207      	movs	r2, #7
 8002d32:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002d34:	4b1f      	ldr	r3, [pc, #124]	; (8002db4 <BSP_LCD_InitEx+0x27c>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8002d3a:	481e      	ldr	r0, [pc, #120]	; (8002db4 <BSP_LCD_InitEx+0x27c>)
 8002d3c:	f005 ff04 	bl	8008b48 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 8002d40:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <BSP_LCD_InitEx+0x278>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 8002d48:	4b19      	ldr	r3, [pc, #100]	; (8002db0 <BSP_LCD_InitEx+0x278>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 8002d50:	4b17      	ldr	r3, [pc, #92]	; (8002db0 <BSP_LCD_InitEx+0x278>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002d58:	4b15      	ldr	r3, [pc, #84]	; (8002db0 <BSP_LCD_InitEx+0x278>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 8002d5e:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <BSP_LCD_InitEx+0x278>)
 8002d60:	4a15      	ldr	r2, [pc, #84]	; (8002db8 <BSP_LCD_InitEx+0x280>)
 8002d62:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 8002d64:	4911      	ldr	r1, [pc, #68]	; (8002dac <BSP_LCD_InitEx+0x274>)
 8002d66:	4812      	ldr	r0, [pc, #72]	; (8002db0 <BSP_LCD_InitEx+0x278>)
 8002d68:	f004 f9ee 	bl	8007148 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8002d6c:	4810      	ldr	r0, [pc, #64]	; (8002db0 <BSP_LCD_InitEx+0x278>)
 8002d6e:	f003 fe81 	bl	8006a74 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 8002d72:	4809      	ldr	r0, [pc, #36]	; (8002d98 <BSP_LCD_InitEx+0x260>)
 8002d74:	f002 fcfc 	bl	8005770 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002d78:	f000 fcde 	bl	8003738 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002d7c:	480f      	ldr	r0, [pc, #60]	; (8002dbc <BSP_LCD_InitEx+0x284>)
 8002d7e:	f000 f901 	bl	8002f84 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	4619      	mov	r1, r3
 8002d86:	2000      	movs	r0, #0
 8002d88:	f7ff faa6 	bl	80022d8 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3740      	adds	r7, #64	; 0x40
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	200009e0 	.word	0x200009e0
 8002d9c:	40016c00 	.word	0x40016c00
 8002da0:	43215e57 	.word	0x43215e57
 8002da4:	2000003c 	.word	0x2000003c
 8002da8:	20000040 	.word	0x20000040
 8002dac:	20000874 	.word	0x20000874
 8002db0:	20000938 	.word	0x20000938
 8002db4:	20000a18 	.word	0x20000a18
 8002db8:	40016800 	.word	0x40016800
 8002dbc:	20000034 	.word	0x20000034

08002dc0 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002dc6:	4b18      	ldr	r3, [pc, #96]	; (8002e28 <BSP_LCD_Reset+0x68>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	4a17      	ldr	r2, [pc, #92]	; (8002e28 <BSP_LCD_Reset+0x68>)
 8002dcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd2:	4b15      	ldr	r3, [pc, #84]	; (8002e28 <BSP_LCD_Reset+0x68>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dda:	603b      	str	r3, [r7, #0]
 8002ddc:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 8002dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002de2:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002de4:	2301      	movs	r3, #1
 8002de6:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8002de8:	2301      	movs	r3, #1
 8002dea:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002dec:	2303      	movs	r3, #3
 8002dee:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8002df0:	1d3b      	adds	r3, r7, #4
 8002df2:	4619      	mov	r1, r3
 8002df4:	480d      	ldr	r0, [pc, #52]	; (8002e2c <BSP_LCD_Reset+0x6c>)
 8002df6:	f002 fdb1 	bl	800595c <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e00:	480a      	ldr	r0, [pc, #40]	; (8002e2c <BSP_LCD_Reset+0x6c>)
 8002e02:	f003 f863 	bl	8005ecc <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 8002e06:	2014      	movs	r0, #20
 8002e08:	f001 f848 	bl	8003e9c <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e12:	4806      	ldr	r0, [pc, #24]	; (8002e2c <BSP_LCD_Reset+0x6c>)
 8002e14:	f003 f85a 	bl	8005ecc <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 8002e18:	200a      	movs	r0, #10
 8002e1a:	f001 f83f 	bl	8003e9c <HAL_Delay>
}
 8002e1e:	bf00      	nop
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40022400 	.word	0x40022400

08002e30 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 8002e34:	4b03      	ldr	r3, [pc, #12]	; (8002e44 <BSP_LCD_GetXSize+0x14>)
 8002e36:	681b      	ldr	r3, [r3, #0]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	2000003c 	.word	0x2000003c

08002e48 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 8002e4c:	4b03      	ldr	r3, [pc, #12]	; (8002e5c <BSP_LCD_GetYSize+0x14>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	20000040 	.word	0x20000040

08002e60 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b090      	sub	sp, #64	; 0x40
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	6039      	str	r1, [r7, #0]
 8002e6a:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002e70:	f7ff ffde 	bl	8002e30 <BSP_LCD_GetXSize>
 8002e74:	4603      	mov	r3, r0
 8002e76:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002e7c:	f7ff ffe4 	bl	8002e48 <BSP_LCD_GetYSize>
 8002e80:	4603      	mov	r3, r0
 8002e82:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002e8c:	23ff      	movs	r3, #255	; 0xff
 8002e8e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002e94:	2300      	movs	r3, #0
 8002e96:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002ea6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002eac:	2307      	movs	r3, #7
 8002eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002eb0:	f7ff ffbe 	bl	8002e30 <BSP_LCD_GetXSize>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002eb8:	f7ff ffc6 	bl	8002e48 <BSP_LCD_GetYSize>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8002ec0:	88fa      	ldrh	r2, [r7, #6]
 8002ec2:	f107 030c 	add.w	r3, r7, #12
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4812      	ldr	r0, [pc, #72]	; (8002f14 <BSP_LCD_LayerDefaultInit+0xb4>)
 8002eca:	f003 ff65 	bl	8006d98 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002ece:	88fa      	ldrh	r2, [r7, #6]
 8002ed0:	4911      	ldr	r1, [pc, #68]	; (8002f18 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	4413      	add	r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	3304      	adds	r3, #4
 8002ede:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ee2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002ee4:	88fa      	ldrh	r2, [r7, #6]
 8002ee6:	490c      	ldr	r1, [pc, #48]	; (8002f18 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002ee8:	4613      	mov	r3, r2
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	3308      	adds	r3, #8
 8002ef4:	4a09      	ldr	r2, [pc, #36]	; (8002f1c <BSP_LCD_LayerDefaultInit+0xbc>)
 8002ef6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8002ef8:	88fa      	ldrh	r2, [r7, #6]
 8002efa:	4907      	ldr	r1, [pc, #28]	; (8002f18 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002efc:	4613      	mov	r3, r2
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	4413      	add	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002f0a:	601a      	str	r2, [r3, #0]
}
 8002f0c:	bf00      	nop
 8002f0e:	3740      	adds	r7, #64	; 0x40
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	20000938 	.word	0x20000938
 8002f18:	20000a00 	.word	0x20000a00
 8002f1c:	20000034 	.word	0x20000034

08002f20 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002f28:	4b07      	ldr	r3, [pc, #28]	; (8002f48 <BSP_LCD_SetTextColor+0x28>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4907      	ldr	r1, [pc, #28]	; (8002f4c <BSP_LCD_SetTextColor+0x2c>)
 8002f2e:	4613      	mov	r3, r2
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	601a      	str	r2, [r3, #0]
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	200009fc 	.word	0x200009fc
 8002f4c:	20000a00 	.word	0x20000a00

08002f50 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002f58:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <BSP_LCD_SetBackColor+0x2c>)
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	4908      	ldr	r1, [pc, #32]	; (8002f80 <BSP_LCD_SetBackColor+0x30>)
 8002f5e:	4613      	mov	r3, r2
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	4413      	add	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	440b      	add	r3, r1
 8002f68:	3304      	adds	r3, #4
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	601a      	str	r2, [r3, #0]
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	200009fc 	.word	0x200009fc
 8002f80:	20000a00 	.word	0x20000a00

08002f84 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002f8c:	4b08      	ldr	r3, [pc, #32]	; (8002fb0 <BSP_LCD_SetFont+0x2c>)
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	4908      	ldr	r1, [pc, #32]	; (8002fb4 <BSP_LCD_SetFont+0x30>)
 8002f92:	4613      	mov	r3, r2
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	4413      	add	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	3308      	adds	r3, #8
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	601a      	str	r2, [r3, #0]
}
 8002fa2:	bf00      	nop
 8002fa4:	370c      	adds	r7, #12
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	200009fc 	.word	0x200009fc
 8002fb4:	20000a00 	.word	0x20000a00

08002fb8 <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 8002fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af02      	add	r7, sp, #8
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002fc0:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <BSP_LCD_Clear+0x48>)
 8002fc2:	681c      	ldr	r4, [r3, #0]
 8002fc4:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <BSP_LCD_Clear+0x48>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a0e      	ldr	r2, [pc, #56]	; (8003004 <BSP_LCD_Clear+0x4c>)
 8002fca:	2134      	movs	r1, #52	; 0x34
 8002fcc:	fb01 f303 	mul.w	r3, r1, r3
 8002fd0:	4413      	add	r3, r2
 8002fd2:	335c      	adds	r3, #92	; 0x5c
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	461e      	mov	r6, r3
 8002fd8:	f7ff ff2a 	bl	8002e30 <BSP_LCD_GetXSize>
 8002fdc:	4605      	mov	r5, r0
 8002fde:	f7ff ff33 	bl	8002e48 <BSP_LCD_GetYSize>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	9301      	str	r3, [sp, #4]
 8002fe8:	2300      	movs	r3, #0
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	4613      	mov	r3, r2
 8002fee:	462a      	mov	r2, r5
 8002ff0:	4631      	mov	r1, r6
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	f000 fb68 	bl	80036c8 <LL_FillBuffer>
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003000:	200009fc 	.word	0x200009fc
 8003004:	20000938 	.word	0x20000938

08003008 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003008:	b590      	push	{r4, r7, lr}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	4603      	mov	r3, r0
 8003010:	80fb      	strh	r3, [r7, #6]
 8003012:	460b      	mov	r3, r1
 8003014:	80bb      	strh	r3, [r7, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800301a:	4b1b      	ldr	r3, [pc, #108]	; (8003088 <BSP_LCD_DisplayChar+0x80>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	491b      	ldr	r1, [pc, #108]	; (800308c <BSP_LCD_DisplayChar+0x84>)
 8003020:	4613      	mov	r3, r2
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	4413      	add	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	3308      	adds	r3, #8
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6819      	ldr	r1, [r3, #0]
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003036:	4b14      	ldr	r3, [pc, #80]	; (8003088 <BSP_LCD_DisplayChar+0x80>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	4c14      	ldr	r4, [pc, #80]	; (800308c <BSP_LCD_DisplayChar+0x84>)
 800303c:	4613      	mov	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4423      	add	r3, r4
 8003046:	3308      	adds	r3, #8
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800304c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003050:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <BSP_LCD_DisplayChar+0x80>)
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	4c0d      	ldr	r4, [pc, #52]	; (800308c <BSP_LCD_DisplayChar+0x84>)
 8003056:	4613      	mov	r3, r2
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	4413      	add	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4423      	add	r3, r4
 8003060:	3308      	adds	r3, #8
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	889b      	ldrh	r3, [r3, #4]
 8003066:	3307      	adds	r3, #7
 8003068:	2b00      	cmp	r3, #0
 800306a:	da00      	bge.n	800306e <BSP_LCD_DisplayChar+0x66>
 800306c:	3307      	adds	r3, #7
 800306e:	10db      	asrs	r3, r3, #3
 8003070:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003074:	18ca      	adds	r2, r1, r3
 8003076:	88b9      	ldrh	r1, [r7, #4]
 8003078:	88fb      	ldrh	r3, [r7, #6]
 800307a:	4618      	mov	r0, r3
 800307c:	f000 fa6c 	bl	8003558 <DrawChar>
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	bd90      	pop	{r4, r7, pc}
 8003088:	200009fc 	.word	0x200009fc
 800308c:	20000a00 	.word	0x20000a00

08003090 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8003090:	b5b0      	push	{r4, r5, r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af00      	add	r7, sp, #0
 8003096:	60ba      	str	r2, [r7, #8]
 8003098:	461a      	mov	r2, r3
 800309a:	4603      	mov	r3, r0
 800309c:	81fb      	strh	r3, [r7, #14]
 800309e:	460b      	mov	r3, r1
 80030a0:	81bb      	strh	r3, [r7, #12]
 80030a2:	4613      	mov	r3, r2
 80030a4:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80030a6:	2301      	movs	r3, #1
 80030a8:	83fb      	strh	r3, [r7, #30]
 80030aa:	2300      	movs	r3, #0
 80030ac:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61bb      	str	r3, [r7, #24]
 80030b2:	2300      	movs	r3, #0
 80030b4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) size ++ ;
 80030ba:	e002      	b.n	80030c2 <BSP_LCD_DisplayStringAt+0x32>
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	3301      	adds	r3, #1
 80030c0:	61bb      	str	r3, [r7, #24]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	617a      	str	r2, [r7, #20]
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f6      	bne.n	80030bc <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80030ce:	f7ff feaf 	bl	8002e30 <BSP_LCD_GetXSize>
 80030d2:	4601      	mov	r1, r0
 80030d4:	4b50      	ldr	r3, [pc, #320]	; (8003218 <BSP_LCD_DisplayStringAt+0x188>)
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	4850      	ldr	r0, [pc, #320]	; (800321c <BSP_LCD_DisplayStringAt+0x18c>)
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4403      	add	r3, r0
 80030e4:	3308      	adds	r3, #8
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	889b      	ldrh	r3, [r3, #4]
 80030ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ee:	613b      	str	r3, [r7, #16]

  switch (Mode)
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	d01c      	beq.n	8003130 <BSP_LCD_DisplayStringAt+0xa0>
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	dc33      	bgt.n	8003162 <BSP_LCD_DisplayStringAt+0xd2>
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d002      	beq.n	8003104 <BSP_LCD_DisplayStringAt+0x74>
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d019      	beq.n	8003136 <BSP_LCD_DisplayStringAt+0xa6>
 8003102:	e02e      	b.n	8003162 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	1ad1      	subs	r1, r2, r3
 800310a:	4b43      	ldr	r3, [pc, #268]	; (8003218 <BSP_LCD_DisplayStringAt+0x188>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	4843      	ldr	r0, [pc, #268]	; (800321c <BSP_LCD_DisplayStringAt+0x18c>)
 8003110:	4613      	mov	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4403      	add	r3, r0
 800311a:	3308      	adds	r3, #8
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	889b      	ldrh	r3, [r3, #4]
 8003120:	fb01 f303 	mul.w	r3, r1, r3
 8003124:	085b      	lsrs	r3, r3, #1
 8003126:	b29a      	uxth	r2, r3
 8003128:	89fb      	ldrh	r3, [r7, #14]
 800312a:	4413      	add	r3, r2
 800312c:	83fb      	strh	r3, [r7, #30]
      break;
 800312e:	e01b      	b.n	8003168 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8003130:	89fb      	ldrh	r3, [r7, #14]
 8003132:	83fb      	strh	r3, [r7, #30]
      break;
 8003134:	e018      	b.n	8003168 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	b299      	uxth	r1, r3
 800313e:	4b36      	ldr	r3, [pc, #216]	; (8003218 <BSP_LCD_DisplayStringAt+0x188>)
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	4836      	ldr	r0, [pc, #216]	; (800321c <BSP_LCD_DisplayStringAt+0x18c>)
 8003144:	4613      	mov	r3, r2
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4403      	add	r3, r0
 800314e:	3308      	adds	r3, #8
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	889b      	ldrh	r3, [r3, #4]
 8003154:	fb11 f303 	smulbb	r3, r1, r3
 8003158:	b29a      	uxth	r2, r3
 800315a:	89fb      	ldrh	r3, [r7, #14]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	83fb      	strh	r3, [r7, #30]
      break;
 8003160:	e002      	b.n	8003168 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = Xpos;
 8003162:	89fb      	ldrh	r3, [r7, #14]
 8003164:	83fb      	strh	r3, [r7, #30]
      break;
 8003166:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8003168:	8bfb      	ldrh	r3, [r7, #30]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <BSP_LCD_DisplayStringAt+0xe6>
 800316e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003172:	2b00      	cmp	r3, #0
 8003174:	da1d      	bge.n	80031b2 <BSP_LCD_DisplayStringAt+0x122>
  {
    refcolumn = 1;
 8003176:	2301      	movs	r3, #1
 8003178:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800317a:	e01a      	b.n	80031b2 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	781a      	ldrb	r2, [r3, #0]
 8003180:	89b9      	ldrh	r1, [r7, #12]
 8003182:	8bfb      	ldrh	r3, [r7, #30]
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff ff3f 	bl	8003008 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 800318a:	4b23      	ldr	r3, [pc, #140]	; (8003218 <BSP_LCD_DisplayStringAt+0x188>)
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	4923      	ldr	r1, [pc, #140]	; (800321c <BSP_LCD_DisplayStringAt+0x18c>)
 8003190:	4613      	mov	r3, r2
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	4413      	add	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	3308      	adds	r3, #8
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	889a      	ldrh	r2, [r3, #4]
 80031a0:	8bfb      	ldrh	r3, [r7, #30]
 80031a2:	4413      	add	r3, r2
 80031a4:	83fb      	strh	r3, [r7, #30]

    /* Point on the next character */
    Text++;
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	3301      	adds	r3, #1
 80031aa:	60bb      	str	r3, [r7, #8]
    i++;
 80031ac:	8bbb      	ldrh	r3, [r7, #28]
 80031ae:	3301      	adds	r3, #1
 80031b0:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	bf14      	ite	ne
 80031ba:	2301      	movne	r3, #1
 80031bc:	2300      	moveq	r3, #0
 80031be:	b2dc      	uxtb	r4, r3
 80031c0:	f7ff fe36 	bl	8002e30 <BSP_LCD_GetXSize>
 80031c4:	8bb9      	ldrh	r1, [r7, #28]
 80031c6:	4b14      	ldr	r3, [pc, #80]	; (8003218 <BSP_LCD_DisplayStringAt+0x188>)
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	4d14      	ldr	r5, [pc, #80]	; (800321c <BSP_LCD_DisplayStringAt+0x18c>)
 80031cc:	4613      	mov	r3, r2
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	442b      	add	r3, r5
 80031d6:	3308      	adds	r3, #8
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	889b      	ldrh	r3, [r3, #4]
 80031dc:	fb01 f303 	mul.w	r3, r1, r3
 80031e0:	1ac3      	subs	r3, r0, r3
 80031e2:	b299      	uxth	r1, r3
 80031e4:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <BSP_LCD_DisplayStringAt+0x188>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	480c      	ldr	r0, [pc, #48]	; (800321c <BSP_LCD_DisplayStringAt+0x18c>)
 80031ea:	4613      	mov	r3, r2
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	4413      	add	r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	4403      	add	r3, r0
 80031f4:	3308      	adds	r3, #8
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	889b      	ldrh	r3, [r3, #4]
 80031fa:	4299      	cmp	r1, r3
 80031fc:	bf2c      	ite	cs
 80031fe:	2301      	movcs	r3, #1
 8003200:	2300      	movcc	r3, #0
 8003202:	b2db      	uxtb	r3, r3
 8003204:	4023      	ands	r3, r4
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1b7      	bne.n	800317c <BSP_LCD_DisplayStringAt+0xec>
  }

}
 800320c:	bf00      	nop
 800320e:	bf00      	nop
 8003210:	3720      	adds	r7, #32
 8003212:	46bd      	mov	sp, r7
 8003214:	bdb0      	pop	{r4, r5, r7, pc}
 8003216:	bf00      	nop
 8003218:	200009fc 	.word	0x200009fc
 800321c:	20000a00 	.word	0x20000a00

08003220 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003220:	b5b0      	push	{r4, r5, r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af02      	add	r7, sp, #8
 8003226:	4603      	mov	r3, r0
 8003228:	80fb      	strh	r3, [r7, #6]
 800322a:	460b      	mov	r3, r1
 800322c:	80bb      	strh	r3, [r7, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8003232:	2300      	movs	r3, #0
 8003234:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003236:	4b16      	ldr	r3, [pc, #88]	; (8003290 <BSP_LCD_DrawHLine+0x70>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a16      	ldr	r2, [pc, #88]	; (8003294 <BSP_LCD_DrawHLine+0x74>)
 800323c:	2134      	movs	r1, #52	; 0x34
 800323e:	fb01 f303 	mul.w	r3, r1, r3
 8003242:	4413      	add	r3, r2
 8003244:	335c      	adds	r3, #92	; 0x5c
 8003246:	681c      	ldr	r4, [r3, #0]
 8003248:	f7ff fdf2 	bl	8002e30 <BSP_LCD_GetXSize>
 800324c:	4602      	mov	r2, r0
 800324e:	88bb      	ldrh	r3, [r7, #4]
 8003250:	fb03 f202 	mul.w	r2, r3, r2
 8003254:	88fb      	ldrh	r3, [r7, #6]
 8003256:	4413      	add	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4423      	add	r3, r4
 800325c:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 800325e:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <BSP_LCD_DrawHLine+0x70>)
 8003260:	6818      	ldr	r0, [r3, #0]
 8003262:	68f9      	ldr	r1, [r7, #12]
 8003264:	887c      	ldrh	r4, [r7, #2]
 8003266:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <BSP_LCD_DrawHLine+0x70>)
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	4d0b      	ldr	r5, [pc, #44]	; (8003298 <BSP_LCD_DrawHLine+0x78>)
 800326c:	4613      	mov	r3, r2
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	4413      	add	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	442b      	add	r3, r5
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	9301      	str	r3, [sp, #4]
 800327a:	2300      	movs	r3, #0
 800327c:	9300      	str	r3, [sp, #0]
 800327e:	2301      	movs	r3, #1
 8003280:	4622      	mov	r2, r4
 8003282:	f000 fa21 	bl	80036c8 <LL_FillBuffer>
}
 8003286:	bf00      	nop
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bdb0      	pop	{r4, r5, r7, pc}
 800328e:	bf00      	nop
 8003290:	200009fc 	.word	0x200009fc
 8003294:	20000938 	.word	0x20000938
 8003298:	20000a00 	.word	0x20000a00

0800329c <BSP_LCD_DrawVLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800329c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800329e:	b087      	sub	sp, #28
 80032a0:	af02      	add	r7, sp, #8
 80032a2:	4603      	mov	r3, r0
 80032a4:	80fb      	strh	r3, [r7, #6]
 80032a6:	460b      	mov	r3, r1
 80032a8:	80bb      	strh	r3, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80032ae:	2300      	movs	r3, #0
 80032b0:	60fb      	str	r3, [r7, #12]

  /* Get the line address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80032b2:	4b18      	ldr	r3, [pc, #96]	; (8003314 <BSP_LCD_DrawVLine+0x78>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a18      	ldr	r2, [pc, #96]	; (8003318 <BSP_LCD_DrawVLine+0x7c>)
 80032b8:	2134      	movs	r1, #52	; 0x34
 80032ba:	fb01 f303 	mul.w	r3, r1, r3
 80032be:	4413      	add	r3, r2
 80032c0:	335c      	adds	r3, #92	; 0x5c
 80032c2:	681c      	ldr	r4, [r3, #0]
 80032c4:	f7ff fdb4 	bl	8002e30 <BSP_LCD_GetXSize>
 80032c8:	4602      	mov	r2, r0
 80032ca:	88bb      	ldrh	r3, [r7, #4]
 80032cc:	fb03 f202 	mul.w	r2, r3, r2
 80032d0:	88fb      	ldrh	r3, [r7, #6]
 80032d2:	4413      	add	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4423      	add	r3, r4
 80032d8:	60fb      	str	r3, [r7, #12]

  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 80032da:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <BSP_LCD_DrawVLine+0x78>)
 80032dc:	681c      	ldr	r4, [r3, #0]
 80032de:	68fd      	ldr	r5, [r7, #12]
 80032e0:	887e      	ldrh	r6, [r7, #2]
 80032e2:	f7ff fda5 	bl	8002e30 <BSP_LCD_GetXSize>
 80032e6:	4603      	mov	r3, r0
 80032e8:	1e59      	subs	r1, r3, #1
 80032ea:	4b0a      	ldr	r3, [pc, #40]	; (8003314 <BSP_LCD_DrawVLine+0x78>)
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	480b      	ldr	r0, [pc, #44]	; (800331c <BSP_LCD_DrawVLine+0x80>)
 80032f0:	4613      	mov	r3, r2
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	4413      	add	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4403      	add	r3, r0
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	9301      	str	r3, [sp, #4]
 80032fe:	9100      	str	r1, [sp, #0]
 8003300:	4633      	mov	r3, r6
 8003302:	2201      	movs	r2, #1
 8003304:	4629      	mov	r1, r5
 8003306:	4620      	mov	r0, r4
 8003308:	f000 f9de 	bl	80036c8 <LL_FillBuffer>
}
 800330c:	bf00      	nop
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003314:	200009fc 	.word	0x200009fc
 8003318:	20000938 	.word	0x20000938
 800331c:	20000a00 	.word	0x20000a00

08003320 <BSP_LCD_FillRect>:
  * @param  Ypos: Y position
  * @param  Width: Rectangle width
  * @param  Height: Rectangle height
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003324:	b086      	sub	sp, #24
 8003326:	af02      	add	r7, sp, #8
 8003328:	4604      	mov	r4, r0
 800332a:	4608      	mov	r0, r1
 800332c:	4611      	mov	r1, r2
 800332e:	461a      	mov	r2, r3
 8003330:	4623      	mov	r3, r4
 8003332:	80fb      	strh	r3, [r7, #6]
 8003334:	4603      	mov	r3, r0
 8003336:	80bb      	strh	r3, [r7, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	807b      	strh	r3, [r7, #2]
 800333c:	4613      	mov	r3, r2
 800333e:	803b      	strh	r3, [r7, #0]
  uint32_t  Xaddress = 0;
 8003340:	2300      	movs	r3, #0
 8003342:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003344:	4b20      	ldr	r3, [pc, #128]	; (80033c8 <BSP_LCD_FillRect+0xa8>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4920      	ldr	r1, [pc, #128]	; (80033cc <BSP_LCD_FillRect+0xac>)
 800334a:	4613      	mov	r3, r2
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	4413      	add	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	440b      	add	r3, r1
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff fde2 	bl	8002f20 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  Xaddress = (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800335c:	4b1a      	ldr	r3, [pc, #104]	; (80033c8 <BSP_LCD_FillRect+0xa8>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1b      	ldr	r2, [pc, #108]	; (80033d0 <BSP_LCD_FillRect+0xb0>)
 8003362:	2134      	movs	r1, #52	; 0x34
 8003364:	fb01 f303 	mul.w	r3, r1, r3
 8003368:	4413      	add	r3, r2
 800336a:	335c      	adds	r3, #92	; 0x5c
 800336c:	681c      	ldr	r4, [r3, #0]
 800336e:	f7ff fd5f 	bl	8002e30 <BSP_LCD_GetXSize>
 8003372:	4602      	mov	r2, r0
 8003374:	88bb      	ldrh	r3, [r7, #4]
 8003376:	fb03 f202 	mul.w	r2, r3, r2
 800337a:	88fb      	ldrh	r3, [r7, #6]
 800337c:	4413      	add	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4423      	add	r3, r4
 8003382:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003384:	4b10      	ldr	r3, [pc, #64]	; (80033c8 <BSP_LCD_FillRect+0xa8>)
 8003386:	681c      	ldr	r4, [r3, #0]
 8003388:	68fd      	ldr	r5, [r7, #12]
 800338a:	887e      	ldrh	r6, [r7, #2]
 800338c:	f8b7 8000 	ldrh.w	r8, [r7]
 8003390:	f7ff fd4e 	bl	8002e30 <BSP_LCD_GetXSize>
 8003394:	4602      	mov	r2, r0
 8003396:	887b      	ldrh	r3, [r7, #2]
 8003398:	1ad1      	subs	r1, r2, r3
 800339a:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <BSP_LCD_FillRect+0xa8>)
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	480b      	ldr	r0, [pc, #44]	; (80033cc <BSP_LCD_FillRect+0xac>)
 80033a0:	4613      	mov	r3, r2
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	4413      	add	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4403      	add	r3, r0
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	9100      	str	r1, [sp, #0]
 80033b0:	4643      	mov	r3, r8
 80033b2:	4632      	mov	r2, r6
 80033b4:	4629      	mov	r1, r5
 80033b6:	4620      	mov	r0, r4
 80033b8:	f000 f986 	bl	80036c8 <LL_FillBuffer>
}
 80033bc:	bf00      	nop
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033c6:	bf00      	nop
 80033c8:	200009fc 	.word	0x200009fc
 80033cc:	20000a00 	.word	0x20000a00
 80033d0:	20000938 	.word	0x20000938

080033d4 <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af02      	add	r7, sp, #8
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d80d      	bhi.n	8003400 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	461a      	mov	r2, r3
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	3301      	adds	r3, #1
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	4613      	mov	r3, r2
 80033f4:	2215      	movs	r2, #21
 80033f6:	2100      	movs	r1, #0
 80033f8:	480a      	ldr	r0, [pc, #40]	; (8003424 <DSI_IO_WriteCmd+0x50>)
 80033fa:	f002 f9f5 	bl	80057e8 <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 80033fe:	e00d      	b.n	800341c <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4413      	add	r3, r2
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	461a      	mov	r2, r3
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	9301      	str	r3, [sp, #4]
 800340e:	9200      	str	r2, [sp, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2239      	movs	r2, #57	; 0x39
 8003414:	2100      	movs	r1, #0
 8003416:	4803      	ldr	r0, [pc, #12]	; (8003424 <DSI_IO_WriteCmd+0x50>)
 8003418:	f002 fa08 	bl	800582c <HAL_DSI_LongWrite>
}
 800341c:	bf00      	nop
 800341e:	3708      	adds	r7, #8
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	200009e0 	.word	0x200009e0

08003428 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 800342c:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 800342e:	4618      	mov	r0, r3
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800343e:	4b32      	ldr	r3, [pc, #200]	; (8003508 <BSP_LCD_MspInit+0xd0>)
 8003440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003442:	4a31      	ldr	r2, [pc, #196]	; (8003508 <BSP_LCD_MspInit+0xd0>)
 8003444:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003448:	6453      	str	r3, [r2, #68]	; 0x44
 800344a:	4b2f      	ldr	r3, [pc, #188]	; (8003508 <BSP_LCD_MspInit+0xd0>)
 800344c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800344e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 8003456:	4b2c      	ldr	r3, [pc, #176]	; (8003508 <BSP_LCD_MspInit+0xd0>)
 8003458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345a:	4a2b      	ldr	r2, [pc, #172]	; (8003508 <BSP_LCD_MspInit+0xd0>)
 800345c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003460:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 8003462:	4b29      	ldr	r3, [pc, #164]	; (8003508 <BSP_LCD_MspInit+0xd0>)
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	4a28      	ldr	r2, [pc, #160]	; (8003508 <BSP_LCD_MspInit+0xd0>)
 8003468:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800346c:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800346e:	4b26      	ldr	r3, [pc, #152]	; (8003508 <BSP_LCD_MspInit+0xd0>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	4a25      	ldr	r2, [pc, #148]	; (8003508 <BSP_LCD_MspInit+0xd0>)
 8003474:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003478:	6313      	str	r3, [r2, #48]	; 0x30
 800347a:	4b23      	ldr	r3, [pc, #140]	; (8003508 <BSP_LCD_MspInit+0xd0>)
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003482:	60bb      	str	r3, [r7, #8]
 8003484:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 8003486:	4b20      	ldr	r3, [pc, #128]	; (8003508 <BSP_LCD_MspInit+0xd0>)
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	4a1f      	ldr	r2, [pc, #124]	; (8003508 <BSP_LCD_MspInit+0xd0>)
 800348c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003490:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 8003492:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <BSP_LCD_MspInit+0xd0>)
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	4a1c      	ldr	r2, [pc, #112]	; (8003508 <BSP_LCD_MspInit+0xd0>)
 8003498:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800349c:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 800349e:	4b1a      	ldr	r3, [pc, #104]	; (8003508 <BSP_LCD_MspInit+0xd0>)
 80034a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034a2:	4a19      	ldr	r2, [pc, #100]	; (8003508 <BSP_LCD_MspInit+0xd0>)
 80034a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034a8:	6453      	str	r3, [r2, #68]	; 0x44
 80034aa:	4b17      	ldr	r3, [pc, #92]	; (8003508 <BSP_LCD_MspInit+0xd0>)
 80034ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034b2:	607b      	str	r3, [r7, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 80034b6:	4b14      	ldr	r3, [pc, #80]	; (8003508 <BSP_LCD_MspInit+0xd0>)
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	4a13      	ldr	r2, [pc, #76]	; (8003508 <BSP_LCD_MspInit+0xd0>)
 80034bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034c0:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 80034c2:	4b11      	ldr	r3, [pc, #68]	; (8003508 <BSP_LCD_MspInit+0xd0>)
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	4a10      	ldr	r2, [pc, #64]	; (8003508 <BSP_LCD_MspInit+0xd0>)
 80034c8:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80034cc:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 80034ce:	2200      	movs	r2, #0
 80034d0:	2103      	movs	r1, #3
 80034d2:	2058      	movs	r0, #88	; 0x58
 80034d4:	f000 fede 	bl	8004294 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80034d8:	2058      	movs	r0, #88	; 0x58
 80034da:	f000 fef7 	bl	80042cc <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 80034de:	2200      	movs	r2, #0
 80034e0:	2103      	movs	r1, #3
 80034e2:	205a      	movs	r0, #90	; 0x5a
 80034e4:	f000 fed6 	bl	8004294 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80034e8:	205a      	movs	r0, #90	; 0x5a
 80034ea:	f000 feef 	bl	80042cc <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 80034ee:	2200      	movs	r2, #0
 80034f0:	2103      	movs	r1, #3
 80034f2:	2062      	movs	r0, #98	; 0x62
 80034f4:	f000 fece 	bl	8004294 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 80034f8:	2062      	movs	r0, #98	; 0x62
 80034fa:	f000 fee7 	bl	80042cc <HAL_NVIC_EnableIRQ>
}
 80034fe:	bf00      	nop
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40023800 	.word	0x40023800

0800350c <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800350c:	b5b0      	push	{r4, r5, r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	4603      	mov	r3, r0
 8003514:	603a      	str	r2, [r7, #0]
 8003516:	80fb      	strh	r3, [r7, #6]
 8003518:	460b      	mov	r3, r1
 800351a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800351c:	4b0c      	ldr	r3, [pc, #48]	; (8003550 <BSP_LCD_DrawPixel+0x44>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a0c      	ldr	r2, [pc, #48]	; (8003554 <BSP_LCD_DrawPixel+0x48>)
 8003522:	2134      	movs	r1, #52	; 0x34
 8003524:	fb01 f303 	mul.w	r3, r1, r3
 8003528:	4413      	add	r3, r2
 800352a:	335c      	adds	r3, #92	; 0x5c
 800352c:	681c      	ldr	r4, [r3, #0]
 800352e:	88bd      	ldrh	r5, [r7, #4]
 8003530:	f7ff fc7e 	bl	8002e30 <BSP_LCD_GetXSize>
 8003534:	4603      	mov	r3, r0
 8003536:	fb03 f205 	mul.w	r2, r3, r5
 800353a:	88fb      	ldrh	r3, [r7, #6]
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4423      	add	r3, r4
 8003542:	461a      	mov	r2, r3
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	6013      	str	r3, [r2, #0]
}
 8003548:	bf00      	nop
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bdb0      	pop	{r4, r5, r7, pc}
 8003550:	200009fc 	.word	0x200009fc
 8003554:	20000938 	.word	0x20000938

08003558 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	603a      	str	r2, [r7, #0]
 8003562:	80fb      	strh	r3, [r7, #6]
 8003564:	460b      	mov	r3, r1
 8003566:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	61fb      	str	r3, [r7, #28]
 800356c:	2300      	movs	r3, #0
 800356e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[ActiveLayer].pFont->Height;
 8003570:	4b53      	ldr	r3, [pc, #332]	; (80036c0 <DrawChar+0x168>)
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	4953      	ldr	r1, [pc, #332]	; (80036c4 <DrawChar+0x16c>)
 8003576:	4613      	mov	r3, r2
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	3308      	adds	r3, #8
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	88db      	ldrh	r3, [r3, #6]
 8003586:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003588:	4b4d      	ldr	r3, [pc, #308]	; (80036c0 <DrawChar+0x168>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	494d      	ldr	r1, [pc, #308]	; (80036c4 <DrawChar+0x16c>)
 800358e:	4613      	mov	r3, r2
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	4413      	add	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	440b      	add	r3, r1
 8003598:	3308      	adds	r3, #8
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	889b      	ldrh	r3, [r3, #4]
 800359e:	823b      	strh	r3, [r7, #16]

  offset =  8 *((width + 7)/8) -  width ;
 80035a0:	8a3b      	ldrh	r3, [r7, #16]
 80035a2:	3307      	adds	r3, #7
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	da00      	bge.n	80035aa <DrawChar+0x52>
 80035a8:	3307      	adds	r3, #7
 80035aa:	10db      	asrs	r3, r3, #3
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	8a3b      	ldrh	r3, [r7, #16]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80035ba:	2300      	movs	r3, #0
 80035bc:	61fb      	str	r3, [r7, #28]
 80035be:	e076      	b.n	80036ae <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80035c0:	8a3b      	ldrh	r3, [r7, #16]
 80035c2:	3307      	adds	r3, #7
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	da00      	bge.n	80035ca <DrawChar+0x72>
 80035c8:	3307      	adds	r3, #7
 80035ca:	10db      	asrs	r3, r3, #3
 80035cc:	461a      	mov	r2, r3
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	fb02 f303 	mul.w	r3, r2, r3
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	4413      	add	r3, r2
 80035d8:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80035da:	8a3b      	ldrh	r3, [r7, #16]
 80035dc:	3307      	adds	r3, #7
 80035de:	2b00      	cmp	r3, #0
 80035e0:	da00      	bge.n	80035e4 <DrawChar+0x8c>
 80035e2:	3307      	adds	r3, #7
 80035e4:	10db      	asrs	r3, r3, #3
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d002      	beq.n	80035f0 <DrawChar+0x98>
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d004      	beq.n	80035f8 <DrawChar+0xa0>
 80035ee:	e00c      	b.n	800360a <DrawChar+0xb2>
    {

    case 1:
      line =  pchar[0];
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	617b      	str	r3, [r7, #20]
      break;
 80035f6:	e016      	b.n	8003626 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	3201      	adds	r2, #1
 8003602:	7812      	ldrb	r2, [r2, #0]
 8003604:	4313      	orrs	r3, r2
 8003606:	617b      	str	r3, [r7, #20]
      break;
 8003608:	e00d      	b.n	8003626 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	041a      	lsls	r2, r3, #16
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	3301      	adds	r3, #1
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	021b      	lsls	r3, r3, #8
 8003618:	4313      	orrs	r3, r2
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	3202      	adds	r2, #2
 800361e:	7812      	ldrb	r2, [r2, #0]
 8003620:	4313      	orrs	r3, r2
 8003622:	617b      	str	r3, [r7, #20]
      break;
 8003624:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 8003626:	2300      	movs	r3, #0
 8003628:	61bb      	str	r3, [r7, #24]
 800362a:	e036      	b.n	800369a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1)))
 800362c:	8a3a      	ldrh	r2, [r7, #16]
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	1ad2      	subs	r2, r2, r3
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	4413      	add	r3, r2
 8003636:	3b01      	subs	r3, #1
 8003638:	2201      	movs	r2, #1
 800363a:	fa02 f303 	lsl.w	r3, r2, r3
 800363e:	461a      	mov	r2, r3
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	4013      	ands	r3, r2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d012      	beq.n	800366e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	b29a      	uxth	r2, r3
 800364c:	88fb      	ldrh	r3, [r7, #6]
 800364e:	4413      	add	r3, r2
 8003650:	b298      	uxth	r0, r3
 8003652:	4b1b      	ldr	r3, [pc, #108]	; (80036c0 <DrawChar+0x168>)
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	491b      	ldr	r1, [pc, #108]	; (80036c4 <DrawChar+0x16c>)
 8003658:	4613      	mov	r3, r2
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	88bb      	ldrh	r3, [r7, #4]
 8003666:	4619      	mov	r1, r3
 8003668:	f7ff ff50 	bl	800350c <BSP_LCD_DrawPixel>
 800366c:	e012      	b.n	8003694 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	b29a      	uxth	r2, r3
 8003672:	88fb      	ldrh	r3, [r7, #6]
 8003674:	4413      	add	r3, r2
 8003676:	b298      	uxth	r0, r3
 8003678:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <DrawChar+0x168>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	4911      	ldr	r1, [pc, #68]	; (80036c4 <DrawChar+0x16c>)
 800367e:	4613      	mov	r3, r2
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	4413      	add	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	3304      	adds	r3, #4
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	88bb      	ldrh	r3, [r7, #4]
 800368e:	4619      	mov	r1, r3
 8003690:	f7ff ff3c 	bl	800350c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	3301      	adds	r3, #1
 8003698:	61bb      	str	r3, [r7, #24]
 800369a:	8a3b      	ldrh	r3, [r7, #16]
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d3c4      	bcc.n	800362c <DrawChar+0xd4>
      }
    }
    Ypos++;
 80036a2:	88bb      	ldrh	r3, [r7, #4]
 80036a4:	3301      	adds	r3, #1
 80036a6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	3301      	adds	r3, #1
 80036ac:	61fb      	str	r3, [r7, #28]
 80036ae:	8a7b      	ldrh	r3, [r7, #18]
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d384      	bcc.n	80035c0 <DrawChar+0x68>
  }
}
 80036b6:	bf00      	nop
 80036b8:	bf00      	nop
 80036ba:	3720      	adds	r7, #32
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	200009fc 	.word	0x200009fc
 80036c4:	20000a00 	.word	0x20000a00

080036c8 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af02      	add	r7, sp, #8
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 80036d6:	4b16      	ldr	r3, [pc, #88]	; (8003730 <LL_FillBuffer+0x68>)
 80036d8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80036dc:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 80036de:	4b14      	ldr	r3, [pc, #80]	; (8003730 <LL_FillBuffer+0x68>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 80036e4:	4a12      	ldr	r2, [pc, #72]	; (8003730 <LL_FillBuffer+0x68>)
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 80036ea:	4b11      	ldr	r3, [pc, #68]	; (8003730 <LL_FillBuffer+0x68>)
 80036ec:	4a11      	ldr	r2, [pc, #68]	; (8003734 <LL_FillBuffer+0x6c>)
 80036ee:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 80036f0:	480f      	ldr	r0, [pc, #60]	; (8003730 <LL_FillBuffer+0x68>)
 80036f2:	f000 ffc5 	bl	8004680 <HAL_DMA2D_Init>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d115      	bne.n	8003728 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 80036fc:	68f9      	ldr	r1, [r7, #12]
 80036fe:	480c      	ldr	r0, [pc, #48]	; (8003730 <LL_FillBuffer+0x68>)
 8003700:	f001 fa3c 	bl	8004b7c <HAL_DMA2D_ConfigLayer>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10e      	bne.n	8003728 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	69f9      	ldr	r1, [r7, #28]
 8003714:	4806      	ldr	r0, [pc, #24]	; (8003730 <LL_FillBuffer+0x68>)
 8003716:	f001 f80d 	bl	8004734 <HAL_DMA2D_Start>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d103      	bne.n	8003728 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 8003720:	210a      	movs	r1, #10
 8003722:	4803      	ldr	r0, [pc, #12]	; (8003730 <LL_FillBuffer+0x68>)
 8003724:	f001 f831 	bl	800478a <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8003728:	bf00      	nop
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	200008e0 	.word	0x200008e0
 8003734:	4002b000 	.word	0x4002b000

08003738 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 800373c:	4b29      	ldr	r3, [pc, #164]	; (80037e4 <BSP_SDRAM_Init+0xac>)
 800373e:	4a2a      	ldr	r2, [pc, #168]	; (80037e8 <BSP_SDRAM_Init+0xb0>)
 8003740:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003742:	4b2a      	ldr	r3, [pc, #168]	; (80037ec <BSP_SDRAM_Init+0xb4>)
 8003744:	2202      	movs	r2, #2
 8003746:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003748:	4b28      	ldr	r3, [pc, #160]	; (80037ec <BSP_SDRAM_Init+0xb4>)
 800374a:	2207      	movs	r2, #7
 800374c:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800374e:	4b27      	ldr	r3, [pc, #156]	; (80037ec <BSP_SDRAM_Init+0xb4>)
 8003750:	2204      	movs	r2, #4
 8003752:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003754:	4b25      	ldr	r3, [pc, #148]	; (80037ec <BSP_SDRAM_Init+0xb4>)
 8003756:	2207      	movs	r2, #7
 8003758:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800375a:	4b24      	ldr	r3, [pc, #144]	; (80037ec <BSP_SDRAM_Init+0xb4>)
 800375c:	2202      	movs	r2, #2
 800375e:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003760:	4b22      	ldr	r3, [pc, #136]	; (80037ec <BSP_SDRAM_Init+0xb4>)
 8003762:	2202      	movs	r2, #2
 8003764:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003766:	4b21      	ldr	r3, [pc, #132]	; (80037ec <BSP_SDRAM_Init+0xb4>)
 8003768:	2202      	movs	r2, #2
 800376a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 800376c:	4b1d      	ldr	r3, [pc, #116]	; (80037e4 <BSP_SDRAM_Init+0xac>)
 800376e:	2200      	movs	r2, #0
 8003770:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003772:	4b1c      	ldr	r3, [pc, #112]	; (80037e4 <BSP_SDRAM_Init+0xac>)
 8003774:	2200      	movs	r2, #0
 8003776:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003778:	4b1a      	ldr	r3, [pc, #104]	; (80037e4 <BSP_SDRAM_Init+0xac>)
 800377a:	2204      	movs	r2, #4
 800377c:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800377e:	4b19      	ldr	r3, [pc, #100]	; (80037e4 <BSP_SDRAM_Init+0xac>)
 8003780:	2220      	movs	r2, #32
 8003782:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003784:	4b17      	ldr	r3, [pc, #92]	; (80037e4 <BSP_SDRAM_Init+0xac>)
 8003786:	2240      	movs	r2, #64	; 0x40
 8003788:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800378a:	4b16      	ldr	r3, [pc, #88]	; (80037e4 <BSP_SDRAM_Init+0xac>)
 800378c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003790:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003792:	4b14      	ldr	r3, [pc, #80]	; (80037e4 <BSP_SDRAM_Init+0xac>)
 8003794:	2200      	movs	r2, #0
 8003796:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003798:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <BSP_SDRAM_Init+0xac>)
 800379a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800379e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80037a0:	4b10      	ldr	r3, [pc, #64]	; (80037e4 <BSP_SDRAM_Init+0xac>)
 80037a2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037a6:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80037a8:	4b0e      	ldr	r3, [pc, #56]	; (80037e4 <BSP_SDRAM_Init+0xac>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80037ae:	2100      	movs	r1, #0
 80037b0:	480c      	ldr	r0, [pc, #48]	; (80037e4 <BSP_SDRAM_Init+0xac>)
 80037b2:	f000 f87f 	bl	80038b4 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80037b6:	490d      	ldr	r1, [pc, #52]	; (80037ec <BSP_SDRAM_Init+0xb4>)
 80037b8:	480a      	ldr	r0, [pc, #40]	; (80037e4 <BSP_SDRAM_Init+0xac>)
 80037ba:	f005 fded 	bl	8009398 <HAL_SDRAM_Init>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80037c4:	4b0a      	ldr	r3, [pc, #40]	; (80037f0 <BSP_SDRAM_Init+0xb8>)
 80037c6:	2201      	movs	r2, #1
 80037c8:	701a      	strb	r2, [r3, #0]
 80037ca:	e002      	b.n	80037d2 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80037cc:	4b08      	ldr	r3, [pc, #32]	; (80037f0 <BSP_SDRAM_Init+0xb8>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80037d2:	f240 6003 	movw	r0, #1539	; 0x603
 80037d6:	f000 f80d 	bl	80037f4 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80037da:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <BSP_SDRAM_Init+0xb8>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20000aa8 	.word	0x20000aa8
 80037e8:	a0000140 	.word	0xa0000140
 80037ec:	20000adc 	.word	0x20000adc
 80037f0:	20000044 	.word	0x20000044

080037f4 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80037fc:	2300      	movs	r3, #0
 80037fe:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003800:	4b2a      	ldr	r3, [pc, #168]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003802:	2201      	movs	r2, #1
 8003804:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003806:	4b29      	ldr	r3, [pc, #164]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003808:	2210      	movs	r2, #16
 800380a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800380c:	4b27      	ldr	r3, [pc, #156]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800380e:	2201      	movs	r2, #1
 8003810:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003812:	4b26      	ldr	r3, [pc, #152]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003814:	2200      	movs	r2, #0
 8003816:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800381c:	4923      	ldr	r1, [pc, #140]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800381e:	4824      	ldr	r0, [pc, #144]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003820:	f005 fdee 	bl	8009400 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003824:	2001      	movs	r0, #1
 8003826:	f000 fb39 	bl	8003e9c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800382a:	4b20      	ldr	r3, [pc, #128]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800382c:	2202      	movs	r2, #2
 800382e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003830:	4b1e      	ldr	r3, [pc, #120]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003832:	2210      	movs	r2, #16
 8003834:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003836:	4b1d      	ldr	r3, [pc, #116]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003838:	2201      	movs	r2, #1
 800383a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800383c:	4b1b      	ldr	r3, [pc, #108]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800383e:	2200      	movs	r2, #0
 8003840:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003842:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003846:	4919      	ldr	r1, [pc, #100]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003848:	4819      	ldr	r0, [pc, #100]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800384a:	f005 fdd9 	bl	8009400 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800384e:	4b17      	ldr	r3, [pc, #92]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003850:	2203      	movs	r2, #3
 8003852:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003854:	4b15      	ldr	r3, [pc, #84]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003856:	2210      	movs	r2, #16
 8003858:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800385a:	4b14      	ldr	r3, [pc, #80]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800385c:	2208      	movs	r2, #8
 800385e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003860:	4b12      	ldr	r3, [pc, #72]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003862:	2200      	movs	r2, #0
 8003864:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003866:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800386a:	4910      	ldr	r1, [pc, #64]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800386c:	4810      	ldr	r0, [pc, #64]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800386e:	f005 fdc7 	bl	8009400 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003872:	f44f 730c 	mov.w	r3, #560	; 0x230
 8003876:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003878:	4b0c      	ldr	r3, [pc, #48]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800387a:	2204      	movs	r2, #4
 800387c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800387e:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003880:	2210      	movs	r2, #16
 8003882:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003884:	4b09      	ldr	r3, [pc, #36]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003886:	2201      	movs	r2, #1
 8003888:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4a07      	ldr	r2, [pc, #28]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 800388e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003890:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003894:	4905      	ldr	r1, [pc, #20]	; (80038ac <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003896:	4806      	ldr	r0, [pc, #24]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003898:	f005 fdb2 	bl	8009400 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4804      	ldr	r0, [pc, #16]	; (80038b0 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80038a0:	f005 fde3 	bl	800946a <HAL_SDRAM_ProgramRefreshRate>
}
 80038a4:	bf00      	nop
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	20000af8 	.word	0x20000af8
 80038b0:	20000aa8 	.word	0x20000aa8

080038b4 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b090      	sub	sp, #64	; 0x40
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80038be:	4b71      	ldr	r3, [pc, #452]	; (8003a84 <BSP_SDRAM_MspInit+0x1d0>)
 80038c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c2:	4a70      	ldr	r2, [pc, #448]	; (8003a84 <BSP_SDRAM_MspInit+0x1d0>)
 80038c4:	f043 0301 	orr.w	r3, r3, #1
 80038c8:	6393      	str	r3, [r2, #56]	; 0x38
 80038ca:	4b6e      	ldr	r3, [pc, #440]	; (8003a84 <BSP_SDRAM_MspInit+0x1d0>)
 80038cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80038d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80038d6:	4b6b      	ldr	r3, [pc, #428]	; (8003a84 <BSP_SDRAM_MspInit+0x1d0>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	4a6a      	ldr	r2, [pc, #424]	; (8003a84 <BSP_SDRAM_MspInit+0x1d0>)
 80038dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038e0:	6313      	str	r3, [r2, #48]	; 0x30
 80038e2:	4b68      	ldr	r3, [pc, #416]	; (8003a84 <BSP_SDRAM_MspInit+0x1d0>)
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80038ee:	4b65      	ldr	r3, [pc, #404]	; (8003a84 <BSP_SDRAM_MspInit+0x1d0>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	4a64      	ldr	r2, [pc, #400]	; (8003a84 <BSP_SDRAM_MspInit+0x1d0>)
 80038f4:	f043 0308 	orr.w	r3, r3, #8
 80038f8:	6313      	str	r3, [r2, #48]	; 0x30
 80038fa:	4b62      	ldr	r3, [pc, #392]	; (8003a84 <BSP_SDRAM_MspInit+0x1d0>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	623b      	str	r3, [r7, #32]
 8003904:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003906:	4b5f      	ldr	r3, [pc, #380]	; (8003a84 <BSP_SDRAM_MspInit+0x1d0>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	4a5e      	ldr	r2, [pc, #376]	; (8003a84 <BSP_SDRAM_MspInit+0x1d0>)
 800390c:	f043 0310 	orr.w	r3, r3, #16
 8003910:	6313      	str	r3, [r2, #48]	; 0x30
 8003912:	4b5c      	ldr	r3, [pc, #368]	; (8003a84 <BSP_SDRAM_MspInit+0x1d0>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	f003 0310 	and.w	r3, r3, #16
 800391a:	61fb      	str	r3, [r7, #28]
 800391c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800391e:	4b59      	ldr	r3, [pc, #356]	; (8003a84 <BSP_SDRAM_MspInit+0x1d0>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	4a58      	ldr	r2, [pc, #352]	; (8003a84 <BSP_SDRAM_MspInit+0x1d0>)
 8003924:	f043 0320 	orr.w	r3, r3, #32
 8003928:	6313      	str	r3, [r2, #48]	; 0x30
 800392a:	4b56      	ldr	r3, [pc, #344]	; (8003a84 <BSP_SDRAM_MspInit+0x1d0>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	f003 0320 	and.w	r3, r3, #32
 8003932:	61bb      	str	r3, [r7, #24]
 8003934:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003936:	4b53      	ldr	r3, [pc, #332]	; (8003a84 <BSP_SDRAM_MspInit+0x1d0>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	4a52      	ldr	r2, [pc, #328]	; (8003a84 <BSP_SDRAM_MspInit+0x1d0>)
 800393c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003940:	6313      	str	r3, [r2, #48]	; 0x30
 8003942:	4b50      	ldr	r3, [pc, #320]	; (8003a84 <BSP_SDRAM_MspInit+0x1d0>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394a:	617b      	str	r3, [r7, #20]
 800394c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800394e:	4b4d      	ldr	r3, [pc, #308]	; (8003a84 <BSP_SDRAM_MspInit+0x1d0>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	4a4c      	ldr	r2, [pc, #304]	; (8003a84 <BSP_SDRAM_MspInit+0x1d0>)
 8003954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003958:	6313      	str	r3, [r2, #48]	; 0x30
 800395a:	4b4a      	ldr	r3, [pc, #296]	; (8003a84 <BSP_SDRAM_MspInit+0x1d0>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003966:	4b47      	ldr	r3, [pc, #284]	; (8003a84 <BSP_SDRAM_MspInit+0x1d0>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	4a46      	ldr	r2, [pc, #280]	; (8003a84 <BSP_SDRAM_MspInit+0x1d0>)
 800396c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003970:	6313      	str	r3, [r2, #48]	; 0x30
 8003972:	4b44      	ldr	r3, [pc, #272]	; (8003a84 <BSP_SDRAM_MspInit+0x1d0>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800397e:	2302      	movs	r3, #2
 8003980:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003982:	2301      	movs	r3, #1
 8003984:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8003986:	2303      	movs	r3, #3
 8003988:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800398a:	230c      	movs	r3, #12
 800398c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800398e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003992:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003994:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003998:	4619      	mov	r1, r3
 800399a:	483b      	ldr	r0, [pc, #236]	; (8003a88 <BSP_SDRAM_MspInit+0x1d4>)
 800399c:	f001 ffde 	bl	800595c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80039a0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80039a4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80039a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039aa:	4619      	mov	r1, r3
 80039ac:	4837      	ldr	r0, [pc, #220]	; (8003a8c <BSP_SDRAM_MspInit+0x1d8>)
 80039ae:	f001 ffd5 	bl	800595c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80039b2:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80039b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80039b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039bc:	4619      	mov	r1, r3
 80039be:	4834      	ldr	r0, [pc, #208]	; (8003a90 <BSP_SDRAM_MspInit+0x1dc>)
 80039c0:	f001 ffcc 	bl	800595c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 80039c4:	f248 1337 	movw	r3, #33079	; 0x8137
 80039c8:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80039ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039ce:	4619      	mov	r1, r3
 80039d0:	4830      	ldr	r0, [pc, #192]	; (8003a94 <BSP_SDRAM_MspInit+0x1e0>)
 80039d2:	f001 ffc3 	bl	800595c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80039d6:	f64f 732c 	movw	r3, #65324	; 0xff2c
 80039da:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80039dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039e0:	4619      	mov	r1, r3
 80039e2:	482d      	ldr	r0, [pc, #180]	; (8003a98 <BSP_SDRAM_MspInit+0x1e4>)
 80039e4:	f001 ffba 	bl	800595c <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80039e8:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80039ec:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 80039ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039f2:	4619      	mov	r1, r3
 80039f4:	4829      	ldr	r0, [pc, #164]	; (8003a9c <BSP_SDRAM_MspInit+0x1e8>)
 80039f6:	f001 ffb1 	bl	800595c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80039fa:	4b29      	ldr	r3, [pc, #164]	; (8003aa0 <BSP_SDRAM_MspInit+0x1ec>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003a00:	4b27      	ldr	r3, [pc, #156]	; (8003aa0 <BSP_SDRAM_MspInit+0x1ec>)
 8003a02:	2280      	movs	r2, #128	; 0x80
 8003a04:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003a06:	4b26      	ldr	r3, [pc, #152]	; (8003aa0 <BSP_SDRAM_MspInit+0x1ec>)
 8003a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a0c:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003a0e:	4b24      	ldr	r3, [pc, #144]	; (8003aa0 <BSP_SDRAM_MspInit+0x1ec>)
 8003a10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a14:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a16:	4b22      	ldr	r3, [pc, #136]	; (8003aa0 <BSP_SDRAM_MspInit+0x1ec>)
 8003a18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a1c:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003a1e:	4b20      	ldr	r3, [pc, #128]	; (8003aa0 <BSP_SDRAM_MspInit+0x1ec>)
 8003a20:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a24:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003a26:	4b1e      	ldr	r3, [pc, #120]	; (8003aa0 <BSP_SDRAM_MspInit+0x1ec>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003a2c:	4b1c      	ldr	r3, [pc, #112]	; (8003aa0 <BSP_SDRAM_MspInit+0x1ec>)
 8003a2e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a32:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003a34:	4b1a      	ldr	r3, [pc, #104]	; (8003aa0 <BSP_SDRAM_MspInit+0x1ec>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003a3a:	4b19      	ldr	r3, [pc, #100]	; (8003aa0 <BSP_SDRAM_MspInit+0x1ec>)
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003a40:	4b17      	ldr	r3, [pc, #92]	; (8003aa0 <BSP_SDRAM_MspInit+0x1ec>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003a46:	4b16      	ldr	r3, [pc, #88]	; (8003aa0 <BSP_SDRAM_MspInit+0x1ec>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003a4c:	4b14      	ldr	r3, [pc, #80]	; (8003aa0 <BSP_SDRAM_MspInit+0x1ec>)
 8003a4e:	4a15      	ldr	r2, [pc, #84]	; (8003aa4 <BSP_SDRAM_MspInit+0x1f0>)
 8003a50:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a12      	ldr	r2, [pc, #72]	; (8003aa0 <BSP_SDRAM_MspInit+0x1ec>)
 8003a56:	631a      	str	r2, [r3, #48]	; 0x30
 8003a58:	4a11      	ldr	r2, [pc, #68]	; (8003aa0 <BSP_SDRAM_MspInit+0x1ec>)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003a5e:	4810      	ldr	r0, [pc, #64]	; (8003aa0 <BSP_SDRAM_MspInit+0x1ec>)
 8003a60:	f000 fcfe 	bl	8004460 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003a64:	480e      	ldr	r0, [pc, #56]	; (8003aa0 <BSP_SDRAM_MspInit+0x1ec>)
 8003a66:	f000 fc4d 	bl	8004304 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	210f      	movs	r1, #15
 8003a6e:	2038      	movs	r0, #56	; 0x38
 8003a70:	f000 fc10 	bl	8004294 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003a74:	2038      	movs	r0, #56	; 0x38
 8003a76:	f000 fc29 	bl	80042cc <HAL_NVIC_EnableIRQ>
}
 8003a7a:	bf00      	nop
 8003a7c:	3740      	adds	r7, #64	; 0x40
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40023800 	.word	0x40023800
 8003a88:	40020c00 	.word	0x40020c00
 8003a8c:	40021000 	.word	0x40021000
 8003a90:	40021400 	.word	0x40021400
 8003a94:	40021800 	.word	0x40021800
 8003a98:	40021c00 	.word	0x40021c00
 8003a9c:	40022000 	.word	0x40022000
 8003aa0:	20000b08 	.word	0x20000b08
 8003aa4:	40026410 	.word	0x40026410

08003aa8 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	460a      	mov	r2, r1
 8003ab2:	80fb      	strh	r3, [r7, #6]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	80bb      	strh	r3, [r7, #4]
  uint8_t ts_status = TS_OK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	73fb      	strb	r3, [r7, #15]
  uint8_t ts_id1, ts_id2 = 0;
 8003abc:	2300      	movs	r3, #0
 8003abe:	73bb      	strb	r3, [r7, #14]
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 8003ac0:	4b25      	ldr	r3, [pc, #148]	; (8003b58 <BSP_TS_Init+0xb0>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a25      	ldr	r2, [pc, #148]	; (8003b5c <BSP_TS_Init+0xb4>)
 8003ac6:	7812      	ldrb	r2, [r2, #0]
 8003ac8:	b292      	uxth	r2, r2
 8003aca:	4610      	mov	r0, r2
 8003acc:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 8003ace:	4b22      	ldr	r3, [pc, #136]	; (8003b58 <BSP_TS_Init+0xb0>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2054      	movs	r0, #84	; 0x54
 8003ad4:	4798      	blx	r3
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	737b      	strb	r3, [r7, #13]
  if(ts_id1 != FT6206_ID_VALUE)
 8003ada:	7b7b      	ldrb	r3, [r7, #13]
 8003adc:	2b11      	cmp	r3, #17
 8003ade:	d009      	beq.n	8003af4 <BSP_TS_Init+0x4c>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 8003ae0:	4b1d      	ldr	r3, [pc, #116]	; (8003b58 <BSP_TS_Init+0xb0>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	2070      	movs	r0, #112	; 0x70
 8003ae6:	4798      	blx	r3
 8003ae8:	4603      	mov	r3, r0
 8003aea:	73bb      	strb	r3, [r7, #14]
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 8003aec:	4b1b      	ldr	r3, [pc, #108]	; (8003b5c <BSP_TS_Init+0xb4>)
 8003aee:	2270      	movs	r2, #112	; 0x70
 8003af0:	701a      	strb	r2, [r3, #0]
 8003af2:	e002      	b.n	8003afa <BSP_TS_Init+0x52>
  }
  else
  {
    I2C_Address    = TS_I2C_ADDRESS;    
 8003af4:	4b19      	ldr	r3, [pc, #100]	; (8003b5c <BSP_TS_Init+0xb4>)
 8003af6:	2254      	movs	r2, #84	; 0x54
 8003af8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 8003afa:	7b7b      	ldrb	r3, [r7, #13]
 8003afc:	2b11      	cmp	r3, #17
 8003afe:	d002      	beq.n	8003b06 <BSP_TS_Init+0x5e>
 8003b00:	7bbb      	ldrb	r3, [r7, #14]
 8003b02:	2b11      	cmp	r3, #17
 8003b04:	d121      	bne.n	8003b4a <BSP_TS_Init+0xa2>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 8003b06:	4b16      	ldr	r3, [pc, #88]	; (8003b60 <BSP_TS_Init+0xb8>)
 8003b08:	4a13      	ldr	r2, [pc, #76]	; (8003b58 <BSP_TS_Init+0xb0>)
 8003b0a:	601a      	str	r2, [r3, #0]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 8003b0c:	88fa      	ldrh	r2, [r7, #6]
 8003b0e:	88bb      	ldrh	r3, [r7, #4]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d203      	bcs.n	8003b1c <BSP_TS_Init+0x74>
    {
      ts_orientation = TS_SWAP_NONE;                
 8003b14:	4b13      	ldr	r3, [pc, #76]	; (8003b64 <BSP_TS_Init+0xbc>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	701a      	strb	r2, [r3, #0]
 8003b1a:	e002      	b.n	8003b22 <BSP_TS_Init+0x7a>
    }
    else
    {
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 8003b1c:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <BSP_TS_Init+0xbc>)
 8003b1e:	220c      	movs	r2, #12
 8003b20:	701a      	strb	r2, [r3, #0]
    }

    if(ts_status == TS_OK)
 8003b22:	7bfb      	ldrb	r3, [r7, #15]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d112      	bne.n	8003b4e <BSP_TS_Init+0xa6>
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 8003b28:	4b0d      	ldr	r3, [pc, #52]	; (8003b60 <BSP_TS_Init+0xb8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	4a0b      	ldr	r2, [pc, #44]	; (8003b5c <BSP_TS_Init+0xb4>)
 8003b30:	7812      	ldrb	r2, [r2, #0]
 8003b32:	b292      	uxth	r2, r2
 8003b34:	4610      	mov	r0, r2
 8003b36:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 8003b38:	4b09      	ldr	r3, [pc, #36]	; (8003b60 <BSP_TS_Init+0xb8>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	4a07      	ldr	r2, [pc, #28]	; (8003b5c <BSP_TS_Init+0xb4>)
 8003b40:	7812      	ldrb	r2, [r2, #0]
 8003b42:	b292      	uxth	r2, r2
 8003b44:	4610      	mov	r0, r2
 8003b46:	4798      	blx	r3
    if(ts_status == TS_OK)
 8003b48:	e001      	b.n	8003b4e <BSP_TS_Init+0xa6>

    } /* of if(ts_status == TS_OK) */
  }
  else
  {
    ts_status = TS_DEVICE_NOT_FOUND;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	73fb      	strb	r3, [r7, #15]
  }

  return (ts_status);
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	2000000c 	.word	0x2000000c
 8003b5c:	20000b6d 	.word	0x20000b6d
 8003b60:	20000b68 	.word	0x20000b68
 8003b64:	20000b6c 	.word	0x20000b6c

08003b68 <BSP_TS_ITConfig>:
/**
  * @brief  Configures and enables the touch screen interrupts.
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_ITConfig(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
  uint8_t ts_status = TS_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef gpio_init_structure;

  /* Msp Init of GPIO used for TS_INT pin coming from TouchScreen driver IC FT6x06 */
  /* When touchscreen is operated in interrupt mode */
  BSP_TS_INT_MspInit();
 8003b72:	f000 f93f 	bl	8003df4 <BSP_TS_INT_MspInit>

  /* Configure Interrupt mode for TS_INT pin falling edge : when a new touch is available */
  /* TS_INT pin is active on low level on new touch available */
  gpio_init_structure.Pin = TS_INT_PIN;
 8003b76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b7a:	603b      	str	r3, [r7, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003b80:	2302      	movs	r3, #2
 8003b82:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8003b84:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003b88:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8003b8a:	463b      	mov	r3, r7
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	480c      	ldr	r0, [pc, #48]	; (8003bc0 <BSP_TS_ITConfig+0x58>)
 8003b90:	f001 fee4 	bl	800595c <HAL_GPIO_Init>

  /* Enable and set the TS_INT EXTI Interrupt to an intermediate priority */
  HAL_NVIC_SetPriority((IRQn_Type)(TS_INT_EXTI_IRQn), 0x0F, 0x00);
 8003b94:	2200      	movs	r2, #0
 8003b96:	210f      	movs	r1, #15
 8003b98:	2028      	movs	r0, #40	; 0x28
 8003b9a:	f000 fb7b 	bl	8004294 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(TS_INT_EXTI_IRQn));
 8003b9e:	2028      	movs	r0, #40	; 0x28
 8003ba0:	f000 fb94 	bl	80042cc <HAL_NVIC_EnableIRQ>

  /* Enable the TS in interrupt mode */
  /* In that case the INT output of FT6206 when new touch is available */
  /* is active on low level and directed on EXTI */
  ts_driver->EnableIT(I2C_Address);
 8003ba4:	4b07      	ldr	r3, [pc, #28]	; (8003bc4 <BSP_TS_ITConfig+0x5c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	4a07      	ldr	r2, [pc, #28]	; (8003bc8 <BSP_TS_ITConfig+0x60>)
 8003bac:	7812      	ldrb	r2, [r2, #0]
 8003bae:	b292      	uxth	r2, r2
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	4798      	blx	r3

  return (ts_status);
 8003bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3718      	adds	r7, #24
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	40022000 	.word	0x40022000
 8003bc4:	20000b68 	.word	0x20000b68
 8003bc8:	20000b6d 	.word	0x20000b6d

08003bcc <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8003bcc:	b590      	push	{r4, r7, lr}
 8003bce:	b089      	sub	sp, #36	; 0x24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	76fb      	strb	r3, [r7, #27]
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 8003bd8:	4b81      	ldr	r3, [pc, #516]	; (8003de0 <BSP_TS_GetState+0x214>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	4a81      	ldr	r2, [pc, #516]	; (8003de4 <BSP_TS_GetState+0x218>)
 8003be0:	7812      	ldrb	r2, [r2, #0]
 8003be2:	b292      	uxth	r2, r2
 8003be4:	4610      	mov	r0, r2
 8003be6:	4798      	blx	r3
 8003be8:	4603      	mov	r3, r0
 8003bea:	461a      	mov	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	701a      	strb	r2, [r3, #0]
  if(TS_State->touchDetected)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 80ee 	beq.w	8003dd6 <BSP_TS_GetState+0x20a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61fb      	str	r3, [r7, #28]
 8003bfe:	e0e3      	b.n	8003dc8 <BSP_TS_GetState+0x1fc>
    {
      /* Get each touch coordinates */
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 8003c00:	4b77      	ldr	r3, [pc, #476]	; (8003de0 <BSP_TS_GetState+0x214>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	4a77      	ldr	r2, [pc, #476]	; (8003de4 <BSP_TS_GetState+0x218>)
 8003c08:	7812      	ldrb	r2, [r2, #0]
 8003c0a:	b290      	uxth	r0, r2
 8003c0c:	f107 0110 	add.w	r1, r7, #16
 8003c10:	69fa      	ldr	r2, [r7, #28]
 8003c12:	0052      	lsls	r2, r2, #1
 8003c14:	188c      	adds	r4, r1, r2
 8003c16:	f107 010c 	add.w	r1, r7, #12
 8003c1a:	69fa      	ldr	r2, [r7, #28]
 8003c1c:	0052      	lsls	r2, r2, #1
 8003c1e:	440a      	add	r2, r1
 8003c20:	4621      	mov	r1, r4
 8003c22:	4798      	blx	r3

      if(ts_orientation & TS_SWAP_XY)
 8003c24:	4b70      	ldr	r3, [pc, #448]	; (8003de8 <BSP_TS_GetState+0x21c>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d019      	beq.n	8003c64 <BSP_TS_GetState+0x98>
      {
        tmp = Raw_x[index];
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	3320      	adds	r3, #32
 8003c36:	443b      	add	r3, r7
 8003c38:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8003c3c:	833b      	strh	r3, [r7, #24]
        Raw_x[index] = Raw_y[index]; 
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	3320      	adds	r3, #32
 8003c44:	443b      	add	r3, r7
 8003c46:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	3320      	adds	r3, #32
 8003c50:	443b      	add	r3, r7
 8003c52:	f823 2c10 	strh.w	r2, [r3, #-16]
        Raw_y[index] = tmp;
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	005b      	lsls	r3, r3, #1
 8003c5a:	3320      	adds	r3, #32
 8003c5c:	443b      	add	r3, r7
 8003c5e:	8b3a      	ldrh	r2, [r7, #24]
 8003c60:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
      
      if(ts_orientation & TS_SWAP_X)
 8003c64:	4b60      	ldr	r3, [pc, #384]	; (8003de8 <BSP_TS_GetState+0x21c>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00f      	beq.n	8003c90 <BSP_TS_GetState+0xc4>
      {
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	3320      	adds	r3, #32
 8003c76:	443b      	add	r3, r7
 8003c78:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8003c7c:	f240 331f 	movw	r3, #799	; 0x31f
 8003c80:	1a9b      	subs	r3, r3, r2
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	3320      	adds	r3, #32
 8003c8a:	443b      	add	r3, r7
 8003c8c:	f823 2c10 	strh.w	r2, [r3, #-16]
      }

      if(ts_orientation & TS_SWAP_Y)
 8003c90:	4b55      	ldr	r3, [pc, #340]	; (8003de8 <BSP_TS_GetState+0x21c>)
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00f      	beq.n	8003cbc <BSP_TS_GetState+0xf0>
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	3320      	adds	r3, #32
 8003ca2:	443b      	add	r3, r7
 8003ca4:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8003ca8:	f240 13df 	movw	r3, #479	; 0x1df
 8003cac:	1a9b      	subs	r3, r3, r2
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	3320      	adds	r3, #32
 8003cb6:	443b      	add	r3, r7
 8003cb8:	f823 2c14 	strh.w	r2, [r3, #-20]
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	005b      	lsls	r3, r3, #1
 8003cc0:	3320      	adds	r3, #32
 8003cc2:	443b      	add	r3, r7
 8003cc4:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8003cc8:	4619      	mov	r1, r3
 8003cca:	4a48      	ldr	r2, [pc, #288]	; (8003dec <BSP_TS_GetState+0x220>)
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cd2:	4299      	cmp	r1, r3
 8003cd4:	d90d      	bls.n	8003cf2 <BSP_TS_GetState+0x126>
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	3320      	adds	r3, #32
 8003cdc:	443b      	add	r3, r7
 8003cde:	f833 2c10 	ldrh.w	r2, [r3, #-16]
 8003ce2:	4942      	ldr	r1, [pc, #264]	; (8003dec <BSP_TS_GetState+0x220>)
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	e00c      	b.n	8003d0c <BSP_TS_GetState+0x140>
 8003cf2:	4a3e      	ldr	r2, [pc, #248]	; (8003dec <BSP_TS_GetState+0x220>)
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	3320      	adds	r3, #32
 8003d02:	443b      	add	r3, r7
 8003d04:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	82fb      	strh	r3, [r7, #22]
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	3320      	adds	r3, #32
 8003d14:	443b      	add	r3, r7
 8003d16:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4a34      	ldr	r2, [pc, #208]	; (8003df0 <BSP_TS_GetState+0x224>)
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d24:	4299      	cmp	r1, r3
 8003d26:	d90d      	bls.n	8003d44 <BSP_TS_GetState+0x178>
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	3320      	adds	r3, #32
 8003d2e:	443b      	add	r3, r7
 8003d30:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8003d34:	492e      	ldr	r1, [pc, #184]	; (8003df0 <BSP_TS_GetState+0x224>)
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	e00c      	b.n	8003d5e <BSP_TS_GetState+0x192>
 8003d44:	4a2a      	ldr	r2, [pc, #168]	; (8003df0 <BSP_TS_GetState+0x224>)
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	3320      	adds	r3, #32
 8003d54:	443b      	add	r3, r7
 8003d56:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	82bb      	strh	r3, [r7, #20]

      if ((xDiff + yDiff) > 5)
 8003d60:	8afa      	ldrh	r2, [r7, #22]
 8003d62:	8abb      	ldrh	r3, [r7, #20]
 8003d64:	4413      	add	r3, r2
 8003d66:	2b05      	cmp	r3, #5
 8003d68:	dd15      	ble.n	8003d96 <BSP_TS_GetState+0x1ca>
      {
        _x[index] = Raw_x[index];
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	3320      	adds	r3, #32
 8003d70:	443b      	add	r3, r7
 8003d72:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 8003d76:	4619      	mov	r1, r3
 8003d78:	4a1c      	ldr	r2, [pc, #112]	; (8003dec <BSP_TS_GetState+0x220>)
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = Raw_y[index];
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	3320      	adds	r3, #32
 8003d86:	443b      	add	r3, r7
 8003d88:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4a18      	ldr	r2, [pc, #96]	; (8003df0 <BSP_TS_GetState+0x224>)
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }


      TS_State->touchX[index] = _x[index];
 8003d96:	4a15      	ldr	r2, [pc, #84]	; (8003dec <BSP_TS_GetState+0x220>)
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d9e:	b299      	uxth	r1, r3
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	4413      	add	r3, r2
 8003da8:	460a      	mov	r2, r1
 8003daa:	805a      	strh	r2, [r3, #2]
      TS_State->touchY[index] = _y[index];
 8003dac:	4a10      	ldr	r2, [pc, #64]	; (8003df0 <BSP_TS_GetState+0x224>)
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db4:	b299      	uxth	r1, r3
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	4413      	add	r3, r2
 8003dbe:	460a      	mov	r2, r1
 8003dc0:	80da      	strh	r2, [r3, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	61fb      	str	r3, [r7, #28]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	461a      	mov	r2, r3
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	f4ff af15 	bcc.w	8003c00 <BSP_TS_GetState+0x34>
    ts_status = BSP_TS_Get_GestureId(TS_State);
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8003dd6:	7efb      	ldrb	r3, [r7, #27]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3724      	adds	r7, #36	; 0x24
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd90      	pop	{r4, r7, pc}
 8003de0:	20000b68 	.word	0x20000b68
 8003de4:	20000b6d 	.word	0x20000b6d
 8003de8:	20000b6c 	.word	0x20000b6c
 8003dec:	20000b70 	.word	0x20000b70
 8003df0:	20000b78 	.word	0x20000b78

08003df4 <BSP_TS_INT_MspInit>:
/**
  * @brief  Initializes the TS_INT pin MSP.
  * @retval None
  */
__weak void BSP_TS_INT_MspInit(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  TS_INT_GPIO_CLK_ENABLE();
 8003dfa:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <BSP_TS_INT_MspInit+0x44>)
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfe:	4a0e      	ldr	r2, [pc, #56]	; (8003e38 <BSP_TS_INT_MspInit+0x44>)
 8003e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e04:	6313      	str	r3, [r2, #48]	; 0x30
 8003e06:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <BSP_TS_INT_MspInit+0x44>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	683b      	ldr	r3, [r7, #0]

  /* GPIO configuration in input for TouchScreen interrupt signal on TS_INT pin */
  gpio_init_structure.Pin       = TS_INT_PIN;
 8003e12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e16:	607b      	str	r3, [r7, #4]

  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8003e20:	2303      	movs	r3, #3
 8003e22:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TS_INT_GPIO_PORT, &gpio_init_structure);
 8003e24:	1d3b      	adds	r3, r7, #4
 8003e26:	4619      	mov	r1, r3
 8003e28:	4804      	ldr	r0, [pc, #16]	; (8003e3c <BSP_TS_INT_MspInit+0x48>)
 8003e2a:	f001 fd97 	bl	800595c <HAL_GPIO_Init>
}
 8003e2e:	bf00      	nop
 8003e30:	3718      	adds	r7, #24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	40022000 	.word	0x40022000

08003e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e44:	2003      	movs	r0, #3
 8003e46:	f000 fa1a 	bl	800427e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e4a:	2000      	movs	r0, #0
 8003e4c:	f7fd ff8c 	bl	8001d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e50:	f7fd fcc0 	bl	80017d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e60:	4b06      	ldr	r3, [pc, #24]	; (8003e7c <HAL_IncTick+0x20>)
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	461a      	mov	r2, r3
 8003e66:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <HAL_IncTick+0x24>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	4a04      	ldr	r2, [pc, #16]	; (8003e80 <HAL_IncTick+0x24>)
 8003e6e:	6013      	str	r3, [r2, #0]
}
 8003e70:	bf00      	nop
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	2000004c 	.word	0x2000004c
 8003e80:	20000b80 	.word	0x20000b80

08003e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  return uwTick;
 8003e88:	4b03      	ldr	r3, [pc, #12]	; (8003e98 <HAL_GetTick+0x14>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	20000b80 	.word	0x20000b80

08003e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ea4:	f7ff ffee 	bl	8003e84 <HAL_GetTick>
 8003ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eb4:	d005      	beq.n	8003ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003eb6:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <HAL_Delay+0x44>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ec2:	bf00      	nop
 8003ec4:	f7ff ffde 	bl	8003e84 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d8f7      	bhi.n	8003ec4 <HAL_Delay+0x28>
  {
  }
}
 8003ed4:	bf00      	nop
 8003ed6:	bf00      	nop
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	2000004c 	.word	0x2000004c

08003ee4 <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t itflag;
  itflag = hcec->Instance->ISR;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_ARBLST))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2280      	movs	r2, #128	; 0x80
 8003f02:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	691a      	ldr	r2, [r3, #16]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f12:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXBR))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d01c      	beq.n	8003f58 <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2222      	movs	r2, #34	; 0x22
 8003f22:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->RxXferSize++;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f28:	3301      	adds	r3, #1
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	865a      	strh	r2, [r3, #50]	; 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3a:	b2d2      	uxtb	r2, r2
 8003f3c:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	691a      	ldr	r2, [r3, #16]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0201 	orr.w	r2, r2, #1
 8003f56:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXEND))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d01e      	beq.n	8003fa0 <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f042 0202 	orr.w	r2, r2, #2
 8003f70:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2220      	movs	r2, #32
 8003f76:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	641a      	str	r2, [r3, #64]	; 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f86:	425b      	negs	r3, r3
 8003f88:	441a      	add	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003f92:	4619      	mov	r1, r3
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f88b 	bl	80040b0 <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXBR))
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d024      	beq.n	8003ff4 <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	861a      	strh	r2, [r3, #48]	; 0x30
    if (hcec->TxXferCount == 0U)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d107      	bne.n	8003fce <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f042 0204 	orr.w	r2, r2, #4
 8003fcc:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = (uint8_t)*hcec->pTxBuffPtr;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	781a      	ldrb	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	691a      	ldr	r2, [r3, #16]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ff2:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXEND))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d014      	beq.n	8004028 <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	691a      	ldr	r2, [r3, #16]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800400c:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2220      	movs	r2, #32
 8004012:	639a      	str	r2, [r3, #56]	; 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f83a 	bl	800409c <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR |
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	f641 437c 	movw	r3, #7292	; 0x1c7c
 800402e:	4013      	ands	r3, r2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d02f      	beq.n	8004094 <HAL_CEC_IRQHandler+0x1b0>
              CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = itflag;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6919      	ldr	r1, [r3, #16]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	f641 437c 	movw	r3, #7292	; 0x1c7c
 8004048:	430b      	orrs	r3, r1
 800404a:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00e      	beq.n	8004074 <HAL_CEC_IRQHandler+0x190>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800405e:	425b      	negs	r3, r3
 8004060:	441a      	add	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	629a      	str	r2, [r3, #40]	; 0x28
      hcec->RxXferSize = 0U;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	865a      	strh	r2, [r3, #50]	; 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2220      	movs	r2, #32
 8004070:	63da      	str	r2, [r3, #60]	; 0x3c
 8004072:	e00c      	b.n	800408e <HAL_CEC_IRQHandler+0x1aa>
    }
    else if (((itflag & CEC_ISR_ARBLST) == 0U) && ((itflag & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407a:	2b00      	cmp	r3, #0
 800407c:	d107      	bne.n	800408e <HAL_CEC_IRQHandler+0x1aa>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004084:	2b00      	cmp	r3, #0
 8004086:	d002      	beq.n	800408e <HAL_CEC_IRQHandler+0x1aa>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2220      	movs	r2, #32
 800408c:	639a      	str	r2, [r3, #56]	; 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f819 	bl	80040c6 <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 8004094:	bf00      	nop
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
	...

080040dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040ec:	4b0b      	ldr	r3, [pc, #44]	; (800411c <__NVIC_SetPriorityGrouping+0x40>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040f8:	4013      	ands	r3, r2
 80040fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004104:	4b06      	ldr	r3, [pc, #24]	; (8004120 <__NVIC_SetPriorityGrouping+0x44>)
 8004106:	4313      	orrs	r3, r2
 8004108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800410a:	4a04      	ldr	r2, [pc, #16]	; (800411c <__NVIC_SetPriorityGrouping+0x40>)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	60d3      	str	r3, [r2, #12]
}
 8004110:	bf00      	nop
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	e000ed00 	.word	0xe000ed00
 8004120:	05fa0000 	.word	0x05fa0000

08004124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004128:	4b04      	ldr	r3, [pc, #16]	; (800413c <__NVIC_GetPriorityGrouping+0x18>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	0a1b      	lsrs	r3, r3, #8
 800412e:	f003 0307 	and.w	r3, r3, #7
}
 8004132:	4618      	mov	r0, r3
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr
 800413c:	e000ed00 	.word	0xe000ed00

08004140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	4603      	mov	r3, r0
 8004148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800414a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414e:	2b00      	cmp	r3, #0
 8004150:	db0b      	blt.n	800416a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004152:	79fb      	ldrb	r3, [r7, #7]
 8004154:	f003 021f 	and.w	r2, r3, #31
 8004158:	4907      	ldr	r1, [pc, #28]	; (8004178 <__NVIC_EnableIRQ+0x38>)
 800415a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	2001      	movs	r0, #1
 8004162:	fa00 f202 	lsl.w	r2, r0, r2
 8004166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	e000e100 	.word	0xe000e100

0800417c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	4603      	mov	r3, r0
 8004184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418a:	2b00      	cmp	r3, #0
 800418c:	db12      	blt.n	80041b4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800418e:	79fb      	ldrb	r3, [r7, #7]
 8004190:	f003 021f 	and.w	r2, r3, #31
 8004194:	490a      	ldr	r1, [pc, #40]	; (80041c0 <__NVIC_DisableIRQ+0x44>)
 8004196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	2001      	movs	r0, #1
 800419e:	fa00 f202 	lsl.w	r2, r0, r2
 80041a2:	3320      	adds	r3, #32
 80041a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80041a8:	f3bf 8f4f 	dsb	sy
}
 80041ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80041ae:	f3bf 8f6f 	isb	sy
}
 80041b2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	e000e100 	.word	0xe000e100

080041c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	4603      	mov	r3, r0
 80041cc:	6039      	str	r1, [r7, #0]
 80041ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	db0a      	blt.n	80041ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	490c      	ldr	r1, [pc, #48]	; (8004210 <__NVIC_SetPriority+0x4c>)
 80041de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e2:	0112      	lsls	r2, r2, #4
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	440b      	add	r3, r1
 80041e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041ec:	e00a      	b.n	8004204 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	4908      	ldr	r1, [pc, #32]	; (8004214 <__NVIC_SetPriority+0x50>)
 80041f4:	79fb      	ldrb	r3, [r7, #7]
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	3b04      	subs	r3, #4
 80041fc:	0112      	lsls	r2, r2, #4
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	440b      	add	r3, r1
 8004202:	761a      	strb	r2, [r3, #24]
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	e000e100 	.word	0xe000e100
 8004214:	e000ed00 	.word	0xe000ed00

08004218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004218:	b480      	push	{r7}
 800421a:	b089      	sub	sp, #36	; 0x24
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f1c3 0307 	rsb	r3, r3, #7
 8004232:	2b04      	cmp	r3, #4
 8004234:	bf28      	it	cs
 8004236:	2304      	movcs	r3, #4
 8004238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	3304      	adds	r3, #4
 800423e:	2b06      	cmp	r3, #6
 8004240:	d902      	bls.n	8004248 <NVIC_EncodePriority+0x30>
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	3b03      	subs	r3, #3
 8004246:	e000      	b.n	800424a <NVIC_EncodePriority+0x32>
 8004248:	2300      	movs	r3, #0
 800424a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800424c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	43da      	mvns	r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	401a      	ands	r2, r3
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004260:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	fa01 f303 	lsl.w	r3, r1, r3
 800426a:	43d9      	mvns	r1, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004270:	4313      	orrs	r3, r2
         );
}
 8004272:	4618      	mov	r0, r3
 8004274:	3724      	adds	r7, #36	; 0x24
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b082      	sub	sp, #8
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7ff ff28 	bl	80040dc <__NVIC_SetPriorityGrouping>
}
 800428c:	bf00      	nop
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	4603      	mov	r3, r0
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80042a2:	2300      	movs	r3, #0
 80042a4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80042a6:	f7ff ff3d 	bl	8004124 <__NVIC_GetPriorityGrouping>
 80042aa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	68b9      	ldr	r1, [r7, #8]
 80042b0:	6978      	ldr	r0, [r7, #20]
 80042b2:	f7ff ffb1 	bl	8004218 <NVIC_EncodePriority>
 80042b6:	4602      	mov	r2, r0
 80042b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042bc:	4611      	mov	r1, r2
 80042be:	4618      	mov	r0, r3
 80042c0:	f7ff ff80 	bl	80041c4 <__NVIC_SetPriority>
}
 80042c4:	bf00      	nop
 80042c6:	3718      	adds	r7, #24
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b082      	sub	sp, #8
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7ff ff30 	bl	8004140 <__NVIC_EnableIRQ>
}
 80042e0:	bf00      	nop
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80042f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7ff ff40 	bl	800417c <__NVIC_DisableIRQ>
}
 80042fc:	bf00      	nop
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004310:	f7ff fdb8 	bl	8003e84 <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e099      	b.n	8004454 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0201 	bic.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004340:	e00f      	b.n	8004362 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004342:	f7ff fd9f 	bl	8003e84 <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b05      	cmp	r3, #5
 800434e:	d908      	bls.n	8004362 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2220      	movs	r2, #32
 8004354:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2203      	movs	r2, #3
 800435a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e078      	b.n	8004454 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0301 	and.w	r3, r3, #1
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1e8      	bne.n	8004342 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	4b38      	ldr	r3, [pc, #224]	; (800445c <HAL_DMA_Init+0x158>)
 800437c:	4013      	ands	r3, r2
 800437e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800438e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800439a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d107      	bne.n	80043cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c4:	4313      	orrs	r3, r2
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f023 0307 	bic.w	r3, r3, #7
 80043e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d117      	bne.n	8004426 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00e      	beq.n	8004426 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f000 f8bd 	bl	8004588 <DMA_CheckFifoParam>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d008      	beq.n	8004426 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2240      	movs	r2, #64	; 0x40
 8004418:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004422:	2301      	movs	r3, #1
 8004424:	e016      	b.n	8004454 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 f874 	bl	800451c <DMA_CalcBaseAndBitshift>
 8004434:	4603      	mov	r3, r0
 8004436:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443c:	223f      	movs	r2, #63	; 0x3f
 800443e:	409a      	lsls	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2201      	movs	r2, #1
 800444e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	e010803f 	.word	0xe010803f

08004460 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e050      	b.n	8004514 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d101      	bne.n	8004482 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800447e:	2302      	movs	r3, #2
 8004480:	e048      	b.n	8004514 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0201 	bic.w	r2, r2, #1
 8004490:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2200      	movs	r2, #0
 80044a0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2200      	movs	r2, #0
 80044a8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2200      	movs	r2, #0
 80044b0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2200      	movs	r2, #0
 80044b8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2221      	movs	r2, #33	; 0x21
 80044c0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f82a 	bl	800451c <DMA_CalcBaseAndBitshift>
 80044c8:	4603      	mov	r3, r0
 80044ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d0:	223f      	movs	r2, #63	; 0x3f
 80044d2:	409a      	lsls	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	b2db      	uxtb	r3, r3
 800452a:	3b10      	subs	r3, #16
 800452c:	4a13      	ldr	r2, [pc, #76]	; (800457c <DMA_CalcBaseAndBitshift+0x60>)
 800452e:	fba2 2303 	umull	r2, r3, r2, r3
 8004532:	091b      	lsrs	r3, r3, #4
 8004534:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004536:	4a12      	ldr	r2, [pc, #72]	; (8004580 <DMA_CalcBaseAndBitshift+0x64>)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4413      	add	r3, r2
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	461a      	mov	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2b03      	cmp	r3, #3
 8004548:	d908      	bls.n	800455c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	461a      	mov	r2, r3
 8004550:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <DMA_CalcBaseAndBitshift+0x68>)
 8004552:	4013      	ands	r3, r2
 8004554:	1d1a      	adds	r2, r3, #4
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	659a      	str	r2, [r3, #88]	; 0x58
 800455a:	e006      	b.n	800456a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	461a      	mov	r2, r3
 8004562:	4b08      	ldr	r3, [pc, #32]	; (8004584 <DMA_CalcBaseAndBitshift+0x68>)
 8004564:	4013      	ands	r3, r2
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800456e:	4618      	mov	r0, r3
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	aaaaaaab 	.word	0xaaaaaaab
 8004580:	080101b8 	.word	0x080101b8
 8004584:	fffffc00 	.word	0xfffffc00

08004588 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004590:	2300      	movs	r3, #0
 8004592:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004598:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d11f      	bne.n	80045e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d856      	bhi.n	8004656 <DMA_CheckFifoParam+0xce>
 80045a8:	a201      	add	r2, pc, #4	; (adr r2, 80045b0 <DMA_CheckFifoParam+0x28>)
 80045aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ae:	bf00      	nop
 80045b0:	080045c1 	.word	0x080045c1
 80045b4:	080045d3 	.word	0x080045d3
 80045b8:	080045c1 	.word	0x080045c1
 80045bc:	08004657 	.word	0x08004657
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d046      	beq.n	800465a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045d0:	e043      	b.n	800465a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045da:	d140      	bne.n	800465e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045e0:	e03d      	b.n	800465e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ea:	d121      	bne.n	8004630 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d837      	bhi.n	8004662 <DMA_CheckFifoParam+0xda>
 80045f2:	a201      	add	r2, pc, #4	; (adr r2, 80045f8 <DMA_CheckFifoParam+0x70>)
 80045f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f8:	08004609 	.word	0x08004609
 80045fc:	0800460f 	.word	0x0800460f
 8004600:	08004609 	.word	0x08004609
 8004604:	08004621 	.word	0x08004621
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	73fb      	strb	r3, [r7, #15]
      break;
 800460c:	e030      	b.n	8004670 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004612:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d025      	beq.n	8004666 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800461e:	e022      	b.n	8004666 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004628:	d11f      	bne.n	800466a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800462e:	e01c      	b.n	800466a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2b02      	cmp	r3, #2
 8004634:	d903      	bls.n	800463e <DMA_CheckFifoParam+0xb6>
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b03      	cmp	r3, #3
 800463a:	d003      	beq.n	8004644 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800463c:	e018      	b.n	8004670 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	73fb      	strb	r3, [r7, #15]
      break;
 8004642:	e015      	b.n	8004670 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004648:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00e      	beq.n	800466e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	73fb      	strb	r3, [r7, #15]
      break;
 8004654:	e00b      	b.n	800466e <DMA_CheckFifoParam+0xe6>
      break;
 8004656:	bf00      	nop
 8004658:	e00a      	b.n	8004670 <DMA_CheckFifoParam+0xe8>
      break;
 800465a:	bf00      	nop
 800465c:	e008      	b.n	8004670 <DMA_CheckFifoParam+0xe8>
      break;
 800465e:	bf00      	nop
 8004660:	e006      	b.n	8004670 <DMA_CheckFifoParam+0xe8>
      break;
 8004662:	bf00      	nop
 8004664:	e004      	b.n	8004670 <DMA_CheckFifoParam+0xe8>
      break;
 8004666:	bf00      	nop
 8004668:	e002      	b.n	8004670 <DMA_CheckFifoParam+0xe8>
      break;   
 800466a:	bf00      	nop
 800466c:	e000      	b.n	8004670 <DMA_CheckFifoParam+0xe8>
      break;
 800466e:	bf00      	nop
    }
  } 
  
  return status; 
 8004670:	7bfb      	ldrb	r3, [r7, #15]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop

08004680 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e049      	b.n	8004726 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d106      	bne.n	80046ac <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7fd f8bc 	bl	8001824 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d0:	f023 0107 	bic.w	r1, r3, #7
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689a      	ldr	r2, [r3, #8]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	430a      	orrs	r2, r1
 80046de:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046e6:	4b12      	ldr	r3, [pc, #72]	; (8004730 <HAL_DMA2D_Init+0xb0>)
 80046e8:	4013      	ands	r3, r2
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	68d1      	ldr	r1, [r2, #12]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6812      	ldr	r2, [r2, #0]
 80046f2:	430b      	orrs	r3, r1
 80046f4:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046fc:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	051a      	lsls	r2, r3, #20
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	055b      	lsls	r3, r3, #21
 800470c:	431a      	orrs	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	ffffc000 	.word	0xffffc000

08004734 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af02      	add	r7, sp, #8
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
 8004740:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004748:	2b01      	cmp	r3, #1
 800474a:	d101      	bne.n	8004750 <HAL_DMA2D_Start+0x1c>
 800474c:	2302      	movs	r3, #2
 800474e:	e018      	b.n	8004782 <HAL_DMA2D_Start+0x4e>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	68b9      	ldr	r1, [r7, #8]
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 faa4 	bl	8004cb8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b086      	sub	sp, #24
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
 8004792:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004794:	2300      	movs	r3, #0
 8004796:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d056      	beq.n	8004854 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80047a6:	f7ff fb6d 	bl	8003e84 <HAL_GetTick>
 80047aa:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80047ac:	e04b      	b.n	8004846 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d023      	beq.n	8004808 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f003 0320 	and.w	r3, r3, #32
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d005      	beq.n	80047d6 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ce:	f043 0202 	orr.w	r2, r3, #2
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d005      	beq.n	80047ec <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e4:	f043 0201 	orr.w	r2, r3, #1
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2221      	movs	r2, #33	; 0x21
 80047f2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2204      	movs	r2, #4
 80047f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e0a5      	b.n	8004954 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800480e:	d01a      	beq.n	8004846 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004810:	f7ff fb38 	bl	8003e84 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d302      	bcc.n	8004826 <HAL_DMA2D_PollForTransfer+0x9c>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10f      	bne.n	8004846 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482a:	f043 0220 	orr.w	r2, r3, #32
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2203      	movs	r2, #3
 8004836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e086      	b.n	8004954 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0ac      	beq.n	80047ae <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	f003 0320 	and.w	r3, r3, #32
 800485e:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	4313      	orrs	r3, r2
 800486e:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d061      	beq.n	800493a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004876:	f7ff fb05 	bl	8003e84 <HAL_GetTick>
 800487a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800487c:	e056      	b.n	800492c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800488c:	2b00      	cmp	r3, #0
 800488e:	d02e      	beq.n	80048ee <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	2b00      	cmp	r3, #0
 8004898:	d005      	beq.n	80048a6 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489e:	f043 0204 	orr.w	r2, r3, #4
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f003 0320 	and.w	r3, r3, #32
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d005      	beq.n	80048bc <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b4:	f043 0202 	orr.w	r2, r3, #2
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d005      	beq.n	80048d2 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ca:	f043 0201 	orr.w	r2, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2229      	movs	r2, #41	; 0x29
 80048d8:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2204      	movs	r2, #4
 80048de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e032      	b.n	8004954 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048f4:	d01a      	beq.n	800492c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048f6:	f7ff fac5 	bl	8003e84 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d302      	bcc.n	800490c <HAL_DMA2D_PollForTransfer+0x182>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d10f      	bne.n	800492c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004910:	f043 0220 	orr.w	r2, r3, #32
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2203      	movs	r2, #3
 800491c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e013      	b.n	8004954 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f003 0310 	and.w	r3, r3, #16
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0a1      	beq.n	800487e <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2212      	movs	r2, #18
 8004940:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3718      	adds	r7, #24
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d026      	beq.n	80049cc <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004984:	2b00      	cmp	r3, #0
 8004986:	d021      	beq.n	80049cc <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004996:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800499c:	f043 0201 	orr.w	r2, r3, #1
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2201      	movs	r2, #1
 80049aa:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2204      	movs	r2, #4
 80049b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	69db      	ldr	r3, [r3, #28]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f003 0320 	and.w	r3, r3, #32
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d026      	beq.n	8004a24 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d021      	beq.n	8004a24 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049ee:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2220      	movs	r2, #32
 80049f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fc:	f043 0202 	orr.w	r2, r3, #2
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2204      	movs	r2, #4
 8004a08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d003      	beq.n	8004a24 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	69db      	ldr	r3, [r3, #28]
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d026      	beq.n	8004a7c <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d021      	beq.n	8004a7c <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a46:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2208      	movs	r2, #8
 8004a4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a54:	f043 0204 	orr.w	r2, r3, #4
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2204      	movs	r2, #4
 8004a60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	69db      	ldr	r3, [r3, #28]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	69db      	ldr	r3, [r3, #28]
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f003 0304 	and.w	r3, r3, #4
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d013      	beq.n	8004aae <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00e      	beq.n	8004aae <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a9e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2204      	movs	r2, #4
 8004aa6:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f853 	bl	8004b54 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d024      	beq.n	8004b02 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d01f      	beq.n	8004b02 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ad0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f003 0310 	and.w	r3, r3, #16
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d01f      	beq.n	8004b4c <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d01a      	beq.n	8004b4c <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b24:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2210      	movs	r2, #16
 8004b2c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f80e 	bl	8004b68 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8004b4c:	bf00      	nop
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b087      	sub	sp, #28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d101      	bne.n	8004b9c <HAL_DMA2D_ConfigLayer+0x20>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	e084      	b.n	8004ca6 <HAL_DMA2D_ConfigLayer+0x12a>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	4413      	add	r3, r2
 8004bb4:	00db      	lsls	r3, r3, #3
 8004bb6:	3320      	adds	r3, #32
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	4413      	add	r3, r2
 8004bbc:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	041b      	lsls	r3, r3, #16
 8004bc8:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004bd0:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8004bdc:	4b35      	ldr	r3, [pc, #212]	; (8004cb4 <HAL_DMA2D_ConfigLayer+0x138>)
 8004bde:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	2b0a      	cmp	r3, #10
 8004be6:	d003      	beq.n	8004bf0 <HAL_DMA2D_ConfigLayer+0x74>
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2b09      	cmp	r3, #9
 8004bee:	d107      	bne.n	8004c00 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	617b      	str	r3, [r7, #20]
 8004bfe:	e005      	b.n	8004c0c <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	061b      	lsls	r3, r3, #24
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d120      	bne.n	8004c54 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	43db      	mvns	r3, r3
 8004c1c:	ea02 0103 	and.w	r1, r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	6812      	ldr	r2, [r2, #0]
 8004c32:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	2b0a      	cmp	r3, #10
 8004c3a:	d003      	beq.n	8004c44 <HAL_DMA2D_ConfigLayer+0xc8>
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	2b09      	cmp	r3, #9
 8004c42:	d127      	bne.n	8004c94 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	68da      	ldr	r2, [r3, #12]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004c50:	629a      	str	r2, [r3, #40]	; 0x28
 8004c52:	e01f      	b.n	8004c94 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	69da      	ldr	r2, [r3, #28]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	43db      	mvns	r3, r3
 8004c5e:	ea02 0103 	and.w	r1, r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	697a      	ldr	r2, [r7, #20]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	6812      	ldr	r2, [r2, #0]
 8004c74:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	2b0a      	cmp	r3, #10
 8004c7c:	d003      	beq.n	8004c86 <HAL_DMA2D_ConfigLayer+0x10a>
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	2b09      	cmp	r3, #9
 8004c84:	d106      	bne.n	8004c94 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8004c92:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	371c      	adds	r7, #28
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	ff33000f 	.word	0xff33000f

08004cb8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b08b      	sub	sp, #44	; 0x2c
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
 8004cc4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ccc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	041a      	lsls	r2, r3, #16
 8004cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004cf0:	d174      	bne.n	8004ddc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004cf8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d00:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004d08:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d108      	bne.n	8004d2a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	431a      	orrs	r2, r3
 8004d1e:	6a3b      	ldr	r3, [r7, #32]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	627b      	str	r3, [r7, #36]	; 0x24
 8004d28:	e053      	b.n	8004dd2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d106      	bne.n	8004d40 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d3e:	e048      	b.n	8004dd2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d111      	bne.n	8004d6c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	0cdb      	lsrs	r3, r3, #19
 8004d4c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	0a9b      	lsrs	r3, r3, #10
 8004d52:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	08db      	lsrs	r3, r3, #3
 8004d58:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	02db      	lsls	r3, r3, #11
 8004d62:	4313      	orrs	r3, r2
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	627b      	str	r3, [r7, #36]	; 0x24
 8004d6a:	e032      	b.n	8004dd2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	2b03      	cmp	r3, #3
 8004d72:	d117      	bne.n	8004da4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	0fdb      	lsrs	r3, r3, #31
 8004d78:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	0cdb      	lsrs	r3, r3, #19
 8004d7e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	0adb      	lsrs	r3, r3, #11
 8004d84:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	08db      	lsrs	r3, r3, #3
 8004d8a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	015a      	lsls	r2, r3, #5
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	029b      	lsls	r3, r3, #10
 8004d94:	431a      	orrs	r2, r3
 8004d96:	6a3b      	ldr	r3, [r7, #32]
 8004d98:	03db      	lsls	r3, r3, #15
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	627b      	str	r3, [r7, #36]	; 0x24
 8004da2:	e016      	b.n	8004dd2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	0f1b      	lsrs	r3, r3, #28
 8004da8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	0d1b      	lsrs	r3, r3, #20
 8004dae:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	0b1b      	lsrs	r3, r3, #12
 8004db4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	091b      	lsrs	r3, r3, #4
 8004dba:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	011a      	lsls	r2, r3, #4
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	021b      	lsls	r3, r3, #8
 8004dc4:	431a      	orrs	r2, r3
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	031b      	lsls	r3, r3, #12
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8004dda:	e003      	b.n	8004de4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	60da      	str	r2, [r3, #12]
}
 8004de4:	bf00      	nop
 8004de6:	372c      	adds	r7, #44	; 0x2c
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
 8004dfc:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	019a      	lsls	r2, r3, #6
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	431a      	orrs	r2, r3
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	021b      	lsls	r3, r3, #8
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	041b      	lsls	r3, r3, #16
 8004e10:	431a      	orrs	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8004e16:	bf00      	nop
 8004e18:	3714      	adds	r7, #20
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b086      	sub	sp, #24
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	60b9      	str	r1, [r7, #8]
 8004e2c:	607a      	str	r2, [r7, #4]
 8004e2e:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e30:	f7ff f828 	bl	8003e84 <HAL_GetTick>
 8004e34:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004e36:	e009      	b.n	8004e4c <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004e38:	f7ff f824 	bl	8003e84 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e46:	d901      	bls.n	8004e4c <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e015      	b.n	8004e78 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0ee      	beq.n	8004e38 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	019a      	lsls	r2, r3, #6
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	431a      	orrs	r2, r3
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	021b      	lsls	r3, r3, #8
 8004e66:	ea42 0103 	orr.w	r1, r2, r3
 8004e6a:	6a3b      	ldr	r3, [r7, #32]
 8004e6c:	041a      	lsls	r2, r3, #16
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3718      	adds	r7, #24
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b088      	sub	sp, #32
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e109      	b.n	80050a8 <HAL_DSI_Init+0x228>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	7c5b      	ldrb	r3, [r3, #17]
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d102      	bne.n	8004ea4 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fc fce6 	bl	8001870 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2203      	movs	r2, #3
 8004ea8:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8004eaa:	2300      	movs	r3, #0
 8004eac:	613b      	str	r3, [r7, #16]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004ebe:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004eca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ece:	613b      	str	r3, [r7, #16]
 8004ed0:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ed2:	f7fe ffd7 	bl	8003e84 <HAL_GetTick>
 8004ed6:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8004ed8:	e009      	b.n	8004eee <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004eda:	f7fe ffd3 	bl	8003e84 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ee8:	d901      	bls.n	8004eee <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e0dc      	b.n	80050a8 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004ef6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0ed      	beq.n	8004eda <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	4b69      	ldr	r3, [pc, #420]	; (80050b0 <HAL_DSI_Init+0x230>)
 8004f0c:	400b      	ands	r3, r1
 8004f0e:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004f26:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8004f2e:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0201 	orr.w	r2, r2, #1
 8004f4e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8004f62:	2001      	movs	r0, #1
 8004f64:	f7fe ff9a 	bl	8003e9c <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f68:	f7fe ff8c 	bl	8003e84 <HAL_GetTick>
 8004f6c:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004f6e:	e009      	b.n	8004f84 <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8004f70:	f7fe ff88 	bl	8003e84 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f7e:	d901      	bls.n	8004f84 <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e091      	b.n	80050a8 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0ed      	beq.n	8004f70 <HAL_DSI_Init+0xf0>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f042 0206 	orr.w	r2, r2, #6
 8004fa4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f022 0203 	bic.w	r2, r2, #3
 8004fb8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0201 	orr.w	r2, r2, #1
 8004fd2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0203 	bic.w	r2, r2, #3
 8004fe6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689a      	ldr	r2, [r3, #8]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800500e:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	6899      	ldr	r1, [r3, #8]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689a      	ldr	r2, [r3, #8]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d002      	beq.n	8005030 <HAL_DSI_Init+0x1b0>
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	e000      	b.n	8005032 <HAL_DSI_Init+0x1b2>
 8005030:	2301      	movs	r3, #1
 8005032:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	4a1f      	ldr	r2, [pc, #124]	; (80050b4 <HAL_DSI_Init+0x234>)
 8005038:	fb03 f202 	mul.w	r2, r3, r2
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f003 0303 	and.w	r3, r3, #3
 8005044:	409a      	lsls	r2, r3
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f246 11a8 	movw	r1, #25000	; 0x61a8
 800504e:	fb01 f303 	mul.w	r3, r1, r3
 8005052:	fbb2 f3f3 	udiv	r3, r2, r3
 8005056:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8005068:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	430a      	orrs	r2, r1
 800507c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2200      	movs	r2, #0
 8005086:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2200      	movs	r2, #0
 8005090:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3720      	adds	r7, #32
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	fffc8603 	.word	0xfffc8603
 80050b4:	003d0900 	.word	0x003d0900

080050b8 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e066      	b.n	8005198 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2203      	movs	r2, #3
 80050ce:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80050d0:	2300      	movs	r3, #0
 80050d2:	617b      	str	r3, [r7, #20]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0208 	bic.w	r2, r2, #8
 80050e4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80050f0:	f003 0308 	and.w	r3, r3, #8
 80050f4:	617b      	str	r3, [r7, #20]
 80050f6:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 80050f8:	2300      	movs	r3, #0
 80050fa:	613b      	str	r3, [r7, #16]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 0201 	bic.w	r2, r2, #1
 800510a:	605a      	str	r2, [r3, #4]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	613b      	str	r3, [r7, #16]
 8005118:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f022 0206 	bic.w	r2, r2, #6
 800512a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 800512e:	2300      	movs	r3, #0
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f022 0201 	bic.w	r2, r2, #1
 8005142:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8005156:	2300      	movs	r3, #0
 8005158:	60bb      	str	r3, [r7, #8]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800516a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8005176:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800517a:	60bb      	str	r3, [r7, #8]
 800517c:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7fc fbc2 	bl	8001908 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2200      	movs	r2, #0
 8005194:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3718      	adds	r7, #24
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00f      	beq.n	80051d8 <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d007      	beq.n	80051d8 <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f8ad 	bl	8005332 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00f      	beq.n	8005208 <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d007      	beq.n	8005208 <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2202      	movs	r2, #2
 80051fe:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f89f 	bl	8005346 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 808c 	beq.w	800532a <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800521a:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4013      	ands	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005232:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	4013      	ands	r3, r2
 8005240:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	b29b      	uxth	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d005      	beq.n	8005256 <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	f043 0201 	orr.w	r2, r3, #1
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d005      	beq.n	800526c <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	f043 0202 	orr.w	r2, r3, #2
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d005      	beq.n	8005282 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	f043 0204 	orr.w	r2, r3, #4
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d005      	beq.n	8005298 <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	695b      	ldr	r3, [r3, #20]
 8005290:	f043 0208 	orr.w	r2, r3, #8
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f003 030c 	and.w	r3, r3, #12
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d005      	beq.n	80052ae <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	f043 0210 	orr.w	r2, r3, #16
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	f003 0310 	and.w	r3, r3, #16
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d005      	beq.n	80052c4 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	f043 0220 	orr.w	r2, r3, #32
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	f003 0320 	and.w	r3, r3, #32
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d005      	beq.n	80052da <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d005      	beq.n	80052f0 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d005      	beq.n	8005306 <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800530c:	2b00      	cmp	r3, #0
 800530e:	d005      	beq.n	800531c <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d002      	beq.n	800532a <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f818 	bl	800535a <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800532a:	bf00      	nop
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8005332:	b480      	push	{r7}
 8005334:	b083      	sub	sp, #12
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 800533a:	bf00      	nop
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8005346:	b480      	push	{r7}
 8005348:	b083      	sub	sp, #12
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 800534e:	bf00      	nop
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005358:	4770      	bx	lr

0800535a <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 800535a:	b480      	push	{r7}
 800535c:	b083      	sub	sp, #12
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8005362:	bf00      	nop
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
	...

08005370 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	7c1b      	ldrb	r3, [r3, #16]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d101      	bne.n	8005386 <HAL_DSI_ConfigVideoMode+0x16>
 8005382:	2302      	movs	r3, #2
 8005384:	e1ee      	b.n	8005764 <HAL_DSI_ConfigVideoMode+0x3f4>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2201      	movs	r2, #1
 800538a:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0201 	bic.w	r2, r2, #1
 800539a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 0201 	bic.w	r2, r2, #1
 80053ac:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f022 0203 	bic.w	r2, r2, #3
 80053be:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	430a      	orrs	r2, r1
 80053d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	4b8b      	ldr	r3, [pc, #556]	; (800560c <HAL_DSI_ConfigVideoMode+0x29c>)
 80053de:	400b      	ands	r3, r1
 80053e0:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	691a      	ldr	r2, [r3, #16]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	430a      	orrs	r2, r1
 80053f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	4b84      	ldr	r3, [pc, #528]	; (8005610 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8005400:	400b      	ands	r3, r1
 8005402:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	695a      	ldr	r2, [r3, #20]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	430a      	orrs	r2, r1
 8005414:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	4b7b      	ldr	r3, [pc, #492]	; (8005610 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8005422:	400b      	ands	r3, r1
 8005424:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	699a      	ldr	r2, [r3, #24]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	430a      	orrs	r2, r1
 8005436:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68da      	ldr	r2, [r3, #12]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0203 	bic.w	r2, r2, #3
 8005446:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68d9      	ldr	r1, [r3, #12]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	430a      	orrs	r2, r1
 8005458:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	695a      	ldr	r2, [r3, #20]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 0207 	bic.w	r2, r2, #7
 8005468:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6959      	ldr	r1, [r3, #20]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	431a      	orrs	r2, r3
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	691a      	ldr	r2, [r3, #16]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 020f 	bic.w	r2, r2, #15
 8005496:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6919      	ldr	r1, [r3, #16]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 020e 	bic.w	r2, r2, #14
 80054ba:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	005a      	lsls	r2, r3, #1
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	2b03      	cmp	r3, #3
 80054dc:	d110      	bne.n	8005500 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	691a      	ldr	r2, [r3, #16]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054ec:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6919      	ldr	r1, [r3, #16]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	689a      	ldr	r2, [r3, #8]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	4b42      	ldr	r3, [pc, #264]	; (8005614 <HAL_DSI_ConfigVideoMode+0x2a4>)
 800550c:	400b      	ands	r3, r1
 800550e:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	4b39      	ldr	r3, [pc, #228]	; (8005614 <HAL_DSI_ConfigVideoMode+0x2a4>)
 800552e:	400b      	ands	r3, r1
 8005530:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	4b32      	ldr	r3, [pc, #200]	; (8005618 <HAL_DSI_ConfigVideoMode+0x2a8>)
 8005550:	400b      	ands	r3, r1
 8005552:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	4b2a      	ldr	r3, [pc, #168]	; (800561c <HAL_DSI_ConfigVideoMode+0x2ac>)
 8005572:	400b      	ands	r3, r1
 8005574:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	4b22      	ldr	r3, [pc, #136]	; (800561c <HAL_DSI_ConfigVideoMode+0x2ac>)
 8005594:	400b      	ands	r3, r1
 8005596:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	4b19      	ldr	r3, [pc, #100]	; (800561c <HAL_DSI_ConfigVideoMode+0x2ac>)
 80055b6:	400b      	ands	r3, r1
 80055b8:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	4b0d      	ldr	r3, [pc, #52]	; (800560c <HAL_DSI_ConfigVideoMode+0x29c>)
 80055d8:	400b      	ands	r3, r1
 80055da:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055fc:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005608:	e00a      	b.n	8005620 <HAL_DSI_ConfigVideoMode+0x2b0>
 800560a:	bf00      	nop
 800560c:	ffffc000 	.word	0xffffc000
 8005610:	ffffe000 	.word	0xffffe000
 8005614:	fffff000 	.word	0xfffff000
 8005618:	ffff8000 	.word	0xffff8000
 800561c:	fffffc00 	.word	0xfffffc00
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	699a      	ldr	r2, [r3, #24]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8005636:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6999      	ldr	r1, [r3, #24]
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005642:	041a      	lsls	r2, r3, #16
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699a      	ldr	r2, [r3, #24]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800565a:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6999      	ldr	r1, [r3, #24]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800567c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800569e:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056c0:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	430a      	orrs	r2, r1
 80056d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005704:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005726:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005748:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	430a      	orrs	r2, r1
 800575a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	7c1b      	ldrb	r3, [r3, #16]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d101      	bne.n	8005784 <HAL_DSI_Start+0x14>
 8005780:	2302      	movs	r3, #2
 8005782:	e02b      	b.n	80057dc <HAL_DSI_Start+0x6c>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800578a:	2300      	movs	r3, #0
 800578c:	60fb      	str	r3, [r7, #12]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f042 0201 	orr.w	r2, r2, #1
 800579c:	605a      	str	r2, [r3, #4]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	60fb      	str	r3, [r7, #12]
 80057aa:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80057ac:	2300      	movs	r3, #0
 80057ae:	60bb      	str	r3, [r7, #8]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f042 0208 	orr.w	r2, r2, #8
 80057c0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80057cc:	f003 0308 	and.w	r3, r3, #8
 80057d0:	60bb      	str	r3, [r7, #8]
 80057d2:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3714      	adds	r7, #20
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b088      	sub	sp, #32
 80057ec:	af02      	add	r7, sp, #8
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
 80057f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	7c1b      	ldrb	r3, [r3, #16]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d101      	bne.n	8005802 <HAL_DSI_ShortWrite+0x1a>
 80057fe:	2302      	movs	r3, #2
 8005800:	e010      	b.n	8005824 <HAL_DSI_ShortWrite+0x3c>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8005808:	6a3b      	ldr	r3, [r7, #32]
 800580a:	9300      	str	r3, [sp, #0]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	68b9      	ldr	r1, [r7, #8]
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f7ff fb05 	bl	8004e22 <DSI_ShortWrite>
 8005818:	4603      	mov	r3, r0
 800581a:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	741a      	strb	r2, [r3, #16]

  return status;
 8005822:	7dfb      	ldrb	r3, [r7, #23]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3718      	adds	r7, #24
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b08c      	sub	sp, #48	; 0x30
 8005830:	af02      	add	r7, sp, #8
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
 8005838:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 800583a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800583c:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	7c1b      	ldrb	r3, [r3, #16]
 8005842:	2b01      	cmp	r3, #1
 8005844:	d101      	bne.n	800584a <HAL_DSI_LongWrite+0x1e>
 8005846:	2302      	movs	r3, #2
 8005848:	e084      	b.n	8005954 <HAL_DSI_LongWrite+0x128>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2201      	movs	r2, #1
 800584e:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8005850:	f7fe fb18 	bl	8003e84 <HAL_GetTick>
 8005854:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8005856:	e00c      	b.n	8005872 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8005858:	f7fe fb14 	bl	8003e84 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005866:	d904      	bls.n	8005872 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e070      	b.n	8005954 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d0eb      	beq.n	8005858 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8005880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005882:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	2b03      	cmp	r3, #3
 8005888:	bf28      	it	cs
 800588a:	2303      	movcs	r3, #3
 800588c:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 800588e:	2300      	movs	r3, #0
 8005890:	623b      	str	r3, [r7, #32]
 8005892:	e00f      	b.n	80058b4 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	4413      	add	r3, r2
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	461a      	mov	r2, r3
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	3301      	adds	r3, #1
 80058a2:	00db      	lsls	r3, r3, #3
 80058a4:	fa02 f303 	lsl.w	r3, r2, r3
 80058a8:	69fa      	ldr	r2, [r7, #28]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 80058ae:	6a3b      	ldr	r3, [r7, #32]
 80058b0:	3301      	adds	r3, #1
 80058b2:	623b      	str	r3, [r7, #32]
 80058b4:	6a3a      	ldr	r2, [r7, #32]
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d3eb      	bcc.n	8005894 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	69fa      	ldr	r2, [r7, #28]
 80058c2:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	4413      	add	r3, r2
 80058d2:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80058d4:	e028      	b.n	8005928 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	2b04      	cmp	r3, #4
 80058da:	bf28      	it	cs
 80058dc:	2304      	movcs	r3, #4
 80058de:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 80058e0:	2300      	movs	r3, #0
 80058e2:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80058e4:	2300      	movs	r3, #0
 80058e6:	623b      	str	r3, [r7, #32]
 80058e8:	e00e      	b.n	8005908 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	4413      	add	r3, r2
 80058f0:	781b      	ldrb	r3, [r3, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	fa02 f303 	lsl.w	r3, r2, r3
 80058fc:	69fa      	ldr	r2, [r7, #28]
 80058fe:	4313      	orrs	r3, r2
 8005900:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	3301      	adds	r3, #1
 8005906:	623b      	str	r3, [r7, #32]
 8005908:	6a3a      	ldr	r2, [r7, #32]
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	429a      	cmp	r2, r3
 800590e:	d3ec      	bcc.n	80058ea <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	69fa      	ldr	r2, [r7, #28]
 8005916:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 8005918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	4413      	add	r3, r2
 8005926:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1d3      	bne.n	80058d6 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8005936:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	3301      	adds	r3, #1
 800593c:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 800593e:	b2db      	uxtb	r3, r3
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	4613      	mov	r3, r2
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	68b9      	ldr	r1, [r7, #8]
 8005948:	f7ff fa52 	bl	8004df0 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3728      	adds	r7, #40	; 0x28
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800595c:	b480      	push	{r7}
 800595e:	b089      	sub	sp, #36	; 0x24
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005966:	2300      	movs	r3, #0
 8005968:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800596a:	2300      	movs	r3, #0
 800596c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800596e:	2300      	movs	r3, #0
 8005970:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005972:	2300      	movs	r3, #0
 8005974:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005976:	2300      	movs	r3, #0
 8005978:	61fb      	str	r3, [r7, #28]
 800597a:	e175      	b.n	8005c68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800597c:	2201      	movs	r2, #1
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	fa02 f303 	lsl.w	r3, r2, r3
 8005984:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	4013      	ands	r3, r2
 800598e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	429a      	cmp	r2, r3
 8005996:	f040 8164 	bne.w	8005c62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f003 0303 	and.w	r3, r3, #3
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d005      	beq.n	80059b2 <HAL_GPIO_Init+0x56>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f003 0303 	and.w	r3, r3, #3
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d130      	bne.n	8005a14 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	2203      	movs	r2, #3
 80059be:	fa02 f303 	lsl.w	r3, r2, r3
 80059c2:	43db      	mvns	r3, r3
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	4013      	ands	r3, r2
 80059c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	68da      	ldr	r2, [r3, #12]
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	fa02 f303 	lsl.w	r3, r2, r3
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	4313      	orrs	r3, r2
 80059da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059e8:	2201      	movs	r2, #1
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	fa02 f303 	lsl.w	r3, r2, r3
 80059f0:	43db      	mvns	r3, r3
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	4013      	ands	r3, r2
 80059f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	091b      	lsrs	r3, r3, #4
 80059fe:	f003 0201 	and.w	r2, r3, #1
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	fa02 f303 	lsl.w	r3, r2, r3
 8005a08:	69ba      	ldr	r2, [r7, #24]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f003 0303 	and.w	r3, r3, #3
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d017      	beq.n	8005a50 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	2203      	movs	r2, #3
 8005a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a30:	43db      	mvns	r3, r3
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	4013      	ands	r3, r2
 8005a36:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	fa02 f303 	lsl.w	r3, r2, r3
 8005a44:	69ba      	ldr	r2, [r7, #24]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f003 0303 	and.w	r3, r3, #3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d123      	bne.n	8005aa4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	08da      	lsrs	r2, r3, #3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	3208      	adds	r2, #8
 8005a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	220f      	movs	r2, #15
 8005a74:	fa02 f303 	lsl.w	r3, r2, r3
 8005a78:	43db      	mvns	r3, r3
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	691a      	ldr	r2, [r3, #16]
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a90:	69ba      	ldr	r2, [r7, #24]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	08da      	lsrs	r2, r3, #3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	3208      	adds	r2, #8
 8005a9e:	69b9      	ldr	r1, [r7, #24]
 8005aa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	2203      	movs	r2, #3
 8005ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab4:	43db      	mvns	r3, r3
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f003 0203 	and.w	r2, r3, #3
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	005b      	lsls	r3, r3, #1
 8005ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 80be 	beq.w	8005c62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ae6:	4b66      	ldr	r3, [pc, #408]	; (8005c80 <HAL_GPIO_Init+0x324>)
 8005ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aea:	4a65      	ldr	r2, [pc, #404]	; (8005c80 <HAL_GPIO_Init+0x324>)
 8005aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005af0:	6453      	str	r3, [r2, #68]	; 0x44
 8005af2:	4b63      	ldr	r3, [pc, #396]	; (8005c80 <HAL_GPIO_Init+0x324>)
 8005af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005afa:	60fb      	str	r3, [r7, #12]
 8005afc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005afe:	4a61      	ldr	r2, [pc, #388]	; (8005c84 <HAL_GPIO_Init+0x328>)
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	089b      	lsrs	r3, r3, #2
 8005b04:	3302      	adds	r3, #2
 8005b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	f003 0303 	and.w	r3, r3, #3
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	220f      	movs	r2, #15
 8005b16:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1a:	43db      	mvns	r3, r3
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	4013      	ands	r3, r2
 8005b20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a58      	ldr	r2, [pc, #352]	; (8005c88 <HAL_GPIO_Init+0x32c>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d037      	beq.n	8005b9a <HAL_GPIO_Init+0x23e>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a57      	ldr	r2, [pc, #348]	; (8005c8c <HAL_GPIO_Init+0x330>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d031      	beq.n	8005b96 <HAL_GPIO_Init+0x23a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a56      	ldr	r2, [pc, #344]	; (8005c90 <HAL_GPIO_Init+0x334>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d02b      	beq.n	8005b92 <HAL_GPIO_Init+0x236>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a55      	ldr	r2, [pc, #340]	; (8005c94 <HAL_GPIO_Init+0x338>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d025      	beq.n	8005b8e <HAL_GPIO_Init+0x232>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a54      	ldr	r2, [pc, #336]	; (8005c98 <HAL_GPIO_Init+0x33c>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d01f      	beq.n	8005b8a <HAL_GPIO_Init+0x22e>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a53      	ldr	r2, [pc, #332]	; (8005c9c <HAL_GPIO_Init+0x340>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d019      	beq.n	8005b86 <HAL_GPIO_Init+0x22a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a52      	ldr	r2, [pc, #328]	; (8005ca0 <HAL_GPIO_Init+0x344>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d013      	beq.n	8005b82 <HAL_GPIO_Init+0x226>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a51      	ldr	r2, [pc, #324]	; (8005ca4 <HAL_GPIO_Init+0x348>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00d      	beq.n	8005b7e <HAL_GPIO_Init+0x222>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a50      	ldr	r2, [pc, #320]	; (8005ca8 <HAL_GPIO_Init+0x34c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d007      	beq.n	8005b7a <HAL_GPIO_Init+0x21e>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a4f      	ldr	r2, [pc, #316]	; (8005cac <HAL_GPIO_Init+0x350>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d101      	bne.n	8005b76 <HAL_GPIO_Init+0x21a>
 8005b72:	2309      	movs	r3, #9
 8005b74:	e012      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b76:	230a      	movs	r3, #10
 8005b78:	e010      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b7a:	2308      	movs	r3, #8
 8005b7c:	e00e      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b7e:	2307      	movs	r3, #7
 8005b80:	e00c      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b82:	2306      	movs	r3, #6
 8005b84:	e00a      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b86:	2305      	movs	r3, #5
 8005b88:	e008      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b8a:	2304      	movs	r3, #4
 8005b8c:	e006      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b8e:	2303      	movs	r3, #3
 8005b90:	e004      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b92:	2302      	movs	r3, #2
 8005b94:	e002      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b96:	2301      	movs	r3, #1
 8005b98:	e000      	b.n	8005b9c <HAL_GPIO_Init+0x240>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	69fa      	ldr	r2, [r7, #28]
 8005b9e:	f002 0203 	and.w	r2, r2, #3
 8005ba2:	0092      	lsls	r2, r2, #2
 8005ba4:	4093      	lsls	r3, r2
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005bac:	4935      	ldr	r1, [pc, #212]	; (8005c84 <HAL_GPIO_Init+0x328>)
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	089b      	lsrs	r3, r3, #2
 8005bb2:	3302      	adds	r3, #2
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005bba:	4b3d      	ldr	r3, [pc, #244]	; (8005cb0 <HAL_GPIO_Init+0x354>)
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	43db      	mvns	r3, r3
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d003      	beq.n	8005bde <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005bde:	4a34      	ldr	r2, [pc, #208]	; (8005cb0 <HAL_GPIO_Init+0x354>)
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005be4:	4b32      	ldr	r3, [pc, #200]	; (8005cb0 <HAL_GPIO_Init+0x354>)
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	43db      	mvns	r3, r3
 8005bee:	69ba      	ldr	r2, [r7, #24]
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005c08:	4a29      	ldr	r2, [pc, #164]	; (8005cb0 <HAL_GPIO_Init+0x354>)
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005c0e:	4b28      	ldr	r3, [pc, #160]	; (8005cb0 <HAL_GPIO_Init+0x354>)
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	43db      	mvns	r3, r3
 8005c18:	69ba      	ldr	r2, [r7, #24]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d003      	beq.n	8005c32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005c32:	4a1f      	ldr	r2, [pc, #124]	; (8005cb0 <HAL_GPIO_Init+0x354>)
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005c38:	4b1d      	ldr	r3, [pc, #116]	; (8005cb0 <HAL_GPIO_Init+0x354>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	43db      	mvns	r3, r3
 8005c42:	69ba      	ldr	r2, [r7, #24]
 8005c44:	4013      	ands	r3, r2
 8005c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005c5c:	4a14      	ldr	r2, [pc, #80]	; (8005cb0 <HAL_GPIO_Init+0x354>)
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	3301      	adds	r3, #1
 8005c66:	61fb      	str	r3, [r7, #28]
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	2b0f      	cmp	r3, #15
 8005c6c:	f67f ae86 	bls.w	800597c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005c70:	bf00      	nop
 8005c72:	bf00      	nop
 8005c74:	3724      	adds	r7, #36	; 0x24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	40023800 	.word	0x40023800
 8005c84:	40013800 	.word	0x40013800
 8005c88:	40020000 	.word	0x40020000
 8005c8c:	40020400 	.word	0x40020400
 8005c90:	40020800 	.word	0x40020800
 8005c94:	40020c00 	.word	0x40020c00
 8005c98:	40021000 	.word	0x40021000
 8005c9c:	40021400 	.word	0x40021400
 8005ca0:	40021800 	.word	0x40021800
 8005ca4:	40021c00 	.word	0x40021c00
 8005ca8:	40022000 	.word	0x40022000
 8005cac:	40022400 	.word	0x40022400
 8005cb0:	40013c00 	.word	0x40013c00

08005cb4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005cca:	2300      	movs	r3, #0
 8005ccc:	617b      	str	r3, [r7, #20]
 8005cce:	e0d9      	b.n	8005e84 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	4013      	ands	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005ce2:	68fa      	ldr	r2, [r7, #12]
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	f040 80c9 	bne.w	8005e7e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005cec:	4a6b      	ldr	r2, [pc, #428]	; (8005e9c <HAL_GPIO_DeInit+0x1e8>)
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	089b      	lsrs	r3, r3, #2
 8005cf2:	3302      	adds	r3, #2
 8005cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cf8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	f003 0303 	and.w	r3, r3, #3
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	220f      	movs	r2, #15
 8005d04:	fa02 f303 	lsl.w	r3, r2, r3
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a63      	ldr	r2, [pc, #396]	; (8005ea0 <HAL_GPIO_DeInit+0x1ec>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d037      	beq.n	8005d86 <HAL_GPIO_DeInit+0xd2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a62      	ldr	r2, [pc, #392]	; (8005ea4 <HAL_GPIO_DeInit+0x1f0>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d031      	beq.n	8005d82 <HAL_GPIO_DeInit+0xce>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a61      	ldr	r2, [pc, #388]	; (8005ea8 <HAL_GPIO_DeInit+0x1f4>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d02b      	beq.n	8005d7e <HAL_GPIO_DeInit+0xca>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a60      	ldr	r2, [pc, #384]	; (8005eac <HAL_GPIO_DeInit+0x1f8>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d025      	beq.n	8005d7a <HAL_GPIO_DeInit+0xc6>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a5f      	ldr	r2, [pc, #380]	; (8005eb0 <HAL_GPIO_DeInit+0x1fc>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d01f      	beq.n	8005d76 <HAL_GPIO_DeInit+0xc2>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a5e      	ldr	r2, [pc, #376]	; (8005eb4 <HAL_GPIO_DeInit+0x200>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d019      	beq.n	8005d72 <HAL_GPIO_DeInit+0xbe>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a5d      	ldr	r2, [pc, #372]	; (8005eb8 <HAL_GPIO_DeInit+0x204>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d013      	beq.n	8005d6e <HAL_GPIO_DeInit+0xba>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a5c      	ldr	r2, [pc, #368]	; (8005ebc <HAL_GPIO_DeInit+0x208>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d00d      	beq.n	8005d6a <HAL_GPIO_DeInit+0xb6>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a5b      	ldr	r2, [pc, #364]	; (8005ec0 <HAL_GPIO_DeInit+0x20c>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d007      	beq.n	8005d66 <HAL_GPIO_DeInit+0xb2>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a5a      	ldr	r2, [pc, #360]	; (8005ec4 <HAL_GPIO_DeInit+0x210>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d101      	bne.n	8005d62 <HAL_GPIO_DeInit+0xae>
 8005d5e:	2309      	movs	r3, #9
 8005d60:	e012      	b.n	8005d88 <HAL_GPIO_DeInit+0xd4>
 8005d62:	230a      	movs	r3, #10
 8005d64:	e010      	b.n	8005d88 <HAL_GPIO_DeInit+0xd4>
 8005d66:	2308      	movs	r3, #8
 8005d68:	e00e      	b.n	8005d88 <HAL_GPIO_DeInit+0xd4>
 8005d6a:	2307      	movs	r3, #7
 8005d6c:	e00c      	b.n	8005d88 <HAL_GPIO_DeInit+0xd4>
 8005d6e:	2306      	movs	r3, #6
 8005d70:	e00a      	b.n	8005d88 <HAL_GPIO_DeInit+0xd4>
 8005d72:	2305      	movs	r3, #5
 8005d74:	e008      	b.n	8005d88 <HAL_GPIO_DeInit+0xd4>
 8005d76:	2304      	movs	r3, #4
 8005d78:	e006      	b.n	8005d88 <HAL_GPIO_DeInit+0xd4>
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e004      	b.n	8005d88 <HAL_GPIO_DeInit+0xd4>
 8005d7e:	2302      	movs	r3, #2
 8005d80:	e002      	b.n	8005d88 <HAL_GPIO_DeInit+0xd4>
 8005d82:	2301      	movs	r3, #1
 8005d84:	e000      	b.n	8005d88 <HAL_GPIO_DeInit+0xd4>
 8005d86:	2300      	movs	r3, #0
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	f002 0203 	and.w	r2, r2, #3
 8005d8e:	0092      	lsls	r2, r2, #2
 8005d90:	4093      	lsls	r3, r2
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d132      	bne.n	8005dfe <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005d98:	4b4b      	ldr	r3, [pc, #300]	; (8005ec8 <HAL_GPIO_DeInit+0x214>)
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	43db      	mvns	r3, r3
 8005da0:	4949      	ldr	r1, [pc, #292]	; (8005ec8 <HAL_GPIO_DeInit+0x214>)
 8005da2:	4013      	ands	r3, r2
 8005da4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005da6:	4b48      	ldr	r3, [pc, #288]	; (8005ec8 <HAL_GPIO_DeInit+0x214>)
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	43db      	mvns	r3, r3
 8005dae:	4946      	ldr	r1, [pc, #280]	; (8005ec8 <HAL_GPIO_DeInit+0x214>)
 8005db0:	4013      	ands	r3, r2
 8005db2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005db4:	4b44      	ldr	r3, [pc, #272]	; (8005ec8 <HAL_GPIO_DeInit+0x214>)
 8005db6:	68da      	ldr	r2, [r3, #12]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	43db      	mvns	r3, r3
 8005dbc:	4942      	ldr	r1, [pc, #264]	; (8005ec8 <HAL_GPIO_DeInit+0x214>)
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005dc2:	4b41      	ldr	r3, [pc, #260]	; (8005ec8 <HAL_GPIO_DeInit+0x214>)
 8005dc4:	689a      	ldr	r2, [r3, #8]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	43db      	mvns	r3, r3
 8005dca:	493f      	ldr	r1, [pc, #252]	; (8005ec8 <HAL_GPIO_DeInit+0x214>)
 8005dcc:	4013      	ands	r3, r2
 8005dce:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f003 0303 	and.w	r3, r3, #3
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	220f      	movs	r2, #15
 8005dda:	fa02 f303 	lsl.w	r3, r2, r3
 8005dde:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005de0:	4a2e      	ldr	r2, [pc, #184]	; (8005e9c <HAL_GPIO_DeInit+0x1e8>)
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	089b      	lsrs	r3, r3, #2
 8005de6:	3302      	adds	r3, #2
 8005de8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	43da      	mvns	r2, r3
 8005df0:	482a      	ldr	r0, [pc, #168]	; (8005e9c <HAL_GPIO_DeInit+0x1e8>)
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	089b      	lsrs	r3, r3, #2
 8005df6:	400a      	ands	r2, r1
 8005df8:	3302      	adds	r3, #2
 8005dfa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	005b      	lsls	r3, r3, #1
 8005e06:	2103      	movs	r1, #3
 8005e08:	fa01 f303 	lsl.w	r3, r1, r3
 8005e0c:	43db      	mvns	r3, r3
 8005e0e:	401a      	ands	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	08da      	lsrs	r2, r3, #3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	3208      	adds	r2, #8
 8005e1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f003 0307 	and.w	r3, r3, #7
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	220f      	movs	r2, #15
 8005e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2e:	43db      	mvns	r3, r3
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	08d2      	lsrs	r2, r2, #3
 8005e34:	4019      	ands	r1, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	3208      	adds	r2, #8
 8005e3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68da      	ldr	r2, [r3, #12]
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	2103      	movs	r1, #3
 8005e48:	fa01 f303 	lsl.w	r3, r1, r3
 8005e4c:	43db      	mvns	r3, r3
 8005e4e:	401a      	ands	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	2101      	movs	r1, #1
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e60:	43db      	mvns	r3, r3
 8005e62:	401a      	ands	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	2103      	movs	r1, #3
 8005e72:	fa01 f303 	lsl.w	r3, r1, r3
 8005e76:	43db      	mvns	r3, r3
 8005e78:	401a      	ands	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	3301      	adds	r3, #1
 8005e82:	617b      	str	r3, [r7, #20]
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	2b0f      	cmp	r3, #15
 8005e88:	f67f af22 	bls.w	8005cd0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005e8c:	bf00      	nop
 8005e8e:	bf00      	nop
 8005e90:	371c      	adds	r7, #28
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	40013800 	.word	0x40013800
 8005ea0:	40020000 	.word	0x40020000
 8005ea4:	40020400 	.word	0x40020400
 8005ea8:	40020800 	.word	0x40020800
 8005eac:	40020c00 	.word	0x40020c00
 8005eb0:	40021000 	.word	0x40021000
 8005eb4:	40021400 	.word	0x40021400
 8005eb8:	40021800 	.word	0x40021800
 8005ebc:	40021c00 	.word	0x40021c00
 8005ec0:	40022000 	.word	0x40022000
 8005ec4:	40022400 	.word	0x40022400
 8005ec8:	40013c00 	.word	0x40013c00

08005ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	807b      	strh	r3, [r7, #2]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005edc:	787b      	ldrb	r3, [r7, #1]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ee2:	887a      	ldrh	r2, [r7, #2]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005ee8:	e003      	b.n	8005ef2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005eea:	887b      	ldrh	r3, [r7, #2]
 8005eec:	041a      	lsls	r2, r3, #16
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	619a      	str	r2, [r3, #24]
}
 8005ef2:	bf00      	nop
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
	...

08005f00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	4603      	mov	r3, r0
 8005f08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005f0a:	4b08      	ldr	r3, [pc, #32]	; (8005f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f0c:	695a      	ldr	r2, [r3, #20]
 8005f0e:	88fb      	ldrh	r3, [r7, #6]
 8005f10:	4013      	ands	r3, r2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d006      	beq.n	8005f24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005f16:	4a05      	ldr	r2, [pc, #20]	; (8005f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f18:	88fb      	ldrh	r3, [r7, #6]
 8005f1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005f1c:	88fb      	ldrh	r3, [r7, #6]
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f000 f806 	bl	8005f30 <HAL_GPIO_EXTI_Callback>
  }
}
 8005f24:	bf00      	nop
 8005f26:	3708      	adds	r7, #8
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	40013c00 	.word	0x40013c00

08005f30 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	4603      	mov	r3, r0
 8005f38:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005f3a:	bf00      	nop
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
	...

08005f48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e07f      	b.n	800605a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d106      	bne.n	8005f74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7fb fcea 	bl	8001948 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2224      	movs	r2, #36	; 0x24
 8005f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0201 	bic.w	r2, r2, #1
 8005f8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fa8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d107      	bne.n	8005fc2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	689a      	ldr	r2, [r3, #8]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fbe:	609a      	str	r2, [r3, #8]
 8005fc0:	e006      	b.n	8005fd0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	689a      	ldr	r2, [r3, #8]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005fce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d104      	bne.n	8005fe2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fe0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	6859      	ldr	r1, [r3, #4]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	4b1d      	ldr	r3, [pc, #116]	; (8006064 <HAL_I2C_Init+0x11c>)
 8005fee:	430b      	orrs	r3, r1
 8005ff0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006000:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	691a      	ldr	r2, [r3, #16]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	430a      	orrs	r2, r1
 800601a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	69d9      	ldr	r1, [r3, #28]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a1a      	ldr	r2, [r3, #32]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	430a      	orrs	r2, r1
 800602a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0201 	orr.w	r2, r2, #1
 800603a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2220      	movs	r2, #32
 8006046:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	02008000 	.word	0x02008000

08006068 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e021      	b.n	80060be <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2224      	movs	r2, #36	; 0x24
 800607e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f022 0201 	bic.w	r2, r2, #1
 8006090:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7fb fd22 	bl	8001adc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
	...

080060c8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b088      	sub	sp, #32
 80060cc:	af02      	add	r7, sp, #8
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	4608      	mov	r0, r1
 80060d2:	4611      	mov	r1, r2
 80060d4:	461a      	mov	r2, r3
 80060d6:	4603      	mov	r3, r0
 80060d8:	817b      	strh	r3, [r7, #10]
 80060da:	460b      	mov	r3, r1
 80060dc:	813b      	strh	r3, [r7, #8]
 80060de:	4613      	mov	r3, r2
 80060e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b20      	cmp	r3, #32
 80060ec:	f040 80f9 	bne.w	80062e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d002      	beq.n	80060fc <HAL_I2C_Mem_Write+0x34>
 80060f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d105      	bne.n	8006108 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006102:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e0ed      	b.n	80062e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800610e:	2b01      	cmp	r3, #1
 8006110:	d101      	bne.n	8006116 <HAL_I2C_Mem_Write+0x4e>
 8006112:	2302      	movs	r3, #2
 8006114:	e0e6      	b.n	80062e4 <HAL_I2C_Mem_Write+0x21c>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800611e:	f7fd feb1 	bl	8003e84 <HAL_GetTick>
 8006122:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	2319      	movs	r3, #25
 800612a:	2201      	movs	r2, #1
 800612c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f000 fad1 	bl	80066d8 <I2C_WaitOnFlagUntilTimeout>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e0d1      	b.n	80062e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2221      	movs	r2, #33	; 0x21
 8006144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2240      	movs	r2, #64	; 0x40
 800614c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6a3a      	ldr	r2, [r7, #32]
 800615a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006160:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006168:	88f8      	ldrh	r0, [r7, #6]
 800616a:	893a      	ldrh	r2, [r7, #8]
 800616c:	8979      	ldrh	r1, [r7, #10]
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	9301      	str	r3, [sp, #4]
 8006172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	4603      	mov	r3, r0
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f000 f9e1 	bl	8006540 <I2C_RequestMemoryWrite>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d005      	beq.n	8006190 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e0a9      	b.n	80062e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006194:	b29b      	uxth	r3, r3
 8006196:	2bff      	cmp	r3, #255	; 0xff
 8006198:	d90e      	bls.n	80061b8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	22ff      	movs	r2, #255	; 0xff
 800619e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	8979      	ldrh	r1, [r7, #10]
 80061a8:	2300      	movs	r3, #0
 80061aa:	9300      	str	r3, [sp, #0]
 80061ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f000 fc2d 	bl	8006a10 <I2C_TransferConfig>
 80061b6:	e00f      	b.n	80061d8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061bc:	b29a      	uxth	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	8979      	ldrh	r1, [r7, #10]
 80061ca:	2300      	movs	r3, #0
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061d2:	68f8      	ldr	r0, [r7, #12]
 80061d4:	f000 fc1c 	bl	8006a10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 fabb 	bl	8006758 <I2C_WaitOnTXISFlagUntilTimeout>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e07b      	b.n	80062e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f0:	781a      	ldrb	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006206:	b29b      	uxth	r3, r3
 8006208:	3b01      	subs	r3, #1
 800620a:	b29a      	uxth	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006214:	3b01      	subs	r3, #1
 8006216:	b29a      	uxth	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006220:	b29b      	uxth	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d034      	beq.n	8006290 <HAL_I2C_Mem_Write+0x1c8>
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800622a:	2b00      	cmp	r3, #0
 800622c:	d130      	bne.n	8006290 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006234:	2200      	movs	r2, #0
 8006236:	2180      	movs	r1, #128	; 0x80
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f000 fa4d 	bl	80066d8 <I2C_WaitOnFlagUntilTimeout>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d001      	beq.n	8006248 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e04d      	b.n	80062e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800624c:	b29b      	uxth	r3, r3
 800624e:	2bff      	cmp	r3, #255	; 0xff
 8006250:	d90e      	bls.n	8006270 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	22ff      	movs	r2, #255	; 0xff
 8006256:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800625c:	b2da      	uxtb	r2, r3
 800625e:	8979      	ldrh	r1, [r7, #10]
 8006260:	2300      	movs	r3, #0
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 fbd1 	bl	8006a10 <I2C_TransferConfig>
 800626e:	e00f      	b.n	8006290 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006274:	b29a      	uxth	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800627e:	b2da      	uxtb	r2, r3
 8006280:	8979      	ldrh	r1, [r7, #10]
 8006282:	2300      	movs	r3, #0
 8006284:	9300      	str	r3, [sp, #0]
 8006286:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f000 fbc0 	bl	8006a10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006294:	b29b      	uxth	r3, r3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d19e      	bne.n	80061d8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 fa9a 	bl	80067d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e01a      	b.n	80062e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2220      	movs	r2, #32
 80062b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6859      	ldr	r1, [r3, #4]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	4b0a      	ldr	r3, [pc, #40]	; (80062ec <HAL_I2C_Mem_Write+0x224>)
 80062c2:	400b      	ands	r3, r1
 80062c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2220      	movs	r2, #32
 80062ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80062de:	2300      	movs	r3, #0
 80062e0:	e000      	b.n	80062e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80062e2:	2302      	movs	r3, #2
  }
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	fe00e800 	.word	0xfe00e800

080062f0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b088      	sub	sp, #32
 80062f4:	af02      	add	r7, sp, #8
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	4608      	mov	r0, r1
 80062fa:	4611      	mov	r1, r2
 80062fc:	461a      	mov	r2, r3
 80062fe:	4603      	mov	r3, r0
 8006300:	817b      	strh	r3, [r7, #10]
 8006302:	460b      	mov	r3, r1
 8006304:	813b      	strh	r3, [r7, #8]
 8006306:	4613      	mov	r3, r2
 8006308:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b20      	cmp	r3, #32
 8006314:	f040 80fd 	bne.w	8006512 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d002      	beq.n	8006324 <HAL_I2C_Mem_Read+0x34>
 800631e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006320:	2b00      	cmp	r3, #0
 8006322:	d105      	bne.n	8006330 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f44f 7200 	mov.w	r2, #512	; 0x200
 800632a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e0f1      	b.n	8006514 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006336:	2b01      	cmp	r3, #1
 8006338:	d101      	bne.n	800633e <HAL_I2C_Mem_Read+0x4e>
 800633a:	2302      	movs	r3, #2
 800633c:	e0ea      	b.n	8006514 <HAL_I2C_Mem_Read+0x224>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006346:	f7fd fd9d 	bl	8003e84 <HAL_GetTick>
 800634a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	2319      	movs	r3, #25
 8006352:	2201      	movs	r2, #1
 8006354:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f000 f9bd 	bl	80066d8 <I2C_WaitOnFlagUntilTimeout>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d001      	beq.n	8006368 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e0d5      	b.n	8006514 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2222      	movs	r2, #34	; 0x22
 800636c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2240      	movs	r2, #64	; 0x40
 8006374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6a3a      	ldr	r2, [r7, #32]
 8006382:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006388:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006390:	88f8      	ldrh	r0, [r7, #6]
 8006392:	893a      	ldrh	r2, [r7, #8]
 8006394:	8979      	ldrh	r1, [r7, #10]
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	9301      	str	r3, [sp, #4]
 800639a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	4603      	mov	r3, r0
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 f921 	bl	80065e8 <I2C_RequestMemoryRead>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d005      	beq.n	80063b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e0ad      	b.n	8006514 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063bc:	b29b      	uxth	r3, r3
 80063be:	2bff      	cmp	r3, #255	; 0xff
 80063c0:	d90e      	bls.n	80063e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	22ff      	movs	r2, #255	; 0xff
 80063c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	8979      	ldrh	r1, [r7, #10]
 80063d0:	4b52      	ldr	r3, [pc, #328]	; (800651c <HAL_I2C_Mem_Read+0x22c>)
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 fb19 	bl	8006a10 <I2C_TransferConfig>
 80063de:	e00f      	b.n	8006400 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	8979      	ldrh	r1, [r7, #10]
 80063f2:	4b4a      	ldr	r3, [pc, #296]	; (800651c <HAL_I2C_Mem_Read+0x22c>)
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	f000 fb08 	bl	8006a10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	9300      	str	r3, [sp, #0]
 8006404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006406:	2200      	movs	r2, #0
 8006408:	2104      	movs	r1, #4
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 f964 	bl	80066d8 <I2C_WaitOnFlagUntilTimeout>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d001      	beq.n	800641a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e07c      	b.n	8006514 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006424:	b2d2      	uxtb	r2, r2
 8006426:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642c:	1c5a      	adds	r2, r3, #1
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006436:	3b01      	subs	r3, #1
 8006438:	b29a      	uxth	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006442:	b29b      	uxth	r3, r3
 8006444:	3b01      	subs	r3, #1
 8006446:	b29a      	uxth	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006450:	b29b      	uxth	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d034      	beq.n	80064c0 <HAL_I2C_Mem_Read+0x1d0>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800645a:	2b00      	cmp	r3, #0
 800645c:	d130      	bne.n	80064c0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006464:	2200      	movs	r2, #0
 8006466:	2180      	movs	r1, #128	; 0x80
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f000 f935 	bl	80066d8 <I2C_WaitOnFlagUntilTimeout>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e04d      	b.n	8006514 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800647c:	b29b      	uxth	r3, r3
 800647e:	2bff      	cmp	r3, #255	; 0xff
 8006480:	d90e      	bls.n	80064a0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	22ff      	movs	r2, #255	; 0xff
 8006486:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800648c:	b2da      	uxtb	r2, r3
 800648e:	8979      	ldrh	r1, [r7, #10]
 8006490:	2300      	movs	r3, #0
 8006492:	9300      	str	r3, [sp, #0]
 8006494:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 fab9 	bl	8006a10 <I2C_TransferConfig>
 800649e:	e00f      	b.n	80064c0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	8979      	ldrh	r1, [r7, #10]
 80064b2:	2300      	movs	r3, #0
 80064b4:	9300      	str	r3, [sp, #0]
 80064b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f000 faa8 	bl	8006a10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d19a      	bne.n	8006400 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 f982 	bl	80067d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e01a      	b.n	8006514 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2220      	movs	r2, #32
 80064e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6859      	ldr	r1, [r3, #4]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	4b0b      	ldr	r3, [pc, #44]	; (8006520 <HAL_I2C_Mem_Read+0x230>)
 80064f2:	400b      	ands	r3, r1
 80064f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800650e:	2300      	movs	r3, #0
 8006510:	e000      	b.n	8006514 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006512:	2302      	movs	r3, #2
  }
}
 8006514:	4618      	mov	r0, r3
 8006516:	3718      	adds	r7, #24
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	80002400 	.word	0x80002400
 8006520:	fe00e800 	.word	0xfe00e800

08006524 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006532:	b2db      	uxtb	r3, r3
}
 8006534:	4618      	mov	r0, r3
 8006536:	370c      	adds	r7, #12
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af02      	add	r7, sp, #8
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	4608      	mov	r0, r1
 800654a:	4611      	mov	r1, r2
 800654c:	461a      	mov	r2, r3
 800654e:	4603      	mov	r3, r0
 8006550:	817b      	strh	r3, [r7, #10]
 8006552:	460b      	mov	r3, r1
 8006554:	813b      	strh	r3, [r7, #8]
 8006556:	4613      	mov	r3, r2
 8006558:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800655a:	88fb      	ldrh	r3, [r7, #6]
 800655c:	b2da      	uxtb	r2, r3
 800655e:	8979      	ldrh	r1, [r7, #10]
 8006560:	4b20      	ldr	r3, [pc, #128]	; (80065e4 <I2C_RequestMemoryWrite+0xa4>)
 8006562:	9300      	str	r3, [sp, #0]
 8006564:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 fa51 	bl	8006a10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800656e:	69fa      	ldr	r2, [r7, #28]
 8006570:	69b9      	ldr	r1, [r7, #24]
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f000 f8f0 	bl	8006758 <I2C_WaitOnTXISFlagUntilTimeout>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d001      	beq.n	8006582 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e02c      	b.n	80065dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006582:	88fb      	ldrh	r3, [r7, #6]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d105      	bne.n	8006594 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006588:	893b      	ldrh	r3, [r7, #8]
 800658a:	b2da      	uxtb	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	629a      	str	r2, [r3, #40]	; 0x28
 8006592:	e015      	b.n	80065c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006594:	893b      	ldrh	r3, [r7, #8]
 8006596:	0a1b      	lsrs	r3, r3, #8
 8006598:	b29b      	uxth	r3, r3
 800659a:	b2da      	uxtb	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80065a2:	69fa      	ldr	r2, [r7, #28]
 80065a4:	69b9      	ldr	r1, [r7, #24]
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f000 f8d6 	bl	8006758 <I2C_WaitOnTXISFlagUntilTimeout>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d001      	beq.n	80065b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e012      	b.n	80065dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80065b6:	893b      	ldrh	r3, [r7, #8]
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	2200      	movs	r2, #0
 80065c8:	2180      	movs	r1, #128	; 0x80
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f000 f884 	bl	80066d8 <I2C_WaitOnFlagUntilTimeout>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e000      	b.n	80065dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	80002000 	.word	0x80002000

080065e8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af02      	add	r7, sp, #8
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	4608      	mov	r0, r1
 80065f2:	4611      	mov	r1, r2
 80065f4:	461a      	mov	r2, r3
 80065f6:	4603      	mov	r3, r0
 80065f8:	817b      	strh	r3, [r7, #10]
 80065fa:	460b      	mov	r3, r1
 80065fc:	813b      	strh	r3, [r7, #8]
 80065fe:	4613      	mov	r3, r2
 8006600:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006602:	88fb      	ldrh	r3, [r7, #6]
 8006604:	b2da      	uxtb	r2, r3
 8006606:	8979      	ldrh	r1, [r7, #10]
 8006608:	4b20      	ldr	r3, [pc, #128]	; (800668c <I2C_RequestMemoryRead+0xa4>)
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	2300      	movs	r3, #0
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f000 f9fe 	bl	8006a10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006614:	69fa      	ldr	r2, [r7, #28]
 8006616:	69b9      	ldr	r1, [r7, #24]
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f000 f89d 	bl	8006758 <I2C_WaitOnTXISFlagUntilTimeout>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d001      	beq.n	8006628 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e02c      	b.n	8006682 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006628:	88fb      	ldrh	r3, [r7, #6]
 800662a:	2b01      	cmp	r3, #1
 800662c:	d105      	bne.n	800663a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800662e:	893b      	ldrh	r3, [r7, #8]
 8006630:	b2da      	uxtb	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	629a      	str	r2, [r3, #40]	; 0x28
 8006638:	e015      	b.n	8006666 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800663a:	893b      	ldrh	r3, [r7, #8]
 800663c:	0a1b      	lsrs	r3, r3, #8
 800663e:	b29b      	uxth	r3, r3
 8006640:	b2da      	uxtb	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006648:	69fa      	ldr	r2, [r7, #28]
 800664a:	69b9      	ldr	r1, [r7, #24]
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 f883 	bl	8006758 <I2C_WaitOnTXISFlagUntilTimeout>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e012      	b.n	8006682 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800665c:	893b      	ldrh	r3, [r7, #8]
 800665e:	b2da      	uxtb	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	9300      	str	r3, [sp, #0]
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	2200      	movs	r2, #0
 800666e:	2140      	movs	r1, #64	; 0x40
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 f831 	bl	80066d8 <I2C_WaitOnFlagUntilTimeout>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d001      	beq.n	8006680 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e000      	b.n	8006682 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	80002000 	.word	0x80002000

08006690 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d103      	bne.n	80066ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2200      	movs	r2, #0
 80066ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d007      	beq.n	80066cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	699a      	ldr	r2, [r3, #24]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f042 0201 	orr.w	r2, r2, #1
 80066ca:	619a      	str	r2, [r3, #24]
  }
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	603b      	str	r3, [r7, #0]
 80066e4:	4613      	mov	r3, r2
 80066e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066e8:	e022      	b.n	8006730 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066f0:	d01e      	beq.n	8006730 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066f2:	f7fd fbc7 	bl	8003e84 <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d302      	bcc.n	8006708 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d113      	bne.n	8006730 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800670c:	f043 0220 	orr.w	r2, r3, #32
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2220      	movs	r2, #32
 8006718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e00f      	b.n	8006750 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	699a      	ldr	r2, [r3, #24]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	4013      	ands	r3, r2
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	429a      	cmp	r2, r3
 800673e:	bf0c      	ite	eq
 8006740:	2301      	moveq	r3, #1
 8006742:	2300      	movne	r3, #0
 8006744:	b2db      	uxtb	r3, r3
 8006746:	461a      	mov	r2, r3
 8006748:	79fb      	ldrb	r3, [r7, #7]
 800674a:	429a      	cmp	r2, r3
 800674c:	d0cd      	beq.n	80066ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006764:	e02c      	b.n	80067c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	68b9      	ldr	r1, [r7, #8]
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 f870 	bl	8006850 <I2C_IsErrorOccurred>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e02a      	b.n	80067d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006780:	d01e      	beq.n	80067c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006782:	f7fd fb7f 	bl	8003e84 <HAL_GetTick>
 8006786:	4602      	mov	r2, r0
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	68ba      	ldr	r2, [r7, #8]
 800678e:	429a      	cmp	r2, r3
 8006790:	d302      	bcc.n	8006798 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d113      	bne.n	80067c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800679c:	f043 0220 	orr.w	r2, r3, #32
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2220      	movs	r2, #32
 80067a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e007      	b.n	80067d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d1cb      	bne.n	8006766 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067e4:	e028      	b.n	8006838 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	68b9      	ldr	r1, [r7, #8]
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f000 f830 	bl	8006850 <I2C_IsErrorOccurred>
 80067f0:	4603      	mov	r3, r0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d001      	beq.n	80067fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e026      	b.n	8006848 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067fa:	f7fd fb43 	bl	8003e84 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	429a      	cmp	r2, r3
 8006808:	d302      	bcc.n	8006810 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d113      	bne.n	8006838 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006814:	f043 0220 	orr.w	r2, r3, #32
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2220      	movs	r2, #32
 8006820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e007      	b.n	8006848 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	f003 0320 	and.w	r3, r3, #32
 8006842:	2b20      	cmp	r3, #32
 8006844:	d1cf      	bne.n	80067e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b08a      	sub	sp, #40	; 0x28
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800685c:	2300      	movs	r3, #0
 800685e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800686a:	2300      	movs	r3, #0
 800686c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	f003 0310 	and.w	r3, r3, #16
 8006878:	2b00      	cmp	r3, #0
 800687a:	d068      	beq.n	800694e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2210      	movs	r2, #16
 8006882:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006884:	e049      	b.n	800691a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800688c:	d045      	beq.n	800691a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800688e:	f7fd faf9 	bl	8003e84 <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	429a      	cmp	r2, r3
 800689c:	d302      	bcc.n	80068a4 <I2C_IsErrorOccurred+0x54>
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d13a      	bne.n	800691a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80068b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068c6:	d121      	bne.n	800690c <I2C_IsErrorOccurred+0xbc>
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068ce:	d01d      	beq.n	800690c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80068d0:	7cfb      	ldrb	r3, [r7, #19]
 80068d2:	2b20      	cmp	r3, #32
 80068d4:	d01a      	beq.n	800690c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	685a      	ldr	r2, [r3, #4]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80068e6:	f7fd facd 	bl	8003e84 <HAL_GetTick>
 80068ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068ec:	e00e      	b.n	800690c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80068ee:	f7fd fac9 	bl	8003e84 <HAL_GetTick>
 80068f2:	4602      	mov	r2, r0
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	2b19      	cmp	r3, #25
 80068fa:	d907      	bls.n	800690c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	f043 0320 	orr.w	r3, r3, #32
 8006902:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800690a:	e006      	b.n	800691a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	f003 0320 	and.w	r3, r3, #32
 8006916:	2b20      	cmp	r3, #32
 8006918:	d1e9      	bne.n	80068ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	f003 0320 	and.w	r3, r3, #32
 8006924:	2b20      	cmp	r3, #32
 8006926:	d003      	beq.n	8006930 <I2C_IsErrorOccurred+0xe0>
 8006928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800692c:	2b00      	cmp	r3, #0
 800692e:	d0aa      	beq.n	8006886 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006934:	2b00      	cmp	r3, #0
 8006936:	d103      	bne.n	8006940 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2220      	movs	r2, #32
 800693e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006940:	6a3b      	ldr	r3, [r7, #32]
 8006942:	f043 0304 	orr.w	r3, r3, #4
 8006946:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00b      	beq.n	8006978 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006960:	6a3b      	ldr	r3, [r7, #32]
 8006962:	f043 0301 	orr.w	r3, r3, #1
 8006966:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006970:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00b      	beq.n	800699a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	f043 0308 	orr.w	r3, r3, #8
 8006988:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006992:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00b      	beq.n	80069bc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80069a4:	6a3b      	ldr	r3, [r7, #32]
 80069a6:	f043 0302 	orr.w	r3, r3, #2
 80069aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80069bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d01c      	beq.n	80069fe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f7ff fe63 	bl	8006690 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	6859      	ldr	r1, [r3, #4]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	4b0d      	ldr	r3, [pc, #52]	; (8006a0c <I2C_IsErrorOccurred+0x1bc>)
 80069d6:	400b      	ands	r3, r1
 80069d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	431a      	orrs	r2, r3
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2220      	movs	r2, #32
 80069ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80069fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3728      	adds	r7, #40	; 0x28
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	fe00e800 	.word	0xfe00e800

08006a10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b087      	sub	sp, #28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	607b      	str	r3, [r7, #4]
 8006a1a:	460b      	mov	r3, r1
 8006a1c:	817b      	strh	r3, [r7, #10]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a22:	897b      	ldrh	r3, [r7, #10]
 8006a24:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a28:	7a7b      	ldrb	r3, [r7, #9]
 8006a2a:	041b      	lsls	r3, r3, #16
 8006a2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a30:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a3e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	6a3b      	ldr	r3, [r7, #32]
 8006a48:	0d5b      	lsrs	r3, r3, #21
 8006a4a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006a4e:	4b08      	ldr	r3, [pc, #32]	; (8006a70 <I2C_TransferConfig+0x60>)
 8006a50:	430b      	orrs	r3, r1
 8006a52:	43db      	mvns	r3, r3
 8006a54:	ea02 0103 	and.w	r1, r2, r3
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006a62:	bf00      	nop
 8006a64:	371c      	adds	r7, #28
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	03ff63ff 	.word	0x03ff63ff

08006a74 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e0bf      	b.n	8006c06 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d106      	bne.n	8006aa0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f7fb f85a 	bl	8001b54 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	699a      	ldr	r2, [r3, #24]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006ab6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6999      	ldr	r1, [r3, #24]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	685a      	ldr	r2, [r3, #4]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006acc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	430a      	orrs	r2, r1
 8006ada:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6899      	ldr	r1, [r3, #8]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	4b4a      	ldr	r3, [pc, #296]	; (8006c10 <HAL_LTDC_Init+0x19c>)
 8006ae8:	400b      	ands	r3, r1
 8006aea:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	041b      	lsls	r3, r3, #16
 8006af2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6899      	ldr	r1, [r3, #8]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	699a      	ldr	r2, [r3, #24]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	431a      	orrs	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68d9      	ldr	r1, [r3, #12]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	4b3e      	ldr	r3, [pc, #248]	; (8006c10 <HAL_LTDC_Init+0x19c>)
 8006b16:	400b      	ands	r3, r1
 8006b18:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	041b      	lsls	r3, r3, #16
 8006b20:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68d9      	ldr	r1, [r3, #12]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a1a      	ldr	r2, [r3, #32]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	430a      	orrs	r2, r1
 8006b36:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6919      	ldr	r1, [r3, #16]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	4b33      	ldr	r3, [pc, #204]	; (8006c10 <HAL_LTDC_Init+0x19c>)
 8006b44:	400b      	ands	r3, r1
 8006b46:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4c:	041b      	lsls	r3, r3, #16
 8006b4e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6919      	ldr	r1, [r3, #16]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	431a      	orrs	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	430a      	orrs	r2, r1
 8006b64:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6959      	ldr	r1, [r3, #20]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	4b27      	ldr	r3, [pc, #156]	; (8006c10 <HAL_LTDC_Init+0x19c>)
 8006b72:	400b      	ands	r3, r1
 8006b74:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7a:	041b      	lsls	r3, r3, #16
 8006b7c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	6959      	ldr	r1, [r3, #20]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	431a      	orrs	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	430a      	orrs	r2, r1
 8006b92:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b9a:	021b      	lsls	r3, r3, #8
 8006b9c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006ba4:	041b      	lsls	r3, r3, #16
 8006ba6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006bb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006bca:	431a      	orrs	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f042 0206 	orr.w	r2, r2, #6
 8006be2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	699a      	ldr	r2, [r3, #24]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f042 0201 	orr.w	r2, r2, #1
 8006bf2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	f000f800 	.word	0xf000f800

08006c14 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c22:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c2a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f003 0304 	and.w	r3, r3, #4
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d023      	beq.n	8006c7e <HAL_LTDC_IRQHandler+0x6a>
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	f003 0304 	and.w	r3, r3, #4
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d01e      	beq.n	8006c7e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f022 0204 	bic.w	r2, r2, #4
 8006c4e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2204      	movs	r2, #4
 8006c56:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006c5e:	f043 0201 	orr.w	r2, r3, #1
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2204      	movs	r2, #4
 8006c6c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f86f 	bl	8006d5c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f003 0302 	and.w	r3, r3, #2
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d023      	beq.n	8006cd0 <HAL_LTDC_IRQHandler+0xbc>
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	f003 0302 	and.w	r3, r3, #2
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d01e      	beq.n	8006cd0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f022 0202 	bic.w	r2, r2, #2
 8006ca0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2202      	movs	r2, #2
 8006ca8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006cb0:	f043 0202 	orr.w	r2, r3, #2
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2204      	movs	r2, #4
 8006cbe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f846 	bl	8006d5c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f003 0301 	and.w	r3, r3, #1
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d01b      	beq.n	8006d12 <HAL_LTDC_IRQHandler+0xfe>
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d016      	beq.n	8006d12 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f022 0201 	bic.w	r2, r2, #1
 8006cf2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f82f 	bl	8006d70 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f003 0308 	and.w	r3, r3, #8
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d01b      	beq.n	8006d54 <HAL_LTDC_IRQHandler+0x140>
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	f003 0308 	and.w	r3, r3, #8
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d016      	beq.n	8006d54 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f022 0208 	bic.w	r2, r2, #8
 8006d34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2208      	movs	r2, #8
 8006d3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f818 	bl	8006d84 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006d54:	bf00      	nop
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d96:	4770      	bx	lr

08006d98 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006d98:	b5b0      	push	{r4, r5, r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d101      	bne.n	8006db2 <HAL_LTDC_ConfigLayer+0x1a>
 8006dae:	2302      	movs	r3, #2
 8006db0:	e02c      	b.n	8006e0c <HAL_LTDC_ConfigLayer+0x74>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2201      	movs	r2, #1
 8006db6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2134      	movs	r1, #52	; 0x34
 8006dc8:	fb01 f303 	mul.w	r3, r1, r3
 8006dcc:	4413      	add	r3, r2
 8006dce:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	4614      	mov	r4, r2
 8006dd6:	461d      	mov	r5, r3
 8006dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006dda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ddc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006dde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006de4:	682b      	ldr	r3, [r5, #0]
 8006de6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	68b9      	ldr	r1, [r7, #8]
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 f811 	bl	8006e14 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2201      	movs	r2, #1
 8006df8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bdb0      	pop	{r4, r5, r7, pc}

08006e14 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b089      	sub	sp, #36	; 0x24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	0c1b      	lsrs	r3, r3, #16
 8006e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e30:	4413      	add	r3, r2
 8006e32:	041b      	lsls	r3, r3, #16
 8006e34:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	01db      	lsls	r3, r3, #7
 8006e40:	4413      	add	r3, r2
 8006e42:	3384      	adds	r3, #132	; 0x84
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	6812      	ldr	r2, [r2, #0]
 8006e4a:	4611      	mov	r1, r2
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	01d2      	lsls	r2, r2, #7
 8006e50:	440a      	add	r2, r1
 8006e52:	3284      	adds	r2, #132	; 0x84
 8006e54:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006e58:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	0c1b      	lsrs	r3, r3, #16
 8006e66:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006e6a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006e6c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4619      	mov	r1, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	01db      	lsls	r3, r3, #7
 8006e78:	440b      	add	r3, r1
 8006e7a:	3384      	adds	r3, #132	; 0x84
 8006e7c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006e82:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	68da      	ldr	r2, [r3, #12]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e92:	4413      	add	r3, r2
 8006e94:	041b      	lsls	r3, r3, #16
 8006e96:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	01db      	lsls	r3, r3, #7
 8006ea2:	4413      	add	r3, r2
 8006ea4:	3384      	adds	r3, #132	; 0x84
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	6812      	ldr	r2, [r2, #0]
 8006eac:	4611      	mov	r1, r2
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	01d2      	lsls	r2, r2, #7
 8006eb2:	440a      	add	r2, r1
 8006eb4:	3284      	adds	r2, #132	; 0x84
 8006eb6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006eba:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	689a      	ldr	r2, [r3, #8]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	68db      	ldr	r3, [r3, #12]
 8006ec6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006eca:	4413      	add	r3, r2
 8006ecc:	1c5a      	adds	r2, r3, #1
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	01db      	lsls	r3, r3, #7
 8006ed8:	440b      	add	r3, r1
 8006eda:	3384      	adds	r3, #132	; 0x84
 8006edc:	4619      	mov	r1, r3
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	461a      	mov	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	01db      	lsls	r3, r3, #7
 8006eee:	4413      	add	r3, r2
 8006ef0:	3384      	adds	r3, #132	; 0x84
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	68fa      	ldr	r2, [r7, #12]
 8006ef6:	6812      	ldr	r2, [r2, #0]
 8006ef8:	4611      	mov	r1, r2
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	01d2      	lsls	r2, r2, #7
 8006efe:	440a      	add	r2, r1
 8006f00:	3284      	adds	r2, #132	; 0x84
 8006f02:	f023 0307 	bic.w	r3, r3, #7
 8006f06:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	01db      	lsls	r3, r3, #7
 8006f12:	4413      	add	r3, r2
 8006f14:	3384      	adds	r3, #132	; 0x84
 8006f16:	461a      	mov	r2, r3
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	691b      	ldr	r3, [r3, #16]
 8006f1c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006f24:	021b      	lsls	r3, r3, #8
 8006f26:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006f2e:	041b      	lsls	r3, r3, #16
 8006f30:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	061b      	lsls	r3, r3, #24
 8006f38:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	01db      	lsls	r3, r3, #7
 8006f44:	4413      	add	r3, r2
 8006f46:	3384      	adds	r3, #132	; 0x84
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	01db      	lsls	r3, r3, #7
 8006f54:	4413      	add	r3, r2
 8006f56:	3384      	adds	r3, #132	; 0x84
 8006f58:	461a      	mov	r2, r3
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f64:	461a      	mov	r2, r3
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	431a      	orrs	r2, r3
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	431a      	orrs	r2, r3
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4619      	mov	r1, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	01db      	lsls	r3, r3, #7
 8006f78:	440b      	add	r3, r1
 8006f7a:	3384      	adds	r3, #132	; 0x84
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	461a      	mov	r2, r3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	01db      	lsls	r3, r3, #7
 8006f8e:	4413      	add	r3, r2
 8006f90:	3384      	adds	r3, #132	; 0x84
 8006f92:	695b      	ldr	r3, [r3, #20]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	6812      	ldr	r2, [r2, #0]
 8006f98:	4611      	mov	r1, r2
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	01d2      	lsls	r2, r2, #7
 8006f9e:	440a      	add	r2, r1
 8006fa0:	3284      	adds	r2, #132	; 0x84
 8006fa2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006fa6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	461a      	mov	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	01db      	lsls	r3, r3, #7
 8006fb2:	4413      	add	r3, r2
 8006fb4:	3384      	adds	r3, #132	; 0x84
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	695b      	ldr	r3, [r3, #20]
 8006fbc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	01db      	lsls	r3, r3, #7
 8006fc8:	4413      	add	r3, r2
 8006fca:	3384      	adds	r3, #132	; 0x84
 8006fcc:	69da      	ldr	r2, [r3, #28]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	01db      	lsls	r3, r3, #7
 8006fd8:	440b      	add	r3, r1
 8006fda:	3384      	adds	r3, #132	; 0x84
 8006fdc:	4619      	mov	r1, r3
 8006fde:	4b58      	ldr	r3, [pc, #352]	; (8007140 <LTDC_SetConfig+0x32c>)
 8006fe0:	4013      	ands	r3, r2
 8006fe2:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	69da      	ldr	r2, [r3, #28]
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	6a1b      	ldr	r3, [r3, #32]
 8006fec:	68f9      	ldr	r1, [r7, #12]
 8006fee:	6809      	ldr	r1, [r1, #0]
 8006ff0:	4608      	mov	r0, r1
 8006ff2:	6879      	ldr	r1, [r7, #4]
 8006ff4:	01c9      	lsls	r1, r1, #7
 8006ff6:	4401      	add	r1, r0
 8006ff8:	3184      	adds	r1, #132	; 0x84
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	461a      	mov	r2, r3
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	01db      	lsls	r3, r3, #7
 8007008:	4413      	add	r3, r2
 800700a:	3384      	adds	r3, #132	; 0x84
 800700c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	461a      	mov	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	01db      	lsls	r3, r3, #7
 8007018:	4413      	add	r3, r2
 800701a:	3384      	adds	r3, #132	; 0x84
 800701c:	461a      	mov	r2, r3
 800701e:	2300      	movs	r3, #0
 8007020:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	461a      	mov	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	01db      	lsls	r3, r3, #7
 800702c:	4413      	add	r3, r2
 800702e:	3384      	adds	r3, #132	; 0x84
 8007030:	461a      	mov	r2, r3
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007036:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d102      	bne.n	8007046 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007040:	2304      	movs	r3, #4
 8007042:	61fb      	str	r3, [r7, #28]
 8007044:	e01b      	b.n	800707e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	2b01      	cmp	r3, #1
 800704c:	d102      	bne.n	8007054 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800704e:	2303      	movs	r3, #3
 8007050:	61fb      	str	r3, [r7, #28]
 8007052:	e014      	b.n	800707e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	2b04      	cmp	r3, #4
 800705a:	d00b      	beq.n	8007074 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007060:	2b02      	cmp	r3, #2
 8007062:	d007      	beq.n	8007074 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007068:	2b03      	cmp	r3, #3
 800706a:	d003      	beq.n	8007074 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007070:	2b07      	cmp	r3, #7
 8007072:	d102      	bne.n	800707a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007074:	2302      	movs	r3, #2
 8007076:	61fb      	str	r3, [r7, #28]
 8007078:	e001      	b.n	800707e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800707a:	2301      	movs	r3, #1
 800707c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	461a      	mov	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	01db      	lsls	r3, r3, #7
 8007088:	4413      	add	r3, r2
 800708a:	3384      	adds	r3, #132	; 0x84
 800708c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	6812      	ldr	r2, [r2, #0]
 8007092:	4611      	mov	r1, r2
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	01d2      	lsls	r2, r2, #7
 8007098:	440a      	add	r2, r1
 800709a:	3284      	adds	r2, #132	; 0x84
 800709c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80070a0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a6:	69fa      	ldr	r2, [r7, #28]
 80070a8:	fb02 f303 	mul.w	r3, r2, r3
 80070ac:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	6859      	ldr	r1, [r3, #4]
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	1acb      	subs	r3, r1, r3
 80070b8:	69f9      	ldr	r1, [r7, #28]
 80070ba:	fb01 f303 	mul.w	r3, r1, r3
 80070be:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80070c0:	68f9      	ldr	r1, [r7, #12]
 80070c2:	6809      	ldr	r1, [r1, #0]
 80070c4:	4608      	mov	r0, r1
 80070c6:	6879      	ldr	r1, [r7, #4]
 80070c8:	01c9      	lsls	r1, r1, #7
 80070ca:	4401      	add	r1, r0
 80070cc:	3184      	adds	r1, #132	; 0x84
 80070ce:	4313      	orrs	r3, r2
 80070d0:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	461a      	mov	r2, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	01db      	lsls	r3, r3, #7
 80070dc:	4413      	add	r3, r2
 80070de:	3384      	adds	r3, #132	; 0x84
 80070e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4619      	mov	r1, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	01db      	lsls	r3, r3, #7
 80070ec:	440b      	add	r3, r1
 80070ee:	3384      	adds	r3, #132	; 0x84
 80070f0:	4619      	mov	r1, r3
 80070f2:	4b14      	ldr	r3, [pc, #80]	; (8007144 <LTDC_SetConfig+0x330>)
 80070f4:	4013      	ands	r3, r2
 80070f6:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	461a      	mov	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	01db      	lsls	r3, r3, #7
 8007102:	4413      	add	r3, r2
 8007104:	3384      	adds	r3, #132	; 0x84
 8007106:	461a      	mov	r2, r3
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	01db      	lsls	r3, r3, #7
 8007118:	4413      	add	r3, r2
 800711a:	3384      	adds	r3, #132	; 0x84
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	6812      	ldr	r2, [r2, #0]
 8007122:	4611      	mov	r1, r2
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	01d2      	lsls	r2, r2, #7
 8007128:	440a      	add	r2, r1
 800712a:	3284      	adds	r2, #132	; 0x84
 800712c:	f043 0301 	orr.w	r3, r3, #1
 8007130:	6013      	str	r3, [r2, #0]
}
 8007132:	bf00      	nop
 8007134:	3724      	adds	r7, #36	; 0x24
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	fffff8f8 	.word	0xfffff8f8
 8007144:	fffff800 	.word	0xfffff800

08007148 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                            DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 8007156:	2b00      	cmp	r3, #0
 8007158:	d101      	bne.n	800715e <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 800715a:	2200      	movs	r2, #0
 800715c:	e001      	b.n	8007162 <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 800715e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	6a1b      	ldr	r3, [r3, #32]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d102      	bne.n	8007174 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 800716e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007172:	e000      	b.n	8007176 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8007174:	2200      	movs	r2, #0
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d102      	bne.n	8007188 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 8007182:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007186:	e000      	b.n	800718a <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8007188:	2200      	movs	r2, #0
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007192:	1e5a      	subs	r2, r3, #1
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a0:	4413      	add	r3, r2
 80071a2:	1e5a      	subs	r2, r3, #1
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b0:	441a      	add	r2, r3
                                   VidCfg->VerticalActive - 1U;
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80071b6:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 80071b8:	1e5a      	subs	r2, r3, #1
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c6:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80071cc:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d2:	4413      	add	r3, r2
 80071d4:	1e5a      	subs	r2, r3, #1
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80071e8:	b590      	push	{r4, r7, lr}
 80071ea:	b08d      	sub	sp, #52	; 0x34
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f6:	6a3b      	ldr	r3, [r7, #32]
 80071f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4618      	mov	r0, r3
 8007200:	f003 f800 	bl	800a204 <USB_GetMode>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	f040 84b7 	bne.w	8007b7a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4618      	mov	r0, r3
 8007212:	f002 ff64 	bl	800a0de <USB_ReadInterrupts>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	f000 84ad 	beq.w	8007b78 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	0a1b      	lsrs	r3, r3, #8
 8007228:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4618      	mov	r0, r3
 8007238:	f002 ff51 	bl	800a0de <USB_ReadInterrupts>
 800723c:	4603      	mov	r3, r0
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b02      	cmp	r3, #2
 8007244:	d107      	bne.n	8007256 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	695a      	ldr	r2, [r3, #20]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f002 0202 	and.w	r2, r2, #2
 8007254:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4618      	mov	r0, r3
 800725c:	f002 ff3f 	bl	800a0de <USB_ReadInterrupts>
 8007260:	4603      	mov	r3, r0
 8007262:	f003 0310 	and.w	r3, r3, #16
 8007266:	2b10      	cmp	r3, #16
 8007268:	d161      	bne.n	800732e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	699a      	ldr	r2, [r3, #24]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f022 0210 	bic.w	r2, r2, #16
 8007278:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	f003 020f 	and.w	r2, r3, #15
 8007286:	4613      	mov	r3, r2
 8007288:	00db      	lsls	r3, r3, #3
 800728a:	4413      	add	r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	4413      	add	r3, r2
 8007296:	3304      	adds	r3, #4
 8007298:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	0c5b      	lsrs	r3, r3, #17
 800729e:	f003 030f 	and.w	r3, r3, #15
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d124      	bne.n	80072f0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80072a6:	69ba      	ldr	r2, [r7, #24]
 80072a8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80072ac:	4013      	ands	r3, r2
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d035      	beq.n	800731e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	091b      	lsrs	r3, r3, #4
 80072ba:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80072bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	461a      	mov	r2, r3
 80072c4:	6a38      	ldr	r0, [r7, #32]
 80072c6:	f002 feb2 	bl	800a02e <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	691a      	ldr	r2, [r3, #16]
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	091b      	lsrs	r3, r3, #4
 80072d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072d6:	441a      	add	r2, r3
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	6a1a      	ldr	r2, [r3, #32]
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	091b      	lsrs	r3, r3, #4
 80072e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072e8:	441a      	add	r2, r3
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	621a      	str	r2, [r3, #32]
 80072ee:	e016      	b.n	800731e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	0c5b      	lsrs	r3, r3, #17
 80072f4:	f003 030f 	and.w	r3, r3, #15
 80072f8:	2b06      	cmp	r3, #6
 80072fa:	d110      	bne.n	800731e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007302:	2208      	movs	r2, #8
 8007304:	4619      	mov	r1, r3
 8007306:	6a38      	ldr	r0, [r7, #32]
 8007308:	f002 fe91 	bl	800a02e <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	6a1a      	ldr	r2, [r3, #32]
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	091b      	lsrs	r3, r3, #4
 8007314:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007318:	441a      	add	r2, r3
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	699a      	ldr	r2, [r3, #24]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f042 0210 	orr.w	r2, r2, #16
 800732c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4618      	mov	r0, r3
 8007334:	f002 fed3 	bl	800a0de <USB_ReadInterrupts>
 8007338:	4603      	mov	r3, r0
 800733a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800733e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007342:	f040 80a7 	bne.w	8007494 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007346:	2300      	movs	r3, #0
 8007348:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4618      	mov	r0, r3
 8007350:	f002 fed8 	bl	800a104 <USB_ReadDevAllOutEpInterrupt>
 8007354:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007356:	e099      	b.n	800748c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	2b00      	cmp	r3, #0
 8007360:	f000 808e 	beq.w	8007480 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800736a:	b2d2      	uxtb	r2, r2
 800736c:	4611      	mov	r1, r2
 800736e:	4618      	mov	r0, r3
 8007370:	f002 fefc 	bl	800a16c <USB_ReadDevOutEPInterrupt>
 8007374:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00c      	beq.n	800739a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	4413      	add	r3, r2
 8007388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800738c:	461a      	mov	r2, r3
 800738e:	2301      	movs	r3, #1
 8007390:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007392:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f000 fd27 	bl	8007de8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	f003 0308 	and.w	r3, r3, #8
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00c      	beq.n	80073be <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80073a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a6:	015a      	lsls	r2, r3, #5
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	4413      	add	r3, r2
 80073ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b0:	461a      	mov	r2, r3
 80073b2:	2308      	movs	r3, #8
 80073b4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80073b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 fdfd 	bl	8007fb8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	f003 0310 	and.w	r3, r3, #16
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d008      	beq.n	80073da <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80073c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ca:	015a      	lsls	r2, r3, #5
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	4413      	add	r3, r2
 80073d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d4:	461a      	mov	r2, r3
 80073d6:	2310      	movs	r3, #16
 80073d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	f003 0302 	and.w	r3, r3, #2
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d030      	beq.n	8007446 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80073e4:	6a3b      	ldr	r3, [r7, #32]
 80073e6:	695b      	ldr	r3, [r3, #20]
 80073e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ec:	2b80      	cmp	r3, #128	; 0x80
 80073ee:	d109      	bne.n	8007404 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	69fa      	ldr	r2, [r7, #28]
 80073fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007402:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007406:	4613      	mov	r3, r2
 8007408:	00db      	lsls	r3, r3, #3
 800740a:	4413      	add	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	4413      	add	r3, r2
 8007416:	3304      	adds	r3, #4
 8007418:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	78db      	ldrb	r3, [r3, #3]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d108      	bne.n	8007434 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	2200      	movs	r2, #0
 8007426:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742a:	b2db      	uxtb	r3, r3
 800742c:	4619      	mov	r1, r3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 fbf0 	bl	8007c14 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	015a      	lsls	r2, r3, #5
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	4413      	add	r3, r2
 800743c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007440:	461a      	mov	r2, r3
 8007442:	2302      	movs	r3, #2
 8007444:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	f003 0320 	and.w	r3, r3, #32
 800744c:	2b00      	cmp	r3, #0
 800744e:	d008      	beq.n	8007462 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	015a      	lsls	r2, r3, #5
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	4413      	add	r3, r2
 8007458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800745c:	461a      	mov	r2, r3
 800745e:	2320      	movs	r3, #32
 8007460:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007468:	2b00      	cmp	r3, #0
 800746a:	d009      	beq.n	8007480 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800746c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746e:	015a      	lsls	r2, r3, #5
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	4413      	add	r3, r2
 8007474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007478:	461a      	mov	r2, r3
 800747a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800747e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	3301      	adds	r3, #1
 8007484:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007488:	085b      	lsrs	r3, r3, #1
 800748a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800748c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748e:	2b00      	cmp	r3, #0
 8007490:	f47f af62 	bne.w	8007358 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4618      	mov	r0, r3
 800749a:	f002 fe20 	bl	800a0de <USB_ReadInterrupts>
 800749e:	4603      	mov	r3, r0
 80074a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80074a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80074a8:	f040 80db 	bne.w	8007662 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4618      	mov	r0, r3
 80074b2:	f002 fe41 	bl	800a138 <USB_ReadDevAllInEpInterrupt>
 80074b6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80074b8:	2300      	movs	r3, #0
 80074ba:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80074bc:	e0cd      	b.n	800765a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80074be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c0:	f003 0301 	and.w	r3, r3, #1
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 80c2 	beq.w	800764e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074d0:	b2d2      	uxtb	r2, r2
 80074d2:	4611      	mov	r1, r2
 80074d4:	4618      	mov	r0, r3
 80074d6:	f002 fe67 	bl	800a1a8 <USB_ReadDevInEPInterrupt>
 80074da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d057      	beq.n	8007596 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80074e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e8:	f003 030f 	and.w	r3, r3, #15
 80074ec:	2201      	movs	r2, #1
 80074ee:	fa02 f303 	lsl.w	r3, r2, r3
 80074f2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	43db      	mvns	r3, r3
 8007500:	69f9      	ldr	r1, [r7, #28]
 8007502:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007506:	4013      	ands	r3, r2
 8007508:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750c:	015a      	lsls	r2, r3, #5
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	4413      	add	r3, r2
 8007512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007516:	461a      	mov	r2, r3
 8007518:	2301      	movs	r3, #1
 800751a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d132      	bne.n	800758a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007524:	6879      	ldr	r1, [r7, #4]
 8007526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007528:	4613      	mov	r3, r2
 800752a:	00db      	lsls	r3, r3, #3
 800752c:	4413      	add	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	440b      	add	r3, r1
 8007532:	334c      	adds	r3, #76	; 0x4c
 8007534:	6819      	ldr	r1, [r3, #0]
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800753a:	4613      	mov	r3, r2
 800753c:	00db      	lsls	r3, r3, #3
 800753e:	4413      	add	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	4403      	add	r3, r0
 8007544:	3348      	adds	r3, #72	; 0x48
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4419      	add	r1, r3
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800754e:	4613      	mov	r3, r2
 8007550:	00db      	lsls	r3, r3, #3
 8007552:	4413      	add	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4403      	add	r3, r0
 8007558:	334c      	adds	r3, #76	; 0x4c
 800755a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800755c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755e:	2b00      	cmp	r3, #0
 8007560:	d113      	bne.n	800758a <HAL_PCD_IRQHandler+0x3a2>
 8007562:	6879      	ldr	r1, [r7, #4]
 8007564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007566:	4613      	mov	r3, r2
 8007568:	00db      	lsls	r3, r3, #3
 800756a:	4413      	add	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	440b      	add	r3, r1
 8007570:	3354      	adds	r3, #84	; 0x54
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d108      	bne.n	800758a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6818      	ldr	r0, [r3, #0]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007582:	461a      	mov	r2, r3
 8007584:	2101      	movs	r1, #1
 8007586:	f002 fe6f 	bl	800a268 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800758a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800758c:	b2db      	uxtb	r3, r3
 800758e:	4619      	mov	r1, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fb01 	bl	8007b98 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	f003 0308 	and.w	r3, r3, #8
 800759c:	2b00      	cmp	r3, #0
 800759e:	d008      	beq.n	80075b2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80075a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a2:	015a      	lsls	r2, r3, #5
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	4413      	add	r3, r2
 80075a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ac:	461a      	mov	r2, r3
 80075ae:	2308      	movs	r3, #8
 80075b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	f003 0310 	and.w	r3, r3, #16
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d008      	beq.n	80075ce <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80075bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075be:	015a      	lsls	r2, r3, #5
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	4413      	add	r3, r2
 80075c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c8:	461a      	mov	r2, r3
 80075ca:	2310      	movs	r3, #16
 80075cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d008      	beq.n	80075ea <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80075d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075da:	015a      	lsls	r2, r3, #5
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	4413      	add	r3, r2
 80075e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e4:	461a      	mov	r2, r3
 80075e6:	2340      	movs	r3, #64	; 0x40
 80075e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	f003 0302 	and.w	r3, r3, #2
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d023      	beq.n	800763c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80075f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80075f6:	6a38      	ldr	r0, [r7, #32]
 80075f8:	f002 fbd8 	bl	8009dac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80075fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075fe:	4613      	mov	r3, r2
 8007600:	00db      	lsls	r3, r3, #3
 8007602:	4413      	add	r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	3338      	adds	r3, #56	; 0x38
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	4413      	add	r3, r2
 800760c:	3304      	adds	r3, #4
 800760e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	78db      	ldrb	r3, [r3, #3]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d108      	bne.n	800762a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	2200      	movs	r2, #0
 800761c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800761e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007620:	b2db      	uxtb	r3, r3
 8007622:	4619      	mov	r1, r3
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fb01 	bl	8007c2c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762c:	015a      	lsls	r2, r3, #5
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	4413      	add	r3, r2
 8007632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007636:	461a      	mov	r2, r3
 8007638:	2302      	movs	r3, #2
 800763a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007642:	2b00      	cmp	r3, #0
 8007644:	d003      	beq.n	800764e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007646:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fb40 	bl	8007cce <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800764e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007650:	3301      	adds	r3, #1
 8007652:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007656:	085b      	lsrs	r3, r3, #1
 8007658:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800765a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765c:	2b00      	cmp	r3, #0
 800765e:	f47f af2e 	bne.w	80074be <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4618      	mov	r0, r3
 8007668:	f002 fd39 	bl	800a0de <USB_ReadInterrupts>
 800766c:	4603      	mov	r3, r0
 800766e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007672:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007676:	d122      	bne.n	80076be <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	69fa      	ldr	r2, [r7, #28]
 8007682:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007686:	f023 0301 	bic.w	r3, r3, #1
 800768a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007692:	2b01      	cmp	r3, #1
 8007694:	d108      	bne.n	80076a8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800769e:	2100      	movs	r1, #0
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fccf 	bl	8008044 <HAL_PCDEx_LPM_Callback>
 80076a6:	e002      	b.n	80076ae <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 faa9 	bl	8007c00 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	695a      	ldr	r2, [r3, #20]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80076bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f002 fd0b 	bl	800a0de <USB_ReadInterrupts>
 80076c8:	4603      	mov	r3, r0
 80076ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076d2:	d112      	bne.n	80076fa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80076d4:	69fb      	ldr	r3, [r7, #28]
 80076d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f003 0301 	and.w	r3, r3, #1
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d102      	bne.n	80076ea <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 fa81 	bl	8007bec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	695a      	ldr	r2, [r3, #20]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80076f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4618      	mov	r0, r3
 8007700:	f002 fced 	bl	800a0de <USB_ReadInterrupts>
 8007704:	4603      	mov	r3, r0
 8007706:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800770a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800770e:	d121      	bne.n	8007754 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	695a      	ldr	r2, [r3, #20]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800771e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007726:	2b00      	cmp	r3, #0
 8007728:	d111      	bne.n	800774e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2201      	movs	r2, #1
 800772e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007738:	089b      	lsrs	r3, r3, #2
 800773a:	f003 020f 	and.w	r2, r3, #15
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007744:	2101      	movs	r1, #1
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fc7c 	bl	8008044 <HAL_PCDEx_LPM_Callback>
 800774c:	e002      	b.n	8007754 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fa4c 	bl	8007bec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4618      	mov	r0, r3
 800775a:	f002 fcc0 	bl	800a0de <USB_ReadInterrupts>
 800775e:	4603      	mov	r3, r0
 8007760:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007768:	f040 80b7 	bne.w	80078da <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	69fa      	ldr	r2, [r7, #28]
 8007776:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800777a:	f023 0301 	bic.w	r3, r3, #1
 800777e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2110      	movs	r1, #16
 8007786:	4618      	mov	r0, r3
 8007788:	f002 fb10 	bl	8009dac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800778c:	2300      	movs	r3, #0
 800778e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007790:	e046      	b.n	8007820 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007794:	015a      	lsls	r2, r3, #5
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	4413      	add	r3, r2
 800779a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800779e:	461a      	mov	r2, r3
 80077a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80077a4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80077a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077a8:	015a      	lsls	r2, r3, #5
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	4413      	add	r3, r2
 80077ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077b6:	0151      	lsls	r1, r2, #5
 80077b8:	69fa      	ldr	r2, [r7, #28]
 80077ba:	440a      	add	r2, r1
 80077bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80077c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80077c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c8:	015a      	lsls	r2, r3, #5
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	4413      	add	r3, r2
 80077ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d2:	461a      	mov	r2, r3
 80077d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80077d8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80077da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077dc:	015a      	lsls	r2, r3, #5
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	4413      	add	r3, r2
 80077e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077ea:	0151      	lsls	r1, r2, #5
 80077ec:	69fa      	ldr	r2, [r7, #28]
 80077ee:	440a      	add	r2, r1
 80077f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80077f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80077fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077fc:	015a      	lsls	r2, r3, #5
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	4413      	add	r3, r2
 8007802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800780a:	0151      	lsls	r1, r2, #5
 800780c:	69fa      	ldr	r2, [r7, #28]
 800780e:	440a      	add	r2, r1
 8007810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007814:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007818:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800781a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781c:	3301      	adds	r3, #1
 800781e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007826:	429a      	cmp	r2, r3
 8007828:	d3b3      	bcc.n	8007792 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007830:	69db      	ldr	r3, [r3, #28]
 8007832:	69fa      	ldr	r2, [r7, #28]
 8007834:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007838:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800783c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007842:	2b00      	cmp	r3, #0
 8007844:	d016      	beq.n	8007874 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800784c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007850:	69fa      	ldr	r2, [r7, #28]
 8007852:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007856:	f043 030b 	orr.w	r3, r3, #11
 800785a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007866:	69fa      	ldr	r2, [r7, #28]
 8007868:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800786c:	f043 030b 	orr.w	r3, r3, #11
 8007870:	6453      	str	r3, [r2, #68]	; 0x44
 8007872:	e015      	b.n	80078a0 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800787a:	695a      	ldr	r2, [r3, #20]
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007882:	4619      	mov	r1, r3
 8007884:	f242 032b 	movw	r3, #8235	; 0x202b
 8007888:	4313      	orrs	r3, r2
 800788a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	69fa      	ldr	r2, [r7, #28]
 8007896:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800789a:	f043 030b 	orr.w	r3, r3, #11
 800789e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	69fa      	ldr	r2, [r7, #28]
 80078aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078ae:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80078b2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6818      	ldr	r0, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80078c4:	461a      	mov	r2, r3
 80078c6:	f002 fccf 	bl	800a268 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	695a      	ldr	r2, [r3, #20]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80078d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4618      	mov	r0, r3
 80078e0:	f002 fbfd 	bl	800a0de <USB_ReadInterrupts>
 80078e4:	4603      	mov	r3, r0
 80078e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078ee:	d124      	bne.n	800793a <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4618      	mov	r0, r3
 80078f6:	f002 fc93 	bl	800a220 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4618      	mov	r0, r3
 8007900:	f002 fa88 	bl	8009e14 <USB_GetDevSpeed>
 8007904:	4603      	mov	r3, r0
 8007906:	461a      	mov	r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681c      	ldr	r4, [r3, #0]
 8007910:	f001 f8c8 	bl	8008aa4 <HAL_RCC_GetHCLKFreq>
 8007914:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800791a:	b2db      	uxtb	r3, r3
 800791c:	461a      	mov	r2, r3
 800791e:	4620      	mov	r0, r4
 8007920:	f002 f9a2 	bl	8009c68 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f957 	bl	8007bd8 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	695a      	ldr	r2, [r3, #20]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007938:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4618      	mov	r0, r3
 8007940:	f002 fbcd 	bl	800a0de <USB_ReadInterrupts>
 8007944:	4603      	mov	r3, r0
 8007946:	f003 0308 	and.w	r3, r3, #8
 800794a:	2b08      	cmp	r3, #8
 800794c:	d10a      	bne.n	8007964 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 f938 	bl	8007bc4 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	695a      	ldr	r2, [r3, #20]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f002 0208 	and.w	r2, r2, #8
 8007962:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4618      	mov	r0, r3
 800796a:	f002 fbb8 	bl	800a0de <USB_ReadInterrupts>
 800796e:	4603      	mov	r3, r0
 8007970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007974:	2b80      	cmp	r3, #128	; 0x80
 8007976:	d122      	bne.n	80079be <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007978:	6a3b      	ldr	r3, [r7, #32]
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007980:	6a3b      	ldr	r3, [r7, #32]
 8007982:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007984:	2301      	movs	r3, #1
 8007986:	627b      	str	r3, [r7, #36]	; 0x24
 8007988:	e014      	b.n	80079b4 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800798a:	6879      	ldr	r1, [r7, #4]
 800798c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800798e:	4613      	mov	r3, r2
 8007990:	00db      	lsls	r3, r3, #3
 8007992:	4413      	add	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	440b      	add	r3, r1
 8007998:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d105      	bne.n	80079ae <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80079a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f95f 	bl	8007c6c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80079ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b0:	3301      	adds	r3, #1
 80079b2:	627b      	str	r3, [r7, #36]	; 0x24
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d3e5      	bcc.n	800798a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4618      	mov	r0, r3
 80079c4:	f002 fb8b 	bl	800a0de <USB_ReadInterrupts>
 80079c8:	4603      	mov	r3, r0
 80079ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80079ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079d2:	d13b      	bne.n	8007a4c <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80079d4:	2301      	movs	r3, #1
 80079d6:	627b      	str	r3, [r7, #36]	; 0x24
 80079d8:	e02b      	b.n	8007a32 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80079da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079dc:	015a      	lsls	r2, r3, #5
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	4413      	add	r3, r2
 80079e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80079ea:	6879      	ldr	r1, [r7, #4]
 80079ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ee:	4613      	mov	r3, r2
 80079f0:	00db      	lsls	r3, r3, #3
 80079f2:	4413      	add	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	440b      	add	r3, r1
 80079f8:	3340      	adds	r3, #64	; 0x40
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d115      	bne.n	8007a2c <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007a00:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	da12      	bge.n	8007a2c <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007a06:	6879      	ldr	r1, [r7, #4]
 8007a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	00db      	lsls	r3, r3, #3
 8007a0e:	4413      	add	r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	440b      	add	r3, r1
 8007a14:	333f      	adds	r3, #63	; 0x3f
 8007a16:	2201      	movs	r2, #1
 8007a18:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	4619      	mov	r1, r3
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f920 	bl	8007c6c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2e:	3301      	adds	r3, #1
 8007a30:	627b      	str	r3, [r7, #36]	; 0x24
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d3ce      	bcc.n	80079da <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	695a      	ldr	r2, [r3, #20]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007a4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4618      	mov	r0, r3
 8007a52:	f002 fb44 	bl	800a0de <USB_ReadInterrupts>
 8007a56:	4603      	mov	r3, r0
 8007a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a60:	d155      	bne.n	8007b0e <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007a62:	2301      	movs	r3, #1
 8007a64:	627b      	str	r3, [r7, #36]	; 0x24
 8007a66:	e045      	b.n	8007af4 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6a:	015a      	lsls	r2, r3, #5
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	4413      	add	r3, r2
 8007a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007a78:	6879      	ldr	r1, [r7, #4]
 8007a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	00db      	lsls	r3, r3, #3
 8007a80:	4413      	add	r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	440b      	add	r3, r1
 8007a86:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d12e      	bne.n	8007aee <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007a90:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	da2b      	bge.n	8007aee <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8007aa2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d121      	bne.n	8007aee <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007aaa:	6879      	ldr	r1, [r7, #4]
 8007aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aae:	4613      	mov	r3, r2
 8007ab0:	00db      	lsls	r3, r3, #3
 8007ab2:	4413      	add	r3, r2
 8007ab4:	009b      	lsls	r3, r3, #2
 8007ab6:	440b      	add	r3, r1
 8007ab8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007abc:	2201      	movs	r2, #1
 8007abe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007ac0:	6a3b      	ldr	r3, [r7, #32]
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007ac8:	6a3b      	ldr	r3, [r7, #32]
 8007aca:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007acc:	6a3b      	ldr	r3, [r7, #32]
 8007ace:	695b      	ldr	r3, [r3, #20]
 8007ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d10a      	bne.n	8007aee <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	69fa      	ldr	r2, [r7, #28]
 8007ae2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ae6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007aea:	6053      	str	r3, [r2, #4]
            break;
 8007aec:	e007      	b.n	8007afe <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af0:	3301      	adds	r3, #1
 8007af2:	627b      	str	r3, [r7, #36]	; 0x24
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d3b4      	bcc.n	8007a68 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	695a      	ldr	r2, [r3, #20]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007b0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4618      	mov	r0, r3
 8007b14:	f002 fae3 	bl	800a0de <USB_ReadInterrupts>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b22:	d10a      	bne.n	8007b3a <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 f88d 	bl	8007c44 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	695a      	ldr	r2, [r3, #20]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007b38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f002 facd 	bl	800a0de <USB_ReadInterrupts>
 8007b44:	4603      	mov	r3, r0
 8007b46:	f003 0304 	and.w	r3, r3, #4
 8007b4a:	2b04      	cmp	r3, #4
 8007b4c:	d115      	bne.n	8007b7a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	f003 0304 	and.w	r3, r3, #4
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d002      	beq.n	8007b66 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 f879 	bl	8007c58 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	6859      	ldr	r1, [r3, #4]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	69ba      	ldr	r2, [r7, #24]
 8007b72:	430a      	orrs	r2, r1
 8007b74:	605a      	str	r2, [r3, #4]
 8007b76:	e000      	b.n	8007b7a <HAL_PCD_IRQHandler+0x992>
      return;
 8007b78:	bf00      	nop
    }
  }
}
 8007b7a:	3734      	adds	r7, #52	; 0x34
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd90      	pop	{r4, r7, pc}

08007b80 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8007b8c:	bf00      	nop
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8007bcc:	bf00      	nop
 8007bce:	370c      	adds	r7, #12
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8007be0:	bf00      	nop
 8007be2:	370c      	adds	r7, #12
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8007c08:	bf00      	nop
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	460b      	mov	r3, r1
 8007c36:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	460b      	mov	r3, r1
 8007c76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007c78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	da0c      	bge.n	8007c9a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c80:	78fb      	ldrb	r3, [r7, #3]
 8007c82:	f003 020f 	and.w	r2, r3, #15
 8007c86:	4613      	mov	r3, r2
 8007c88:	00db      	lsls	r3, r3, #3
 8007c8a:	4413      	add	r3, r2
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	3338      	adds	r3, #56	; 0x38
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	4413      	add	r3, r2
 8007c94:	3304      	adds	r3, #4
 8007c96:	60fb      	str	r3, [r7, #12]
 8007c98:	e00c      	b.n	8007cb4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c9a:	78fb      	ldrb	r3, [r7, #3]
 8007c9c:	f003 020f 	and.w	r2, r3, #15
 8007ca0:	4613      	mov	r3, r2
 8007ca2:	00db      	lsls	r3, r3, #3
 8007ca4:	4413      	add	r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	4413      	add	r3, r2
 8007cb0:	3304      	adds	r3, #4
 8007cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68f9      	ldr	r1, [r7, #12]
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f002 f8cf 	bl	8009e5e <USB_EPStopXfer>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007cc4:	7afb      	ldrb	r3, [r7, #11]
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007cce:	b580      	push	{r7, lr}
 8007cd0:	b08a      	sub	sp, #40	; 0x28
 8007cd2:	af02      	add	r7, sp, #8
 8007cd4:	6078      	str	r0, [r7, #4]
 8007cd6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007ce2:	683a      	ldr	r2, [r7, #0]
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	00db      	lsls	r3, r3, #3
 8007ce8:	4413      	add	r3, r2
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	3338      	adds	r3, #56	; 0x38
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	3304      	adds	r3, #4
 8007cf4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6a1a      	ldr	r2, [r3, #32]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d901      	bls.n	8007d06 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e06c      	b.n	8007de0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	699a      	ldr	r2, [r3, #24]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	69fa      	ldr	r2, [r7, #28]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d902      	bls.n	8007d22 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	3303      	adds	r3, #3
 8007d26:	089b      	lsrs	r3, r3, #2
 8007d28:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007d2a:	e02b      	b.n	8007d84 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	699a      	ldr	r2, [r3, #24]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6a1b      	ldr	r3, [r3, #32]
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	69fa      	ldr	r2, [r7, #28]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d902      	bls.n	8007d48 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	3303      	adds	r3, #3
 8007d4c:	089b      	lsrs	r3, r3, #2
 8007d4e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6919      	ldr	r1, [r3, #16]
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	b2da      	uxtb	r2, r3
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	4603      	mov	r3, r0
 8007d66:	6978      	ldr	r0, [r7, #20]
 8007d68:	f002 f923 	bl	8009fb2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	691a      	ldr	r2, [r3, #16]
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	441a      	add	r2, r3
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6a1a      	ldr	r2, [r3, #32]
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	441a      	add	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	015a      	lsls	r2, r3, #5
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	69ba      	ldr	r2, [r7, #24]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d809      	bhi.n	8007dae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6a1a      	ldr	r2, [r3, #32]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d203      	bcs.n	8007dae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	699b      	ldr	r3, [r3, #24]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d1be      	bne.n	8007d2c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	699a      	ldr	r2, [r3, #24]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6a1b      	ldr	r3, [r3, #32]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d811      	bhi.n	8007dde <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	f003 030f 	and.w	r3, r3, #15
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	43db      	mvns	r3, r3
 8007dd4:	6939      	ldr	r1, [r7, #16]
 8007dd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007dda:	4013      	ands	r3, r2
 8007ddc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3720      	adds	r7, #32
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b088      	sub	sp, #32
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	333c      	adds	r3, #60	; 0x3c
 8007e00:	3304      	adds	r3, #4
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	015a      	lsls	r2, r3, #5
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d17b      	bne.n	8007f16 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	f003 0308 	and.w	r3, r3, #8
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d015      	beq.n	8007e54 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	4a61      	ldr	r2, [pc, #388]	; (8007fb0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	f240 80b9 	bls.w	8007fa4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f000 80b3 	beq.w	8007fa4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	015a      	lsls	r2, r3, #5
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	4413      	add	r3, r2
 8007e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e50:	6093      	str	r3, [r2, #8]
 8007e52:	e0a7      	b.n	8007fa4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	f003 0320 	and.w	r3, r3, #32
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d009      	beq.n	8007e72 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	015a      	lsls	r2, r3, #5
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	4413      	add	r3, r2
 8007e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	2320      	movs	r3, #32
 8007e6e:	6093      	str	r3, [r2, #8]
 8007e70:	e098      	b.n	8007fa4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f040 8093 	bne.w	8007fa4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	4a4b      	ldr	r2, [pc, #300]	; (8007fb0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d90f      	bls.n	8007ea6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00a      	beq.n	8007ea6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	015a      	lsls	r2, r3, #5
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	4413      	add	r3, r2
 8007e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ea2:	6093      	str	r3, [r2, #8]
 8007ea4:	e07e      	b.n	8007fa4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007ea6:	683a      	ldr	r2, [r7, #0]
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	00db      	lsls	r3, r3, #3
 8007eac:	4413      	add	r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	4413      	add	r3, r2
 8007eb8:	3304      	adds	r3, #4
 8007eba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	69da      	ldr	r2, [r3, #28]
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	0159      	lsls	r1, r3, #5
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	440b      	add	r3, r1
 8007ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ed2:	1ad2      	subs	r2, r2, r3
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d114      	bne.n	8007f08 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d109      	bne.n	8007efa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6818      	ldr	r0, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	2101      	movs	r1, #1
 8007ef4:	f002 f9b8 	bl	800a268 <USB_EP0_OutStart>
 8007ef8:	e006      	b.n	8007f08 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	691a      	ldr	r2, [r3, #16]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	6a1b      	ldr	r3, [r3, #32]
 8007f02:	441a      	add	r2, r3
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f7ff fe36 	bl	8007b80 <HAL_PCD_DataOutStageCallback>
 8007f14:	e046      	b.n	8007fa4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	4a26      	ldr	r2, [pc, #152]	; (8007fb4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d124      	bne.n	8007f68 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00a      	beq.n	8007f3e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	015a      	lsls	r2, r3, #5
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	4413      	add	r3, r2
 8007f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f34:	461a      	mov	r2, r3
 8007f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f3a:	6093      	str	r3, [r2, #8]
 8007f3c:	e032      	b.n	8007fa4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	f003 0320 	and.w	r3, r3, #32
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d008      	beq.n	8007f5a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f54:	461a      	mov	r2, r3
 8007f56:	2320      	movs	r3, #32
 8007f58:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	4619      	mov	r1, r3
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f7ff fe0d 	bl	8007b80 <HAL_PCD_DataOutStageCallback>
 8007f66:	e01d      	b.n	8007fa4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d114      	bne.n	8007f98 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007f6e:	6879      	ldr	r1, [r7, #4]
 8007f70:	683a      	ldr	r2, [r7, #0]
 8007f72:	4613      	mov	r3, r2
 8007f74:	00db      	lsls	r3, r3, #3
 8007f76:	4413      	add	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	440b      	add	r3, r1
 8007f7c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d108      	bne.n	8007f98 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6818      	ldr	r0, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007f90:	461a      	mov	r2, r3
 8007f92:	2100      	movs	r1, #0
 8007f94:	f002 f968 	bl	800a268 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f7ff fdee 	bl	8007b80 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3720      	adds	r7, #32
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	4f54300a 	.word	0x4f54300a
 8007fb4:	4f54310a 	.word	0x4f54310a

08007fb8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b086      	sub	sp, #24
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	333c      	adds	r3, #60	; 0x3c
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	015a      	lsls	r2, r3, #5
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	4a15      	ldr	r2, [pc, #84]	; (8008040 <PCD_EP_OutSetupPacket_int+0x88>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d90e      	bls.n	800800c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d009      	beq.n	800800c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	015a      	lsls	r2, r3, #5
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	4413      	add	r3, r2
 8008000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008004:	461a      	mov	r2, r3
 8008006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800800a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f7ff fdcf 	bl	8007bb0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	4a0a      	ldr	r2, [pc, #40]	; (8008040 <PCD_EP_OutSetupPacket_int+0x88>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d90c      	bls.n	8008034 <PCD_EP_OutSetupPacket_int+0x7c>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	2b01      	cmp	r3, #1
 8008020:	d108      	bne.n	8008034 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6818      	ldr	r0, [r3, #0]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800802c:	461a      	mov	r2, r3
 800802e:	2101      	movs	r1, #1
 8008030:	f002 f91a 	bl	800a268 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3718      	adds	r7, #24
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	4f54300a 	.word	0x4f54300a

08008044 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	460b      	mov	r3, r1
 800804e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800805c:	b480      	push	{r7}
 800805e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008060:	4b05      	ldr	r3, [pc, #20]	; (8008078 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a04      	ldr	r2, [pc, #16]	; (8008078 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008066:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800806a:	6013      	str	r3, [r2, #0]
}
 800806c:	bf00      	nop
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	40007000 	.word	0x40007000

0800807c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008082:	2300      	movs	r3, #0
 8008084:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008086:	4b23      	ldr	r3, [pc, #140]	; (8008114 <HAL_PWREx_EnableOverDrive+0x98>)
 8008088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808a:	4a22      	ldr	r2, [pc, #136]	; (8008114 <HAL_PWREx_EnableOverDrive+0x98>)
 800808c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008090:	6413      	str	r3, [r2, #64]	; 0x40
 8008092:	4b20      	ldr	r3, [pc, #128]	; (8008114 <HAL_PWREx_EnableOverDrive+0x98>)
 8008094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800809a:	603b      	str	r3, [r7, #0]
 800809c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800809e:	4b1e      	ldr	r3, [pc, #120]	; (8008118 <HAL_PWREx_EnableOverDrive+0x9c>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a1d      	ldr	r2, [pc, #116]	; (8008118 <HAL_PWREx_EnableOverDrive+0x9c>)
 80080a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080a8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80080aa:	f7fb feeb 	bl	8003e84 <HAL_GetTick>
 80080ae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80080b0:	e009      	b.n	80080c6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80080b2:	f7fb fee7 	bl	8003e84 <HAL_GetTick>
 80080b6:	4602      	mov	r2, r0
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080c0:	d901      	bls.n	80080c6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80080c2:	2303      	movs	r3, #3
 80080c4:	e022      	b.n	800810c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80080c6:	4b14      	ldr	r3, [pc, #80]	; (8008118 <HAL_PWREx_EnableOverDrive+0x9c>)
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080d2:	d1ee      	bne.n	80080b2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80080d4:	4b10      	ldr	r3, [pc, #64]	; (8008118 <HAL_PWREx_EnableOverDrive+0x9c>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a0f      	ldr	r2, [pc, #60]	; (8008118 <HAL_PWREx_EnableOverDrive+0x9c>)
 80080da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80080e0:	f7fb fed0 	bl	8003e84 <HAL_GetTick>
 80080e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80080e6:	e009      	b.n	80080fc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80080e8:	f7fb fecc 	bl	8003e84 <HAL_GetTick>
 80080ec:	4602      	mov	r2, r0
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080f6:	d901      	bls.n	80080fc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80080f8:	2303      	movs	r3, #3
 80080fa:	e007      	b.n	800810c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80080fc:	4b06      	ldr	r3, [pc, #24]	; (8008118 <HAL_PWREx_EnableOverDrive+0x9c>)
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008104:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008108:	d1ee      	bne.n	80080e8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	40023800 	.word	0x40023800
 8008118:	40007000 	.word	0x40007000

0800811c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008124:	2300      	movs	r3, #0
 8008126:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d101      	bne.n	8008132 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800812e:	2301      	movs	r3, #1
 8008130:	e29b      	b.n	800866a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 0301 	and.w	r3, r3, #1
 800813a:	2b00      	cmp	r3, #0
 800813c:	f000 8087 	beq.w	800824e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008140:	4b96      	ldr	r3, [pc, #600]	; (800839c <HAL_RCC_OscConfig+0x280>)
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f003 030c 	and.w	r3, r3, #12
 8008148:	2b04      	cmp	r3, #4
 800814a:	d00c      	beq.n	8008166 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800814c:	4b93      	ldr	r3, [pc, #588]	; (800839c <HAL_RCC_OscConfig+0x280>)
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f003 030c 	and.w	r3, r3, #12
 8008154:	2b08      	cmp	r3, #8
 8008156:	d112      	bne.n	800817e <HAL_RCC_OscConfig+0x62>
 8008158:	4b90      	ldr	r3, [pc, #576]	; (800839c <HAL_RCC_OscConfig+0x280>)
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008160:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008164:	d10b      	bne.n	800817e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008166:	4b8d      	ldr	r3, [pc, #564]	; (800839c <HAL_RCC_OscConfig+0x280>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d06c      	beq.n	800824c <HAL_RCC_OscConfig+0x130>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d168      	bne.n	800824c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e275      	b.n	800866a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008186:	d106      	bne.n	8008196 <HAL_RCC_OscConfig+0x7a>
 8008188:	4b84      	ldr	r3, [pc, #528]	; (800839c <HAL_RCC_OscConfig+0x280>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a83      	ldr	r2, [pc, #524]	; (800839c <HAL_RCC_OscConfig+0x280>)
 800818e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008192:	6013      	str	r3, [r2, #0]
 8008194:	e02e      	b.n	80081f4 <HAL_RCC_OscConfig+0xd8>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10c      	bne.n	80081b8 <HAL_RCC_OscConfig+0x9c>
 800819e:	4b7f      	ldr	r3, [pc, #508]	; (800839c <HAL_RCC_OscConfig+0x280>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a7e      	ldr	r2, [pc, #504]	; (800839c <HAL_RCC_OscConfig+0x280>)
 80081a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081a8:	6013      	str	r3, [r2, #0]
 80081aa:	4b7c      	ldr	r3, [pc, #496]	; (800839c <HAL_RCC_OscConfig+0x280>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a7b      	ldr	r2, [pc, #492]	; (800839c <HAL_RCC_OscConfig+0x280>)
 80081b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081b4:	6013      	str	r3, [r2, #0]
 80081b6:	e01d      	b.n	80081f4 <HAL_RCC_OscConfig+0xd8>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80081c0:	d10c      	bne.n	80081dc <HAL_RCC_OscConfig+0xc0>
 80081c2:	4b76      	ldr	r3, [pc, #472]	; (800839c <HAL_RCC_OscConfig+0x280>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a75      	ldr	r2, [pc, #468]	; (800839c <HAL_RCC_OscConfig+0x280>)
 80081c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80081cc:	6013      	str	r3, [r2, #0]
 80081ce:	4b73      	ldr	r3, [pc, #460]	; (800839c <HAL_RCC_OscConfig+0x280>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a72      	ldr	r2, [pc, #456]	; (800839c <HAL_RCC_OscConfig+0x280>)
 80081d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081d8:	6013      	str	r3, [r2, #0]
 80081da:	e00b      	b.n	80081f4 <HAL_RCC_OscConfig+0xd8>
 80081dc:	4b6f      	ldr	r3, [pc, #444]	; (800839c <HAL_RCC_OscConfig+0x280>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a6e      	ldr	r2, [pc, #440]	; (800839c <HAL_RCC_OscConfig+0x280>)
 80081e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081e6:	6013      	str	r3, [r2, #0]
 80081e8:	4b6c      	ldr	r3, [pc, #432]	; (800839c <HAL_RCC_OscConfig+0x280>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a6b      	ldr	r2, [pc, #428]	; (800839c <HAL_RCC_OscConfig+0x280>)
 80081ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80081f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d013      	beq.n	8008224 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081fc:	f7fb fe42 	bl	8003e84 <HAL_GetTick>
 8008200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008202:	e008      	b.n	8008216 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008204:	f7fb fe3e 	bl	8003e84 <HAL_GetTick>
 8008208:	4602      	mov	r2, r0
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	1ad3      	subs	r3, r2, r3
 800820e:	2b64      	cmp	r3, #100	; 0x64
 8008210:	d901      	bls.n	8008216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e229      	b.n	800866a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008216:	4b61      	ldr	r3, [pc, #388]	; (800839c <HAL_RCC_OscConfig+0x280>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800821e:	2b00      	cmp	r3, #0
 8008220:	d0f0      	beq.n	8008204 <HAL_RCC_OscConfig+0xe8>
 8008222:	e014      	b.n	800824e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008224:	f7fb fe2e 	bl	8003e84 <HAL_GetTick>
 8008228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800822a:	e008      	b.n	800823e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800822c:	f7fb fe2a 	bl	8003e84 <HAL_GetTick>
 8008230:	4602      	mov	r2, r0
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	1ad3      	subs	r3, r2, r3
 8008236:	2b64      	cmp	r3, #100	; 0x64
 8008238:	d901      	bls.n	800823e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800823a:	2303      	movs	r3, #3
 800823c:	e215      	b.n	800866a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800823e:	4b57      	ldr	r3, [pc, #348]	; (800839c <HAL_RCC_OscConfig+0x280>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008246:	2b00      	cmp	r3, #0
 8008248:	d1f0      	bne.n	800822c <HAL_RCC_OscConfig+0x110>
 800824a:	e000      	b.n	800824e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800824c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 0302 	and.w	r3, r3, #2
 8008256:	2b00      	cmp	r3, #0
 8008258:	d069      	beq.n	800832e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800825a:	4b50      	ldr	r3, [pc, #320]	; (800839c <HAL_RCC_OscConfig+0x280>)
 800825c:	689b      	ldr	r3, [r3, #8]
 800825e:	f003 030c 	and.w	r3, r3, #12
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00b      	beq.n	800827e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008266:	4b4d      	ldr	r3, [pc, #308]	; (800839c <HAL_RCC_OscConfig+0x280>)
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	f003 030c 	and.w	r3, r3, #12
 800826e:	2b08      	cmp	r3, #8
 8008270:	d11c      	bne.n	80082ac <HAL_RCC_OscConfig+0x190>
 8008272:	4b4a      	ldr	r3, [pc, #296]	; (800839c <HAL_RCC_OscConfig+0x280>)
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800827a:	2b00      	cmp	r3, #0
 800827c:	d116      	bne.n	80082ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800827e:	4b47      	ldr	r3, [pc, #284]	; (800839c <HAL_RCC_OscConfig+0x280>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 0302 	and.w	r3, r3, #2
 8008286:	2b00      	cmp	r3, #0
 8008288:	d005      	beq.n	8008296 <HAL_RCC_OscConfig+0x17a>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d001      	beq.n	8008296 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e1e9      	b.n	800866a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008296:	4b41      	ldr	r3, [pc, #260]	; (800839c <HAL_RCC_OscConfig+0x280>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	00db      	lsls	r3, r3, #3
 80082a4:	493d      	ldr	r1, [pc, #244]	; (800839c <HAL_RCC_OscConfig+0x280>)
 80082a6:	4313      	orrs	r3, r2
 80082a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80082aa:	e040      	b.n	800832e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d023      	beq.n	80082fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80082b4:	4b39      	ldr	r3, [pc, #228]	; (800839c <HAL_RCC_OscConfig+0x280>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a38      	ldr	r2, [pc, #224]	; (800839c <HAL_RCC_OscConfig+0x280>)
 80082ba:	f043 0301 	orr.w	r3, r3, #1
 80082be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082c0:	f7fb fde0 	bl	8003e84 <HAL_GetTick>
 80082c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082c6:	e008      	b.n	80082da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082c8:	f7fb fddc 	bl	8003e84 <HAL_GetTick>
 80082cc:	4602      	mov	r2, r0
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d901      	bls.n	80082da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e1c7      	b.n	800866a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80082da:	4b30      	ldr	r3, [pc, #192]	; (800839c <HAL_RCC_OscConfig+0x280>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f003 0302 	and.w	r3, r3, #2
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d0f0      	beq.n	80082c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082e6:	4b2d      	ldr	r3, [pc, #180]	; (800839c <HAL_RCC_OscConfig+0x280>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	691b      	ldr	r3, [r3, #16]
 80082f2:	00db      	lsls	r3, r3, #3
 80082f4:	4929      	ldr	r1, [pc, #164]	; (800839c <HAL_RCC_OscConfig+0x280>)
 80082f6:	4313      	orrs	r3, r2
 80082f8:	600b      	str	r3, [r1, #0]
 80082fa:	e018      	b.n	800832e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80082fc:	4b27      	ldr	r3, [pc, #156]	; (800839c <HAL_RCC_OscConfig+0x280>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a26      	ldr	r2, [pc, #152]	; (800839c <HAL_RCC_OscConfig+0x280>)
 8008302:	f023 0301 	bic.w	r3, r3, #1
 8008306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008308:	f7fb fdbc 	bl	8003e84 <HAL_GetTick>
 800830c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800830e:	e008      	b.n	8008322 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008310:	f7fb fdb8 	bl	8003e84 <HAL_GetTick>
 8008314:	4602      	mov	r2, r0
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	1ad3      	subs	r3, r2, r3
 800831a:	2b02      	cmp	r3, #2
 800831c:	d901      	bls.n	8008322 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800831e:	2303      	movs	r3, #3
 8008320:	e1a3      	b.n	800866a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008322:	4b1e      	ldr	r3, [pc, #120]	; (800839c <HAL_RCC_OscConfig+0x280>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 0302 	and.w	r3, r3, #2
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1f0      	bne.n	8008310 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 0308 	and.w	r3, r3, #8
 8008336:	2b00      	cmp	r3, #0
 8008338:	d038      	beq.n	80083ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d019      	beq.n	8008376 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008342:	4b16      	ldr	r3, [pc, #88]	; (800839c <HAL_RCC_OscConfig+0x280>)
 8008344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008346:	4a15      	ldr	r2, [pc, #84]	; (800839c <HAL_RCC_OscConfig+0x280>)
 8008348:	f043 0301 	orr.w	r3, r3, #1
 800834c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800834e:	f7fb fd99 	bl	8003e84 <HAL_GetTick>
 8008352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008354:	e008      	b.n	8008368 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008356:	f7fb fd95 	bl	8003e84 <HAL_GetTick>
 800835a:	4602      	mov	r2, r0
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	2b02      	cmp	r3, #2
 8008362:	d901      	bls.n	8008368 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008364:	2303      	movs	r3, #3
 8008366:	e180      	b.n	800866a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008368:	4b0c      	ldr	r3, [pc, #48]	; (800839c <HAL_RCC_OscConfig+0x280>)
 800836a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800836c:	f003 0302 	and.w	r3, r3, #2
 8008370:	2b00      	cmp	r3, #0
 8008372:	d0f0      	beq.n	8008356 <HAL_RCC_OscConfig+0x23a>
 8008374:	e01a      	b.n	80083ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008376:	4b09      	ldr	r3, [pc, #36]	; (800839c <HAL_RCC_OscConfig+0x280>)
 8008378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800837a:	4a08      	ldr	r2, [pc, #32]	; (800839c <HAL_RCC_OscConfig+0x280>)
 800837c:	f023 0301 	bic.w	r3, r3, #1
 8008380:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008382:	f7fb fd7f 	bl	8003e84 <HAL_GetTick>
 8008386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008388:	e00a      	b.n	80083a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800838a:	f7fb fd7b 	bl	8003e84 <HAL_GetTick>
 800838e:	4602      	mov	r2, r0
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	1ad3      	subs	r3, r2, r3
 8008394:	2b02      	cmp	r3, #2
 8008396:	d903      	bls.n	80083a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008398:	2303      	movs	r3, #3
 800839a:	e166      	b.n	800866a <HAL_RCC_OscConfig+0x54e>
 800839c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80083a0:	4b92      	ldr	r3, [pc, #584]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 80083a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083a4:	f003 0302 	and.w	r3, r3, #2
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1ee      	bne.n	800838a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f003 0304 	and.w	r3, r3, #4
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	f000 80a4 	beq.w	8008502 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80083ba:	4b8c      	ldr	r3, [pc, #560]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 80083bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d10d      	bne.n	80083e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80083c6:	4b89      	ldr	r3, [pc, #548]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 80083c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ca:	4a88      	ldr	r2, [pc, #544]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 80083cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083d0:	6413      	str	r3, [r2, #64]	; 0x40
 80083d2:	4b86      	ldr	r3, [pc, #536]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 80083d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083da:	60bb      	str	r3, [r7, #8]
 80083dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80083de:	2301      	movs	r3, #1
 80083e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80083e2:	4b83      	ldr	r3, [pc, #524]	; (80085f0 <HAL_RCC_OscConfig+0x4d4>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d118      	bne.n	8008420 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80083ee:	4b80      	ldr	r3, [pc, #512]	; (80085f0 <HAL_RCC_OscConfig+0x4d4>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a7f      	ldr	r2, [pc, #508]	; (80085f0 <HAL_RCC_OscConfig+0x4d4>)
 80083f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80083fa:	f7fb fd43 	bl	8003e84 <HAL_GetTick>
 80083fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008400:	e008      	b.n	8008414 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008402:	f7fb fd3f 	bl	8003e84 <HAL_GetTick>
 8008406:	4602      	mov	r2, r0
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	1ad3      	subs	r3, r2, r3
 800840c:	2b64      	cmp	r3, #100	; 0x64
 800840e:	d901      	bls.n	8008414 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008410:	2303      	movs	r3, #3
 8008412:	e12a      	b.n	800866a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008414:	4b76      	ldr	r3, [pc, #472]	; (80085f0 <HAL_RCC_OscConfig+0x4d4>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800841c:	2b00      	cmp	r3, #0
 800841e:	d0f0      	beq.n	8008402 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d106      	bne.n	8008436 <HAL_RCC_OscConfig+0x31a>
 8008428:	4b70      	ldr	r3, [pc, #448]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 800842a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800842c:	4a6f      	ldr	r2, [pc, #444]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 800842e:	f043 0301 	orr.w	r3, r3, #1
 8008432:	6713      	str	r3, [r2, #112]	; 0x70
 8008434:	e02d      	b.n	8008492 <HAL_RCC_OscConfig+0x376>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d10c      	bne.n	8008458 <HAL_RCC_OscConfig+0x33c>
 800843e:	4b6b      	ldr	r3, [pc, #428]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 8008440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008442:	4a6a      	ldr	r2, [pc, #424]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 8008444:	f023 0301 	bic.w	r3, r3, #1
 8008448:	6713      	str	r3, [r2, #112]	; 0x70
 800844a:	4b68      	ldr	r3, [pc, #416]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 800844c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800844e:	4a67      	ldr	r2, [pc, #412]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 8008450:	f023 0304 	bic.w	r3, r3, #4
 8008454:	6713      	str	r3, [r2, #112]	; 0x70
 8008456:	e01c      	b.n	8008492 <HAL_RCC_OscConfig+0x376>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	2b05      	cmp	r3, #5
 800845e:	d10c      	bne.n	800847a <HAL_RCC_OscConfig+0x35e>
 8008460:	4b62      	ldr	r3, [pc, #392]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 8008462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008464:	4a61      	ldr	r2, [pc, #388]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 8008466:	f043 0304 	orr.w	r3, r3, #4
 800846a:	6713      	str	r3, [r2, #112]	; 0x70
 800846c:	4b5f      	ldr	r3, [pc, #380]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 800846e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008470:	4a5e      	ldr	r2, [pc, #376]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 8008472:	f043 0301 	orr.w	r3, r3, #1
 8008476:	6713      	str	r3, [r2, #112]	; 0x70
 8008478:	e00b      	b.n	8008492 <HAL_RCC_OscConfig+0x376>
 800847a:	4b5c      	ldr	r3, [pc, #368]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 800847c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800847e:	4a5b      	ldr	r2, [pc, #364]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 8008480:	f023 0301 	bic.w	r3, r3, #1
 8008484:	6713      	str	r3, [r2, #112]	; 0x70
 8008486:	4b59      	ldr	r3, [pc, #356]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 8008488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800848a:	4a58      	ldr	r2, [pc, #352]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 800848c:	f023 0304 	bic.w	r3, r3, #4
 8008490:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d015      	beq.n	80084c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800849a:	f7fb fcf3 	bl	8003e84 <HAL_GetTick>
 800849e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084a0:	e00a      	b.n	80084b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084a2:	f7fb fcef 	bl	8003e84 <HAL_GetTick>
 80084a6:	4602      	mov	r2, r0
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d901      	bls.n	80084b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80084b4:	2303      	movs	r3, #3
 80084b6:	e0d8      	b.n	800866a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084b8:	4b4c      	ldr	r3, [pc, #304]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 80084ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084bc:	f003 0302 	and.w	r3, r3, #2
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d0ee      	beq.n	80084a2 <HAL_RCC_OscConfig+0x386>
 80084c4:	e014      	b.n	80084f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084c6:	f7fb fcdd 	bl	8003e84 <HAL_GetTick>
 80084ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084cc:	e00a      	b.n	80084e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084ce:	f7fb fcd9 	bl	8003e84 <HAL_GetTick>
 80084d2:	4602      	mov	r2, r0
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	1ad3      	subs	r3, r2, r3
 80084d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80084dc:	4293      	cmp	r3, r2
 80084de:	d901      	bls.n	80084e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80084e0:	2303      	movs	r3, #3
 80084e2:	e0c2      	b.n	800866a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80084e4:	4b41      	ldr	r3, [pc, #260]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 80084e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e8:	f003 0302 	and.w	r3, r3, #2
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1ee      	bne.n	80084ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80084f0:	7dfb      	ldrb	r3, [r7, #23]
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d105      	bne.n	8008502 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80084f6:	4b3d      	ldr	r3, [pc, #244]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 80084f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fa:	4a3c      	ldr	r2, [pc, #240]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 80084fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008500:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	2b00      	cmp	r3, #0
 8008508:	f000 80ae 	beq.w	8008668 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800850c:	4b37      	ldr	r3, [pc, #220]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	f003 030c 	and.w	r3, r3, #12
 8008514:	2b08      	cmp	r3, #8
 8008516:	d06d      	beq.n	80085f4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	699b      	ldr	r3, [r3, #24]
 800851c:	2b02      	cmp	r3, #2
 800851e:	d14b      	bne.n	80085b8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008520:	4b32      	ldr	r3, [pc, #200]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a31      	ldr	r2, [pc, #196]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 8008526:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800852a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800852c:	f7fb fcaa 	bl	8003e84 <HAL_GetTick>
 8008530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008532:	e008      	b.n	8008546 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008534:	f7fb fca6 	bl	8003e84 <HAL_GetTick>
 8008538:	4602      	mov	r2, r0
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	1ad3      	subs	r3, r2, r3
 800853e:	2b02      	cmp	r3, #2
 8008540:	d901      	bls.n	8008546 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e091      	b.n	800866a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008546:	4b29      	ldr	r3, [pc, #164]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800854e:	2b00      	cmp	r3, #0
 8008550:	d1f0      	bne.n	8008534 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	69da      	ldr	r2, [r3, #28]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	431a      	orrs	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008560:	019b      	lsls	r3, r3, #6
 8008562:	431a      	orrs	r2, r3
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008568:	085b      	lsrs	r3, r3, #1
 800856a:	3b01      	subs	r3, #1
 800856c:	041b      	lsls	r3, r3, #16
 800856e:	431a      	orrs	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008574:	061b      	lsls	r3, r3, #24
 8008576:	431a      	orrs	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800857c:	071b      	lsls	r3, r3, #28
 800857e:	491b      	ldr	r1, [pc, #108]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 8008580:	4313      	orrs	r3, r2
 8008582:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008584:	4b19      	ldr	r3, [pc, #100]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a18      	ldr	r2, [pc, #96]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 800858a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800858e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008590:	f7fb fc78 	bl	8003e84 <HAL_GetTick>
 8008594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008596:	e008      	b.n	80085aa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008598:	f7fb fc74 	bl	8003e84 <HAL_GetTick>
 800859c:	4602      	mov	r2, r0
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	1ad3      	subs	r3, r2, r3
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d901      	bls.n	80085aa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80085a6:	2303      	movs	r3, #3
 80085a8:	e05f      	b.n	800866a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085aa:	4b10      	ldr	r3, [pc, #64]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d0f0      	beq.n	8008598 <HAL_RCC_OscConfig+0x47c>
 80085b6:	e057      	b.n	8008668 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80085b8:	4b0c      	ldr	r3, [pc, #48]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a0b      	ldr	r2, [pc, #44]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 80085be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085c4:	f7fb fc5e 	bl	8003e84 <HAL_GetTick>
 80085c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085ca:	e008      	b.n	80085de <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085cc:	f7fb fc5a 	bl	8003e84 <HAL_GetTick>
 80085d0:	4602      	mov	r2, r0
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	1ad3      	subs	r3, r2, r3
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d901      	bls.n	80085de <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80085da:	2303      	movs	r3, #3
 80085dc:	e045      	b.n	800866a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80085de:	4b03      	ldr	r3, [pc, #12]	; (80085ec <HAL_RCC_OscConfig+0x4d0>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d1f0      	bne.n	80085cc <HAL_RCC_OscConfig+0x4b0>
 80085ea:	e03d      	b.n	8008668 <HAL_RCC_OscConfig+0x54c>
 80085ec:	40023800 	.word	0x40023800
 80085f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80085f4:	4b1f      	ldr	r3, [pc, #124]	; (8008674 <HAL_RCC_OscConfig+0x558>)
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	699b      	ldr	r3, [r3, #24]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d030      	beq.n	8008664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800860c:	429a      	cmp	r2, r3
 800860e:	d129      	bne.n	8008664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800861a:	429a      	cmp	r2, r3
 800861c:	d122      	bne.n	8008664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800861e:	68fa      	ldr	r2, [r7, #12]
 8008620:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008624:	4013      	ands	r3, r2
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800862a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800862c:	4293      	cmp	r3, r2
 800862e:	d119      	bne.n	8008664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863a:	085b      	lsrs	r3, r3, #1
 800863c:	3b01      	subs	r3, #1
 800863e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008640:	429a      	cmp	r2, r3
 8008642:	d10f      	bne.n	8008664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008650:	429a      	cmp	r2, r3
 8008652:	d107      	bne.n	8008664 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008660:	429a      	cmp	r2, r3
 8008662:	d001      	beq.n	8008668 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	e000      	b.n	800866a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3718      	adds	r7, #24
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	40023800 	.word	0x40023800

08008678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008682:	2300      	movs	r3, #0
 8008684:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d101      	bne.n	8008690 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800868c:	2301      	movs	r3, #1
 800868e:	e0d0      	b.n	8008832 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008690:	4b6a      	ldr	r3, [pc, #424]	; (800883c <HAL_RCC_ClockConfig+0x1c4>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 030f 	and.w	r3, r3, #15
 8008698:	683a      	ldr	r2, [r7, #0]
 800869a:	429a      	cmp	r2, r3
 800869c:	d910      	bls.n	80086c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800869e:	4b67      	ldr	r3, [pc, #412]	; (800883c <HAL_RCC_ClockConfig+0x1c4>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f023 020f 	bic.w	r2, r3, #15
 80086a6:	4965      	ldr	r1, [pc, #404]	; (800883c <HAL_RCC_ClockConfig+0x1c4>)
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80086ae:	4b63      	ldr	r3, [pc, #396]	; (800883c <HAL_RCC_ClockConfig+0x1c4>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 030f 	and.w	r3, r3, #15
 80086b6:	683a      	ldr	r2, [r7, #0]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d001      	beq.n	80086c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	e0b8      	b.n	8008832 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f003 0302 	and.w	r3, r3, #2
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d020      	beq.n	800870e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 0304 	and.w	r3, r3, #4
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d005      	beq.n	80086e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80086d8:	4b59      	ldr	r3, [pc, #356]	; (8008840 <HAL_RCC_ClockConfig+0x1c8>)
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	4a58      	ldr	r2, [pc, #352]	; (8008840 <HAL_RCC_ClockConfig+0x1c8>)
 80086de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80086e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 0308 	and.w	r3, r3, #8
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d005      	beq.n	80086fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80086f0:	4b53      	ldr	r3, [pc, #332]	; (8008840 <HAL_RCC_ClockConfig+0x1c8>)
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	4a52      	ldr	r2, [pc, #328]	; (8008840 <HAL_RCC_ClockConfig+0x1c8>)
 80086f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80086fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086fc:	4b50      	ldr	r3, [pc, #320]	; (8008840 <HAL_RCC_ClockConfig+0x1c8>)
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	494d      	ldr	r1, [pc, #308]	; (8008840 <HAL_RCC_ClockConfig+0x1c8>)
 800870a:	4313      	orrs	r3, r2
 800870c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 0301 	and.w	r3, r3, #1
 8008716:	2b00      	cmp	r3, #0
 8008718:	d040      	beq.n	800879c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	2b01      	cmp	r3, #1
 8008720:	d107      	bne.n	8008732 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008722:	4b47      	ldr	r3, [pc, #284]	; (8008840 <HAL_RCC_ClockConfig+0x1c8>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800872a:	2b00      	cmp	r3, #0
 800872c:	d115      	bne.n	800875a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e07f      	b.n	8008832 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	2b02      	cmp	r3, #2
 8008738:	d107      	bne.n	800874a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800873a:	4b41      	ldr	r3, [pc, #260]	; (8008840 <HAL_RCC_ClockConfig+0x1c8>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008742:	2b00      	cmp	r3, #0
 8008744:	d109      	bne.n	800875a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	e073      	b.n	8008832 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800874a:	4b3d      	ldr	r3, [pc, #244]	; (8008840 <HAL_RCC_ClockConfig+0x1c8>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 0302 	and.w	r3, r3, #2
 8008752:	2b00      	cmp	r3, #0
 8008754:	d101      	bne.n	800875a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	e06b      	b.n	8008832 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800875a:	4b39      	ldr	r3, [pc, #228]	; (8008840 <HAL_RCC_ClockConfig+0x1c8>)
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	f023 0203 	bic.w	r2, r3, #3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	4936      	ldr	r1, [pc, #216]	; (8008840 <HAL_RCC_ClockConfig+0x1c8>)
 8008768:	4313      	orrs	r3, r2
 800876a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800876c:	f7fb fb8a 	bl	8003e84 <HAL_GetTick>
 8008770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008772:	e00a      	b.n	800878a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008774:	f7fb fb86 	bl	8003e84 <HAL_GetTick>
 8008778:	4602      	mov	r2, r0
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	1ad3      	subs	r3, r2, r3
 800877e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008782:	4293      	cmp	r3, r2
 8008784:	d901      	bls.n	800878a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008786:	2303      	movs	r3, #3
 8008788:	e053      	b.n	8008832 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800878a:	4b2d      	ldr	r3, [pc, #180]	; (8008840 <HAL_RCC_ClockConfig+0x1c8>)
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	f003 020c 	and.w	r2, r3, #12
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	429a      	cmp	r2, r3
 800879a:	d1eb      	bne.n	8008774 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800879c:	4b27      	ldr	r3, [pc, #156]	; (800883c <HAL_RCC_ClockConfig+0x1c4>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 030f 	and.w	r3, r3, #15
 80087a4:	683a      	ldr	r2, [r7, #0]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d210      	bcs.n	80087cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087aa:	4b24      	ldr	r3, [pc, #144]	; (800883c <HAL_RCC_ClockConfig+0x1c4>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f023 020f 	bic.w	r2, r3, #15
 80087b2:	4922      	ldr	r1, [pc, #136]	; (800883c <HAL_RCC_ClockConfig+0x1c4>)
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087ba:	4b20      	ldr	r3, [pc, #128]	; (800883c <HAL_RCC_ClockConfig+0x1c4>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 030f 	and.w	r3, r3, #15
 80087c2:	683a      	ldr	r2, [r7, #0]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d001      	beq.n	80087cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	e032      	b.n	8008832 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f003 0304 	and.w	r3, r3, #4
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d008      	beq.n	80087ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80087d8:	4b19      	ldr	r3, [pc, #100]	; (8008840 <HAL_RCC_ClockConfig+0x1c8>)
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	4916      	ldr	r1, [pc, #88]	; (8008840 <HAL_RCC_ClockConfig+0x1c8>)
 80087e6:	4313      	orrs	r3, r2
 80087e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 0308 	and.w	r3, r3, #8
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d009      	beq.n	800880a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80087f6:	4b12      	ldr	r3, [pc, #72]	; (8008840 <HAL_RCC_ClockConfig+0x1c8>)
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	691b      	ldr	r3, [r3, #16]
 8008802:	00db      	lsls	r3, r3, #3
 8008804:	490e      	ldr	r1, [pc, #56]	; (8008840 <HAL_RCC_ClockConfig+0x1c8>)
 8008806:	4313      	orrs	r3, r2
 8008808:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800880a:	f000 f885 	bl	8008918 <HAL_RCC_GetSysClockFreq>
 800880e:	4602      	mov	r2, r0
 8008810:	4b0b      	ldr	r3, [pc, #44]	; (8008840 <HAL_RCC_ClockConfig+0x1c8>)
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	091b      	lsrs	r3, r3, #4
 8008816:	f003 030f 	and.w	r3, r3, #15
 800881a:	490a      	ldr	r1, [pc, #40]	; (8008844 <HAL_RCC_ClockConfig+0x1cc>)
 800881c:	5ccb      	ldrb	r3, [r1, r3]
 800881e:	fa22 f303 	lsr.w	r3, r2, r3
 8008822:	4a09      	ldr	r2, [pc, #36]	; (8008848 <HAL_RCC_ClockConfig+0x1d0>)
 8008824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008826:	4b09      	ldr	r3, [pc, #36]	; (800884c <HAL_RCC_ClockConfig+0x1d4>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4618      	mov	r0, r3
 800882c:	f7f9 fa9c 	bl	8001d68 <HAL_InitTick>

  return HAL_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	40023c00 	.word	0x40023c00
 8008840:	40023800 	.word	0x40023800
 8008844:	0800e4d4 	.word	0x0800e4d4
 8008848:	20000008 	.word	0x20000008
 800884c:	20000048 	.word	0x20000048

08008850 <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b08c      	sub	sp, #48	; 0x30
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d127      	bne.n	80088b2 <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8008862:	4b2a      	ldr	r3, [pc, #168]	; (800890c <HAL_RCC_MCOConfig+0xbc>)
 8008864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008866:	4a29      	ldr	r2, [pc, #164]	; (800890c <HAL_RCC_MCOConfig+0xbc>)
 8008868:	f043 0301 	orr.w	r3, r3, #1
 800886c:	6313      	str	r3, [r2, #48]	; 0x30
 800886e:	4b27      	ldr	r3, [pc, #156]	; (800890c <HAL_RCC_MCOConfig+0xbc>)
 8008870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008872:	f003 0301 	and.w	r3, r3, #1
 8008876:	61bb      	str	r3, [r7, #24]
 8008878:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800887a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800887e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008880:	2302      	movs	r3, #2
 8008882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8008884:	2303      	movs	r3, #3
 8008886:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008888:	2300      	movs	r3, #0
 800888a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800888c:	2300      	movs	r3, #0
 800888e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008890:	f107 031c 	add.w	r3, r7, #28
 8008894:	4619      	mov	r1, r3
 8008896:	481e      	ldr	r0, [pc, #120]	; (8008910 <HAL_RCC_MCOConfig+0xc0>)
 8008898:	f7fd f860 	bl	800595c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800889c:	4b1b      	ldr	r3, [pc, #108]	; (800890c <HAL_RCC_MCOConfig+0xbc>)
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 80088a4:	68b9      	ldr	r1, [r7, #8]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	430b      	orrs	r3, r1
 80088aa:	4918      	ldr	r1, [pc, #96]	; (800890c <HAL_RCC_MCOConfig+0xbc>)
 80088ac:	4313      	orrs	r3, r2
 80088ae:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 80088b0:	e027      	b.n	8008902 <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
 80088b2:	4b16      	ldr	r3, [pc, #88]	; (800890c <HAL_RCC_MCOConfig+0xbc>)
 80088b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b6:	4a15      	ldr	r2, [pc, #84]	; (800890c <HAL_RCC_MCOConfig+0xbc>)
 80088b8:	f043 0304 	orr.w	r3, r3, #4
 80088bc:	6313      	str	r3, [r2, #48]	; 0x30
 80088be:	4b13      	ldr	r3, [pc, #76]	; (800890c <HAL_RCC_MCOConfig+0xbc>)
 80088c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c2:	f003 0304 	and.w	r3, r3, #4
 80088c6:	617b      	str	r3, [r7, #20]
 80088c8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80088ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088d0:	2302      	movs	r3, #2
 80088d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80088d4:	2303      	movs	r3, #3
 80088d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088d8:	2300      	movs	r3, #0
 80088da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80088dc:	2300      	movs	r3, #0
 80088de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80088e0:	f107 031c 	add.w	r3, r7, #28
 80088e4:	4619      	mov	r1, r3
 80088e6:	480b      	ldr	r0, [pc, #44]	; (8008914 <HAL_RCC_MCOConfig+0xc4>)
 80088e8:	f7fd f838 	bl	800595c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 80088ec:	4b07      	ldr	r3, [pc, #28]	; (800890c <HAL_RCC_MCOConfig+0xbc>)
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	00d9      	lsls	r1, r3, #3
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	430b      	orrs	r3, r1
 80088fc:	4903      	ldr	r1, [pc, #12]	; (800890c <HAL_RCC_MCOConfig+0xbc>)
 80088fe:	4313      	orrs	r3, r2
 8008900:	608b      	str	r3, [r1, #8]
}
 8008902:	bf00      	nop
 8008904:	3730      	adds	r7, #48	; 0x30
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	40023800 	.word	0x40023800
 8008910:	40020000 	.word	0x40020000
 8008914:	40020800 	.word	0x40020800

08008918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800891c:	b090      	sub	sp, #64	; 0x40
 800891e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008920:	2300      	movs	r3, #0
 8008922:	637b      	str	r3, [r7, #52]	; 0x34
 8008924:	2300      	movs	r3, #0
 8008926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008928:	2300      	movs	r3, #0
 800892a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800892c:	2300      	movs	r3, #0
 800892e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008930:	4b59      	ldr	r3, [pc, #356]	; (8008a98 <HAL_RCC_GetSysClockFreq+0x180>)
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	f003 030c 	and.w	r3, r3, #12
 8008938:	2b08      	cmp	r3, #8
 800893a:	d00d      	beq.n	8008958 <HAL_RCC_GetSysClockFreq+0x40>
 800893c:	2b08      	cmp	r3, #8
 800893e:	f200 80a1 	bhi.w	8008a84 <HAL_RCC_GetSysClockFreq+0x16c>
 8008942:	2b00      	cmp	r3, #0
 8008944:	d002      	beq.n	800894c <HAL_RCC_GetSysClockFreq+0x34>
 8008946:	2b04      	cmp	r3, #4
 8008948:	d003      	beq.n	8008952 <HAL_RCC_GetSysClockFreq+0x3a>
 800894a:	e09b      	b.n	8008a84 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800894c:	4b53      	ldr	r3, [pc, #332]	; (8008a9c <HAL_RCC_GetSysClockFreq+0x184>)
 800894e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008950:	e09b      	b.n	8008a8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008952:	4b53      	ldr	r3, [pc, #332]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x188>)
 8008954:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008956:	e098      	b.n	8008a8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008958:	4b4f      	ldr	r3, [pc, #316]	; (8008a98 <HAL_RCC_GetSysClockFreq+0x180>)
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008960:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008962:	4b4d      	ldr	r3, [pc, #308]	; (8008a98 <HAL_RCC_GetSysClockFreq+0x180>)
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800896a:	2b00      	cmp	r3, #0
 800896c:	d028      	beq.n	80089c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800896e:	4b4a      	ldr	r3, [pc, #296]	; (8008a98 <HAL_RCC_GetSysClockFreq+0x180>)
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	099b      	lsrs	r3, r3, #6
 8008974:	2200      	movs	r2, #0
 8008976:	623b      	str	r3, [r7, #32]
 8008978:	627a      	str	r2, [r7, #36]	; 0x24
 800897a:	6a3b      	ldr	r3, [r7, #32]
 800897c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008980:	2100      	movs	r1, #0
 8008982:	4b47      	ldr	r3, [pc, #284]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x188>)
 8008984:	fb03 f201 	mul.w	r2, r3, r1
 8008988:	2300      	movs	r3, #0
 800898a:	fb00 f303 	mul.w	r3, r0, r3
 800898e:	4413      	add	r3, r2
 8008990:	4a43      	ldr	r2, [pc, #268]	; (8008aa0 <HAL_RCC_GetSysClockFreq+0x188>)
 8008992:	fba0 1202 	umull	r1, r2, r0, r2
 8008996:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008998:	460a      	mov	r2, r1
 800899a:	62ba      	str	r2, [r7, #40]	; 0x28
 800899c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800899e:	4413      	add	r3, r2
 80089a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089a4:	2200      	movs	r2, #0
 80089a6:	61bb      	str	r3, [r7, #24]
 80089a8:	61fa      	str	r2, [r7, #28]
 80089aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80089ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80089b2:	f7f7 fc9d 	bl	80002f0 <__aeabi_uldivmod>
 80089b6:	4602      	mov	r2, r0
 80089b8:	460b      	mov	r3, r1
 80089ba:	4613      	mov	r3, r2
 80089bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089be:	e053      	b.n	8008a68 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089c0:	4b35      	ldr	r3, [pc, #212]	; (8008a98 <HAL_RCC_GetSysClockFreq+0x180>)
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	099b      	lsrs	r3, r3, #6
 80089c6:	2200      	movs	r2, #0
 80089c8:	613b      	str	r3, [r7, #16]
 80089ca:	617a      	str	r2, [r7, #20]
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80089d2:	f04f 0b00 	mov.w	fp, #0
 80089d6:	4652      	mov	r2, sl
 80089d8:	465b      	mov	r3, fp
 80089da:	f04f 0000 	mov.w	r0, #0
 80089de:	f04f 0100 	mov.w	r1, #0
 80089e2:	0159      	lsls	r1, r3, #5
 80089e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80089e8:	0150      	lsls	r0, r2, #5
 80089ea:	4602      	mov	r2, r0
 80089ec:	460b      	mov	r3, r1
 80089ee:	ebb2 080a 	subs.w	r8, r2, sl
 80089f2:	eb63 090b 	sbc.w	r9, r3, fp
 80089f6:	f04f 0200 	mov.w	r2, #0
 80089fa:	f04f 0300 	mov.w	r3, #0
 80089fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008a02:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008a06:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008a0a:	ebb2 0408 	subs.w	r4, r2, r8
 8008a0e:	eb63 0509 	sbc.w	r5, r3, r9
 8008a12:	f04f 0200 	mov.w	r2, #0
 8008a16:	f04f 0300 	mov.w	r3, #0
 8008a1a:	00eb      	lsls	r3, r5, #3
 8008a1c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008a20:	00e2      	lsls	r2, r4, #3
 8008a22:	4614      	mov	r4, r2
 8008a24:	461d      	mov	r5, r3
 8008a26:	eb14 030a 	adds.w	r3, r4, sl
 8008a2a:	603b      	str	r3, [r7, #0]
 8008a2c:	eb45 030b 	adc.w	r3, r5, fp
 8008a30:	607b      	str	r3, [r7, #4]
 8008a32:	f04f 0200 	mov.w	r2, #0
 8008a36:	f04f 0300 	mov.w	r3, #0
 8008a3a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008a3e:	4629      	mov	r1, r5
 8008a40:	028b      	lsls	r3, r1, #10
 8008a42:	4621      	mov	r1, r4
 8008a44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008a48:	4621      	mov	r1, r4
 8008a4a:	028a      	lsls	r2, r1, #10
 8008a4c:	4610      	mov	r0, r2
 8008a4e:	4619      	mov	r1, r3
 8008a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a52:	2200      	movs	r2, #0
 8008a54:	60bb      	str	r3, [r7, #8]
 8008a56:	60fa      	str	r2, [r7, #12]
 8008a58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a5c:	f7f7 fc48 	bl	80002f0 <__aeabi_uldivmod>
 8008a60:	4602      	mov	r2, r0
 8008a62:	460b      	mov	r3, r1
 8008a64:	4613      	mov	r3, r2
 8008a66:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008a68:	4b0b      	ldr	r3, [pc, #44]	; (8008a98 <HAL_RCC_GetSysClockFreq+0x180>)
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	0c1b      	lsrs	r3, r3, #16
 8008a6e:	f003 0303 	and.w	r3, r3, #3
 8008a72:	3301      	adds	r3, #1
 8008a74:	005b      	lsls	r3, r3, #1
 8008a76:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8008a78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008a82:	e002      	b.n	8008a8a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008a84:	4b05      	ldr	r3, [pc, #20]	; (8008a9c <HAL_RCC_GetSysClockFreq+0x184>)
 8008a86:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008a88:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3740      	adds	r7, #64	; 0x40
 8008a90:	46bd      	mov	sp, r7
 8008a92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a96:	bf00      	nop
 8008a98:	40023800 	.word	0x40023800
 8008a9c:	00f42400 	.word	0x00f42400
 8008aa0:	017d7840 	.word	0x017d7840

08008aa4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008aa8:	4b03      	ldr	r3, [pc, #12]	; (8008ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	20000008 	.word	0x20000008

08008abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008ac0:	f7ff fff0 	bl	8008aa4 <HAL_RCC_GetHCLKFreq>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	4b05      	ldr	r3, [pc, #20]	; (8008adc <HAL_RCC_GetPCLK1Freq+0x20>)
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	0a9b      	lsrs	r3, r3, #10
 8008acc:	f003 0307 	and.w	r3, r3, #7
 8008ad0:	4903      	ldr	r1, [pc, #12]	; (8008ae0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ad2:	5ccb      	ldrb	r3, [r1, r3]
 8008ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	40023800 	.word	0x40023800
 8008ae0:	0800e4e4 	.word	0x0800e4e4

08008ae4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	220f      	movs	r2, #15
 8008af2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008af4:	4b12      	ldr	r3, [pc, #72]	; (8008b40 <HAL_RCC_GetClockConfig+0x5c>)
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	f003 0203 	and.w	r2, r3, #3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008b00:	4b0f      	ldr	r3, [pc, #60]	; (8008b40 <HAL_RCC_GetClockConfig+0x5c>)
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008b0c:	4b0c      	ldr	r3, [pc, #48]	; (8008b40 <HAL_RCC_GetClockConfig+0x5c>)
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008b18:	4b09      	ldr	r3, [pc, #36]	; (8008b40 <HAL_RCC_GetClockConfig+0x5c>)
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	08db      	lsrs	r3, r3, #3
 8008b1e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008b26:	4b07      	ldr	r3, [pc, #28]	; (8008b44 <HAL_RCC_GetClockConfig+0x60>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f003 020f 	and.w	r2, r3, #15
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	601a      	str	r2, [r3, #0]
}
 8008b32:	bf00      	nop
 8008b34:	370c      	adds	r7, #12
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop
 8008b40:	40023800 	.word	0x40023800
 8008b44:	40023c00 	.word	0x40023c00

08008b48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b088      	sub	sp, #32
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008b50:	2300      	movs	r3, #0
 8008b52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008b54:	2300      	movs	r3, #0
 8008b56:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008b60:	2300      	movs	r3, #0
 8008b62:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 0301 	and.w	r3, r3, #1
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d012      	beq.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008b70:	4b69      	ldr	r3, [pc, #420]	; (8008d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	4a68      	ldr	r2, [pc, #416]	; (8008d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b76:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008b7a:	6093      	str	r3, [r2, #8]
 8008b7c:	4b66      	ldr	r3, [pc, #408]	; (8008d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b7e:	689a      	ldr	r2, [r3, #8]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b84:	4964      	ldr	r1, [pc, #400]	; (8008d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008b86:	4313      	orrs	r3, r2
 8008b88:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d101      	bne.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008b92:	2301      	movs	r3, #1
 8008b94:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d017      	beq.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008ba2:	4b5d      	ldr	r3, [pc, #372]	; (8008d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ba8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bb0:	4959      	ldr	r1, [pc, #356]	; (8008d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bc0:	d101      	bne.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d101      	bne.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d017      	beq.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008bde:	4b4e      	ldr	r3, [pc, #312]	; (8008d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008be4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bec:	494a      	ldr	r1, [pc, #296]	; (8008d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bfc:	d101      	bne.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d101      	bne.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d001      	beq.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 0320 	and.w	r3, r3, #32
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	f000 808b 	beq.w	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008c2c:	4b3a      	ldr	r3, [pc, #232]	; (8008d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c30:	4a39      	ldr	r2, [pc, #228]	; (8008d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c36:	6413      	str	r3, [r2, #64]	; 0x40
 8008c38:	4b37      	ldr	r3, [pc, #220]	; (8008d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c40:	60bb      	str	r3, [r7, #8]
 8008c42:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008c44:	4b35      	ldr	r3, [pc, #212]	; (8008d1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a34      	ldr	r2, [pc, #208]	; (8008d1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c50:	f7fb f918 	bl	8003e84 <HAL_GetTick>
 8008c54:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008c56:	e008      	b.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c58:	f7fb f914 	bl	8003e84 <HAL_GetTick>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	1ad3      	subs	r3, r2, r3
 8008c62:	2b64      	cmp	r3, #100	; 0x64
 8008c64:	d901      	bls.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008c66:	2303      	movs	r3, #3
 8008c68:	e38f      	b.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008c6a:	4b2c      	ldr	r3, [pc, #176]	; (8008d1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d0f0      	beq.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008c76:	4b28      	ldr	r3, [pc, #160]	; (8008d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c7e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d035      	beq.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c8e:	693a      	ldr	r2, [r7, #16]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d02e      	beq.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008c94:	4b20      	ldr	r3, [pc, #128]	; (8008d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c9c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008c9e:	4b1e      	ldr	r3, [pc, #120]	; (8008d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ca2:	4a1d      	ldr	r2, [pc, #116]	; (8008d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ca8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008caa:	4b1b      	ldr	r3, [pc, #108]	; (8008d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cae:	4a1a      	ldr	r2, [pc, #104]	; (8008d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cb4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008cb6:	4a18      	ldr	r2, [pc, #96]	; (8008d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008cbc:	4b16      	ldr	r3, [pc, #88]	; (8008d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cc0:	f003 0301 	and.w	r3, r3, #1
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d114      	bne.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cc8:	f7fb f8dc 	bl	8003e84 <HAL_GetTick>
 8008ccc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cce:	e00a      	b.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008cd0:	f7fb f8d8 	bl	8003e84 <HAL_GetTick>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d901      	bls.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	e351      	b.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ce6:	4b0c      	ldr	r3, [pc, #48]	; (8008d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cea:	f003 0302 	and.w	r3, r3, #2
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d0ee      	beq.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008cfe:	d111      	bne.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008d00:	4b05      	ldr	r3, [pc, #20]	; (8008d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008d0c:	4b04      	ldr	r3, [pc, #16]	; (8008d20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008d0e:	400b      	ands	r3, r1
 8008d10:	4901      	ldr	r1, [pc, #4]	; (8008d18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d12:	4313      	orrs	r3, r2
 8008d14:	608b      	str	r3, [r1, #8]
 8008d16:	e00b      	b.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008d18:	40023800 	.word	0x40023800
 8008d1c:	40007000 	.word	0x40007000
 8008d20:	0ffffcff 	.word	0x0ffffcff
 8008d24:	4bac      	ldr	r3, [pc, #688]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	4aab      	ldr	r2, [pc, #684]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008d2e:	6093      	str	r3, [r2, #8]
 8008d30:	4ba9      	ldr	r3, [pc, #676]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d3c:	49a6      	ldr	r1, [pc, #664]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 0310 	and.w	r3, r3, #16
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d010      	beq.n	8008d70 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008d4e:	4ba2      	ldr	r3, [pc, #648]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d54:	4aa0      	ldr	r2, [pc, #640]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008d5e:	4b9e      	ldr	r3, [pc, #632]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d60:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d68:	499b      	ldr	r1, [pc, #620]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d00a      	beq.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008d7c:	4b96      	ldr	r3, [pc, #600]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d8a:	4993      	ldr	r1, [pc, #588]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00a      	beq.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008d9e:	4b8e      	ldr	r3, [pc, #568]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008da4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008dac:	498a      	ldr	r1, [pc, #552]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008dae:	4313      	orrs	r3, r2
 8008db0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00a      	beq.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008dc0:	4b85      	ldr	r3, [pc, #532]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dce:	4982      	ldr	r1, [pc, #520]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00a      	beq.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008de2:	4b7d      	ldr	r3, [pc, #500]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008de8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008df0:	4979      	ldr	r1, [pc, #484]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008df2:	4313      	orrs	r3, r2
 8008df4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00a      	beq.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008e04:	4b74      	ldr	r3, [pc, #464]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e0a:	f023 0203 	bic.w	r2, r3, #3
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e12:	4971      	ldr	r1, [pc, #452]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e14:	4313      	orrs	r3, r2
 8008e16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00a      	beq.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008e26:	4b6c      	ldr	r3, [pc, #432]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e2c:	f023 020c 	bic.w	r2, r3, #12
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e34:	4968      	ldr	r1, [pc, #416]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e36:	4313      	orrs	r3, r2
 8008e38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00a      	beq.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008e48:	4b63      	ldr	r3, [pc, #396]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e4e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e56:	4960      	ldr	r1, [pc, #384]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00a      	beq.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008e6a:	4b5b      	ldr	r3, [pc, #364]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e70:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e78:	4957      	ldr	r1, [pc, #348]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d00a      	beq.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008e8c:	4b52      	ldr	r3, [pc, #328]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e9a:	494f      	ldr	r1, [pc, #316]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d00a      	beq.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008eae:	4b4a      	ldr	r3, [pc, #296]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eb4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ebc:	4946      	ldr	r1, [pc, #280]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00a      	beq.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008ed0:	4b41      	ldr	r3, [pc, #260]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ed6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ede:	493e      	ldr	r1, [pc, #248]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00a      	beq.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008ef2:	4b39      	ldr	r3, [pc, #228]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ef8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f00:	4935      	ldr	r1, [pc, #212]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f02:	4313      	orrs	r3, r2
 8008f04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d00a      	beq.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008f14:	4b30      	ldr	r3, [pc, #192]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f1a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f22:	492d      	ldr	r1, [pc, #180]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f24:	4313      	orrs	r3, r2
 8008f26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d011      	beq.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008f36:	4b28      	ldr	r3, [pc, #160]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f3c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f44:	4924      	ldr	r1, [pc, #144]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f46:	4313      	orrs	r3, r2
 8008f48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f54:	d101      	bne.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008f56:	2301      	movs	r3, #1
 8008f58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f003 0308 	and.w	r3, r3, #8
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d001      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008f66:	2301      	movs	r3, #1
 8008f68:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00a      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008f76:	4b18      	ldr	r3, [pc, #96]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f7c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f84:	4914      	ldr	r1, [pc, #80]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f86:	4313      	orrs	r3, r2
 8008f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00b      	beq.n	8008fb0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008f98:	4b0f      	ldr	r3, [pc, #60]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f9e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fa8:	490b      	ldr	r1, [pc, #44]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008faa:	4313      	orrs	r3, r2
 8008fac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d00f      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8008fbc:	4b06      	ldr	r3, [pc, #24]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fc2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fcc:	4902      	ldr	r1, [pc, #8]	; (8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008fd4:	e002      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8008fd6:	bf00      	nop
 8008fd8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d00b      	beq.n	8009000 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008fe8:	4b8a      	ldr	r3, [pc, #552]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ff8:	4986      	ldr	r1, [pc, #536]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009008:	2b00      	cmp	r3, #0
 800900a:	d00b      	beq.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800900c:	4b81      	ldr	r3, [pc, #516]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800900e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009012:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800901c:	497d      	ldr	r1, [pc, #500]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800901e:	4313      	orrs	r3, r2
 8009020:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009024:	69fb      	ldr	r3, [r7, #28]
 8009026:	2b01      	cmp	r3, #1
 8009028:	d006      	beq.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009032:	2b00      	cmp	r3, #0
 8009034:	f000 80d6 	beq.w	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009038:	4b76      	ldr	r3, [pc, #472]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a75      	ldr	r2, [pc, #468]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800903e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009042:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009044:	f7fa ff1e 	bl	8003e84 <HAL_GetTick>
 8009048:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800904a:	e008      	b.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800904c:	f7fa ff1a 	bl	8003e84 <HAL_GetTick>
 8009050:	4602      	mov	r2, r0
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	1ad3      	subs	r3, r2, r3
 8009056:	2b64      	cmp	r3, #100	; 0x64
 8009058:	d901      	bls.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800905a:	2303      	movs	r3, #3
 800905c:	e195      	b.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800905e:	4b6d      	ldr	r3, [pc, #436]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1f0      	bne.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f003 0301 	and.w	r3, r3, #1
 8009072:	2b00      	cmp	r3, #0
 8009074:	d021      	beq.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x572>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800907a:	2b00      	cmp	r3, #0
 800907c:	d11d      	bne.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800907e:	4b65      	ldr	r3, [pc, #404]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009084:	0c1b      	lsrs	r3, r3, #16
 8009086:	f003 0303 	and.w	r3, r3, #3
 800908a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800908c:	4b61      	ldr	r3, [pc, #388]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800908e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009092:	0e1b      	lsrs	r3, r3, #24
 8009094:	f003 030f 	and.w	r3, r3, #15
 8009098:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	019a      	lsls	r2, r3, #6
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	041b      	lsls	r3, r3, #16
 80090a4:	431a      	orrs	r2, r3
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	061b      	lsls	r3, r3, #24
 80090aa:	431a      	orrs	r2, r3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	071b      	lsls	r3, r3, #28
 80090b2:	4958      	ldr	r1, [pc, #352]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090b4:	4313      	orrs	r3, r2
 80090b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d004      	beq.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090ce:	d00a      	beq.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d02e      	beq.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090e4:	d129      	bne.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80090e6:	4b4b      	ldr	r3, [pc, #300]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090ec:	0c1b      	lsrs	r3, r3, #16
 80090ee:	f003 0303 	and.w	r3, r3, #3
 80090f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80090f4:	4b47      	ldr	r3, [pc, #284]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80090f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090fa:	0f1b      	lsrs	r3, r3, #28
 80090fc:	f003 0307 	and.w	r3, r3, #7
 8009100:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	019a      	lsls	r2, r3, #6
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	041b      	lsls	r3, r3, #16
 800910c:	431a      	orrs	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	061b      	lsls	r3, r3, #24
 8009114:	431a      	orrs	r2, r3
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	071b      	lsls	r3, r3, #28
 800911a:	493e      	ldr	r1, [pc, #248]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800911c:	4313      	orrs	r3, r2
 800911e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009122:	4b3c      	ldr	r3, [pc, #240]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009128:	f023 021f 	bic.w	r2, r3, #31
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009130:	3b01      	subs	r3, #1
 8009132:	4938      	ldr	r1, [pc, #224]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009134:	4313      	orrs	r3, r2
 8009136:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009142:	2b00      	cmp	r3, #0
 8009144:	d01d      	beq.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009146:	4b33      	ldr	r3, [pc, #204]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800914c:	0e1b      	lsrs	r3, r3, #24
 800914e:	f003 030f 	and.w	r3, r3, #15
 8009152:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009154:	4b2f      	ldr	r3, [pc, #188]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8009156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800915a:	0f1b      	lsrs	r3, r3, #28
 800915c:	f003 0307 	and.w	r3, r3, #7
 8009160:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	019a      	lsls	r2, r3, #6
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	691b      	ldr	r3, [r3, #16]
 800916c:	041b      	lsls	r3, r3, #16
 800916e:	431a      	orrs	r2, r3
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	061b      	lsls	r3, r3, #24
 8009174:	431a      	orrs	r2, r3
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	071b      	lsls	r3, r3, #28
 800917a:	4926      	ldr	r1, [pc, #152]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800917c:	4313      	orrs	r3, r2
 800917e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800918a:	2b00      	cmp	r3, #0
 800918c:	d011      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	019a      	lsls	r2, r3, #6
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	691b      	ldr	r3, [r3, #16]
 8009198:	041b      	lsls	r3, r3, #16
 800919a:	431a      	orrs	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	061b      	lsls	r3, r3, #24
 80091a2:	431a      	orrs	r2, r3
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	071b      	lsls	r3, r3, #28
 80091aa:	491a      	ldr	r1, [pc, #104]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80091ac:	4313      	orrs	r3, r2
 80091ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80091b2:	4b18      	ldr	r3, [pc, #96]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a17      	ldr	r2, [pc, #92]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80091b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80091bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091be:	f7fa fe61 	bl	8003e84 <HAL_GetTick>
 80091c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80091c4:	e008      	b.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80091c6:	f7fa fe5d 	bl	8003e84 <HAL_GetTick>
 80091ca:	4602      	mov	r2, r0
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	1ad3      	subs	r3, r2, r3
 80091d0:	2b64      	cmp	r3, #100	; 0x64
 80091d2:	d901      	bls.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80091d4:	2303      	movs	r3, #3
 80091d6:	e0d8      	b.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80091d8:	4b0e      	ldr	r3, [pc, #56]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d0f0      	beq.n	80091c6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	f040 80ce 	bne.w	8009388 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80091ec:	4b09      	ldr	r3, [pc, #36]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a08      	ldr	r2, [pc, #32]	; (8009214 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80091f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091f8:	f7fa fe44 	bl	8003e84 <HAL_GetTick>
 80091fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80091fe:	e00b      	b.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009200:	f7fa fe40 	bl	8003e84 <HAL_GetTick>
 8009204:	4602      	mov	r2, r0
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	1ad3      	subs	r3, r2, r3
 800920a:	2b64      	cmp	r3, #100	; 0x64
 800920c:	d904      	bls.n	8009218 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800920e:	2303      	movs	r3, #3
 8009210:	e0bb      	b.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8009212:	bf00      	nop
 8009214:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009218:	4b5e      	ldr	r3, [pc, #376]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009224:	d0ec      	beq.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800922e:	2b00      	cmp	r3, #0
 8009230:	d003      	beq.n	800923a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009236:	2b00      	cmp	r3, #0
 8009238:	d009      	beq.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009242:	2b00      	cmp	r3, #0
 8009244:	d02e      	beq.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800924a:	2b00      	cmp	r3, #0
 800924c:	d12a      	bne.n	80092a4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800924e:	4b51      	ldr	r3, [pc, #324]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009254:	0c1b      	lsrs	r3, r3, #16
 8009256:	f003 0303 	and.w	r3, r3, #3
 800925a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800925c:	4b4d      	ldr	r3, [pc, #308]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800925e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009262:	0f1b      	lsrs	r3, r3, #28
 8009264:	f003 0307 	and.w	r3, r3, #7
 8009268:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	695b      	ldr	r3, [r3, #20]
 800926e:	019a      	lsls	r2, r3, #6
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	041b      	lsls	r3, r3, #16
 8009274:	431a      	orrs	r2, r3
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	061b      	lsls	r3, r3, #24
 800927c:	431a      	orrs	r2, r3
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	071b      	lsls	r3, r3, #28
 8009282:	4944      	ldr	r1, [pc, #272]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009284:	4313      	orrs	r3, r2
 8009286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800928a:	4b42      	ldr	r3, [pc, #264]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800928c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009290:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009298:	3b01      	subs	r3, #1
 800929a:	021b      	lsls	r3, r3, #8
 800929c:	493d      	ldr	r1, [pc, #244]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800929e:	4313      	orrs	r3, r2
 80092a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d022      	beq.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092b8:	d11d      	bne.n	80092f6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80092ba:	4b36      	ldr	r3, [pc, #216]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80092bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092c0:	0e1b      	lsrs	r3, r3, #24
 80092c2:	f003 030f 	and.w	r3, r3, #15
 80092c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80092c8:	4b32      	ldr	r3, [pc, #200]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80092ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092ce:	0f1b      	lsrs	r3, r3, #28
 80092d0:	f003 0307 	and.w	r3, r3, #7
 80092d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	695b      	ldr	r3, [r3, #20]
 80092da:	019a      	lsls	r2, r3, #6
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a1b      	ldr	r3, [r3, #32]
 80092e0:	041b      	lsls	r3, r3, #16
 80092e2:	431a      	orrs	r2, r3
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	061b      	lsls	r3, r3, #24
 80092e8:	431a      	orrs	r2, r3
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	071b      	lsls	r3, r3, #28
 80092ee:	4929      	ldr	r1, [pc, #164]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80092f0:	4313      	orrs	r3, r2
 80092f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f003 0308 	and.w	r3, r3, #8
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d028      	beq.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009302:	4b24      	ldr	r3, [pc, #144]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009308:	0e1b      	lsrs	r3, r3, #24
 800930a:	f003 030f 	and.w	r3, r3, #15
 800930e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009310:	4b20      	ldr	r3, [pc, #128]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009316:	0c1b      	lsrs	r3, r3, #16
 8009318:	f003 0303 	and.w	r3, r3, #3
 800931c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	695b      	ldr	r3, [r3, #20]
 8009322:	019a      	lsls	r2, r3, #6
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	041b      	lsls	r3, r3, #16
 8009328:	431a      	orrs	r2, r3
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	061b      	lsls	r3, r3, #24
 800932e:	431a      	orrs	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	69db      	ldr	r3, [r3, #28]
 8009334:	071b      	lsls	r3, r3, #28
 8009336:	4917      	ldr	r1, [pc, #92]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009338:	4313      	orrs	r3, r2
 800933a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800933e:	4b15      	ldr	r3, [pc, #84]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009344:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934c:	4911      	ldr	r1, [pc, #68]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800934e:	4313      	orrs	r3, r2
 8009350:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009354:	4b0f      	ldr	r3, [pc, #60]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a0e      	ldr	r2, [pc, #56]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800935a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800935e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009360:	f7fa fd90 	bl	8003e84 <HAL_GetTick>
 8009364:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009366:	e008      	b.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009368:	f7fa fd8c 	bl	8003e84 <HAL_GetTick>
 800936c:	4602      	mov	r2, r0
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	1ad3      	subs	r3, r2, r3
 8009372:	2b64      	cmp	r3, #100	; 0x64
 8009374:	d901      	bls.n	800937a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009376:	2303      	movs	r3, #3
 8009378:	e007      	b.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800937a:	4b06      	ldr	r3, [pc, #24]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009382:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009386:	d1ef      	bne.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3720      	adds	r7, #32
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	40023800 	.word	0x40023800

08009398 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b082      	sub	sp, #8
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d101      	bne.n	80093ac <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80093a8:	2301      	movs	r3, #1
 80093aa:	e025      	b.n	80093f8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d106      	bne.n	80093c6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2200      	movs	r2, #0
 80093bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f7f8 fcc7 	bl	8001d54 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2202      	movs	r2, #2
 80093ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	3304      	adds	r3, #4
 80093d6:	4619      	mov	r1, r3
 80093d8:	4610      	mov	r0, r2
 80093da:	f000 fb43 	bl	8009a64 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6818      	ldr	r0, [r3, #0]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	461a      	mov	r2, r3
 80093e8:	6839      	ldr	r1, [r7, #0]
 80093ea:	f000 fb97 	bl	8009b1c <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2201      	movs	r2, #1
 80093f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80093f6:	2300      	movs	r3, #0
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3708      	adds	r7, #8
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b086      	sub	sp, #24
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009412:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009414:	7dfb      	ldrb	r3, [r7, #23]
 8009416:	2b02      	cmp	r3, #2
 8009418:	d101      	bne.n	800941e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800941a:	2302      	movs	r3, #2
 800941c:	e021      	b.n	8009462 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800941e:	7dfb      	ldrb	r3, [r7, #23]
 8009420:	2b01      	cmp	r3, #1
 8009422:	d002      	beq.n	800942a <HAL_SDRAM_SendCommand+0x2a>
 8009424:	7dfb      	ldrb	r3, [r7, #23]
 8009426:	2b05      	cmp	r3, #5
 8009428:	d118      	bne.n	800945c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2202      	movs	r2, #2
 800942e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	68b9      	ldr	r1, [r7, #8]
 800943a:	4618      	mov	r0, r3
 800943c:	f000 fbd8 	bl	8009bf0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b02      	cmp	r3, #2
 8009446:	d104      	bne.n	8009452 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2205      	movs	r2, #5
 800944c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009450:	e006      	b.n	8009460 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2201      	movs	r2, #1
 8009456:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800945a:	e001      	b.n	8009460 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800945c:	2301      	movs	r3, #1
 800945e:	e000      	b.n	8009462 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009460:	2300      	movs	r3, #0
}
 8009462:	4618      	mov	r0, r3
 8009464:	3718      	adds	r7, #24
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}

0800946a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800946a:	b580      	push	{r7, lr}
 800946c:	b082      	sub	sp, #8
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
 8009472:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800947a:	b2db      	uxtb	r3, r3
 800947c:	2b02      	cmp	r3, #2
 800947e:	d101      	bne.n	8009484 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009480:	2302      	movs	r3, #2
 8009482:	e016      	b.n	80094b2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800948a:	b2db      	uxtb	r3, r3
 800948c:	2b01      	cmp	r3, #1
 800948e:	d10f      	bne.n	80094b0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2202      	movs	r2, #2
 8009494:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6839      	ldr	r1, [r7, #0]
 800949e:	4618      	mov	r0, r3
 80094a0:	f000 fbca 	bl	8009c38 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2201      	movs	r2, #1
 80094a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80094ac:	2300      	movs	r3, #0
 80094ae:	e000      	b.n	80094b2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b082      	sub	sp, #8
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d101      	bne.n	80094cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	e049      	b.n	8009560 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d106      	bne.n	80094e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f7f8 fb5d 	bl	8001ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2202      	movs	r2, #2
 80094ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	3304      	adds	r3, #4
 80094f6:	4619      	mov	r1, r3
 80094f8:	4610      	mov	r0, r2
 80094fa:	f000 f9f5 	bl	80098e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2201      	movs	r2, #1
 8009502:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2201      	movs	r2, #1
 800950a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2201      	movs	r2, #1
 8009512:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2201      	movs	r2, #1
 800951a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2201      	movs	r2, #1
 8009522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2201      	movs	r2, #1
 800952a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2201      	movs	r2, #1
 8009532:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2201      	movs	r2, #1
 800953a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2201      	movs	r2, #1
 8009542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2201      	movs	r2, #1
 800954a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2201      	movs	r2, #1
 8009552:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2201      	movs	r2, #1
 800955a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009568:	b480      	push	{r7}
 800956a:	b085      	sub	sp, #20
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009576:	b2db      	uxtb	r3, r3
 8009578:	2b01      	cmp	r3, #1
 800957a:	d001      	beq.n	8009580 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	e054      	b.n	800962a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2202      	movs	r2, #2
 8009584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68da      	ldr	r2, [r3, #12]
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f042 0201 	orr.w	r2, r2, #1
 8009596:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a26      	ldr	r2, [pc, #152]	; (8009638 <HAL_TIM_Base_Start_IT+0xd0>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d022      	beq.n	80095e8 <HAL_TIM_Base_Start_IT+0x80>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095aa:	d01d      	beq.n	80095e8 <HAL_TIM_Base_Start_IT+0x80>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a22      	ldr	r2, [pc, #136]	; (800963c <HAL_TIM_Base_Start_IT+0xd4>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d018      	beq.n	80095e8 <HAL_TIM_Base_Start_IT+0x80>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a21      	ldr	r2, [pc, #132]	; (8009640 <HAL_TIM_Base_Start_IT+0xd8>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d013      	beq.n	80095e8 <HAL_TIM_Base_Start_IT+0x80>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a1f      	ldr	r2, [pc, #124]	; (8009644 <HAL_TIM_Base_Start_IT+0xdc>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d00e      	beq.n	80095e8 <HAL_TIM_Base_Start_IT+0x80>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a1e      	ldr	r2, [pc, #120]	; (8009648 <HAL_TIM_Base_Start_IT+0xe0>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d009      	beq.n	80095e8 <HAL_TIM_Base_Start_IT+0x80>
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a1c      	ldr	r2, [pc, #112]	; (800964c <HAL_TIM_Base_Start_IT+0xe4>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d004      	beq.n	80095e8 <HAL_TIM_Base_Start_IT+0x80>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a1b      	ldr	r2, [pc, #108]	; (8009650 <HAL_TIM_Base_Start_IT+0xe8>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d115      	bne.n	8009614 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	689a      	ldr	r2, [r3, #8]
 80095ee:	4b19      	ldr	r3, [pc, #100]	; (8009654 <HAL_TIM_Base_Start_IT+0xec>)
 80095f0:	4013      	ands	r3, r2
 80095f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2b06      	cmp	r3, #6
 80095f8:	d015      	beq.n	8009626 <HAL_TIM_Base_Start_IT+0xbe>
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009600:	d011      	beq.n	8009626 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f042 0201 	orr.w	r2, r2, #1
 8009610:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009612:	e008      	b.n	8009626 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f042 0201 	orr.w	r2, r2, #1
 8009622:	601a      	str	r2, [r3, #0]
 8009624:	e000      	b.n	8009628 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009626:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3714      	adds	r7, #20
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr
 8009636:	bf00      	nop
 8009638:	40010000 	.word	0x40010000
 800963c:	40000400 	.word	0x40000400
 8009640:	40000800 	.word	0x40000800
 8009644:	40000c00 	.word	0x40000c00
 8009648:	40010400 	.word	0x40010400
 800964c:	40014000 	.word	0x40014000
 8009650:	40001800 	.word	0x40001800
 8009654:	00010007 	.word	0x00010007

08009658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	691b      	ldr	r3, [r3, #16]
 8009666:	f003 0302 	and.w	r3, r3, #2
 800966a:	2b02      	cmp	r3, #2
 800966c:	d122      	bne.n	80096b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	f003 0302 	and.w	r3, r3, #2
 8009678:	2b02      	cmp	r3, #2
 800967a:	d11b      	bne.n	80096b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f06f 0202 	mvn.w	r2, #2
 8009684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2201      	movs	r2, #1
 800968a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	699b      	ldr	r3, [r3, #24]
 8009692:	f003 0303 	and.w	r3, r3, #3
 8009696:	2b00      	cmp	r3, #0
 8009698:	d003      	beq.n	80096a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 f905 	bl	80098aa <HAL_TIM_IC_CaptureCallback>
 80096a0:	e005      	b.n	80096ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 f8f7 	bl	8009896 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 f908 	bl	80098be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	691b      	ldr	r3, [r3, #16]
 80096ba:	f003 0304 	and.w	r3, r3, #4
 80096be:	2b04      	cmp	r3, #4
 80096c0:	d122      	bne.n	8009708 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	f003 0304 	and.w	r3, r3, #4
 80096cc:	2b04      	cmp	r3, #4
 80096ce:	d11b      	bne.n	8009708 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f06f 0204 	mvn.w	r2, #4
 80096d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2202      	movs	r2, #2
 80096de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	699b      	ldr	r3, [r3, #24]
 80096e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d003      	beq.n	80096f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 f8db 	bl	80098aa <HAL_TIM_IC_CaptureCallback>
 80096f4:	e005      	b.n	8009702 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f8cd 	bl	8009896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 f8de 	bl	80098be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	691b      	ldr	r3, [r3, #16]
 800970e:	f003 0308 	and.w	r3, r3, #8
 8009712:	2b08      	cmp	r3, #8
 8009714:	d122      	bne.n	800975c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	68db      	ldr	r3, [r3, #12]
 800971c:	f003 0308 	and.w	r3, r3, #8
 8009720:	2b08      	cmp	r3, #8
 8009722:	d11b      	bne.n	800975c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f06f 0208 	mvn.w	r2, #8
 800972c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2204      	movs	r2, #4
 8009732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	69db      	ldr	r3, [r3, #28]
 800973a:	f003 0303 	and.w	r3, r3, #3
 800973e:	2b00      	cmp	r3, #0
 8009740:	d003      	beq.n	800974a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f8b1 	bl	80098aa <HAL_TIM_IC_CaptureCallback>
 8009748:	e005      	b.n	8009756 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f8a3 	bl	8009896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 f8b4 	bl	80098be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2200      	movs	r2, #0
 800975a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	f003 0310 	and.w	r3, r3, #16
 8009766:	2b10      	cmp	r3, #16
 8009768:	d122      	bne.n	80097b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	f003 0310 	and.w	r3, r3, #16
 8009774:	2b10      	cmp	r3, #16
 8009776:	d11b      	bne.n	80097b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f06f 0210 	mvn.w	r2, #16
 8009780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2208      	movs	r2, #8
 8009786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	69db      	ldr	r3, [r3, #28]
 800978e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009792:	2b00      	cmp	r3, #0
 8009794:	d003      	beq.n	800979e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f887 	bl	80098aa <HAL_TIM_IC_CaptureCallback>
 800979c:	e005      	b.n	80097aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 f879 	bl	8009896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 f88a 	bl	80098be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	f003 0301 	and.w	r3, r3, #1
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d10e      	bne.n	80097dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	f003 0301 	and.w	r3, r3, #1
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d107      	bne.n	80097dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f06f 0201 	mvn.w	r2, #1
 80097d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f7f7 ffe4 	bl	80017a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	691b      	ldr	r3, [r3, #16]
 80097e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097e6:	2b80      	cmp	r3, #128	; 0x80
 80097e8:	d10e      	bne.n	8009808 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097f4:	2b80      	cmp	r3, #128	; 0x80
 80097f6:	d107      	bne.n	8009808 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 f91a 	bl	8009a3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	691b      	ldr	r3, [r3, #16]
 800980e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009816:	d10e      	bne.n	8009836 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009822:	2b80      	cmp	r3, #128	; 0x80
 8009824:	d107      	bne.n	8009836 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800982e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f000 f90d 	bl	8009a50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009840:	2b40      	cmp	r3, #64	; 0x40
 8009842:	d10e      	bne.n	8009862 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800984e:	2b40      	cmp	r3, #64	; 0x40
 8009850:	d107      	bne.n	8009862 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800985a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 f838 	bl	80098d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	f003 0320 	and.w	r3, r3, #32
 800986c:	2b20      	cmp	r3, #32
 800986e:	d10e      	bne.n	800988e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	f003 0320 	and.w	r3, r3, #32
 800987a:	2b20      	cmp	r3, #32
 800987c:	d107      	bne.n	800988e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f06f 0220 	mvn.w	r2, #32
 8009886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 f8cd 	bl	8009a28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800988e:	bf00      	nop
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009896:	b480      	push	{r7}
 8009898:	b083      	sub	sp, #12
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800989e:	bf00      	nop
 80098a0:	370c      	adds	r7, #12
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr

080098aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80098aa:	b480      	push	{r7}
 80098ac:	b083      	sub	sp, #12
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80098b2:	bf00      	nop
 80098b4:	370c      	adds	r7, #12
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr

080098be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80098be:	b480      	push	{r7}
 80098c0:	b083      	sub	sp, #12
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80098c6:	bf00      	nop
 80098c8:	370c      	adds	r7, #12
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr

080098d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80098d2:	b480      	push	{r7}
 80098d4:	b083      	sub	sp, #12
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80098da:	bf00      	nop
 80098dc:	370c      	adds	r7, #12
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr
	...

080098e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a40      	ldr	r2, [pc, #256]	; (80099fc <TIM_Base_SetConfig+0x114>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d013      	beq.n	8009928 <TIM_Base_SetConfig+0x40>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009906:	d00f      	beq.n	8009928 <TIM_Base_SetConfig+0x40>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a3d      	ldr	r2, [pc, #244]	; (8009a00 <TIM_Base_SetConfig+0x118>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d00b      	beq.n	8009928 <TIM_Base_SetConfig+0x40>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a3c      	ldr	r2, [pc, #240]	; (8009a04 <TIM_Base_SetConfig+0x11c>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d007      	beq.n	8009928 <TIM_Base_SetConfig+0x40>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4a3b      	ldr	r2, [pc, #236]	; (8009a08 <TIM_Base_SetConfig+0x120>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d003      	beq.n	8009928 <TIM_Base_SetConfig+0x40>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a3a      	ldr	r2, [pc, #232]	; (8009a0c <TIM_Base_SetConfig+0x124>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d108      	bne.n	800993a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800992e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	4313      	orrs	r3, r2
 8009938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4a2f      	ldr	r2, [pc, #188]	; (80099fc <TIM_Base_SetConfig+0x114>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d02b      	beq.n	800999a <TIM_Base_SetConfig+0xb2>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009948:	d027      	beq.n	800999a <TIM_Base_SetConfig+0xb2>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4a2c      	ldr	r2, [pc, #176]	; (8009a00 <TIM_Base_SetConfig+0x118>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d023      	beq.n	800999a <TIM_Base_SetConfig+0xb2>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4a2b      	ldr	r2, [pc, #172]	; (8009a04 <TIM_Base_SetConfig+0x11c>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d01f      	beq.n	800999a <TIM_Base_SetConfig+0xb2>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4a2a      	ldr	r2, [pc, #168]	; (8009a08 <TIM_Base_SetConfig+0x120>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d01b      	beq.n	800999a <TIM_Base_SetConfig+0xb2>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4a29      	ldr	r2, [pc, #164]	; (8009a0c <TIM_Base_SetConfig+0x124>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d017      	beq.n	800999a <TIM_Base_SetConfig+0xb2>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	4a28      	ldr	r2, [pc, #160]	; (8009a10 <TIM_Base_SetConfig+0x128>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d013      	beq.n	800999a <TIM_Base_SetConfig+0xb2>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4a27      	ldr	r2, [pc, #156]	; (8009a14 <TIM_Base_SetConfig+0x12c>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d00f      	beq.n	800999a <TIM_Base_SetConfig+0xb2>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4a26      	ldr	r2, [pc, #152]	; (8009a18 <TIM_Base_SetConfig+0x130>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d00b      	beq.n	800999a <TIM_Base_SetConfig+0xb2>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4a25      	ldr	r2, [pc, #148]	; (8009a1c <TIM_Base_SetConfig+0x134>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d007      	beq.n	800999a <TIM_Base_SetConfig+0xb2>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	4a24      	ldr	r2, [pc, #144]	; (8009a20 <TIM_Base_SetConfig+0x138>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d003      	beq.n	800999a <TIM_Base_SetConfig+0xb2>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	4a23      	ldr	r2, [pc, #140]	; (8009a24 <TIM_Base_SetConfig+0x13c>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d108      	bne.n	80099ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	68fa      	ldr	r2, [r7, #12]
 80099a8:	4313      	orrs	r3, r2
 80099aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	695b      	ldr	r3, [r3, #20]
 80099b6:	4313      	orrs	r3, r2
 80099b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	68fa      	ldr	r2, [r7, #12]
 80099be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	689a      	ldr	r2, [r3, #8]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a0a      	ldr	r2, [pc, #40]	; (80099fc <TIM_Base_SetConfig+0x114>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d003      	beq.n	80099e0 <TIM_Base_SetConfig+0xf8>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a0c      	ldr	r2, [pc, #48]	; (8009a0c <TIM_Base_SetConfig+0x124>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d103      	bne.n	80099e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	691a      	ldr	r2, [r3, #16]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2201      	movs	r2, #1
 80099ec:	615a      	str	r2, [r3, #20]
}
 80099ee:	bf00      	nop
 80099f0:	3714      	adds	r7, #20
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr
 80099fa:	bf00      	nop
 80099fc:	40010000 	.word	0x40010000
 8009a00:	40000400 	.word	0x40000400
 8009a04:	40000800 	.word	0x40000800
 8009a08:	40000c00 	.word	0x40000c00
 8009a0c:	40010400 	.word	0x40010400
 8009a10:	40014000 	.word	0x40014000
 8009a14:	40014400 	.word	0x40014400
 8009a18:	40014800 	.word	0x40014800
 8009a1c:	40001800 	.word	0x40001800
 8009a20:	40001c00 	.word	0x40001c00
 8009a24:	40002000 	.word	0x40002000

08009a28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a44:	bf00      	nop
 8009a46:	370c      	adds	r7, #12
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b083      	sub	sp, #12
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009a58:	bf00      	nop
 8009a5a:	370c      	adds	r7, #12
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b083      	sub	sp, #12
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d121      	bne.n	8009aba <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	4b27      	ldr	r3, [pc, #156]	; (8009b18 <FMC_SDRAM_Init+0xb4>)
 8009a7c:	4013      	ands	r3, r2
 8009a7e:	683a      	ldr	r2, [r7, #0]
 8009a80:	6851      	ldr	r1, [r2, #4]
 8009a82:	683a      	ldr	r2, [r7, #0]
 8009a84:	6892      	ldr	r2, [r2, #8]
 8009a86:	4311      	orrs	r1, r2
 8009a88:	683a      	ldr	r2, [r7, #0]
 8009a8a:	68d2      	ldr	r2, [r2, #12]
 8009a8c:	4311      	orrs	r1, r2
 8009a8e:	683a      	ldr	r2, [r7, #0]
 8009a90:	6912      	ldr	r2, [r2, #16]
 8009a92:	4311      	orrs	r1, r2
 8009a94:	683a      	ldr	r2, [r7, #0]
 8009a96:	6952      	ldr	r2, [r2, #20]
 8009a98:	4311      	orrs	r1, r2
 8009a9a:	683a      	ldr	r2, [r7, #0]
 8009a9c:	6992      	ldr	r2, [r2, #24]
 8009a9e:	4311      	orrs	r1, r2
 8009aa0:	683a      	ldr	r2, [r7, #0]
 8009aa2:	69d2      	ldr	r2, [r2, #28]
 8009aa4:	4311      	orrs	r1, r2
 8009aa6:	683a      	ldr	r2, [r7, #0]
 8009aa8:	6a12      	ldr	r2, [r2, #32]
 8009aaa:	4311      	orrs	r1, r2
 8009aac:	683a      	ldr	r2, [r7, #0]
 8009aae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009ab0:	430a      	orrs	r2, r1
 8009ab2:	431a      	orrs	r2, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	601a      	str	r2, [r3, #0]
 8009ab8:	e026      	b.n	8009b08 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	69d9      	ldr	r1, [r3, #28]
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	6a1b      	ldr	r3, [r3, #32]
 8009aca:	4319      	orrs	r1, r3
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad0:	430b      	orrs	r3, r1
 8009ad2:	431a      	orrs	r2, r3
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	685a      	ldr	r2, [r3, #4]
 8009adc:	4b0e      	ldr	r3, [pc, #56]	; (8009b18 <FMC_SDRAM_Init+0xb4>)
 8009ade:	4013      	ands	r3, r2
 8009ae0:	683a      	ldr	r2, [r7, #0]
 8009ae2:	6851      	ldr	r1, [r2, #4]
 8009ae4:	683a      	ldr	r2, [r7, #0]
 8009ae6:	6892      	ldr	r2, [r2, #8]
 8009ae8:	4311      	orrs	r1, r2
 8009aea:	683a      	ldr	r2, [r7, #0]
 8009aec:	68d2      	ldr	r2, [r2, #12]
 8009aee:	4311      	orrs	r1, r2
 8009af0:	683a      	ldr	r2, [r7, #0]
 8009af2:	6912      	ldr	r2, [r2, #16]
 8009af4:	4311      	orrs	r1, r2
 8009af6:	683a      	ldr	r2, [r7, #0]
 8009af8:	6952      	ldr	r2, [r2, #20]
 8009afa:	4311      	orrs	r1, r2
 8009afc:	683a      	ldr	r2, [r7, #0]
 8009afe:	6992      	ldr	r2, [r2, #24]
 8009b00:	430a      	orrs	r2, r1
 8009b02:	431a      	orrs	r2, r3
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009b08:	2300      	movs	r3, #0
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	370c      	adds	r7, #12
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr
 8009b16:	bf00      	nop
 8009b18:	ffff8000 	.word	0xffff8000

08009b1c <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b085      	sub	sp, #20
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d128      	bne.n	8009b80 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	1e59      	subs	r1, r3, #1
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	3b01      	subs	r3, #1
 8009b42:	011b      	lsls	r3, r3, #4
 8009b44:	4319      	orrs	r1, r3
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	021b      	lsls	r3, r3, #8
 8009b4e:	4319      	orrs	r1, r3
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	3b01      	subs	r3, #1
 8009b56:	031b      	lsls	r3, r3, #12
 8009b58:	4319      	orrs	r1, r3
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	691b      	ldr	r3, [r3, #16]
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	041b      	lsls	r3, r3, #16
 8009b62:	4319      	orrs	r1, r3
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	695b      	ldr	r3, [r3, #20]
 8009b68:	3b01      	subs	r3, #1
 8009b6a:	051b      	lsls	r3, r3, #20
 8009b6c:	4319      	orrs	r1, r3
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	699b      	ldr	r3, [r3, #24]
 8009b72:	3b01      	subs	r3, #1
 8009b74:	061b      	lsls	r3, r3, #24
 8009b76:	430b      	orrs	r3, r1
 8009b78:	431a      	orrs	r2, r3
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	609a      	str	r2, [r3, #8]
 8009b7e:	e02d      	b.n	8009bdc <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	689a      	ldr	r2, [r3, #8]
 8009b84:	4b19      	ldr	r3, [pc, #100]	; (8009bec <FMC_SDRAM_Timing_Init+0xd0>)
 8009b86:	4013      	ands	r3, r2
 8009b88:	68ba      	ldr	r2, [r7, #8]
 8009b8a:	68d2      	ldr	r2, [r2, #12]
 8009b8c:	3a01      	subs	r2, #1
 8009b8e:	0311      	lsls	r1, r2, #12
 8009b90:	68ba      	ldr	r2, [r7, #8]
 8009b92:	6952      	ldr	r2, [r2, #20]
 8009b94:	3a01      	subs	r2, #1
 8009b96:	0512      	lsls	r2, r2, #20
 8009b98:	430a      	orrs	r2, r1
 8009b9a:	431a      	orrs	r2, r3
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	1e59      	subs	r1, r3, #1
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	3b01      	subs	r3, #1
 8009bb4:	011b      	lsls	r3, r3, #4
 8009bb6:	4319      	orrs	r1, r3
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	3b01      	subs	r3, #1
 8009bbe:	021b      	lsls	r3, r3, #8
 8009bc0:	4319      	orrs	r1, r3
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	691b      	ldr	r3, [r3, #16]
 8009bc6:	3b01      	subs	r3, #1
 8009bc8:	041b      	lsls	r3, r3, #16
 8009bca:	4319      	orrs	r1, r3
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	699b      	ldr	r3, [r3, #24]
 8009bd0:	3b01      	subs	r3, #1
 8009bd2:	061b      	lsls	r3, r3, #24
 8009bd4:	430b      	orrs	r3, r1
 8009bd6:	431a      	orrs	r2, r3
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3714      	adds	r7, #20
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop
 8009bec:	ff0f0fff 	.word	0xff0f0fff

08009bf0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	691a      	ldr	r2, [r3, #16]
 8009c00:	4b0c      	ldr	r3, [pc, #48]	; (8009c34 <FMC_SDRAM_SendCommand+0x44>)
 8009c02:	4013      	ands	r3, r2
 8009c04:	68ba      	ldr	r2, [r7, #8]
 8009c06:	6811      	ldr	r1, [r2, #0]
 8009c08:	68ba      	ldr	r2, [r7, #8]
 8009c0a:	6852      	ldr	r2, [r2, #4]
 8009c0c:	4311      	orrs	r1, r2
 8009c0e:	68ba      	ldr	r2, [r7, #8]
 8009c10:	6892      	ldr	r2, [r2, #8]
 8009c12:	3a01      	subs	r2, #1
 8009c14:	0152      	lsls	r2, r2, #5
 8009c16:	4311      	orrs	r1, r2
 8009c18:	68ba      	ldr	r2, [r7, #8]
 8009c1a:	68d2      	ldr	r2, [r2, #12]
 8009c1c:	0252      	lsls	r2, r2, #9
 8009c1e:	430a      	orrs	r2, r1
 8009c20:	431a      	orrs	r2, r3
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8009c26:	2300      	movs	r3, #0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3714      	adds	r7, #20
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr
 8009c34:	ffc00000 	.word	0xffc00000

08009c38 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b083      	sub	sp, #12
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
 8009c40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	695a      	ldr	r2, [r3, #20]
 8009c46:	4b07      	ldr	r3, [pc, #28]	; (8009c64 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8009c48:	4013      	ands	r3, r2
 8009c4a:	683a      	ldr	r2, [r7, #0]
 8009c4c:	0052      	lsls	r2, r2, #1
 8009c4e:	431a      	orrs	r2, r3
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009c54:	2300      	movs	r3, #0
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	370c      	adds	r7, #12
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	ffffc001 	.word	0xffffc001

08009c68 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b087      	sub	sp, #28
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	4613      	mov	r3, r2
 8009c74:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009c76:	79fb      	ldrb	r3, [r7, #7]
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d165      	bne.n	8009d48 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	4a41      	ldr	r2, [pc, #260]	; (8009d84 <USB_SetTurnaroundTime+0x11c>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d906      	bls.n	8009c92 <USB_SetTurnaroundTime+0x2a>
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	4a40      	ldr	r2, [pc, #256]	; (8009d88 <USB_SetTurnaroundTime+0x120>)
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d202      	bcs.n	8009c92 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009c8c:	230f      	movs	r3, #15
 8009c8e:	617b      	str	r3, [r7, #20]
 8009c90:	e062      	b.n	8009d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	4a3c      	ldr	r2, [pc, #240]	; (8009d88 <USB_SetTurnaroundTime+0x120>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d306      	bcc.n	8009ca8 <USB_SetTurnaroundTime+0x40>
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	4a3b      	ldr	r2, [pc, #236]	; (8009d8c <USB_SetTurnaroundTime+0x124>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d202      	bcs.n	8009ca8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009ca2:	230e      	movs	r3, #14
 8009ca4:	617b      	str	r3, [r7, #20]
 8009ca6:	e057      	b.n	8009d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	4a38      	ldr	r2, [pc, #224]	; (8009d8c <USB_SetTurnaroundTime+0x124>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d306      	bcc.n	8009cbe <USB_SetTurnaroundTime+0x56>
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	4a37      	ldr	r2, [pc, #220]	; (8009d90 <USB_SetTurnaroundTime+0x128>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d202      	bcs.n	8009cbe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009cb8:	230d      	movs	r3, #13
 8009cba:	617b      	str	r3, [r7, #20]
 8009cbc:	e04c      	b.n	8009d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	4a33      	ldr	r2, [pc, #204]	; (8009d90 <USB_SetTurnaroundTime+0x128>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d306      	bcc.n	8009cd4 <USB_SetTurnaroundTime+0x6c>
 8009cc6:	68bb      	ldr	r3, [r7, #8]
 8009cc8:	4a32      	ldr	r2, [pc, #200]	; (8009d94 <USB_SetTurnaroundTime+0x12c>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d802      	bhi.n	8009cd4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009cce:	230c      	movs	r3, #12
 8009cd0:	617b      	str	r3, [r7, #20]
 8009cd2:	e041      	b.n	8009d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	4a2f      	ldr	r2, [pc, #188]	; (8009d94 <USB_SetTurnaroundTime+0x12c>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d906      	bls.n	8009cea <USB_SetTurnaroundTime+0x82>
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	4a2e      	ldr	r2, [pc, #184]	; (8009d98 <USB_SetTurnaroundTime+0x130>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d802      	bhi.n	8009cea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009ce4:	230b      	movs	r3, #11
 8009ce6:	617b      	str	r3, [r7, #20]
 8009ce8:	e036      	b.n	8009d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	4a2a      	ldr	r2, [pc, #168]	; (8009d98 <USB_SetTurnaroundTime+0x130>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d906      	bls.n	8009d00 <USB_SetTurnaroundTime+0x98>
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	4a29      	ldr	r2, [pc, #164]	; (8009d9c <USB_SetTurnaroundTime+0x134>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d802      	bhi.n	8009d00 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009cfa:	230a      	movs	r3, #10
 8009cfc:	617b      	str	r3, [r7, #20]
 8009cfe:	e02b      	b.n	8009d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	4a26      	ldr	r2, [pc, #152]	; (8009d9c <USB_SetTurnaroundTime+0x134>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d906      	bls.n	8009d16 <USB_SetTurnaroundTime+0xae>
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	4a25      	ldr	r2, [pc, #148]	; (8009da0 <USB_SetTurnaroundTime+0x138>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d202      	bcs.n	8009d16 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009d10:	2309      	movs	r3, #9
 8009d12:	617b      	str	r3, [r7, #20]
 8009d14:	e020      	b.n	8009d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	4a21      	ldr	r2, [pc, #132]	; (8009da0 <USB_SetTurnaroundTime+0x138>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d306      	bcc.n	8009d2c <USB_SetTurnaroundTime+0xc4>
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	4a20      	ldr	r2, [pc, #128]	; (8009da4 <USB_SetTurnaroundTime+0x13c>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d802      	bhi.n	8009d2c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009d26:	2308      	movs	r3, #8
 8009d28:	617b      	str	r3, [r7, #20]
 8009d2a:	e015      	b.n	8009d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	4a1d      	ldr	r2, [pc, #116]	; (8009da4 <USB_SetTurnaroundTime+0x13c>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d906      	bls.n	8009d42 <USB_SetTurnaroundTime+0xda>
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	4a1c      	ldr	r2, [pc, #112]	; (8009da8 <USB_SetTurnaroundTime+0x140>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d202      	bcs.n	8009d42 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009d3c:	2307      	movs	r3, #7
 8009d3e:	617b      	str	r3, [r7, #20]
 8009d40:	e00a      	b.n	8009d58 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009d42:	2306      	movs	r3, #6
 8009d44:	617b      	str	r3, [r7, #20]
 8009d46:	e007      	b.n	8009d58 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009d48:	79fb      	ldrb	r3, [r7, #7]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d102      	bne.n	8009d54 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009d4e:	2309      	movs	r3, #9
 8009d50:	617b      	str	r3, [r7, #20]
 8009d52:	e001      	b.n	8009d58 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009d54:	2309      	movs	r3, #9
 8009d56:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	68da      	ldr	r2, [r3, #12]
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	029b      	lsls	r3, r3, #10
 8009d6c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009d70:	431a      	orrs	r2, r3
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009d76:	2300      	movs	r3, #0
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	371c      	adds	r7, #28
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr
 8009d84:	00d8acbf 	.word	0x00d8acbf
 8009d88:	00e4e1c0 	.word	0x00e4e1c0
 8009d8c:	00f42400 	.word	0x00f42400
 8009d90:	01067380 	.word	0x01067380
 8009d94:	011a499f 	.word	0x011a499f
 8009d98:	01312cff 	.word	0x01312cff
 8009d9c:	014ca43f 	.word	0x014ca43f
 8009da0:	016e3600 	.word	0x016e3600
 8009da4:	01a6ab1f 	.word	0x01a6ab1f
 8009da8:	01e84800 	.word	0x01e84800

08009dac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b085      	sub	sp, #20
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009db6:	2300      	movs	r3, #0
 8009db8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	4a13      	ldr	r2, [pc, #76]	; (8009e10 <USB_FlushTxFifo+0x64>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d901      	bls.n	8009dcc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009dc8:	2303      	movs	r3, #3
 8009dca:	e01b      	b.n	8009e04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	691b      	ldr	r3, [r3, #16]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	daf2      	bge.n	8009dba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	019b      	lsls	r3, r3, #6
 8009ddc:	f043 0220 	orr.w	r2, r3, #32
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	3301      	adds	r3, #1
 8009de8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	4a08      	ldr	r2, [pc, #32]	; (8009e10 <USB_FlushTxFifo+0x64>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d901      	bls.n	8009df6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009df2:	2303      	movs	r3, #3
 8009df4:	e006      	b.n	8009e04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	f003 0320 	and.w	r3, r3, #32
 8009dfe:	2b20      	cmp	r3, #32
 8009e00:	d0f0      	beq.n	8009de4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009e02:	2300      	movs	r3, #0
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3714      	adds	r7, #20
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0e:	4770      	bx	lr
 8009e10:	00030d40 	.word	0x00030d40

08009e14 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b087      	sub	sp, #28
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	f003 0306 	and.w	r3, r3, #6
 8009e2c:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d102      	bne.n	8009e3a <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009e34:	2300      	movs	r3, #0
 8009e36:	75fb      	strb	r3, [r7, #23]
 8009e38:	e00a      	b.n	8009e50 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2b02      	cmp	r3, #2
 8009e3e:	d002      	beq.n	8009e46 <USB_GetDevSpeed+0x32>
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2b06      	cmp	r3, #6
 8009e44:	d102      	bne.n	8009e4c <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009e46:	2302      	movs	r3, #2
 8009e48:	75fb      	strb	r3, [r7, #23]
 8009e4a:	e001      	b.n	8009e50 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009e4c:	230f      	movs	r3, #15
 8009e4e:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009e50:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	371c      	adds	r7, #28
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr

08009e5e <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e5e:	b480      	push	{r7}
 8009e60:	b087      	sub	sp, #28
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
 8009e66:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	785b      	ldrb	r3, [r3, #1]
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d14a      	bne.n	8009f12 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	015a      	lsls	r2, r3, #5
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	4413      	add	r3, r2
 8009e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e94:	f040 8086 	bne.w	8009fa4 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	015a      	lsls	r2, r3, #5
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	683a      	ldr	r2, [r7, #0]
 8009eaa:	7812      	ldrb	r2, [r2, #0]
 8009eac:	0151      	lsls	r1, r2, #5
 8009eae:	693a      	ldr	r2, [r7, #16]
 8009eb0:	440a      	add	r2, r1
 8009eb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009eb6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009eba:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	015a      	lsls	r2, r3, #5
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	683a      	ldr	r2, [r7, #0]
 8009ece:	7812      	ldrb	r2, [r2, #0]
 8009ed0:	0151      	lsls	r1, r2, #5
 8009ed2:	693a      	ldr	r2, [r7, #16]
 8009ed4:	440a      	add	r2, r1
 8009ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009eda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ede:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f242 7210 	movw	r2, #10000	; 0x2710
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d902      	bls.n	8009ef6 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	75fb      	strb	r3, [r7, #23]
          break;
 8009ef4:	e056      	b.n	8009fa4 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	015a      	lsls	r2, r3, #5
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	4413      	add	r3, r2
 8009f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f0e:	d0e7      	beq.n	8009ee0 <USB_EPStopXfer+0x82>
 8009f10:	e048      	b.n	8009fa4 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	015a      	lsls	r2, r3, #5
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	4413      	add	r3, r2
 8009f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f2a:	d13b      	bne.n	8009fa4 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	015a      	lsls	r2, r3, #5
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	4413      	add	r3, r2
 8009f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	683a      	ldr	r2, [r7, #0]
 8009f3e:	7812      	ldrb	r2, [r2, #0]
 8009f40:	0151      	lsls	r1, r2, #5
 8009f42:	693a      	ldr	r2, [r7, #16]
 8009f44:	440a      	add	r2, r1
 8009f46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f4e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	015a      	lsls	r2, r3, #5
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	4413      	add	r3, r2
 8009f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	683a      	ldr	r2, [r7, #0]
 8009f62:	7812      	ldrb	r2, [r2, #0]
 8009f64:	0151      	lsls	r1, r2, #5
 8009f66:	693a      	ldr	r2, [r7, #16]
 8009f68:	440a      	add	r2, r1
 8009f6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f72:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	3301      	adds	r3, #1
 8009f78:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f242 7210 	movw	r2, #10000	; 0x2710
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d902      	bls.n	8009f8a <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	75fb      	strb	r3, [r7, #23]
          break;
 8009f88:	e00c      	b.n	8009fa4 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	015a      	lsls	r2, r3, #5
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	4413      	add	r3, r2
 8009f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fa2:	d0e7      	beq.n	8009f74 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	371c      	adds	r7, #28
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr

08009fb2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009fb2:	b480      	push	{r7}
 8009fb4:	b089      	sub	sp, #36	; 0x24
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	60f8      	str	r0, [r7, #12]
 8009fba:	60b9      	str	r1, [r7, #8]
 8009fbc:	4611      	mov	r1, r2
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	460b      	mov	r3, r1
 8009fc2:	71fb      	strb	r3, [r7, #7]
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009fd0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d123      	bne.n	800a020 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009fd8:	88bb      	ldrh	r3, [r7, #4]
 8009fda:	3303      	adds	r3, #3
 8009fdc:	089b      	lsrs	r3, r3, #2
 8009fde:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	61bb      	str	r3, [r7, #24]
 8009fe4:	e018      	b.n	800a018 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009fe6:	79fb      	ldrb	r3, [r7, #7]
 8009fe8:	031a      	lsls	r2, r3, #12
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	4413      	add	r3, r2
 8009fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	69fb      	ldr	r3, [r7, #28]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009ffa:	69fb      	ldr	r3, [r7, #28]
 8009ffc:	3301      	adds	r3, #1
 8009ffe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	3301      	adds	r3, #1
 800a004:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a006:	69fb      	ldr	r3, [r7, #28]
 800a008:	3301      	adds	r3, #1
 800a00a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a00c:	69fb      	ldr	r3, [r7, #28]
 800a00e:	3301      	adds	r3, #1
 800a010:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	3301      	adds	r3, #1
 800a016:	61bb      	str	r3, [r7, #24]
 800a018:	69ba      	ldr	r2, [r7, #24]
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d3e2      	bcc.n	8009fe6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3724      	adds	r7, #36	; 0x24
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr

0800a02e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a02e:	b480      	push	{r7}
 800a030:	b08b      	sub	sp, #44	; 0x2c
 800a032:	af00      	add	r7, sp, #0
 800a034:	60f8      	str	r0, [r7, #12]
 800a036:	60b9      	str	r1, [r7, #8]
 800a038:	4613      	mov	r3, r2
 800a03a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a044:	88fb      	ldrh	r3, [r7, #6]
 800a046:	089b      	lsrs	r3, r3, #2
 800a048:	b29b      	uxth	r3, r3
 800a04a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a04c:	88fb      	ldrh	r3, [r7, #6]
 800a04e:	f003 0303 	and.w	r3, r3, #3
 800a052:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a054:	2300      	movs	r3, #0
 800a056:	623b      	str	r3, [r7, #32]
 800a058:	e014      	b.n	800a084 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a05a:	69bb      	ldr	r3, [r7, #24]
 800a05c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a064:	601a      	str	r2, [r3, #0]
    pDest++;
 800a066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a068:	3301      	adds	r3, #1
 800a06a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06e:	3301      	adds	r3, #1
 800a070:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a074:	3301      	adds	r3, #1
 800a076:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07a:	3301      	adds	r3, #1
 800a07c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a07e:	6a3b      	ldr	r3, [r7, #32]
 800a080:	3301      	adds	r3, #1
 800a082:	623b      	str	r3, [r7, #32]
 800a084:	6a3a      	ldr	r2, [r7, #32]
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	429a      	cmp	r2, r3
 800a08a:	d3e6      	bcc.n	800a05a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a08c:	8bfb      	ldrh	r3, [r7, #30]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d01e      	beq.n	800a0d0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a092:	2300      	movs	r3, #0
 800a094:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a09c:	461a      	mov	r2, r3
 800a09e:	f107 0310 	add.w	r3, r7, #16
 800a0a2:	6812      	ldr	r2, [r2, #0]
 800a0a4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a0a6:	693a      	ldr	r2, [r7, #16]
 800a0a8:	6a3b      	ldr	r3, [r7, #32]
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	00db      	lsls	r3, r3, #3
 800a0ae:	fa22 f303 	lsr.w	r3, r2, r3
 800a0b2:	b2da      	uxtb	r2, r3
 800a0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b6:	701a      	strb	r2, [r3, #0]
      i++;
 800a0b8:	6a3b      	ldr	r3, [r7, #32]
 800a0ba:	3301      	adds	r3, #1
 800a0bc:	623b      	str	r3, [r7, #32]
      pDest++;
 800a0be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a0c4:	8bfb      	ldrh	r3, [r7, #30]
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a0ca:	8bfb      	ldrh	r3, [r7, #30]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d1ea      	bne.n	800a0a6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	372c      	adds	r7, #44	; 0x2c
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr

0800a0de <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a0de:	b480      	push	{r7}
 800a0e0:	b085      	sub	sp, #20
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	695b      	ldr	r3, [r3, #20]
 800a0ea:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	699b      	ldr	r3, [r3, #24]
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	4013      	ands	r3, r2
 800a0f4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3714      	adds	r7, #20
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a104:	b480      	push	{r7}
 800a106:	b085      	sub	sp, #20
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a116:	699b      	ldr	r3, [r3, #24]
 800a118:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a120:	69db      	ldr	r3, [r3, #28]
 800a122:	68ba      	ldr	r2, [r7, #8]
 800a124:	4013      	ands	r3, r2
 800a126:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	0c1b      	lsrs	r3, r3, #16
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3714      	adds	r7, #20
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a14a:	699b      	ldr	r3, [r3, #24]
 800a14c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a154:	69db      	ldr	r3, [r3, #28]
 800a156:	68ba      	ldr	r2, [r7, #8]
 800a158:	4013      	ands	r3, r2
 800a15a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	b29b      	uxth	r3, r3
}
 800a160:	4618      	mov	r0, r3
 800a162:	3714      	adds	r7, #20
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr

0800a16c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b085      	sub	sp, #20
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	460b      	mov	r3, r1
 800a176:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a17c:	78fb      	ldrb	r3, [r7, #3]
 800a17e:	015a      	lsls	r2, r3, #5
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	4413      	add	r3, r2
 800a184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a188:	689b      	ldr	r3, [r3, #8]
 800a18a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a192:	695b      	ldr	r3, [r3, #20]
 800a194:	68ba      	ldr	r2, [r7, #8]
 800a196:	4013      	ands	r3, r2
 800a198:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a19a:	68bb      	ldr	r3, [r7, #8]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3714      	adds	r7, #20
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b087      	sub	sp, #28
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ca:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a1cc:	78fb      	ldrb	r3, [r7, #3]
 800a1ce:	f003 030f 	and.w	r3, r3, #15
 800a1d2:	68fa      	ldr	r2, [r7, #12]
 800a1d4:	fa22 f303 	lsr.w	r3, r2, r3
 800a1d8:	01db      	lsls	r3, r3, #7
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	693a      	ldr	r2, [r7, #16]
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a1e2:	78fb      	ldrb	r3, [r7, #3]
 800a1e4:	015a      	lsls	r2, r3, #5
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a1f6:	68bb      	ldr	r3, [r7, #8]
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	371c      	adds	r7, #28
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	695b      	ldr	r3, [r3, #20]
 800a210:	f003 0301 	and.w	r3, r3, #1
}
 800a214:	4618      	mov	r0, r3
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a220:	b480      	push	{r7}
 800a222:	b085      	sub	sp, #20
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a23a:	4619      	mov	r1, r3
 800a23c:	4b09      	ldr	r3, [pc, #36]	; (800a264 <USB_ActivateSetup+0x44>)
 800a23e:	4013      	ands	r3, r2
 800a240:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	68fa      	ldr	r2, [r7, #12]
 800a24c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a254:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a256:	2300      	movs	r3, #0
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3714      	adds	r7, #20
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr
 800a264:	fffff800 	.word	0xfffff800

0800a268 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a268:	b480      	push	{r7}
 800a26a:	b087      	sub	sp, #28
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	460b      	mov	r3, r1
 800a272:	607a      	str	r2, [r7, #4]
 800a274:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	333c      	adds	r3, #60	; 0x3c
 800a27e:	3304      	adds	r3, #4
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	4a26      	ldr	r2, [pc, #152]	; (800a320 <USB_EP0_OutStart+0xb8>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d90a      	bls.n	800a2a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a298:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a29c:	d101      	bne.n	800a2a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	e037      	b.n	800a312 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a2ae:	697b      	ldr	r3, [r7, #20]
 800a2b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2b4:	691b      	ldr	r3, [r3, #16]
 800a2b6:	697a      	ldr	r2, [r7, #20]
 800a2b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a2c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2c8:	691b      	ldr	r3, [r3, #16]
 800a2ca:	697a      	ldr	r2, [r7, #20]
 800a2cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2d0:	f043 0318 	orr.w	r3, r3, #24
 800a2d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2dc:	691b      	ldr	r3, [r3, #16]
 800a2de:	697a      	ldr	r2, [r7, #20]
 800a2e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a2e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a2ea:	7afb      	ldrb	r3, [r7, #11]
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d10f      	bne.n	800a310 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	697a      	ldr	r2, [r7, #20]
 800a306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a30a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a30e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	371c      	adds	r7, #28
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop
 800a320:	4f54300a 	.word	0x4f54300a

0800a324 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a324:	b480      	push	{r7}
 800a326:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800a328:	bf00      	nop
 800a32a:	46bd      	mov	sp, r7
 800a32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a330:	4770      	bx	lr
	...

0800a334 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a334:	b480      	push	{r7}
 800a336:	b085      	sub	sp, #20
 800a338:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a33a:	f3ef 8305 	mrs	r3, IPSR
 800a33e:	60bb      	str	r3, [r7, #8]
  return(result);
 800a340:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a342:	2b00      	cmp	r3, #0
 800a344:	d10f      	bne.n	800a366 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a346:	f3ef 8310 	mrs	r3, PRIMASK
 800a34a:	607b      	str	r3, [r7, #4]
  return(result);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d105      	bne.n	800a35e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a352:	f3ef 8311 	mrs	r3, BASEPRI
 800a356:	603b      	str	r3, [r7, #0]
  return(result);
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d007      	beq.n	800a36e <osKernelInitialize+0x3a>
 800a35e:	4b0e      	ldr	r3, [pc, #56]	; (800a398 <osKernelInitialize+0x64>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	2b02      	cmp	r3, #2
 800a364:	d103      	bne.n	800a36e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a366:	f06f 0305 	mvn.w	r3, #5
 800a36a:	60fb      	str	r3, [r7, #12]
 800a36c:	e00c      	b.n	800a388 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a36e:	4b0a      	ldr	r3, [pc, #40]	; (800a398 <osKernelInitialize+0x64>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d105      	bne.n	800a382 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a376:	4b08      	ldr	r3, [pc, #32]	; (800a398 <osKernelInitialize+0x64>)
 800a378:	2201      	movs	r2, #1
 800a37a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a37c:	2300      	movs	r3, #0
 800a37e:	60fb      	str	r3, [r7, #12]
 800a380:	e002      	b.n	800a388 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a386:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a388:	68fb      	ldr	r3, [r7, #12]
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3714      	adds	r7, #20
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr
 800a396:	bf00      	nop
 800a398:	20000b84 	.word	0x20000b84

0800a39c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3a2:	f3ef 8305 	mrs	r3, IPSR
 800a3a6:	60bb      	str	r3, [r7, #8]
  return(result);
 800a3a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d10f      	bne.n	800a3ce <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3ae:	f3ef 8310 	mrs	r3, PRIMASK
 800a3b2:	607b      	str	r3, [r7, #4]
  return(result);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d105      	bne.n	800a3c6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a3ba:	f3ef 8311 	mrs	r3, BASEPRI
 800a3be:	603b      	str	r3, [r7, #0]
  return(result);
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d007      	beq.n	800a3d6 <osKernelStart+0x3a>
 800a3c6:	4b0f      	ldr	r3, [pc, #60]	; (800a404 <osKernelStart+0x68>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2b02      	cmp	r3, #2
 800a3cc:	d103      	bne.n	800a3d6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800a3ce:	f06f 0305 	mvn.w	r3, #5
 800a3d2:	60fb      	str	r3, [r7, #12]
 800a3d4:	e010      	b.n	800a3f8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a3d6:	4b0b      	ldr	r3, [pc, #44]	; (800a404 <osKernelStart+0x68>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d109      	bne.n	800a3f2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a3de:	f7ff ffa1 	bl	800a324 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a3e2:	4b08      	ldr	r3, [pc, #32]	; (800a404 <osKernelStart+0x68>)
 800a3e4:	2202      	movs	r2, #2
 800a3e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a3e8:	f001 fd34 	bl	800be54 <vTaskStartScheduler>
      stat = osOK;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	60fb      	str	r3, [r7, #12]
 800a3f0:	e002      	b.n	800a3f8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800a3f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a3f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	20000b84 	.word	0x20000b84

0800a408 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a408:	b580      	push	{r7, lr}
 800a40a:	b090      	sub	sp, #64	; 0x40
 800a40c:	af04      	add	r7, sp, #16
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a414:	2300      	movs	r3, #0
 800a416:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a418:	f3ef 8305 	mrs	r3, IPSR
 800a41c:	61fb      	str	r3, [r7, #28]
  return(result);
 800a41e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800a420:	2b00      	cmp	r3, #0
 800a422:	f040 808f 	bne.w	800a544 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a426:	f3ef 8310 	mrs	r3, PRIMASK
 800a42a:	61bb      	str	r3, [r7, #24]
  return(result);
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d105      	bne.n	800a43e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a432:	f3ef 8311 	mrs	r3, BASEPRI
 800a436:	617b      	str	r3, [r7, #20]
  return(result);
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d003      	beq.n	800a446 <osThreadNew+0x3e>
 800a43e:	4b44      	ldr	r3, [pc, #272]	; (800a550 <osThreadNew+0x148>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	2b02      	cmp	r3, #2
 800a444:	d07e      	beq.n	800a544 <osThreadNew+0x13c>
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d07b      	beq.n	800a544 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800a44c:	2380      	movs	r3, #128	; 0x80
 800a44e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800a450:	2318      	movs	r3, #24
 800a452:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800a454:	2300      	movs	r3, #0
 800a456:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800a458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a45c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d045      	beq.n	800a4f0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d002      	beq.n	800a472 <osThreadNew+0x6a>
        name = attr->name;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	699b      	ldr	r3, [r3, #24]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d002      	beq.n	800a480 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	699b      	ldr	r3, [r3, #24]
 800a47e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a482:	2b00      	cmp	r3, #0
 800a484:	d008      	beq.n	800a498 <osThreadNew+0x90>
 800a486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a488:	2b38      	cmp	r3, #56	; 0x38
 800a48a:	d805      	bhi.n	800a498 <osThreadNew+0x90>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	f003 0301 	and.w	r3, r3, #1
 800a494:	2b00      	cmp	r3, #0
 800a496:	d001      	beq.n	800a49c <osThreadNew+0x94>
        return (NULL);
 800a498:	2300      	movs	r3, #0
 800a49a:	e054      	b.n	800a546 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	695b      	ldr	r3, [r3, #20]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d003      	beq.n	800a4ac <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	695b      	ldr	r3, [r3, #20]
 800a4a8:	089b      	lsrs	r3, r3, #2
 800a4aa:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d00e      	beq.n	800a4d2 <osThreadNew+0xca>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	68db      	ldr	r3, [r3, #12]
 800a4b8:	2b5f      	cmp	r3, #95	; 0x5f
 800a4ba:	d90a      	bls.n	800a4d2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d006      	beq.n	800a4d2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	695b      	ldr	r3, [r3, #20]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d002      	beq.n	800a4d2 <osThreadNew+0xca>
        mem = 1;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	623b      	str	r3, [r7, #32]
 800a4d0:	e010      	b.n	800a4f4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d10c      	bne.n	800a4f4 <osThreadNew+0xec>
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	68db      	ldr	r3, [r3, #12]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d108      	bne.n	800a4f4 <osThreadNew+0xec>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	691b      	ldr	r3, [r3, #16]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d104      	bne.n	800a4f4 <osThreadNew+0xec>
          mem = 0;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	623b      	str	r3, [r7, #32]
 800a4ee:	e001      	b.n	800a4f4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a4f4:	6a3b      	ldr	r3, [r7, #32]
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d110      	bne.n	800a51c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a502:	9202      	str	r2, [sp, #8]
 800a504:	9301      	str	r3, [sp, #4]
 800a506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a508:	9300      	str	r3, [sp, #0]
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a50e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a510:	68f8      	ldr	r0, [r7, #12]
 800a512:	f001 f9e1 	bl	800b8d8 <xTaskCreateStatic>
 800a516:	4603      	mov	r3, r0
 800a518:	613b      	str	r3, [r7, #16]
 800a51a:	e013      	b.n	800a544 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800a51c:	6a3b      	ldr	r3, [r7, #32]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d110      	bne.n	800a544 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a524:	b29a      	uxth	r2, r3
 800a526:	f107 0310 	add.w	r3, r7, #16
 800a52a:	9301      	str	r3, [sp, #4]
 800a52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52e:	9300      	str	r3, [sp, #0]
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a534:	68f8      	ldr	r0, [r7, #12]
 800a536:	f001 fa32 	bl	800b99e <xTaskCreate>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d001      	beq.n	800a544 <osThreadNew+0x13c>
          hTask = NULL;
 800a540:	2300      	movs	r3, #0
 800a542:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a544:	693b      	ldr	r3, [r7, #16]
}
 800a546:	4618      	mov	r0, r3
 800a548:	3730      	adds	r7, #48	; 0x30
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop
 800a550:	20000b84 	.word	0x20000b84

0800a554 <osThreadGetStackSpace>:
  }

  return (state);
}

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
 800a554:	b580      	push	{r7, lr}
 800a556:	b088      	sub	sp, #32
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a560:	f3ef 8305 	mrs	r3, IPSR
 800a564:	617b      	str	r3, [r7, #20]
  return(result);
 800a566:	697b      	ldr	r3, [r7, #20]
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d112      	bne.n	800a592 <osThreadGetStackSpace+0x3e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a56c:	f3ef 8310 	mrs	r3, PRIMASK
 800a570:	613b      	str	r3, [r7, #16]
  return(result);
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d105      	bne.n	800a584 <osThreadGetStackSpace+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a578:	f3ef 8311 	mrs	r3, BASEPRI
 800a57c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d003      	beq.n	800a58c <osThreadGetStackSpace+0x38>
 800a584:	4b09      	ldr	r3, [pc, #36]	; (800a5ac <osThreadGetStackSpace+0x58>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2b02      	cmp	r3, #2
 800a58a:	d002      	beq.n	800a592 <osThreadGetStackSpace+0x3e>
 800a58c:	69bb      	ldr	r3, [r7, #24]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d102      	bne.n	800a598 <osThreadGetStackSpace+0x44>
    sz = 0U;
 800a592:	2300      	movs	r3, #0
 800a594:	61fb      	str	r3, [r7, #28]
 800a596:	e003      	b.n	800a5a0 <osThreadGetStackSpace+0x4c>
  } else {
    sz = (uint32_t)uxTaskGetStackHighWaterMark (hTask);
 800a598:	69b8      	ldr	r0, [r7, #24]
 800a59a:	f002 f8b5 	bl	800c708 <uxTaskGetStackHighWaterMark>
 800a59e:	61f8      	str	r0, [r7, #28]
  }

  return (sz);
 800a5a0:	69fb      	ldr	r3, [r7, #28]
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3720      	adds	r7, #32
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	20000b84 	.word	0x20000b84

0800a5b0 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b088      	sub	sp, #32
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5bc:	f3ef 8305 	mrs	r3, IPSR
 800a5c0:	613b      	str	r3, [r7, #16]
  return(result);
 800a5c2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d10f      	bne.n	800a5e8 <osThreadTerminate+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a5c8:	f3ef 8310 	mrs	r3, PRIMASK
 800a5cc:	60fb      	str	r3, [r7, #12]
  return(result);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d105      	bne.n	800a5e0 <osThreadTerminate+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a5d4:	f3ef 8311 	mrs	r3, BASEPRI
 800a5d8:	60bb      	str	r3, [r7, #8]
  return(result);
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d007      	beq.n	800a5f0 <osThreadTerminate+0x40>
 800a5e0:	4b12      	ldr	r3, [pc, #72]	; (800a62c <osThreadTerminate+0x7c>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	2b02      	cmp	r3, #2
 800a5e6:	d103      	bne.n	800a5f0 <osThreadTerminate+0x40>
    stat = osErrorISR;
 800a5e8:	f06f 0305 	mvn.w	r3, #5
 800a5ec:	61fb      	str	r3, [r7, #28]
 800a5ee:	e017      	b.n	800a620 <osThreadTerminate+0x70>
  }
  else if (hTask == NULL) {
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d103      	bne.n	800a5fe <osThreadTerminate+0x4e>
    stat = osErrorParameter;
 800a5f6:	f06f 0303 	mvn.w	r3, #3
 800a5fa:	61fb      	str	r3, [r7, #28]
 800a5fc:	e010      	b.n	800a620 <osThreadTerminate+0x70>
  }
  else {
    tstate = eTaskGetState (hTask);
 800a5fe:	69b8      	ldr	r0, [r7, #24]
 800a600:	f001 fbc0 	bl	800bd84 <eTaskGetState>
 800a604:	4603      	mov	r3, r0
 800a606:	75fb      	strb	r3, [r7, #23]

    if (tstate != eDeleted) {
 800a608:	7dfb      	ldrb	r3, [r7, #23]
 800a60a:	2b04      	cmp	r3, #4
 800a60c:	d005      	beq.n	800a61a <osThreadTerminate+0x6a>
      stat = osOK;
 800a60e:	2300      	movs	r3, #0
 800a610:	61fb      	str	r3, [r7, #28]
      vTaskDelete (hTask);
 800a612:	69b8      	ldr	r0, [r7, #24]
 800a614:	f001 fb0c 	bl	800bc30 <vTaskDelete>
 800a618:	e002      	b.n	800a620 <osThreadTerminate+0x70>
    } else {
      stat = osErrorResource;
 800a61a:	f06f 0302 	mvn.w	r3, #2
 800a61e:	61fb      	str	r3, [r7, #28]
  }
#else
  stat = osError;
#endif

  return (stat);
 800a620:	69fb      	ldr	r3, [r7, #28]
}
 800a622:	4618      	mov	r0, r3
 800a624:	3720      	adds	r7, #32
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	20000b84 	.word	0x20000b84

0800a630 <osThreadGetCount>:

uint32_t osThreadGetCount (void) {
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a636:	f3ef 8305 	mrs	r3, IPSR
 800a63a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a63c:	68bb      	ldr	r3, [r7, #8]
  uint32_t count;

  if (IS_IRQ()) {
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d10f      	bne.n	800a662 <osThreadGetCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a642:	f3ef 8310 	mrs	r3, PRIMASK
 800a646:	607b      	str	r3, [r7, #4]
  return(result);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d105      	bne.n	800a65a <osThreadGetCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a64e:	f3ef 8311 	mrs	r3, BASEPRI
 800a652:	603b      	str	r3, [r7, #0]
  return(result);
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d006      	beq.n	800a668 <osThreadGetCount+0x38>
 800a65a:	4b07      	ldr	r3, [pc, #28]	; (800a678 <osThreadGetCount+0x48>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	2b02      	cmp	r3, #2
 800a660:	d102      	bne.n	800a668 <osThreadGetCount+0x38>
    count = 0U;
 800a662:	2300      	movs	r3, #0
 800a664:	60fb      	str	r3, [r7, #12]
 800a666:	e002      	b.n	800a66e <osThreadGetCount+0x3e>
  } else {
    count = uxTaskGetNumberOfTasks();
 800a668:	f001 fd1c 	bl	800c0a4 <uxTaskGetNumberOfTasks>
 800a66c:	60f8      	str	r0, [r7, #12]
  }

  return (count);
 800a66e:	68fb      	ldr	r3, [r7, #12]
}
 800a670:	4618      	mov	r0, r3
 800a672:	3710      	adds	r7, #16
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}
 800a678:	20000b84 	.word	0x20000b84

0800a67c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b086      	sub	sp, #24
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a684:	f3ef 8305 	mrs	r3, IPSR
 800a688:	613b      	str	r3, [r7, #16]
  return(result);
 800a68a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d10f      	bne.n	800a6b0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a690:	f3ef 8310 	mrs	r3, PRIMASK
 800a694:	60fb      	str	r3, [r7, #12]
  return(result);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d105      	bne.n	800a6a8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a69c:	f3ef 8311 	mrs	r3, BASEPRI
 800a6a0:	60bb      	str	r3, [r7, #8]
  return(result);
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d007      	beq.n	800a6b8 <osDelay+0x3c>
 800a6a8:	4b0a      	ldr	r3, [pc, #40]	; (800a6d4 <osDelay+0x58>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	2b02      	cmp	r3, #2
 800a6ae:	d103      	bne.n	800a6b8 <osDelay+0x3c>
    stat = osErrorISR;
 800a6b0:	f06f 0305 	mvn.w	r3, #5
 800a6b4:	617b      	str	r3, [r7, #20]
 800a6b6:	e007      	b.n	800a6c8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d002      	beq.n	800a6c8 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f001 fb28 	bl	800bd18 <vTaskDelay>
    }
  }

  return (stat);
 800a6c8:	697b      	ldr	r3, [r7, #20]
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3718      	adds	r7, #24
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	20000b84 	.word	0x20000b84

0800a6d8 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b084      	sub	sp, #16
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f002 fd5f 	bl	800d1a4 <pvTimerGetTimerID>
 800a6e6:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d005      	beq.n	800a6fa <TimerCallback+0x22>
    callb->func (callb->arg);
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	68fa      	ldr	r2, [r7, #12]
 800a6f4:	6852      	ldr	r2, [r2, #4]
 800a6f6:	4610      	mov	r0, r2
 800a6f8:	4798      	blx	r3
  }
}
 800a6fa:	bf00      	nop
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
	...

0800a704 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800a704:	b580      	push	{r7, lr}
 800a706:	b08e      	sub	sp, #56	; 0x38
 800a708:	af02      	add	r7, sp, #8
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	607a      	str	r2, [r7, #4]
 800a70e:	603b      	str	r3, [r7, #0]
 800a710:	460b      	mov	r3, r1
 800a712:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800a714:	2300      	movs	r3, #0
 800a716:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a718:	f3ef 8305 	mrs	r3, IPSR
 800a71c:	61bb      	str	r3, [r7, #24]
  return(result);
 800a71e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 800a720:	2b00      	cmp	r3, #0
 800a722:	d16a      	bne.n	800a7fa <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a724:	f3ef 8310 	mrs	r3, PRIMASK
 800a728:	617b      	str	r3, [r7, #20]
  return(result);
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d105      	bne.n	800a73c <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a730:	f3ef 8311 	mrs	r3, BASEPRI
 800a734:	613b      	str	r3, [r7, #16]
  return(result);
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d003      	beq.n	800a744 <osTimerNew+0x40>
 800a73c:	4b31      	ldr	r3, [pc, #196]	; (800a804 <osTimerNew+0x100>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2b02      	cmp	r3, #2
 800a742:	d05a      	beq.n	800a7fa <osTimerNew+0xf6>
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d057      	beq.n	800a7fa <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800a74a:	2008      	movs	r0, #8
 800a74c:	f002 ff82 	bl	800d654 <pvPortMalloc>
 800a750:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d050      	beq.n	800a7fa <osTimerNew+0xf6>
      callb->func = func;
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	68fa      	ldr	r2, [r7, #12]
 800a75c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800a764:	7afb      	ldrb	r3, [r7, #11]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d102      	bne.n	800a770 <osTimerNew+0x6c>
        reload = pdFALSE;
 800a76a:	2300      	movs	r3, #0
 800a76c:	627b      	str	r3, [r7, #36]	; 0x24
 800a76e:	e001      	b.n	800a774 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 800a770:	2301      	movs	r3, #1
 800a772:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 800a774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a778:	623b      	str	r3, [r7, #32]
      name = NULL;
 800a77a:	2300      	movs	r3, #0
 800a77c:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d01c      	beq.n	800a7be <osTimerNew+0xba>
        if (attr->name != NULL) {
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d002      	beq.n	800a792 <osTimerNew+0x8e>
          name = attr->name;
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d006      	beq.n	800a7a8 <osTimerNew+0xa4>
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	68db      	ldr	r3, [r3, #12]
 800a79e:	2b2b      	cmp	r3, #43	; 0x2b
 800a7a0:	d902      	bls.n	800a7a8 <osTimerNew+0xa4>
          mem = 1;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	623b      	str	r3, [r7, #32]
 800a7a6:	e00c      	b.n	800a7c2 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d108      	bne.n	800a7c2 <osTimerNew+0xbe>
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d104      	bne.n	800a7c2 <osTimerNew+0xbe>
            mem = 0;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	623b      	str	r3, [r7, #32]
 800a7bc:	e001      	b.n	800a7c2 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 800a7c2:	6a3b      	ldr	r3, [r7, #32]
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d10c      	bne.n	800a7e2 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	9301      	str	r3, [sp, #4]
 800a7ce:	4b0e      	ldr	r3, [pc, #56]	; (800a808 <osTimerNew+0x104>)
 800a7d0:	9300      	str	r3, [sp, #0]
 800a7d2:	69fb      	ldr	r3, [r7, #28]
 800a7d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7d6:	2101      	movs	r1, #1
 800a7d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7da:	f002 f952 	bl	800ca82 <xTimerCreateStatic>
 800a7de:	62b8      	str	r0, [r7, #40]	; 0x28
 800a7e0:	e00b      	b.n	800a7fa <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 800a7e2:	6a3b      	ldr	r3, [r7, #32]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d108      	bne.n	800a7fa <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800a7e8:	4b07      	ldr	r3, [pc, #28]	; (800a808 <osTimerNew+0x104>)
 800a7ea:	9300      	str	r3, [sp, #0]
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7f0:	2101      	movs	r1, #1
 800a7f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a7f4:	f002 f924 	bl	800ca40 <xTimerCreate>
 800a7f8:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800a7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3730      	adds	r7, #48	; 0x30
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}
 800a804:	20000b84 	.word	0x20000b84
 800a808:	0800a6d9 	.word	0x0800a6d9

0800a80c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b08a      	sub	sp, #40	; 0x28
 800a810:	af02      	add	r7, sp, #8
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a81a:	f3ef 8305 	mrs	r3, IPSR
 800a81e:	617b      	str	r3, [r7, #20]
  return(result);
 800a820:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a822:	2b00      	cmp	r3, #0
 800a824:	d10f      	bne.n	800a846 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a826:	f3ef 8310 	mrs	r3, PRIMASK
 800a82a:	613b      	str	r3, [r7, #16]
  return(result);
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d105      	bne.n	800a83e <osTimerStart+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a832:	f3ef 8311 	mrs	r3, BASEPRI
 800a836:	60fb      	str	r3, [r7, #12]
  return(result);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d007      	beq.n	800a84e <osTimerStart+0x42>
 800a83e:	4b12      	ldr	r3, [pc, #72]	; (800a888 <osTimerStart+0x7c>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2b02      	cmp	r3, #2
 800a844:	d103      	bne.n	800a84e <osTimerStart+0x42>
    stat = osErrorISR;
 800a846:	f06f 0305 	mvn.w	r3, #5
 800a84a:	61fb      	str	r3, [r7, #28]
 800a84c:	e017      	b.n	800a87e <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 800a84e:	69bb      	ldr	r3, [r7, #24]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d103      	bne.n	800a85c <osTimerStart+0x50>
    stat = osErrorParameter;
 800a854:	f06f 0303 	mvn.w	r3, #3
 800a858:	61fb      	str	r3, [r7, #28]
 800a85a:	e010      	b.n	800a87e <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800a85c:	2300      	movs	r3, #0
 800a85e:	9300      	str	r3, [sp, #0]
 800a860:	2300      	movs	r3, #0
 800a862:	683a      	ldr	r2, [r7, #0]
 800a864:	2104      	movs	r1, #4
 800a866:	69b8      	ldr	r0, [r7, #24]
 800a868:	f002 f98a 	bl	800cb80 <xTimerGenericCommand>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b01      	cmp	r3, #1
 800a870:	d102      	bne.n	800a878 <osTimerStart+0x6c>
      stat = osOK;
 800a872:	2300      	movs	r3, #0
 800a874:	61fb      	str	r3, [r7, #28]
 800a876:	e002      	b.n	800a87e <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 800a878:	f06f 0302 	mvn.w	r3, #2
 800a87c:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 800a87e:	69fb      	ldr	r3, [r7, #28]
}
 800a880:	4618      	mov	r0, r3
 800a882:	3720      	adds	r7, #32
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}
 800a888:	20000b84 	.word	0x20000b84

0800a88c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b08c      	sub	sp, #48	; 0x30
 800a890:	af02      	add	r7, sp, #8
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a898:	2300      	movs	r3, #0
 800a89a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a89c:	f3ef 8305 	mrs	r3, IPSR
 800a8a0:	61bb      	str	r3, [r7, #24]
  return(result);
 800a8a2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d16f      	bne.n	800a988 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8a8:	f3ef 8310 	mrs	r3, PRIMASK
 800a8ac:	617b      	str	r3, [r7, #20]
  return(result);
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d105      	bne.n	800a8c0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a8b4:	f3ef 8311 	mrs	r3, BASEPRI
 800a8b8:	613b      	str	r3, [r7, #16]
  return(result);
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d003      	beq.n	800a8c8 <osMessageQueueNew+0x3c>
 800a8c0:	4b34      	ldr	r3, [pc, #208]	; (800a994 <osMessageQueueNew+0x108>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	2b02      	cmp	r3, #2
 800a8c6:	d05f      	beq.n	800a988 <osMessageQueueNew+0xfc>
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d05c      	beq.n	800a988 <osMessageQueueNew+0xfc>
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d059      	beq.n	800a988 <osMessageQueueNew+0xfc>
    mem = -1;
 800a8d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a8d8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d029      	beq.n	800a934 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d012      	beq.n	800a90e <osMessageQueueNew+0x82>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	68db      	ldr	r3, [r3, #12]
 800a8ec:	2b4f      	cmp	r3, #79	; 0x4f
 800a8ee:	d90e      	bls.n	800a90e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d00a      	beq.n	800a90e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	695a      	ldr	r2, [r3, #20]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	68b9      	ldr	r1, [r7, #8]
 800a900:	fb01 f303 	mul.w	r3, r1, r3
 800a904:	429a      	cmp	r2, r3
 800a906:	d302      	bcc.n	800a90e <osMessageQueueNew+0x82>
        mem = 1;
 800a908:	2301      	movs	r3, #1
 800a90a:	623b      	str	r3, [r7, #32]
 800a90c:	e014      	b.n	800a938 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d110      	bne.n	800a938 <osMessageQueueNew+0xac>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d10c      	bne.n	800a938 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a922:	2b00      	cmp	r3, #0
 800a924:	d108      	bne.n	800a938 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	695b      	ldr	r3, [r3, #20]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d104      	bne.n	800a938 <osMessageQueueNew+0xac>
          mem = 0;
 800a92e:	2300      	movs	r3, #0
 800a930:	623b      	str	r3, [r7, #32]
 800a932:	e001      	b.n	800a938 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800a934:	2300      	movs	r3, #0
 800a936:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a938:	6a3b      	ldr	r3, [r7, #32]
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	d10b      	bne.n	800a956 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	691a      	ldr	r2, [r3, #16]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	689b      	ldr	r3, [r3, #8]
 800a946:	2100      	movs	r1, #0
 800a948:	9100      	str	r1, [sp, #0]
 800a94a:	68b9      	ldr	r1, [r7, #8]
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	f000 fa5b 	bl	800ae08 <xQueueGenericCreateStatic>
 800a952:	6278      	str	r0, [r7, #36]	; 0x24
 800a954:	e008      	b.n	800a968 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800a956:	6a3b      	ldr	r3, [r7, #32]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d105      	bne.n	800a968 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800a95c:	2200      	movs	r2, #0
 800a95e:	68b9      	ldr	r1, [r7, #8]
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	f000 fad3 	bl	800af0c <xQueueGenericCreate>
 800a966:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d00c      	beq.n	800a988 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d003      	beq.n	800a97c <osMessageQueueNew+0xf0>
        name = attr->name;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	61fb      	str	r3, [r7, #28]
 800a97a:	e001      	b.n	800a980 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800a97c:	2300      	movs	r3, #0
 800a97e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800a980:	69f9      	ldr	r1, [r7, #28]
 800a982:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a984:	f000 ff4a 	bl	800b81c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3728      	adds	r7, #40	; 0x28
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	20000b84 	.word	0x20000b84

0800a998 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a998:	b580      	push	{r7, lr}
 800a99a:	b08a      	sub	sp, #40	; 0x28
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	603b      	str	r3, [r7, #0]
 800a9a4:	4613      	mov	r3, r2
 800a9a6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a9b0:	f3ef 8305 	mrs	r3, IPSR
 800a9b4:	61fb      	str	r3, [r7, #28]
  return(result);
 800a9b6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10f      	bne.n	800a9dc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a9bc:	f3ef 8310 	mrs	r3, PRIMASK
 800a9c0:	61bb      	str	r3, [r7, #24]
  return(result);
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d105      	bne.n	800a9d4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a9c8:	f3ef 8311 	mrs	r3, BASEPRI
 800a9cc:	617b      	str	r3, [r7, #20]
  return(result);
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d02c      	beq.n	800aa2e <osMessageQueuePut+0x96>
 800a9d4:	4b28      	ldr	r3, [pc, #160]	; (800aa78 <osMessageQueuePut+0xe0>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2b02      	cmp	r3, #2
 800a9da:	d128      	bne.n	800aa2e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a9dc:	6a3b      	ldr	r3, [r7, #32]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d005      	beq.n	800a9ee <osMessageQueuePut+0x56>
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d002      	beq.n	800a9ee <osMessageQueuePut+0x56>
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d003      	beq.n	800a9f6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800a9ee:	f06f 0303 	mvn.w	r3, #3
 800a9f2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a9f4:	e039      	b.n	800aa6a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a9fa:	f107 0210 	add.w	r2, r7, #16
 800a9fe:	2300      	movs	r3, #0
 800aa00:	68b9      	ldr	r1, [r7, #8]
 800aa02:	6a38      	ldr	r0, [r7, #32]
 800aa04:	f000 fbee 	bl	800b1e4 <xQueueGenericSendFromISR>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b01      	cmp	r3, #1
 800aa0c:	d003      	beq.n	800aa16 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800aa0e:	f06f 0302 	mvn.w	r3, #2
 800aa12:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800aa14:	e029      	b.n	800aa6a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d026      	beq.n	800aa6a <osMessageQueuePut+0xd2>
 800aa1c:	4b17      	ldr	r3, [pc, #92]	; (800aa7c <osMessageQueuePut+0xe4>)
 800aa1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa22:	601a      	str	r2, [r3, #0]
 800aa24:	f3bf 8f4f 	dsb	sy
 800aa28:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800aa2c:	e01d      	b.n	800aa6a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800aa2e:	6a3b      	ldr	r3, [r7, #32]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d002      	beq.n	800aa3a <osMessageQueuePut+0xa2>
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d103      	bne.n	800aa42 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800aa3a:	f06f 0303 	mvn.w	r3, #3
 800aa3e:	627b      	str	r3, [r7, #36]	; 0x24
 800aa40:	e014      	b.n	800aa6c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800aa42:	2300      	movs	r3, #0
 800aa44:	683a      	ldr	r2, [r7, #0]
 800aa46:	68b9      	ldr	r1, [r7, #8]
 800aa48:	6a38      	ldr	r0, [r7, #32]
 800aa4a:	f000 fac5 	bl	800afd8 <xQueueGenericSend>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d00b      	beq.n	800aa6c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d003      	beq.n	800aa62 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800aa5a:	f06f 0301 	mvn.w	r3, #1
 800aa5e:	627b      	str	r3, [r7, #36]	; 0x24
 800aa60:	e004      	b.n	800aa6c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800aa62:	f06f 0302 	mvn.w	r3, #2
 800aa66:	627b      	str	r3, [r7, #36]	; 0x24
 800aa68:	e000      	b.n	800aa6c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800aa6a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800aa6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3728      	adds	r7, #40	; 0x28
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop
 800aa78:	20000b84 	.word	0x20000b84
 800aa7c:	e000ed04 	.word	0xe000ed04

0800aa80 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b08a      	sub	sp, #40	; 0x28
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	607a      	str	r2, [r7, #4]
 800aa8c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800aa92:	2300      	movs	r3, #0
 800aa94:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa96:	f3ef 8305 	mrs	r3, IPSR
 800aa9a:	61fb      	str	r3, [r7, #28]
  return(result);
 800aa9c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d10f      	bne.n	800aac2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aaa2:	f3ef 8310 	mrs	r3, PRIMASK
 800aaa6:	61bb      	str	r3, [r7, #24]
  return(result);
 800aaa8:	69bb      	ldr	r3, [r7, #24]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d105      	bne.n	800aaba <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aaae:	f3ef 8311 	mrs	r3, BASEPRI
 800aab2:	617b      	str	r3, [r7, #20]
  return(result);
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d02c      	beq.n	800ab14 <osMessageQueueGet+0x94>
 800aaba:	4b28      	ldr	r3, [pc, #160]	; (800ab5c <osMessageQueueGet+0xdc>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2b02      	cmp	r3, #2
 800aac0:	d128      	bne.n	800ab14 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800aac2:	6a3b      	ldr	r3, [r7, #32]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d005      	beq.n	800aad4 <osMessageQueueGet+0x54>
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d002      	beq.n	800aad4 <osMessageQueueGet+0x54>
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d003      	beq.n	800aadc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800aad4:	f06f 0303 	mvn.w	r3, #3
 800aad8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800aada:	e038      	b.n	800ab4e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800aadc:	2300      	movs	r3, #0
 800aade:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800aae0:	f107 0310 	add.w	r3, r7, #16
 800aae4:	461a      	mov	r2, r3
 800aae6:	68b9      	ldr	r1, [r7, #8]
 800aae8:	6a38      	ldr	r0, [r7, #32]
 800aaea:	f000 fd01 	bl	800b4f0 <xQueueReceiveFromISR>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d003      	beq.n	800aafc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800aaf4:	f06f 0302 	mvn.w	r3, #2
 800aaf8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800aafa:	e028      	b.n	800ab4e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d025      	beq.n	800ab4e <osMessageQueueGet+0xce>
 800ab02:	4b17      	ldr	r3, [pc, #92]	; (800ab60 <osMessageQueueGet+0xe0>)
 800ab04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab08:	601a      	str	r2, [r3, #0]
 800ab0a:	f3bf 8f4f 	dsb	sy
 800ab0e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ab12:	e01c      	b.n	800ab4e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ab14:	6a3b      	ldr	r3, [r7, #32]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d002      	beq.n	800ab20 <osMessageQueueGet+0xa0>
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d103      	bne.n	800ab28 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800ab20:	f06f 0303 	mvn.w	r3, #3
 800ab24:	627b      	str	r3, [r7, #36]	; 0x24
 800ab26:	e013      	b.n	800ab50 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ab28:	683a      	ldr	r2, [r7, #0]
 800ab2a:	68b9      	ldr	r1, [r7, #8]
 800ab2c:	6a38      	ldr	r0, [r7, #32]
 800ab2e:	f000 fbf9 	bl	800b324 <xQueueReceive>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b01      	cmp	r3, #1
 800ab36:	d00b      	beq.n	800ab50 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d003      	beq.n	800ab46 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800ab3e:	f06f 0301 	mvn.w	r3, #1
 800ab42:	627b      	str	r3, [r7, #36]	; 0x24
 800ab44:	e004      	b.n	800ab50 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800ab46:	f06f 0302 	mvn.w	r3, #2
 800ab4a:	627b      	str	r3, [r7, #36]	; 0x24
 800ab4c:	e000      	b.n	800ab50 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ab4e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800ab50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3728      	adds	r7, #40	; 0x28
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop
 800ab5c:	20000b84 	.word	0x20000b84
 800ab60:	e000ed04 	.word	0xe000ed04

0800ab64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	60f8      	str	r0, [r7, #12]
 800ab6c:	60b9      	str	r1, [r7, #8]
 800ab6e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	4a07      	ldr	r2, [pc, #28]	; (800ab90 <vApplicationGetIdleTaskMemory+0x2c>)
 800ab74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	4a06      	ldr	r2, [pc, #24]	; (800ab94 <vApplicationGetIdleTaskMemory+0x30>)
 800ab7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2280      	movs	r2, #128	; 0x80
 800ab80:	601a      	str	r2, [r3, #0]
}
 800ab82:	bf00      	nop
 800ab84:	3714      	adds	r7, #20
 800ab86:	46bd      	mov	sp, r7
 800ab88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8c:	4770      	bx	lr
 800ab8e:	bf00      	nop
 800ab90:	20000b88 	.word	0x20000b88
 800ab94:	20000be8 	.word	0x20000be8

0800ab98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ab98:	b480      	push	{r7}
 800ab9a:	b085      	sub	sp, #20
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	4a07      	ldr	r2, [pc, #28]	; (800abc4 <vApplicationGetTimerTaskMemory+0x2c>)
 800aba8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	4a06      	ldr	r2, [pc, #24]	; (800abc8 <vApplicationGetTimerTaskMemory+0x30>)
 800abae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800abb6:	601a      	str	r2, [r3, #0]
}
 800abb8:	bf00      	nop
 800abba:	3714      	adds	r7, #20
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr
 800abc4:	20000de8 	.word	0x20000de8
 800abc8:	20000e48 	.word	0x20000e48

0800abcc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f103 0208 	add.w	r2, r3, #8
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800abe4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f103 0208 	add.w	r2, r3, #8
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f103 0208 	add.w	r2, r3, #8
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	2200      	movs	r2, #0
 800abfe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ac00:	bf00      	nop
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b083      	sub	sp, #12
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2200      	movs	r2, #0
 800ac18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ac1a:	bf00      	nop
 800ac1c:	370c      	adds	r7, #12
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr

0800ac26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac26:	b480      	push	{r7}
 800ac28:	b085      	sub	sp, #20
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
 800ac2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	689a      	ldr	r2, [r3, #8]
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	689b      	ldr	r3, [r3, #8]
 800ac48:	683a      	ldr	r2, [r7, #0]
 800ac4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	683a      	ldr	r2, [r7, #0]
 800ac50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	687a      	ldr	r2, [r7, #4]
 800ac56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	1c5a      	adds	r2, r3, #1
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	601a      	str	r2, [r3, #0]
}
 800ac62:	bf00      	nop
 800ac64:	3714      	adds	r7, #20
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr

0800ac6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ac6e:	b480      	push	{r7}
 800ac70:	b085      	sub	sp, #20
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
 800ac76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac84:	d103      	bne.n	800ac8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	691b      	ldr	r3, [r3, #16]
 800ac8a:	60fb      	str	r3, [r7, #12]
 800ac8c:	e00c      	b.n	800aca8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	3308      	adds	r3, #8
 800ac92:	60fb      	str	r3, [r7, #12]
 800ac94:	e002      	b.n	800ac9c <vListInsert+0x2e>
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	60fb      	str	r3, [r7, #12]
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	68ba      	ldr	r2, [r7, #8]
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d2f6      	bcs.n	800ac96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	685a      	ldr	r2, [r3, #4]
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	683a      	ldr	r2, [r7, #0]
 800acb6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	68fa      	ldr	r2, [r7, #12]
 800acbc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	683a      	ldr	r2, [r7, #0]
 800acc2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	1c5a      	adds	r2, r3, #1
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	601a      	str	r2, [r3, #0]
}
 800acd4:	bf00      	nop
 800acd6:	3714      	adds	r7, #20
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ace0:	b480      	push	{r7}
 800ace2:	b085      	sub	sp, #20
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	691b      	ldr	r3, [r3, #16]
 800acec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	687a      	ldr	r2, [r7, #4]
 800acf4:	6892      	ldr	r2, [r2, #8]
 800acf6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	689b      	ldr	r3, [r3, #8]
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	6852      	ldr	r2, [r2, #4]
 800ad00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d103      	bne.n	800ad14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	689a      	ldr	r2, [r3, #8]
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2200      	movs	r2, #0
 800ad18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	1e5a      	subs	r2, r3, #1
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3714      	adds	r7, #20
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d10c      	bne.n	800ad62 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ad48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad4c:	b672      	cpsid	i
 800ad4e:	f383 8811 	msr	BASEPRI, r3
 800ad52:	f3bf 8f6f 	isb	sy
 800ad56:	f3bf 8f4f 	dsb	sy
 800ad5a:	b662      	cpsie	i
 800ad5c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ad5e:	bf00      	nop
 800ad60:	e7fe      	b.n	800ad60 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800ad62:	f002 fb4b 	bl	800d3fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad6e:	68f9      	ldr	r1, [r7, #12]
 800ad70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ad72:	fb01 f303 	mul.w	r3, r1, r3
 800ad76:	441a      	add	r2, r3
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	681a      	ldr	r2, [r3, #0]
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681a      	ldr	r2, [r3, #0]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad92:	3b01      	subs	r3, #1
 800ad94:	68f9      	ldr	r1, [r7, #12]
 800ad96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ad98:	fb01 f303 	mul.w	r3, r1, r3
 800ad9c:	441a      	add	r2, r3
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	22ff      	movs	r2, #255	; 0xff
 800ada6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	22ff      	movs	r2, #255	; 0xff
 800adae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d114      	bne.n	800ade2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	691b      	ldr	r3, [r3, #16]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d01a      	beq.n	800adf6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	3310      	adds	r3, #16
 800adc4:	4618      	mov	r0, r3
 800adc6:	f001 fb0d 	bl	800c3e4 <xTaskRemoveFromEventList>
 800adca:	4603      	mov	r3, r0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d012      	beq.n	800adf6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800add0:	4b0c      	ldr	r3, [pc, #48]	; (800ae04 <xQueueGenericReset+0xd0>)
 800add2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800add6:	601a      	str	r2, [r3, #0]
 800add8:	f3bf 8f4f 	dsb	sy
 800addc:	f3bf 8f6f 	isb	sy
 800ade0:	e009      	b.n	800adf6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	3310      	adds	r3, #16
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7ff fef0 	bl	800abcc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	3324      	adds	r3, #36	; 0x24
 800adf0:	4618      	mov	r0, r3
 800adf2:	f7ff feeb 	bl	800abcc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800adf6:	f002 fb35 	bl	800d464 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800adfa:	2301      	movs	r3, #1
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3710      	adds	r7, #16
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}
 800ae04:	e000ed04 	.word	0xe000ed04

0800ae08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b08e      	sub	sp, #56	; 0x38
 800ae0c:	af02      	add	r7, sp, #8
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	607a      	str	r2, [r7, #4]
 800ae14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d10c      	bne.n	800ae36 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800ae1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae20:	b672      	cpsid	i
 800ae22:	f383 8811 	msr	BASEPRI, r3
 800ae26:	f3bf 8f6f 	isb	sy
 800ae2a:	f3bf 8f4f 	dsb	sy
 800ae2e:	b662      	cpsie	i
 800ae30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ae32:	bf00      	nop
 800ae34:	e7fe      	b.n	800ae34 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d10c      	bne.n	800ae56 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800ae3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae40:	b672      	cpsid	i
 800ae42:	f383 8811 	msr	BASEPRI, r3
 800ae46:	f3bf 8f6f 	isb	sy
 800ae4a:	f3bf 8f4f 	dsb	sy
 800ae4e:	b662      	cpsie	i
 800ae50:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ae52:	bf00      	nop
 800ae54:	e7fe      	b.n	800ae54 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d002      	beq.n	800ae62 <xQueueGenericCreateStatic+0x5a>
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d001      	beq.n	800ae66 <xQueueGenericCreateStatic+0x5e>
 800ae62:	2301      	movs	r3, #1
 800ae64:	e000      	b.n	800ae68 <xQueueGenericCreateStatic+0x60>
 800ae66:	2300      	movs	r3, #0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d10c      	bne.n	800ae86 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800ae6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae70:	b672      	cpsid	i
 800ae72:	f383 8811 	msr	BASEPRI, r3
 800ae76:	f3bf 8f6f 	isb	sy
 800ae7a:	f3bf 8f4f 	dsb	sy
 800ae7e:	b662      	cpsie	i
 800ae80:	623b      	str	r3, [r7, #32]
}
 800ae82:	bf00      	nop
 800ae84:	e7fe      	b.n	800ae84 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d102      	bne.n	800ae92 <xQueueGenericCreateStatic+0x8a>
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d101      	bne.n	800ae96 <xQueueGenericCreateStatic+0x8e>
 800ae92:	2301      	movs	r3, #1
 800ae94:	e000      	b.n	800ae98 <xQueueGenericCreateStatic+0x90>
 800ae96:	2300      	movs	r3, #0
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d10c      	bne.n	800aeb6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800ae9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea0:	b672      	cpsid	i
 800aea2:	f383 8811 	msr	BASEPRI, r3
 800aea6:	f3bf 8f6f 	isb	sy
 800aeaa:	f3bf 8f4f 	dsb	sy
 800aeae:	b662      	cpsie	i
 800aeb0:	61fb      	str	r3, [r7, #28]
}
 800aeb2:	bf00      	nop
 800aeb4:	e7fe      	b.n	800aeb4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aeb6:	2350      	movs	r3, #80	; 0x50
 800aeb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	2b50      	cmp	r3, #80	; 0x50
 800aebe:	d00c      	beq.n	800aeda <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800aec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec4:	b672      	cpsid	i
 800aec6:	f383 8811 	msr	BASEPRI, r3
 800aeca:	f3bf 8f6f 	isb	sy
 800aece:	f3bf 8f4f 	dsb	sy
 800aed2:	b662      	cpsie	i
 800aed4:	61bb      	str	r3, [r7, #24]
}
 800aed6:	bf00      	nop
 800aed8:	e7fe      	b.n	800aed8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aeda:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800aee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00d      	beq.n	800af02 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aee8:	2201      	movs	r2, #1
 800aeea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aeee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800aef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aef4:	9300      	str	r3, [sp, #0]
 800aef6:	4613      	mov	r3, r2
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	68b9      	ldr	r1, [r7, #8]
 800aefc:	68f8      	ldr	r0, [r7, #12]
 800aefe:	f000 f847 	bl	800af90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800af02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800af04:	4618      	mov	r0, r3
 800af06:	3730      	adds	r7, #48	; 0x30
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b08a      	sub	sp, #40	; 0x28
 800af10:	af02      	add	r7, sp, #8
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	4613      	mov	r3, r2
 800af18:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d10c      	bne.n	800af3a <xQueueGenericCreate+0x2e>
	__asm volatile
 800af20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af24:	b672      	cpsid	i
 800af26:	f383 8811 	msr	BASEPRI, r3
 800af2a:	f3bf 8f6f 	isb	sy
 800af2e:	f3bf 8f4f 	dsb	sy
 800af32:	b662      	cpsie	i
 800af34:	613b      	str	r3, [r7, #16]
}
 800af36:	bf00      	nop
 800af38:	e7fe      	b.n	800af38 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d102      	bne.n	800af46 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800af40:	2300      	movs	r3, #0
 800af42:	61fb      	str	r3, [r7, #28]
 800af44:	e004      	b.n	800af50 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	68ba      	ldr	r2, [r7, #8]
 800af4a:	fb02 f303 	mul.w	r3, r2, r3
 800af4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800af50:	69fb      	ldr	r3, [r7, #28]
 800af52:	3350      	adds	r3, #80	; 0x50
 800af54:	4618      	mov	r0, r3
 800af56:	f002 fb7d 	bl	800d654 <pvPortMalloc>
 800af5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d011      	beq.n	800af86 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800af62:	69bb      	ldr	r3, [r7, #24]
 800af64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	3350      	adds	r3, #80	; 0x50
 800af6a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800af6c:	69bb      	ldr	r3, [r7, #24]
 800af6e:	2200      	movs	r2, #0
 800af70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800af74:	79fa      	ldrb	r2, [r7, #7]
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	9300      	str	r3, [sp, #0]
 800af7a:	4613      	mov	r3, r2
 800af7c:	697a      	ldr	r2, [r7, #20]
 800af7e:	68b9      	ldr	r1, [r7, #8]
 800af80:	68f8      	ldr	r0, [r7, #12]
 800af82:	f000 f805 	bl	800af90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800af86:	69bb      	ldr	r3, [r7, #24]
	}
 800af88:	4618      	mov	r0, r3
 800af8a:	3720      	adds	r7, #32
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b084      	sub	sp, #16
 800af94:	af00      	add	r7, sp, #0
 800af96:	60f8      	str	r0, [r7, #12]
 800af98:	60b9      	str	r1, [r7, #8]
 800af9a:	607a      	str	r2, [r7, #4]
 800af9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d103      	bne.n	800afac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800afa4:	69bb      	ldr	r3, [r7, #24]
 800afa6:	69ba      	ldr	r2, [r7, #24]
 800afa8:	601a      	str	r2, [r3, #0]
 800afaa:	e002      	b.n	800afb2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	687a      	ldr	r2, [r7, #4]
 800afb0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800afb2:	69bb      	ldr	r3, [r7, #24]
 800afb4:	68fa      	ldr	r2, [r7, #12]
 800afb6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800afb8:	69bb      	ldr	r3, [r7, #24]
 800afba:	68ba      	ldr	r2, [r7, #8]
 800afbc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800afbe:	2101      	movs	r1, #1
 800afc0:	69b8      	ldr	r0, [r7, #24]
 800afc2:	f7ff feb7 	bl	800ad34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800afc6:	69bb      	ldr	r3, [r7, #24]
 800afc8:	78fa      	ldrb	r2, [r7, #3]
 800afca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800afce:	bf00      	nop
 800afd0:	3710      	adds	r7, #16
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}
	...

0800afd8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b08e      	sub	sp, #56	; 0x38
 800afdc:	af00      	add	r7, sp, #0
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	607a      	str	r2, [r7, #4]
 800afe4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800afe6:	2300      	movs	r3, #0
 800afe8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800afee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d10c      	bne.n	800b00e <xQueueGenericSend+0x36>
	__asm volatile
 800aff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff8:	b672      	cpsid	i
 800affa:	f383 8811 	msr	BASEPRI, r3
 800affe:	f3bf 8f6f 	isb	sy
 800b002:	f3bf 8f4f 	dsb	sy
 800b006:	b662      	cpsie	i
 800b008:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b00a:	bf00      	nop
 800b00c:	e7fe      	b.n	800b00c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d103      	bne.n	800b01c <xQueueGenericSend+0x44>
 800b014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d101      	bne.n	800b020 <xQueueGenericSend+0x48>
 800b01c:	2301      	movs	r3, #1
 800b01e:	e000      	b.n	800b022 <xQueueGenericSend+0x4a>
 800b020:	2300      	movs	r3, #0
 800b022:	2b00      	cmp	r3, #0
 800b024:	d10c      	bne.n	800b040 <xQueueGenericSend+0x68>
	__asm volatile
 800b026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b02a:	b672      	cpsid	i
 800b02c:	f383 8811 	msr	BASEPRI, r3
 800b030:	f3bf 8f6f 	isb	sy
 800b034:	f3bf 8f4f 	dsb	sy
 800b038:	b662      	cpsie	i
 800b03a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b03c:	bf00      	nop
 800b03e:	e7fe      	b.n	800b03e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	2b02      	cmp	r3, #2
 800b044:	d103      	bne.n	800b04e <xQueueGenericSend+0x76>
 800b046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	d101      	bne.n	800b052 <xQueueGenericSend+0x7a>
 800b04e:	2301      	movs	r3, #1
 800b050:	e000      	b.n	800b054 <xQueueGenericSend+0x7c>
 800b052:	2300      	movs	r3, #0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d10c      	bne.n	800b072 <xQueueGenericSend+0x9a>
	__asm volatile
 800b058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05c:	b672      	cpsid	i
 800b05e:	f383 8811 	msr	BASEPRI, r3
 800b062:	f3bf 8f6f 	isb	sy
 800b066:	f3bf 8f4f 	dsb	sy
 800b06a:	b662      	cpsie	i
 800b06c:	623b      	str	r3, [r7, #32]
}
 800b06e:	bf00      	nop
 800b070:	e7fe      	b.n	800b070 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b072:	f001 fbb7 	bl	800c7e4 <xTaskGetSchedulerState>
 800b076:	4603      	mov	r3, r0
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d102      	bne.n	800b082 <xQueueGenericSend+0xaa>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d101      	bne.n	800b086 <xQueueGenericSend+0xae>
 800b082:	2301      	movs	r3, #1
 800b084:	e000      	b.n	800b088 <xQueueGenericSend+0xb0>
 800b086:	2300      	movs	r3, #0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d10c      	bne.n	800b0a6 <xQueueGenericSend+0xce>
	__asm volatile
 800b08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b090:	b672      	cpsid	i
 800b092:	f383 8811 	msr	BASEPRI, r3
 800b096:	f3bf 8f6f 	isb	sy
 800b09a:	f3bf 8f4f 	dsb	sy
 800b09e:	b662      	cpsie	i
 800b0a0:	61fb      	str	r3, [r7, #28]
}
 800b0a2:	bf00      	nop
 800b0a4:	e7fe      	b.n	800b0a4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0a6:	f002 f9a9 	bl	800d3fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d302      	bcc.n	800b0bc <xQueueGenericSend+0xe4>
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	2b02      	cmp	r3, #2
 800b0ba:	d129      	bne.n	800b110 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0bc:	683a      	ldr	r2, [r7, #0]
 800b0be:	68b9      	ldr	r1, [r7, #8]
 800b0c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0c2:	f000 fa9b 	bl	800b5fc <prvCopyDataToQueue>
 800b0c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d010      	beq.n	800b0f2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d2:	3324      	adds	r3, #36	; 0x24
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f001 f985 	bl	800c3e4 <xTaskRemoveFromEventList>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d013      	beq.n	800b108 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b0e0:	4b3f      	ldr	r3, [pc, #252]	; (800b1e0 <xQueueGenericSend+0x208>)
 800b0e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0e6:	601a      	str	r2, [r3, #0]
 800b0e8:	f3bf 8f4f 	dsb	sy
 800b0ec:	f3bf 8f6f 	isb	sy
 800b0f0:	e00a      	b.n	800b108 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d007      	beq.n	800b108 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b0f8:	4b39      	ldr	r3, [pc, #228]	; (800b1e0 <xQueueGenericSend+0x208>)
 800b0fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0fe:	601a      	str	r2, [r3, #0]
 800b100:	f3bf 8f4f 	dsb	sy
 800b104:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b108:	f002 f9ac 	bl	800d464 <vPortExitCritical>
				return pdPASS;
 800b10c:	2301      	movs	r3, #1
 800b10e:	e063      	b.n	800b1d8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d103      	bne.n	800b11e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b116:	f002 f9a5 	bl	800d464 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b11a:	2300      	movs	r3, #0
 800b11c:	e05c      	b.n	800b1d8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b11e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b120:	2b00      	cmp	r3, #0
 800b122:	d106      	bne.n	800b132 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b124:	f107 0314 	add.w	r3, r7, #20
 800b128:	4618      	mov	r0, r3
 800b12a:	f001 f9c1 	bl	800c4b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b12e:	2301      	movs	r3, #1
 800b130:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b132:	f002 f997 	bl	800d464 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b136:	f000 fef7 	bl	800bf28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b13a:	f002 f95f 	bl	800d3fc <vPortEnterCritical>
 800b13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b140:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b144:	b25b      	sxtb	r3, r3
 800b146:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b14a:	d103      	bne.n	800b154 <xQueueGenericSend+0x17c>
 800b14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b14e:	2200      	movs	r2, #0
 800b150:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b156:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b15a:	b25b      	sxtb	r3, r3
 800b15c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b160:	d103      	bne.n	800b16a <xQueueGenericSend+0x192>
 800b162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b164:	2200      	movs	r2, #0
 800b166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b16a:	f002 f97b 	bl	800d464 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b16e:	1d3a      	adds	r2, r7, #4
 800b170:	f107 0314 	add.w	r3, r7, #20
 800b174:	4611      	mov	r1, r2
 800b176:	4618      	mov	r0, r3
 800b178:	f001 f9b0 	bl	800c4dc <xTaskCheckForTimeOut>
 800b17c:	4603      	mov	r3, r0
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d124      	bne.n	800b1cc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b182:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b184:	f000 fb32 	bl	800b7ec <prvIsQueueFull>
 800b188:	4603      	mov	r3, r0
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d018      	beq.n	800b1c0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b190:	3310      	adds	r3, #16
 800b192:	687a      	ldr	r2, [r7, #4]
 800b194:	4611      	mov	r1, r2
 800b196:	4618      	mov	r0, r3
 800b198:	f001 f8d0 	bl	800c33c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b19c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b19e:	f000 fabd 	bl	800b71c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b1a2:	f000 fecf 	bl	800bf44 <xTaskResumeAll>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	f47f af7c 	bne.w	800b0a6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800b1ae:	4b0c      	ldr	r3, [pc, #48]	; (800b1e0 <xQueueGenericSend+0x208>)
 800b1b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1b4:	601a      	str	r2, [r3, #0]
 800b1b6:	f3bf 8f4f 	dsb	sy
 800b1ba:	f3bf 8f6f 	isb	sy
 800b1be:	e772      	b.n	800b0a6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b1c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b1c2:	f000 faab 	bl	800b71c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b1c6:	f000 febd 	bl	800bf44 <xTaskResumeAll>
 800b1ca:	e76c      	b.n	800b0a6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b1cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b1ce:	f000 faa5 	bl	800b71c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b1d2:	f000 feb7 	bl	800bf44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b1d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3738      	adds	r7, #56	; 0x38
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}
 800b1e0:	e000ed04 	.word	0xe000ed04

0800b1e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b08e      	sub	sp, #56	; 0x38
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	60b9      	str	r1, [r7, #8]
 800b1ee:	607a      	str	r2, [r7, #4]
 800b1f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d10c      	bne.n	800b216 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800b1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b200:	b672      	cpsid	i
 800b202:	f383 8811 	msr	BASEPRI, r3
 800b206:	f3bf 8f6f 	isb	sy
 800b20a:	f3bf 8f4f 	dsb	sy
 800b20e:	b662      	cpsie	i
 800b210:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b212:	bf00      	nop
 800b214:	e7fe      	b.n	800b214 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d103      	bne.n	800b224 <xQueueGenericSendFromISR+0x40>
 800b21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b21e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b220:	2b00      	cmp	r3, #0
 800b222:	d101      	bne.n	800b228 <xQueueGenericSendFromISR+0x44>
 800b224:	2301      	movs	r3, #1
 800b226:	e000      	b.n	800b22a <xQueueGenericSendFromISR+0x46>
 800b228:	2300      	movs	r3, #0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d10c      	bne.n	800b248 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800b22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b232:	b672      	cpsid	i
 800b234:	f383 8811 	msr	BASEPRI, r3
 800b238:	f3bf 8f6f 	isb	sy
 800b23c:	f3bf 8f4f 	dsb	sy
 800b240:	b662      	cpsie	i
 800b242:	623b      	str	r3, [r7, #32]
}
 800b244:	bf00      	nop
 800b246:	e7fe      	b.n	800b246 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	2b02      	cmp	r3, #2
 800b24c:	d103      	bne.n	800b256 <xQueueGenericSendFromISR+0x72>
 800b24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b252:	2b01      	cmp	r3, #1
 800b254:	d101      	bne.n	800b25a <xQueueGenericSendFromISR+0x76>
 800b256:	2301      	movs	r3, #1
 800b258:	e000      	b.n	800b25c <xQueueGenericSendFromISR+0x78>
 800b25a:	2300      	movs	r3, #0
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d10c      	bne.n	800b27a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800b260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b264:	b672      	cpsid	i
 800b266:	f383 8811 	msr	BASEPRI, r3
 800b26a:	f3bf 8f6f 	isb	sy
 800b26e:	f3bf 8f4f 	dsb	sy
 800b272:	b662      	cpsie	i
 800b274:	61fb      	str	r3, [r7, #28]
}
 800b276:	bf00      	nop
 800b278:	e7fe      	b.n	800b278 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b27a:	f002 f9a7 	bl	800d5cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b27e:	f3ef 8211 	mrs	r2, BASEPRI
 800b282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b286:	b672      	cpsid	i
 800b288:	f383 8811 	msr	BASEPRI, r3
 800b28c:	f3bf 8f6f 	isb	sy
 800b290:	f3bf 8f4f 	dsb	sy
 800b294:	b662      	cpsie	i
 800b296:	61ba      	str	r2, [r7, #24]
 800b298:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b29a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b29c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2a6:	429a      	cmp	r2, r3
 800b2a8:	d302      	bcc.n	800b2b0 <xQueueGenericSendFromISR+0xcc>
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	2b02      	cmp	r3, #2
 800b2ae:	d12c      	bne.n	800b30a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b2ba:	683a      	ldr	r2, [r7, #0]
 800b2bc:	68b9      	ldr	r1, [r7, #8]
 800b2be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b2c0:	f000 f99c 	bl	800b5fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b2c4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b2c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2cc:	d112      	bne.n	800b2f4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d016      	beq.n	800b304 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d8:	3324      	adds	r3, #36	; 0x24
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f001 f882 	bl	800c3e4 <xTaskRemoveFromEventList>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d00e      	beq.n	800b304 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d00b      	beq.n	800b304 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	601a      	str	r2, [r3, #0]
 800b2f2:	e007      	b.n	800b304 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b2f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	b2db      	uxtb	r3, r3
 800b2fc:	b25a      	sxtb	r2, r3
 800b2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b304:	2301      	movs	r3, #1
 800b306:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b308:	e001      	b.n	800b30e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b30a:	2300      	movs	r3, #0
 800b30c:	637b      	str	r3, [r7, #52]	; 0x34
 800b30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b310:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b318:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b31a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3738      	adds	r7, #56	; 0x38
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b08c      	sub	sp, #48	; 0x30
 800b328:	af00      	add	r7, sp, #0
 800b32a:	60f8      	str	r0, [r7, #12]
 800b32c:	60b9      	str	r1, [r7, #8]
 800b32e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b330:	2300      	movs	r3, #0
 800b332:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d10c      	bne.n	800b358 <xQueueReceive+0x34>
	__asm volatile
 800b33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b342:	b672      	cpsid	i
 800b344:	f383 8811 	msr	BASEPRI, r3
 800b348:	f3bf 8f6f 	isb	sy
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	b662      	cpsie	i
 800b352:	623b      	str	r3, [r7, #32]
}
 800b354:	bf00      	nop
 800b356:	e7fe      	b.n	800b356 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d103      	bne.n	800b366 <xQueueReceive+0x42>
 800b35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b362:	2b00      	cmp	r3, #0
 800b364:	d101      	bne.n	800b36a <xQueueReceive+0x46>
 800b366:	2301      	movs	r3, #1
 800b368:	e000      	b.n	800b36c <xQueueReceive+0x48>
 800b36a:	2300      	movs	r3, #0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d10c      	bne.n	800b38a <xQueueReceive+0x66>
	__asm volatile
 800b370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b374:	b672      	cpsid	i
 800b376:	f383 8811 	msr	BASEPRI, r3
 800b37a:	f3bf 8f6f 	isb	sy
 800b37e:	f3bf 8f4f 	dsb	sy
 800b382:	b662      	cpsie	i
 800b384:	61fb      	str	r3, [r7, #28]
}
 800b386:	bf00      	nop
 800b388:	e7fe      	b.n	800b388 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b38a:	f001 fa2b 	bl	800c7e4 <xTaskGetSchedulerState>
 800b38e:	4603      	mov	r3, r0
 800b390:	2b00      	cmp	r3, #0
 800b392:	d102      	bne.n	800b39a <xQueueReceive+0x76>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d101      	bne.n	800b39e <xQueueReceive+0x7a>
 800b39a:	2301      	movs	r3, #1
 800b39c:	e000      	b.n	800b3a0 <xQueueReceive+0x7c>
 800b39e:	2300      	movs	r3, #0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d10c      	bne.n	800b3be <xQueueReceive+0x9a>
	__asm volatile
 800b3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a8:	b672      	cpsid	i
 800b3aa:	f383 8811 	msr	BASEPRI, r3
 800b3ae:	f3bf 8f6f 	isb	sy
 800b3b2:	f3bf 8f4f 	dsb	sy
 800b3b6:	b662      	cpsie	i
 800b3b8:	61bb      	str	r3, [r7, #24]
}
 800b3ba:	bf00      	nop
 800b3bc:	e7fe      	b.n	800b3bc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b3be:	f002 f81d 	bl	800d3fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d01f      	beq.n	800b40e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b3ce:	68b9      	ldr	r1, [r7, #8]
 800b3d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3d2:	f000 f97d 	bl	800b6d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d8:	1e5a      	subs	r2, r3, #1
 800b3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e0:	691b      	ldr	r3, [r3, #16]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d00f      	beq.n	800b406 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3e8:	3310      	adds	r3, #16
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f000 fffa 	bl	800c3e4 <xTaskRemoveFromEventList>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d007      	beq.n	800b406 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b3f6:	4b3d      	ldr	r3, [pc, #244]	; (800b4ec <xQueueReceive+0x1c8>)
 800b3f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3fc:	601a      	str	r2, [r3, #0]
 800b3fe:	f3bf 8f4f 	dsb	sy
 800b402:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b406:	f002 f82d 	bl	800d464 <vPortExitCritical>
				return pdPASS;
 800b40a:	2301      	movs	r3, #1
 800b40c:	e069      	b.n	800b4e2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d103      	bne.n	800b41c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b414:	f002 f826 	bl	800d464 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b418:	2300      	movs	r3, #0
 800b41a:	e062      	b.n	800b4e2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d106      	bne.n	800b430 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b422:	f107 0310 	add.w	r3, r7, #16
 800b426:	4618      	mov	r0, r3
 800b428:	f001 f842 	bl	800c4b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b42c:	2301      	movs	r3, #1
 800b42e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b430:	f002 f818 	bl	800d464 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b434:	f000 fd78 	bl	800bf28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b438:	f001 ffe0 	bl	800d3fc <vPortEnterCritical>
 800b43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b442:	b25b      	sxtb	r3, r3
 800b444:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b448:	d103      	bne.n	800b452 <xQueueReceive+0x12e>
 800b44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b44c:	2200      	movs	r2, #0
 800b44e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b454:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b458:	b25b      	sxtb	r3, r3
 800b45a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b45e:	d103      	bne.n	800b468 <xQueueReceive+0x144>
 800b460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b462:	2200      	movs	r2, #0
 800b464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b468:	f001 fffc 	bl	800d464 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b46c:	1d3a      	adds	r2, r7, #4
 800b46e:	f107 0310 	add.w	r3, r7, #16
 800b472:	4611      	mov	r1, r2
 800b474:	4618      	mov	r0, r3
 800b476:	f001 f831 	bl	800c4dc <xTaskCheckForTimeOut>
 800b47a:	4603      	mov	r3, r0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d123      	bne.n	800b4c8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b482:	f000 f99d 	bl	800b7c0 <prvIsQueueEmpty>
 800b486:	4603      	mov	r3, r0
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d017      	beq.n	800b4bc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b48e:	3324      	adds	r3, #36	; 0x24
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	4611      	mov	r1, r2
 800b494:	4618      	mov	r0, r3
 800b496:	f000 ff51 	bl	800c33c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b49a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b49c:	f000 f93e 	bl	800b71c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b4a0:	f000 fd50 	bl	800bf44 <xTaskResumeAll>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d189      	bne.n	800b3be <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800b4aa:	4b10      	ldr	r3, [pc, #64]	; (800b4ec <xQueueReceive+0x1c8>)
 800b4ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4b0:	601a      	str	r2, [r3, #0]
 800b4b2:	f3bf 8f4f 	dsb	sy
 800b4b6:	f3bf 8f6f 	isb	sy
 800b4ba:	e780      	b.n	800b3be <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b4bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4be:	f000 f92d 	bl	800b71c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b4c2:	f000 fd3f 	bl	800bf44 <xTaskResumeAll>
 800b4c6:	e77a      	b.n	800b3be <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b4c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4ca:	f000 f927 	bl	800b71c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b4ce:	f000 fd39 	bl	800bf44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b4d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b4d4:	f000 f974 	bl	800b7c0 <prvIsQueueEmpty>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	f43f af6f 	beq.w	800b3be <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b4e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3730      	adds	r7, #48	; 0x30
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	e000ed04 	.word	0xe000ed04

0800b4f0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b08e      	sub	sp, #56	; 0x38
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	60f8      	str	r0, [r7, #12]
 800b4f8:	60b9      	str	r1, [r7, #8]
 800b4fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b502:	2b00      	cmp	r3, #0
 800b504:	d10c      	bne.n	800b520 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800b506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b50a:	b672      	cpsid	i
 800b50c:	f383 8811 	msr	BASEPRI, r3
 800b510:	f3bf 8f6f 	isb	sy
 800b514:	f3bf 8f4f 	dsb	sy
 800b518:	b662      	cpsie	i
 800b51a:	623b      	str	r3, [r7, #32]
}
 800b51c:	bf00      	nop
 800b51e:	e7fe      	b.n	800b51e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d103      	bne.n	800b52e <xQueueReceiveFromISR+0x3e>
 800b526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d101      	bne.n	800b532 <xQueueReceiveFromISR+0x42>
 800b52e:	2301      	movs	r3, #1
 800b530:	e000      	b.n	800b534 <xQueueReceiveFromISR+0x44>
 800b532:	2300      	movs	r3, #0
 800b534:	2b00      	cmp	r3, #0
 800b536:	d10c      	bne.n	800b552 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800b538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53c:	b672      	cpsid	i
 800b53e:	f383 8811 	msr	BASEPRI, r3
 800b542:	f3bf 8f6f 	isb	sy
 800b546:	f3bf 8f4f 	dsb	sy
 800b54a:	b662      	cpsie	i
 800b54c:	61fb      	str	r3, [r7, #28]
}
 800b54e:	bf00      	nop
 800b550:	e7fe      	b.n	800b550 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b552:	f002 f83b 	bl	800d5cc <vPortValidateInterruptPriority>
	__asm volatile
 800b556:	f3ef 8211 	mrs	r2, BASEPRI
 800b55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b55e:	b672      	cpsid	i
 800b560:	f383 8811 	msr	BASEPRI, r3
 800b564:	f3bf 8f6f 	isb	sy
 800b568:	f3bf 8f4f 	dsb	sy
 800b56c:	b662      	cpsie	i
 800b56e:	61ba      	str	r2, [r7, #24]
 800b570:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b572:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b574:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b57a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d02f      	beq.n	800b5e2 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b584:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b58c:	68b9      	ldr	r1, [r7, #8]
 800b58e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b590:	f000 f89e 	bl	800b6d0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b596:	1e5a      	subs	r2, r3, #1
 800b598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b59c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b5a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5a4:	d112      	bne.n	800b5cc <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a8:	691b      	ldr	r3, [r3, #16]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d016      	beq.n	800b5dc <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b0:	3310      	adds	r3, #16
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f000 ff16 	bl	800c3e4 <xTaskRemoveFromEventList>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00e      	beq.n	800b5dc <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d00b      	beq.n	800b5dc <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	601a      	str	r2, [r3, #0]
 800b5ca:	e007      	b.n	800b5dc <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b5cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5d0:	3301      	adds	r3, #1
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	b25a      	sxtb	r2, r3
 800b5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	637b      	str	r3, [r7, #52]	; 0x34
 800b5e0:	e001      	b.n	800b5e6 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	637b      	str	r3, [r7, #52]	; 0x34
 800b5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	f383 8811 	msr	BASEPRI, r3
}
 800b5f0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b5f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3738      	adds	r7, #56	; 0x38
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b086      	sub	sp, #24
 800b600:	af00      	add	r7, sp, #0
 800b602:	60f8      	str	r0, [r7, #12]
 800b604:	60b9      	str	r1, [r7, #8]
 800b606:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b608:	2300      	movs	r3, #0
 800b60a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b610:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b616:	2b00      	cmp	r3, #0
 800b618:	d10d      	bne.n	800b636 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d14d      	bne.n	800b6be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	689b      	ldr	r3, [r3, #8]
 800b626:	4618      	mov	r0, r3
 800b628:	f001 f8fa 	bl	800c820 <xTaskPriorityDisinherit>
 800b62c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	2200      	movs	r2, #0
 800b632:	609a      	str	r2, [r3, #8]
 800b634:	e043      	b.n	800b6be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d119      	bne.n	800b670 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	6858      	ldr	r0, [r3, #4]
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b644:	461a      	mov	r2, r3
 800b646:	68b9      	ldr	r1, [r7, #8]
 800b648:	f002 fa20 	bl	800da8c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	685a      	ldr	r2, [r3, #4]
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b654:	441a      	add	r2, r3
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	685a      	ldr	r2, [r3, #4]
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	429a      	cmp	r2, r3
 800b664:	d32b      	bcc.n	800b6be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	605a      	str	r2, [r3, #4]
 800b66e:	e026      	b.n	800b6be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	68d8      	ldr	r0, [r3, #12]
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b678:	461a      	mov	r2, r3
 800b67a:	68b9      	ldr	r1, [r7, #8]
 800b67c:	f002 fa06 	bl	800da8c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	68da      	ldr	r2, [r3, #12]
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b688:	425b      	negs	r3, r3
 800b68a:	441a      	add	r2, r3
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	68da      	ldr	r2, [r3, #12]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	429a      	cmp	r2, r3
 800b69a:	d207      	bcs.n	800b6ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	689a      	ldr	r2, [r3, #8]
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a4:	425b      	negs	r3, r3
 800b6a6:	441a      	add	r2, r3
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2b02      	cmp	r3, #2
 800b6b0:	d105      	bne.n	800b6be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b6b2:	693b      	ldr	r3, [r7, #16]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d002      	beq.n	800b6be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	1c5a      	adds	r2, r3, #1
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b6c6:	697b      	ldr	r3, [r7, #20]
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3718      	adds	r7, #24
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b082      	sub	sp, #8
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
 800b6d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d018      	beq.n	800b714 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	68da      	ldr	r2, [r3, #12]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6ea:	441a      	add	r2, r3
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	68da      	ldr	r2, [r3, #12]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	689b      	ldr	r3, [r3, #8]
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d303      	bcc.n	800b704 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	68d9      	ldr	r1, [r3, #12]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b70c:	461a      	mov	r2, r3
 800b70e:	6838      	ldr	r0, [r7, #0]
 800b710:	f002 f9bc 	bl	800da8c <memcpy>
	}
}
 800b714:	bf00      	nop
 800b716:	3708      	adds	r7, #8
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b724:	f001 fe6a 	bl	800d3fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b72e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b730:	e011      	b.n	800b756 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b736:	2b00      	cmp	r3, #0
 800b738:	d012      	beq.n	800b760 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	3324      	adds	r3, #36	; 0x24
 800b73e:	4618      	mov	r0, r3
 800b740:	f000 fe50 	bl	800c3e4 <xTaskRemoveFromEventList>
 800b744:	4603      	mov	r3, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d001      	beq.n	800b74e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b74a:	f000 ff2d 	bl	800c5a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b74e:	7bfb      	ldrb	r3, [r7, #15]
 800b750:	3b01      	subs	r3, #1
 800b752:	b2db      	uxtb	r3, r3
 800b754:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	dce9      	bgt.n	800b732 <prvUnlockQueue+0x16>
 800b75e:	e000      	b.n	800b762 <prvUnlockQueue+0x46>
					break;
 800b760:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	22ff      	movs	r2, #255	; 0xff
 800b766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b76a:	f001 fe7b 	bl	800d464 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b76e:	f001 fe45 	bl	800d3fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b778:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b77a:	e011      	b.n	800b7a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	691b      	ldr	r3, [r3, #16]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d012      	beq.n	800b7aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	3310      	adds	r3, #16
 800b788:	4618      	mov	r0, r3
 800b78a:	f000 fe2b 	bl	800c3e4 <xTaskRemoveFromEventList>
 800b78e:	4603      	mov	r3, r0
 800b790:	2b00      	cmp	r3, #0
 800b792:	d001      	beq.n	800b798 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b794:	f000 ff08 	bl	800c5a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b798:	7bbb      	ldrb	r3, [r7, #14]
 800b79a:	3b01      	subs	r3, #1
 800b79c:	b2db      	uxtb	r3, r3
 800b79e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b7a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	dce9      	bgt.n	800b77c <prvUnlockQueue+0x60>
 800b7a8:	e000      	b.n	800b7ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b7aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	22ff      	movs	r2, #255	; 0xff
 800b7b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b7b4:	f001 fe56 	bl	800d464 <vPortExitCritical>
}
 800b7b8:	bf00      	nop
 800b7ba:	3710      	adds	r7, #16
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b084      	sub	sp, #16
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b7c8:	f001 fe18 	bl	800d3fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d102      	bne.n	800b7da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	60fb      	str	r3, [r7, #12]
 800b7d8:	e001      	b.n	800b7de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b7de:	f001 fe41 	bl	800d464 <vPortExitCritical>

	return xReturn;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3710      	adds	r7, #16
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b084      	sub	sp, #16
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b7f4:	f001 fe02 	bl	800d3fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b800:	429a      	cmp	r2, r3
 800b802:	d102      	bne.n	800b80a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b804:	2301      	movs	r3, #1
 800b806:	60fb      	str	r3, [r7, #12]
 800b808:	e001      	b.n	800b80e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b80a:	2300      	movs	r3, #0
 800b80c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b80e:	f001 fe29 	bl	800d464 <vPortExitCritical>

	return xReturn;
 800b812:	68fb      	ldr	r3, [r7, #12]
}
 800b814:	4618      	mov	r0, r3
 800b816:	3710      	adds	r7, #16
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b81c:	b480      	push	{r7}
 800b81e:	b085      	sub	sp, #20
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b826:	2300      	movs	r3, #0
 800b828:	60fb      	str	r3, [r7, #12]
 800b82a:	e014      	b.n	800b856 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b82c:	4a0f      	ldr	r2, [pc, #60]	; (800b86c <vQueueAddToRegistry+0x50>)
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d10b      	bne.n	800b850 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b838:	490c      	ldr	r1, [pc, #48]	; (800b86c <vQueueAddToRegistry+0x50>)
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	683a      	ldr	r2, [r7, #0]
 800b83e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b842:	4a0a      	ldr	r2, [pc, #40]	; (800b86c <vQueueAddToRegistry+0x50>)
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	00db      	lsls	r3, r3, #3
 800b848:	4413      	add	r3, r2
 800b84a:	687a      	ldr	r2, [r7, #4]
 800b84c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b84e:	e006      	b.n	800b85e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	3301      	adds	r3, #1
 800b854:	60fb      	str	r3, [r7, #12]
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2b07      	cmp	r3, #7
 800b85a:	d9e7      	bls.n	800b82c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b85c:	bf00      	nop
 800b85e:	bf00      	nop
 800b860:	3714      	adds	r7, #20
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr
 800b86a:	bf00      	nop
 800b86c:	20001248 	.word	0x20001248

0800b870 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b870:	b580      	push	{r7, lr}
 800b872:	b086      	sub	sp, #24
 800b874:	af00      	add	r7, sp, #0
 800b876:	60f8      	str	r0, [r7, #12]
 800b878:	60b9      	str	r1, [r7, #8]
 800b87a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b880:	f001 fdbc 	bl	800d3fc <vPortEnterCritical>
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b88a:	b25b      	sxtb	r3, r3
 800b88c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b890:	d103      	bne.n	800b89a <vQueueWaitForMessageRestricted+0x2a>
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	2200      	movs	r2, #0
 800b896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8a0:	b25b      	sxtb	r3, r3
 800b8a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8a6:	d103      	bne.n	800b8b0 <vQueueWaitForMessageRestricted+0x40>
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8b0:	f001 fdd8 	bl	800d464 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d106      	bne.n	800b8ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	3324      	adds	r3, #36	; 0x24
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	68b9      	ldr	r1, [r7, #8]
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f000 fd5f 	bl	800c388 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b8ca:	6978      	ldr	r0, [r7, #20]
 800b8cc:	f7ff ff26 	bl	800b71c <prvUnlockQueue>
	}
 800b8d0:	bf00      	nop
 800b8d2:	3718      	adds	r7, #24
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}

0800b8d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b08e      	sub	sp, #56	; 0x38
 800b8dc:	af04      	add	r7, sp, #16
 800b8de:	60f8      	str	r0, [r7, #12]
 800b8e0:	60b9      	str	r1, [r7, #8]
 800b8e2:	607a      	str	r2, [r7, #4]
 800b8e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b8e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d10c      	bne.n	800b906 <xTaskCreateStatic+0x2e>
	__asm volatile
 800b8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f0:	b672      	cpsid	i
 800b8f2:	f383 8811 	msr	BASEPRI, r3
 800b8f6:	f3bf 8f6f 	isb	sy
 800b8fa:	f3bf 8f4f 	dsb	sy
 800b8fe:	b662      	cpsie	i
 800b900:	623b      	str	r3, [r7, #32]
}
 800b902:	bf00      	nop
 800b904:	e7fe      	b.n	800b904 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800b906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d10c      	bne.n	800b926 <xTaskCreateStatic+0x4e>
	__asm volatile
 800b90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b910:	b672      	cpsid	i
 800b912:	f383 8811 	msr	BASEPRI, r3
 800b916:	f3bf 8f6f 	isb	sy
 800b91a:	f3bf 8f4f 	dsb	sy
 800b91e:	b662      	cpsie	i
 800b920:	61fb      	str	r3, [r7, #28]
}
 800b922:	bf00      	nop
 800b924:	e7fe      	b.n	800b924 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b926:	2360      	movs	r3, #96	; 0x60
 800b928:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	2b60      	cmp	r3, #96	; 0x60
 800b92e:	d00c      	beq.n	800b94a <xTaskCreateStatic+0x72>
	__asm volatile
 800b930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b934:	b672      	cpsid	i
 800b936:	f383 8811 	msr	BASEPRI, r3
 800b93a:	f3bf 8f6f 	isb	sy
 800b93e:	f3bf 8f4f 	dsb	sy
 800b942:	b662      	cpsie	i
 800b944:	61bb      	str	r3, [r7, #24]
}
 800b946:	bf00      	nop
 800b948:	e7fe      	b.n	800b948 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b94a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d01e      	beq.n	800b990 <xTaskCreateStatic+0xb8>
 800b952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b954:	2b00      	cmp	r3, #0
 800b956:	d01b      	beq.n	800b990 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b95a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b960:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b964:	2202      	movs	r2, #2
 800b966:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b96a:	2300      	movs	r3, #0
 800b96c:	9303      	str	r3, [sp, #12]
 800b96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b970:	9302      	str	r3, [sp, #8]
 800b972:	f107 0314 	add.w	r3, r7, #20
 800b976:	9301      	str	r3, [sp, #4]
 800b978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b97a:	9300      	str	r3, [sp, #0]
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	687a      	ldr	r2, [r7, #4]
 800b980:	68b9      	ldr	r1, [r7, #8]
 800b982:	68f8      	ldr	r0, [r7, #12]
 800b984:	f000 f850 	bl	800ba28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b988:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b98a:	f000 f8e1 	bl	800bb50 <prvAddNewTaskToReadyList>
 800b98e:	e001      	b.n	800b994 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800b990:	2300      	movs	r3, #0
 800b992:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b994:	697b      	ldr	r3, [r7, #20]
	}
 800b996:	4618      	mov	r0, r3
 800b998:	3728      	adds	r7, #40	; 0x28
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}

0800b99e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b99e:	b580      	push	{r7, lr}
 800b9a0:	b08c      	sub	sp, #48	; 0x30
 800b9a2:	af04      	add	r7, sp, #16
 800b9a4:	60f8      	str	r0, [r7, #12]
 800b9a6:	60b9      	str	r1, [r7, #8]
 800b9a8:	603b      	str	r3, [r7, #0]
 800b9aa:	4613      	mov	r3, r2
 800b9ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b9ae:	88fb      	ldrh	r3, [r7, #6]
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f001 fe4e 	bl	800d654 <pvPortMalloc>
 800b9b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d00e      	beq.n	800b9de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b9c0:	2060      	movs	r0, #96	; 0x60
 800b9c2:	f001 fe47 	bl	800d654 <pvPortMalloc>
 800b9c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b9c8:	69fb      	ldr	r3, [r7, #28]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d003      	beq.n	800b9d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b9ce:	69fb      	ldr	r3, [r7, #28]
 800b9d0:	697a      	ldr	r2, [r7, #20]
 800b9d2:	631a      	str	r2, [r3, #48]	; 0x30
 800b9d4:	e005      	b.n	800b9e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b9d6:	6978      	ldr	r0, [r7, #20]
 800b9d8:	f001 ff0c 	bl	800d7f4 <vPortFree>
 800b9dc:	e001      	b.n	800b9e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b9e2:	69fb      	ldr	r3, [r7, #28]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d017      	beq.n	800ba18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b9e8:	69fb      	ldr	r3, [r7, #28]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b9f0:	88fa      	ldrh	r2, [r7, #6]
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	9303      	str	r3, [sp, #12]
 800b9f6:	69fb      	ldr	r3, [r7, #28]
 800b9f8:	9302      	str	r3, [sp, #8]
 800b9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9fc:	9301      	str	r3, [sp, #4]
 800b9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba00:	9300      	str	r3, [sp, #0]
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	68b9      	ldr	r1, [r7, #8]
 800ba06:	68f8      	ldr	r0, [r7, #12]
 800ba08:	f000 f80e 	bl	800ba28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ba0c:	69f8      	ldr	r0, [r7, #28]
 800ba0e:	f000 f89f 	bl	800bb50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ba12:	2301      	movs	r3, #1
 800ba14:	61bb      	str	r3, [r7, #24]
 800ba16:	e002      	b.n	800ba1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ba18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ba1e:	69bb      	ldr	r3, [r7, #24]
	}
 800ba20:	4618      	mov	r0, r3
 800ba22:	3720      	adds	r7, #32
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b088      	sub	sp, #32
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	60f8      	str	r0, [r7, #12]
 800ba30:	60b9      	str	r1, [r7, #8]
 800ba32:	607a      	str	r2, [r7, #4]
 800ba34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ba36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	009b      	lsls	r3, r3, #2
 800ba3e:	461a      	mov	r2, r3
 800ba40:	21a5      	movs	r1, #165	; 0xa5
 800ba42:	f002 f831 	bl	800daa8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ba46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba4a:	6879      	ldr	r1, [r7, #4]
 800ba4c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ba50:	440b      	add	r3, r1
 800ba52:	009b      	lsls	r3, r3, #2
 800ba54:	4413      	add	r3, r2
 800ba56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ba58:	69bb      	ldr	r3, [r7, #24]
 800ba5a:	f023 0307 	bic.w	r3, r3, #7
 800ba5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ba60:	69bb      	ldr	r3, [r7, #24]
 800ba62:	f003 0307 	and.w	r3, r3, #7
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d00c      	beq.n	800ba84 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800ba6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba6e:	b672      	cpsid	i
 800ba70:	f383 8811 	msr	BASEPRI, r3
 800ba74:	f3bf 8f6f 	isb	sy
 800ba78:	f3bf 8f4f 	dsb	sy
 800ba7c:	b662      	cpsie	i
 800ba7e:	617b      	str	r3, [r7, #20]
}
 800ba80:	bf00      	nop
 800ba82:	e7fe      	b.n	800ba82 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d01f      	beq.n	800baca <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	61fb      	str	r3, [r7, #28]
 800ba8e:	e012      	b.n	800bab6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ba90:	68ba      	ldr	r2, [r7, #8]
 800ba92:	69fb      	ldr	r3, [r7, #28]
 800ba94:	4413      	add	r3, r2
 800ba96:	7819      	ldrb	r1, [r3, #0]
 800ba98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba9a:	69fb      	ldr	r3, [r7, #28]
 800ba9c:	4413      	add	r3, r2
 800ba9e:	3334      	adds	r3, #52	; 0x34
 800baa0:	460a      	mov	r2, r1
 800baa2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800baa4:	68ba      	ldr	r2, [r7, #8]
 800baa6:	69fb      	ldr	r3, [r7, #28]
 800baa8:	4413      	add	r3, r2
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d006      	beq.n	800babe <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bab0:	69fb      	ldr	r3, [r7, #28]
 800bab2:	3301      	adds	r3, #1
 800bab4:	61fb      	str	r3, [r7, #28]
 800bab6:	69fb      	ldr	r3, [r7, #28]
 800bab8:	2b0f      	cmp	r3, #15
 800baba:	d9e9      	bls.n	800ba90 <prvInitialiseNewTask+0x68>
 800babc:	e000      	b.n	800bac0 <prvInitialiseNewTask+0x98>
			{
				break;
 800babe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac2:	2200      	movs	r2, #0
 800bac4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bac8:	e003      	b.n	800bad2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800baca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bacc:	2200      	movs	r2, #0
 800bace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad4:	2b37      	cmp	r3, #55	; 0x37
 800bad6:	d901      	bls.n	800badc <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bad8:	2337      	movs	r3, #55	; 0x37
 800bada:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800badc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bade:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bae0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bae6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800bae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baea:	2200      	movs	r2, #0
 800baec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800baee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf0:	3304      	adds	r3, #4
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7ff f88a 	bl	800ac0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800baf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bafa:	3318      	adds	r3, #24
 800bafc:	4618      	mov	r0, r3
 800bafe:	f7ff f885 	bl	800ac0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb0a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800bb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bb1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb20:	2200      	movs	r2, #0
 800bb22:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb26:	2200      	movs	r2, #0
 800bb28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bb2c:	683a      	ldr	r2, [r7, #0]
 800bb2e:	68f9      	ldr	r1, [r7, #12]
 800bb30:	69b8      	ldr	r0, [r7, #24]
 800bb32:	f001 fb59 	bl	800d1e8 <pxPortInitialiseStack>
 800bb36:	4602      	mov	r2, r0
 800bb38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bb3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d002      	beq.n	800bb48 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb46:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb48:	bf00      	nop
 800bb4a:	3720      	adds	r7, #32
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b082      	sub	sp, #8
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bb58:	f001 fc50 	bl	800d3fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bb5c:	4b2d      	ldr	r3, [pc, #180]	; (800bc14 <prvAddNewTaskToReadyList+0xc4>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	3301      	adds	r3, #1
 800bb62:	4a2c      	ldr	r2, [pc, #176]	; (800bc14 <prvAddNewTaskToReadyList+0xc4>)
 800bb64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bb66:	4b2c      	ldr	r3, [pc, #176]	; (800bc18 <prvAddNewTaskToReadyList+0xc8>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d109      	bne.n	800bb82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bb6e:	4a2a      	ldr	r2, [pc, #168]	; (800bc18 <prvAddNewTaskToReadyList+0xc8>)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bb74:	4b27      	ldr	r3, [pc, #156]	; (800bc14 <prvAddNewTaskToReadyList+0xc4>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	d110      	bne.n	800bb9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bb7c:	f000 fd3a 	bl	800c5f4 <prvInitialiseTaskLists>
 800bb80:	e00d      	b.n	800bb9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bb82:	4b26      	ldr	r3, [pc, #152]	; (800bc1c <prvAddNewTaskToReadyList+0xcc>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d109      	bne.n	800bb9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bb8a:	4b23      	ldr	r3, [pc, #140]	; (800bc18 <prvAddNewTaskToReadyList+0xc8>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d802      	bhi.n	800bb9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bb98:	4a1f      	ldr	r2, [pc, #124]	; (800bc18 <prvAddNewTaskToReadyList+0xc8>)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bb9e:	4b20      	ldr	r3, [pc, #128]	; (800bc20 <prvAddNewTaskToReadyList+0xd0>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	3301      	adds	r3, #1
 800bba4:	4a1e      	ldr	r2, [pc, #120]	; (800bc20 <prvAddNewTaskToReadyList+0xd0>)
 800bba6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800bba8:	4b1d      	ldr	r3, [pc, #116]	; (800bc20 <prvAddNewTaskToReadyList+0xd0>)
 800bbaa:	681a      	ldr	r2, [r3, #0]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbb4:	4b1b      	ldr	r3, [pc, #108]	; (800bc24 <prvAddNewTaskToReadyList+0xd4>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d903      	bls.n	800bbc4 <prvAddNewTaskToReadyList+0x74>
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbc0:	4a18      	ldr	r2, [pc, #96]	; (800bc24 <prvAddNewTaskToReadyList+0xd4>)
 800bbc2:	6013      	str	r3, [r2, #0]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbc8:	4613      	mov	r3, r2
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	4413      	add	r3, r2
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	4a15      	ldr	r2, [pc, #84]	; (800bc28 <prvAddNewTaskToReadyList+0xd8>)
 800bbd2:	441a      	add	r2, r3
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	3304      	adds	r3, #4
 800bbd8:	4619      	mov	r1, r3
 800bbda:	4610      	mov	r0, r2
 800bbdc:	f7ff f823 	bl	800ac26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bbe0:	f001 fc40 	bl	800d464 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bbe4:	4b0d      	ldr	r3, [pc, #52]	; (800bc1c <prvAddNewTaskToReadyList+0xcc>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d00e      	beq.n	800bc0a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bbec:	4b0a      	ldr	r3, [pc, #40]	; (800bc18 <prvAddNewTaskToReadyList+0xc8>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d207      	bcs.n	800bc0a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bbfa:	4b0c      	ldr	r3, [pc, #48]	; (800bc2c <prvAddNewTaskToReadyList+0xdc>)
 800bbfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc00:	601a      	str	r2, [r3, #0]
 800bc02:	f3bf 8f4f 	dsb	sy
 800bc06:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc0a:	bf00      	nop
 800bc0c:	3708      	adds	r7, #8
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	bf00      	nop
 800bc14:	2000175c 	.word	0x2000175c
 800bc18:	20001288 	.word	0x20001288
 800bc1c:	20001768 	.word	0x20001768
 800bc20:	20001778 	.word	0x20001778
 800bc24:	20001764 	.word	0x20001764
 800bc28:	2000128c 	.word	0x2000128c
 800bc2c:	e000ed04 	.word	0xe000ed04

0800bc30 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b084      	sub	sp, #16
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800bc38:	f001 fbe0 	bl	800d3fc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d102      	bne.n	800bc48 <vTaskDelete+0x18>
 800bc42:	4b2d      	ldr	r3, [pc, #180]	; (800bcf8 <vTaskDelete+0xc8>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	e000      	b.n	800bc4a <vTaskDelete+0x1a>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	3304      	adds	r3, #4
 800bc50:	4618      	mov	r0, r3
 800bc52:	f7ff f845 	bl	800ace0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d004      	beq.n	800bc68 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	3318      	adds	r3, #24
 800bc62:	4618      	mov	r0, r3
 800bc64:	f7ff f83c 	bl	800ace0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800bc68:	4b24      	ldr	r3, [pc, #144]	; (800bcfc <vTaskDelete+0xcc>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	3301      	adds	r3, #1
 800bc6e:	4a23      	ldr	r2, [pc, #140]	; (800bcfc <vTaskDelete+0xcc>)
 800bc70:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800bc72:	4b21      	ldr	r3, [pc, #132]	; (800bcf8 <vTaskDelete+0xc8>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	68fa      	ldr	r2, [r7, #12]
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d10b      	bne.n	800bc94 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	3304      	adds	r3, #4
 800bc80:	4619      	mov	r1, r3
 800bc82:	481f      	ldr	r0, [pc, #124]	; (800bd00 <vTaskDelete+0xd0>)
 800bc84:	f7fe ffcf 	bl	800ac26 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800bc88:	4b1e      	ldr	r3, [pc, #120]	; (800bd04 <vTaskDelete+0xd4>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	4a1d      	ldr	r2, [pc, #116]	; (800bd04 <vTaskDelete+0xd4>)
 800bc90:	6013      	str	r3, [r2, #0]
 800bc92:	e009      	b.n	800bca8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800bc94:	4b1c      	ldr	r3, [pc, #112]	; (800bd08 <vTaskDelete+0xd8>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	3b01      	subs	r3, #1
 800bc9a:	4a1b      	ldr	r2, [pc, #108]	; (800bd08 <vTaskDelete+0xd8>)
 800bc9c:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800bc9e:	68f8      	ldr	r0, [r7, #12]
 800bca0:	f000 fd4e 	bl	800c740 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800bca4:	f000 fd7e 	bl	800c7a4 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800bca8:	f001 fbdc 	bl	800d464 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800bcac:	4b17      	ldr	r3, [pc, #92]	; (800bd0c <vTaskDelete+0xdc>)
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d01d      	beq.n	800bcf0 <vTaskDelete+0xc0>
		{
			if( pxTCB == pxCurrentTCB )
 800bcb4:	4b10      	ldr	r3, [pc, #64]	; (800bcf8 <vTaskDelete+0xc8>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	68fa      	ldr	r2, [r7, #12]
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d118      	bne.n	800bcf0 <vTaskDelete+0xc0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800bcbe:	4b14      	ldr	r3, [pc, #80]	; (800bd10 <vTaskDelete+0xe0>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d00c      	beq.n	800bce0 <vTaskDelete+0xb0>
	__asm volatile
 800bcc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcca:	b672      	cpsid	i
 800bccc:	f383 8811 	msr	BASEPRI, r3
 800bcd0:	f3bf 8f6f 	isb	sy
 800bcd4:	f3bf 8f4f 	dsb	sy
 800bcd8:	b662      	cpsie	i
 800bcda:	60bb      	str	r3, [r7, #8]
}
 800bcdc:	bf00      	nop
 800bcde:	e7fe      	b.n	800bcde <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 800bce0:	4b0c      	ldr	r3, [pc, #48]	; (800bd14 <vTaskDelete+0xe4>)
 800bce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bce6:	601a      	str	r2, [r3, #0]
 800bce8:	f3bf 8f4f 	dsb	sy
 800bcec:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bcf0:	bf00      	nop
 800bcf2:	3710      	adds	r7, #16
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}
 800bcf8:	20001288 	.word	0x20001288
 800bcfc:	20001778 	.word	0x20001778
 800bd00:	20001730 	.word	0x20001730
 800bd04:	20001744 	.word	0x20001744
 800bd08:	2000175c 	.word	0x2000175c
 800bd0c:	20001768 	.word	0x20001768
 800bd10:	20001784 	.word	0x20001784
 800bd14:	e000ed04 	.word	0xe000ed04

0800bd18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bd20:	2300      	movs	r3, #0
 800bd22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d019      	beq.n	800bd5e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bd2a:	4b14      	ldr	r3, [pc, #80]	; (800bd7c <vTaskDelay+0x64>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d00c      	beq.n	800bd4c <vTaskDelay+0x34>
	__asm volatile
 800bd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd36:	b672      	cpsid	i
 800bd38:	f383 8811 	msr	BASEPRI, r3
 800bd3c:	f3bf 8f6f 	isb	sy
 800bd40:	f3bf 8f4f 	dsb	sy
 800bd44:	b662      	cpsie	i
 800bd46:	60bb      	str	r3, [r7, #8]
}
 800bd48:	bf00      	nop
 800bd4a:	e7fe      	b.n	800bd4a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800bd4c:	f000 f8ec 	bl	800bf28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bd50:	2100      	movs	r1, #0
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f000 fdd6 	bl	800c904 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bd58:	f000 f8f4 	bl	800bf44 <xTaskResumeAll>
 800bd5c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d107      	bne.n	800bd74 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800bd64:	4b06      	ldr	r3, [pc, #24]	; (800bd80 <vTaskDelay+0x68>)
 800bd66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd6a:	601a      	str	r2, [r3, #0]
 800bd6c:	f3bf 8f4f 	dsb	sy
 800bd70:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bd74:	bf00      	nop
 800bd76:	3710      	adds	r7, #16
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}
 800bd7c:	20001784 	.word	0x20001784
 800bd80:	e000ed04 	.word	0xe000ed04

0800bd84 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b088      	sub	sp, #32
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800bd90:	69bb      	ldr	r3, [r7, #24]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d10c      	bne.n	800bdb0 <eTaskGetState+0x2c>
	__asm volatile
 800bd96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd9a:	b672      	cpsid	i
 800bd9c:	f383 8811 	msr	BASEPRI, r3
 800bda0:	f3bf 8f6f 	isb	sy
 800bda4:	f3bf 8f4f 	dsb	sy
 800bda8:	b662      	cpsie	i
 800bdaa:	60bb      	str	r3, [r7, #8]
}
 800bdac:	bf00      	nop
 800bdae:	e7fe      	b.n	800bdae <eTaskGetState+0x2a>

		if( pxTCB == pxCurrentTCB )
 800bdb0:	4b23      	ldr	r3, [pc, #140]	; (800be40 <eTaskGetState+0xbc>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	69ba      	ldr	r2, [r7, #24]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d102      	bne.n	800bdc0 <eTaskGetState+0x3c>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	77fb      	strb	r3, [r7, #31]
 800bdbe:	e03a      	b.n	800be36 <eTaskGetState+0xb2>
		}
		else
		{
			taskENTER_CRITICAL();
 800bdc0:	f001 fb1c 	bl	800d3fc <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800bdc4:	69bb      	ldr	r3, [r7, #24]
 800bdc6:	695b      	ldr	r3, [r3, #20]
 800bdc8:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800bdca:	4b1e      	ldr	r3, [pc, #120]	; (800be44 <eTaskGetState+0xc0>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800bdd0:	4b1d      	ldr	r3, [pc, #116]	; (800be48 <eTaskGetState+0xc4>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 800bdd6:	f001 fb45 	bl	800d464 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800bdda:	697a      	ldr	r2, [r7, #20]
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d003      	beq.n	800bdea <eTaskGetState+0x66>
 800bde2:	697a      	ldr	r2, [r7, #20]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d102      	bne.n	800bdf0 <eTaskGetState+0x6c>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800bdea:	2302      	movs	r3, #2
 800bdec:	77fb      	strb	r3, [r7, #31]
 800bdee:	e022      	b.n	800be36 <eTaskGetState+0xb2>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	4a16      	ldr	r2, [pc, #88]	; (800be4c <eTaskGetState+0xc8>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d112      	bne.n	800be1e <eTaskGetState+0x9a>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 800bdf8:	69bb      	ldr	r3, [r7, #24]
 800bdfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d10b      	bne.n	800be18 <eTaskGetState+0x94>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800be00:	69bb      	ldr	r3, [r7, #24]
 800be02:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800be06:	b2db      	uxtb	r3, r3
 800be08:	2b01      	cmp	r3, #1
 800be0a:	d102      	bne.n	800be12 <eTaskGetState+0x8e>
							{
								eReturn = eBlocked;
 800be0c:	2302      	movs	r3, #2
 800be0e:	77fb      	strb	r3, [r7, #31]
 800be10:	e011      	b.n	800be36 <eTaskGetState+0xb2>
							}
							else
							{
								eReturn = eSuspended;
 800be12:	2303      	movs	r3, #3
 800be14:	77fb      	strb	r3, [r7, #31]
 800be16:	e00e      	b.n	800be36 <eTaskGetState+0xb2>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 800be18:	2302      	movs	r3, #2
 800be1a:	77fb      	strb	r3, [r7, #31]
 800be1c:	e00b      	b.n	800be36 <eTaskGetState+0xb2>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	4a0b      	ldr	r2, [pc, #44]	; (800be50 <eTaskGetState+0xcc>)
 800be22:	4293      	cmp	r3, r2
 800be24:	d002      	beq.n	800be2c <eTaskGetState+0xa8>
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d102      	bne.n	800be32 <eTaskGetState+0xae>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800be2c:	2304      	movs	r3, #4
 800be2e:	77fb      	strb	r3, [r7, #31]
 800be30:	e001      	b.n	800be36 <eTaskGetState+0xb2>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800be32:	2301      	movs	r3, #1
 800be34:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800be36:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800be38:	4618      	mov	r0, r3
 800be3a:	3720      	adds	r7, #32
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}
 800be40:	20001288 	.word	0x20001288
 800be44:	20001714 	.word	0x20001714
 800be48:	20001718 	.word	0x20001718
 800be4c:	20001748 	.word	0x20001748
 800be50:	20001730 	.word	0x20001730

0800be54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b08a      	sub	sp, #40	; 0x28
 800be58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800be5a:	2300      	movs	r3, #0
 800be5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800be5e:	2300      	movs	r3, #0
 800be60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800be62:	463a      	mov	r2, r7
 800be64:	1d39      	adds	r1, r7, #4
 800be66:	f107 0308 	add.w	r3, r7, #8
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7fe fe7a 	bl	800ab64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800be70:	6839      	ldr	r1, [r7, #0]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	68ba      	ldr	r2, [r7, #8]
 800be76:	9202      	str	r2, [sp, #8]
 800be78:	9301      	str	r3, [sp, #4]
 800be7a:	2300      	movs	r3, #0
 800be7c:	9300      	str	r3, [sp, #0]
 800be7e:	2300      	movs	r3, #0
 800be80:	460a      	mov	r2, r1
 800be82:	4923      	ldr	r1, [pc, #140]	; (800bf10 <vTaskStartScheduler+0xbc>)
 800be84:	4823      	ldr	r0, [pc, #140]	; (800bf14 <vTaskStartScheduler+0xc0>)
 800be86:	f7ff fd27 	bl	800b8d8 <xTaskCreateStatic>
 800be8a:	4603      	mov	r3, r0
 800be8c:	4a22      	ldr	r2, [pc, #136]	; (800bf18 <vTaskStartScheduler+0xc4>)
 800be8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800be90:	4b21      	ldr	r3, [pc, #132]	; (800bf18 <vTaskStartScheduler+0xc4>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d002      	beq.n	800be9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800be98:	2301      	movs	r3, #1
 800be9a:	617b      	str	r3, [r7, #20]
 800be9c:	e001      	b.n	800bea2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800be9e:	2300      	movs	r3, #0
 800bea0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d102      	bne.n	800beae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bea8:	f000 fd80 	bl	800c9ac <xTimerCreateTimerTask>
 800beac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800beae:	697b      	ldr	r3, [r7, #20]
 800beb0:	2b01      	cmp	r3, #1
 800beb2:	d118      	bne.n	800bee6 <vTaskStartScheduler+0x92>
	__asm volatile
 800beb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb8:	b672      	cpsid	i
 800beba:	f383 8811 	msr	BASEPRI, r3
 800bebe:	f3bf 8f6f 	isb	sy
 800bec2:	f3bf 8f4f 	dsb	sy
 800bec6:	b662      	cpsie	i
 800bec8:	613b      	str	r3, [r7, #16]
}
 800beca:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800becc:	4b13      	ldr	r3, [pc, #76]	; (800bf1c <vTaskStartScheduler+0xc8>)
 800bece:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bed2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bed4:	4b12      	ldr	r3, [pc, #72]	; (800bf20 <vTaskStartScheduler+0xcc>)
 800bed6:	2201      	movs	r2, #1
 800bed8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800beda:	4b12      	ldr	r3, [pc, #72]	; (800bf24 <vTaskStartScheduler+0xd0>)
 800bedc:	2200      	movs	r2, #0
 800bede:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bee0:	f001 fa0e 	bl	800d300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bee4:	e010      	b.n	800bf08 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bee6:	697b      	ldr	r3, [r7, #20]
 800bee8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800beec:	d10c      	bne.n	800bf08 <vTaskStartScheduler+0xb4>
	__asm volatile
 800beee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef2:	b672      	cpsid	i
 800bef4:	f383 8811 	msr	BASEPRI, r3
 800bef8:	f3bf 8f6f 	isb	sy
 800befc:	f3bf 8f4f 	dsb	sy
 800bf00:	b662      	cpsie	i
 800bf02:	60fb      	str	r3, [r7, #12]
}
 800bf04:	bf00      	nop
 800bf06:	e7fe      	b.n	800bf06 <vTaskStartScheduler+0xb2>
}
 800bf08:	bf00      	nop
 800bf0a:	3718      	adds	r7, #24
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}
 800bf10:	0800e42c 	.word	0x0800e42c
 800bf14:	0800c5c1 	.word	0x0800c5c1
 800bf18:	20001780 	.word	0x20001780
 800bf1c:	2000177c 	.word	0x2000177c
 800bf20:	20001768 	.word	0x20001768
 800bf24:	20001760 	.word	0x20001760

0800bf28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bf28:	b480      	push	{r7}
 800bf2a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bf2c:	4b04      	ldr	r3, [pc, #16]	; (800bf40 <vTaskSuspendAll+0x18>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	3301      	adds	r3, #1
 800bf32:	4a03      	ldr	r2, [pc, #12]	; (800bf40 <vTaskSuspendAll+0x18>)
 800bf34:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800bf36:	bf00      	nop
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr
 800bf40:	20001784 	.word	0x20001784

0800bf44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b084      	sub	sp, #16
 800bf48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bf52:	4b43      	ldr	r3, [pc, #268]	; (800c060 <xTaskResumeAll+0x11c>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d10c      	bne.n	800bf74 <xTaskResumeAll+0x30>
	__asm volatile
 800bf5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf5e:	b672      	cpsid	i
 800bf60:	f383 8811 	msr	BASEPRI, r3
 800bf64:	f3bf 8f6f 	isb	sy
 800bf68:	f3bf 8f4f 	dsb	sy
 800bf6c:	b662      	cpsie	i
 800bf6e:	603b      	str	r3, [r7, #0]
}
 800bf70:	bf00      	nop
 800bf72:	e7fe      	b.n	800bf72 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bf74:	f001 fa42 	bl	800d3fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bf78:	4b39      	ldr	r3, [pc, #228]	; (800c060 <xTaskResumeAll+0x11c>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	3b01      	subs	r3, #1
 800bf7e:	4a38      	ldr	r2, [pc, #224]	; (800c060 <xTaskResumeAll+0x11c>)
 800bf80:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf82:	4b37      	ldr	r3, [pc, #220]	; (800c060 <xTaskResumeAll+0x11c>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d162      	bne.n	800c050 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bf8a:	4b36      	ldr	r3, [pc, #216]	; (800c064 <xTaskResumeAll+0x120>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d05e      	beq.n	800c050 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bf92:	e02f      	b.n	800bff4 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf94:	4b34      	ldr	r3, [pc, #208]	; (800c068 <xTaskResumeAll+0x124>)
 800bf96:	68db      	ldr	r3, [r3, #12]
 800bf98:	68db      	ldr	r3, [r3, #12]
 800bf9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	3318      	adds	r3, #24
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7fe fe9d 	bl	800ace0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	3304      	adds	r3, #4
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f7fe fe98 	bl	800ace0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfb4:	4b2d      	ldr	r3, [pc, #180]	; (800c06c <xTaskResumeAll+0x128>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	d903      	bls.n	800bfc4 <xTaskResumeAll+0x80>
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc0:	4a2a      	ldr	r2, [pc, #168]	; (800c06c <xTaskResumeAll+0x128>)
 800bfc2:	6013      	str	r3, [r2, #0]
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfc8:	4613      	mov	r3, r2
 800bfca:	009b      	lsls	r3, r3, #2
 800bfcc:	4413      	add	r3, r2
 800bfce:	009b      	lsls	r3, r3, #2
 800bfd0:	4a27      	ldr	r2, [pc, #156]	; (800c070 <xTaskResumeAll+0x12c>)
 800bfd2:	441a      	add	r2, r3
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	3304      	adds	r3, #4
 800bfd8:	4619      	mov	r1, r3
 800bfda:	4610      	mov	r0, r2
 800bfdc:	f7fe fe23 	bl	800ac26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfe4:	4b23      	ldr	r3, [pc, #140]	; (800c074 <xTaskResumeAll+0x130>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d302      	bcc.n	800bff4 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800bfee:	4b22      	ldr	r3, [pc, #136]	; (800c078 <xTaskResumeAll+0x134>)
 800bff0:	2201      	movs	r2, #1
 800bff2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bff4:	4b1c      	ldr	r3, [pc, #112]	; (800c068 <xTaskResumeAll+0x124>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d1cb      	bne.n	800bf94 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d001      	beq.n	800c006 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c002:	f000 fbcf 	bl	800c7a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c006:	4b1d      	ldr	r3, [pc, #116]	; (800c07c <xTaskResumeAll+0x138>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d010      	beq.n	800c034 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c012:	f000 f853 	bl	800c0bc <xTaskIncrementTick>
 800c016:	4603      	mov	r3, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d002      	beq.n	800c022 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800c01c:	4b16      	ldr	r3, [pc, #88]	; (800c078 <xTaskResumeAll+0x134>)
 800c01e:	2201      	movs	r2, #1
 800c020:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	3b01      	subs	r3, #1
 800c026:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d1f1      	bne.n	800c012 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800c02e:	4b13      	ldr	r3, [pc, #76]	; (800c07c <xTaskResumeAll+0x138>)
 800c030:	2200      	movs	r2, #0
 800c032:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c034:	4b10      	ldr	r3, [pc, #64]	; (800c078 <xTaskResumeAll+0x134>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d009      	beq.n	800c050 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c03c:	2301      	movs	r3, #1
 800c03e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c040:	4b0f      	ldr	r3, [pc, #60]	; (800c080 <xTaskResumeAll+0x13c>)
 800c042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c046:	601a      	str	r2, [r3, #0]
 800c048:	f3bf 8f4f 	dsb	sy
 800c04c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c050:	f001 fa08 	bl	800d464 <vPortExitCritical>

	return xAlreadyYielded;
 800c054:	68bb      	ldr	r3, [r7, #8]
}
 800c056:	4618      	mov	r0, r3
 800c058:	3710      	adds	r7, #16
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	bf00      	nop
 800c060:	20001784 	.word	0x20001784
 800c064:	2000175c 	.word	0x2000175c
 800c068:	2000171c 	.word	0x2000171c
 800c06c:	20001764 	.word	0x20001764
 800c070:	2000128c 	.word	0x2000128c
 800c074:	20001288 	.word	0x20001288
 800c078:	20001770 	.word	0x20001770
 800c07c:	2000176c 	.word	0x2000176c
 800c080:	e000ed04 	.word	0xe000ed04

0800c084 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c084:	b480      	push	{r7}
 800c086:	b083      	sub	sp, #12
 800c088:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c08a:	4b05      	ldr	r3, [pc, #20]	; (800c0a0 <xTaskGetTickCount+0x1c>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c090:	687b      	ldr	r3, [r7, #4]
}
 800c092:	4618      	mov	r0, r3
 800c094:	370c      	adds	r7, #12
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr
 800c09e:	bf00      	nop
 800c0a0:	20001760 	.word	0x20001760

0800c0a4 <uxTaskGetNumberOfTasks>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	BaseType_t. */
	return uxCurrentNumberOfTasks;
 800c0a8:	4b03      	ldr	r3, [pc, #12]	; (800c0b8 <uxTaskGetNumberOfTasks+0x14>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b4:	4770      	bx	lr
 800c0b6:	bf00      	nop
 800c0b8:	2000175c 	.word	0x2000175c

0800c0bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b086      	sub	sp, #24
 800c0c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0c6:	4b50      	ldr	r3, [pc, #320]	; (800c208 <xTaskIncrementTick+0x14c>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	f040 808b 	bne.w	800c1e6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c0d0:	4b4e      	ldr	r3, [pc, #312]	; (800c20c <xTaskIncrementTick+0x150>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c0d8:	4a4c      	ldr	r2, [pc, #304]	; (800c20c <xTaskIncrementTick+0x150>)
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d122      	bne.n	800c12a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800c0e4:	4b4a      	ldr	r3, [pc, #296]	; (800c210 <xTaskIncrementTick+0x154>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d00c      	beq.n	800c108 <xTaskIncrementTick+0x4c>
	__asm volatile
 800c0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0f2:	b672      	cpsid	i
 800c0f4:	f383 8811 	msr	BASEPRI, r3
 800c0f8:	f3bf 8f6f 	isb	sy
 800c0fc:	f3bf 8f4f 	dsb	sy
 800c100:	b662      	cpsie	i
 800c102:	603b      	str	r3, [r7, #0]
}
 800c104:	bf00      	nop
 800c106:	e7fe      	b.n	800c106 <xTaskIncrementTick+0x4a>
 800c108:	4b41      	ldr	r3, [pc, #260]	; (800c210 <xTaskIncrementTick+0x154>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	60fb      	str	r3, [r7, #12]
 800c10e:	4b41      	ldr	r3, [pc, #260]	; (800c214 <xTaskIncrementTick+0x158>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	4a3f      	ldr	r2, [pc, #252]	; (800c210 <xTaskIncrementTick+0x154>)
 800c114:	6013      	str	r3, [r2, #0]
 800c116:	4a3f      	ldr	r2, [pc, #252]	; (800c214 <xTaskIncrementTick+0x158>)
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	6013      	str	r3, [r2, #0]
 800c11c:	4b3e      	ldr	r3, [pc, #248]	; (800c218 <xTaskIncrementTick+0x15c>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	3301      	adds	r3, #1
 800c122:	4a3d      	ldr	r2, [pc, #244]	; (800c218 <xTaskIncrementTick+0x15c>)
 800c124:	6013      	str	r3, [r2, #0]
 800c126:	f000 fb3d 	bl	800c7a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c12a:	4b3c      	ldr	r3, [pc, #240]	; (800c21c <xTaskIncrementTick+0x160>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	693a      	ldr	r2, [r7, #16]
 800c130:	429a      	cmp	r2, r3
 800c132:	d349      	bcc.n	800c1c8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c134:	4b36      	ldr	r3, [pc, #216]	; (800c210 <xTaskIncrementTick+0x154>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d104      	bne.n	800c148 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c13e:	4b37      	ldr	r3, [pc, #220]	; (800c21c <xTaskIncrementTick+0x160>)
 800c140:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c144:	601a      	str	r2, [r3, #0]
					break;
 800c146:	e03f      	b.n	800c1c8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c148:	4b31      	ldr	r3, [pc, #196]	; (800c210 <xTaskIncrementTick+0x154>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	68db      	ldr	r3, [r3, #12]
 800c14e:	68db      	ldr	r3, [r3, #12]
 800c150:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	685b      	ldr	r3, [r3, #4]
 800c156:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c158:	693a      	ldr	r2, [r7, #16]
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	429a      	cmp	r2, r3
 800c15e:	d203      	bcs.n	800c168 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c160:	4a2e      	ldr	r2, [pc, #184]	; (800c21c <xTaskIncrementTick+0x160>)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c166:	e02f      	b.n	800c1c8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	3304      	adds	r3, #4
 800c16c:	4618      	mov	r0, r3
 800c16e:	f7fe fdb7 	bl	800ace0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c176:	2b00      	cmp	r3, #0
 800c178:	d004      	beq.n	800c184 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	3318      	adds	r3, #24
 800c17e:	4618      	mov	r0, r3
 800c180:	f7fe fdae 	bl	800ace0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c188:	4b25      	ldr	r3, [pc, #148]	; (800c220 <xTaskIncrementTick+0x164>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d903      	bls.n	800c198 <xTaskIncrementTick+0xdc>
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c194:	4a22      	ldr	r2, [pc, #136]	; (800c220 <xTaskIncrementTick+0x164>)
 800c196:	6013      	str	r3, [r2, #0]
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c19c:	4613      	mov	r3, r2
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	4413      	add	r3, r2
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	4a1f      	ldr	r2, [pc, #124]	; (800c224 <xTaskIncrementTick+0x168>)
 800c1a6:	441a      	add	r2, r3
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	3304      	adds	r3, #4
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	4610      	mov	r0, r2
 800c1b0:	f7fe fd39 	bl	800ac26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1b8:	4b1b      	ldr	r3, [pc, #108]	; (800c228 <xTaskIncrementTick+0x16c>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1be:	429a      	cmp	r2, r3
 800c1c0:	d3b8      	bcc.n	800c134 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c1c6:	e7b5      	b.n	800c134 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c1c8:	4b17      	ldr	r3, [pc, #92]	; (800c228 <xTaskIncrementTick+0x16c>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ce:	4915      	ldr	r1, [pc, #84]	; (800c224 <xTaskIncrementTick+0x168>)
 800c1d0:	4613      	mov	r3, r2
 800c1d2:	009b      	lsls	r3, r3, #2
 800c1d4:	4413      	add	r3, r2
 800c1d6:	009b      	lsls	r3, r3, #2
 800c1d8:	440b      	add	r3, r1
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d907      	bls.n	800c1f0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	617b      	str	r3, [r7, #20]
 800c1e4:	e004      	b.n	800c1f0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c1e6:	4b11      	ldr	r3, [pc, #68]	; (800c22c <xTaskIncrementTick+0x170>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	3301      	adds	r3, #1
 800c1ec:	4a0f      	ldr	r2, [pc, #60]	; (800c22c <xTaskIncrementTick+0x170>)
 800c1ee:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c1f0:	4b0f      	ldr	r3, [pc, #60]	; (800c230 <xTaskIncrementTick+0x174>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d001      	beq.n	800c1fc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c1fc:	697b      	ldr	r3, [r7, #20]
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3718      	adds	r7, #24
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}
 800c206:	bf00      	nop
 800c208:	20001784 	.word	0x20001784
 800c20c:	20001760 	.word	0x20001760
 800c210:	20001714 	.word	0x20001714
 800c214:	20001718 	.word	0x20001718
 800c218:	20001774 	.word	0x20001774
 800c21c:	2000177c 	.word	0x2000177c
 800c220:	20001764 	.word	0x20001764
 800c224:	2000128c 	.word	0x2000128c
 800c228:	20001288 	.word	0x20001288
 800c22c:	2000176c 	.word	0x2000176c
 800c230:	20001770 	.word	0x20001770

0800c234 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b086      	sub	sp, #24
 800c238:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c23a:	4b3b      	ldr	r3, [pc, #236]	; (800c328 <vTaskSwitchContext+0xf4>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d003      	beq.n	800c24a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c242:	4b3a      	ldr	r3, [pc, #232]	; (800c32c <vTaskSwitchContext+0xf8>)
 800c244:	2201      	movs	r2, #1
 800c246:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c248:	e06a      	b.n	800c320 <vTaskSwitchContext+0xec>
		xYieldPending = pdFALSE;
 800c24a:	4b38      	ldr	r3, [pc, #224]	; (800c32c <vTaskSwitchContext+0xf8>)
 800c24c:	2200      	movs	r2, #0
 800c24e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800c250:	4b37      	ldr	r3, [pc, #220]	; (800c330 <vTaskSwitchContext+0xfc>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c256:	613b      	str	r3, [r7, #16]
 800c258:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800c25c:	60fb      	str	r3, [r7, #12]
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	68fa      	ldr	r2, [r7, #12]
 800c264:	429a      	cmp	r2, r3
 800c266:	d111      	bne.n	800c28c <vTaskSwitchContext+0x58>
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	3304      	adds	r3, #4
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	68fa      	ldr	r2, [r7, #12]
 800c270:	429a      	cmp	r2, r3
 800c272:	d10b      	bne.n	800c28c <vTaskSwitchContext+0x58>
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	3308      	adds	r3, #8
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	68fa      	ldr	r2, [r7, #12]
 800c27c:	429a      	cmp	r2, r3
 800c27e:	d105      	bne.n	800c28c <vTaskSwitchContext+0x58>
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	330c      	adds	r3, #12
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	68fa      	ldr	r2, [r7, #12]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d008      	beq.n	800c29e <vTaskSwitchContext+0x6a>
 800c28c:	4b28      	ldr	r3, [pc, #160]	; (800c330 <vTaskSwitchContext+0xfc>)
 800c28e:	681a      	ldr	r2, [r3, #0]
 800c290:	4b27      	ldr	r3, [pc, #156]	; (800c330 <vTaskSwitchContext+0xfc>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	3334      	adds	r3, #52	; 0x34
 800c296:	4619      	mov	r1, r3
 800c298:	4610      	mov	r0, r2
 800c29a:	f7f4 f9b2 	bl	8000602 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c29e:	4b25      	ldr	r3, [pc, #148]	; (800c334 <vTaskSwitchContext+0x100>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	617b      	str	r3, [r7, #20]
 800c2a4:	e012      	b.n	800c2cc <vTaskSwitchContext+0x98>
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d10c      	bne.n	800c2c6 <vTaskSwitchContext+0x92>
	__asm volatile
 800c2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b0:	b672      	cpsid	i
 800c2b2:	f383 8811 	msr	BASEPRI, r3
 800c2b6:	f3bf 8f6f 	isb	sy
 800c2ba:	f3bf 8f4f 	dsb	sy
 800c2be:	b662      	cpsie	i
 800c2c0:	607b      	str	r3, [r7, #4]
}
 800c2c2:	bf00      	nop
 800c2c4:	e7fe      	b.n	800c2c4 <vTaskSwitchContext+0x90>
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	3b01      	subs	r3, #1
 800c2ca:	617b      	str	r3, [r7, #20]
 800c2cc:	491a      	ldr	r1, [pc, #104]	; (800c338 <vTaskSwitchContext+0x104>)
 800c2ce:	697a      	ldr	r2, [r7, #20]
 800c2d0:	4613      	mov	r3, r2
 800c2d2:	009b      	lsls	r3, r3, #2
 800c2d4:	4413      	add	r3, r2
 800c2d6:	009b      	lsls	r3, r3, #2
 800c2d8:	440b      	add	r3, r1
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d0e2      	beq.n	800c2a6 <vTaskSwitchContext+0x72>
 800c2e0:	697a      	ldr	r2, [r7, #20]
 800c2e2:	4613      	mov	r3, r2
 800c2e4:	009b      	lsls	r3, r3, #2
 800c2e6:	4413      	add	r3, r2
 800c2e8:	009b      	lsls	r3, r3, #2
 800c2ea:	4a13      	ldr	r2, [pc, #76]	; (800c338 <vTaskSwitchContext+0x104>)
 800c2ec:	4413      	add	r3, r2
 800c2ee:	60bb      	str	r3, [r7, #8]
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	685a      	ldr	r2, [r3, #4]
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	605a      	str	r2, [r3, #4]
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	685a      	ldr	r2, [r3, #4]
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	3308      	adds	r3, #8
 800c302:	429a      	cmp	r2, r3
 800c304:	d104      	bne.n	800c310 <vTaskSwitchContext+0xdc>
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	685a      	ldr	r2, [r3, #4]
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	605a      	str	r2, [r3, #4]
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	685b      	ldr	r3, [r3, #4]
 800c314:	68db      	ldr	r3, [r3, #12]
 800c316:	4a06      	ldr	r2, [pc, #24]	; (800c330 <vTaskSwitchContext+0xfc>)
 800c318:	6013      	str	r3, [r2, #0]
 800c31a:	4a06      	ldr	r2, [pc, #24]	; (800c334 <vTaskSwitchContext+0x100>)
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	6013      	str	r3, [r2, #0]
}
 800c320:	bf00      	nop
 800c322:	3718      	adds	r7, #24
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}
 800c328:	20001784 	.word	0x20001784
 800c32c:	20001770 	.word	0x20001770
 800c330:	20001288 	.word	0x20001288
 800c334:	20001764 	.word	0x20001764
 800c338:	2000128c 	.word	0x2000128c

0800c33c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b084      	sub	sp, #16
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d10c      	bne.n	800c366 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800c34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c350:	b672      	cpsid	i
 800c352:	f383 8811 	msr	BASEPRI, r3
 800c356:	f3bf 8f6f 	isb	sy
 800c35a:	f3bf 8f4f 	dsb	sy
 800c35e:	b662      	cpsie	i
 800c360:	60fb      	str	r3, [r7, #12]
}
 800c362:	bf00      	nop
 800c364:	e7fe      	b.n	800c364 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c366:	4b07      	ldr	r3, [pc, #28]	; (800c384 <vTaskPlaceOnEventList+0x48>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	3318      	adds	r3, #24
 800c36c:	4619      	mov	r1, r3
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f7fe fc7d 	bl	800ac6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c374:	2101      	movs	r1, #1
 800c376:	6838      	ldr	r0, [r7, #0]
 800c378:	f000 fac4 	bl	800c904 <prvAddCurrentTaskToDelayedList>
}
 800c37c:	bf00      	nop
 800c37e:	3710      	adds	r7, #16
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}
 800c384:	20001288 	.word	0x20001288

0800c388 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b086      	sub	sp, #24
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d10c      	bne.n	800c3b4 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800c39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c39e:	b672      	cpsid	i
 800c3a0:	f383 8811 	msr	BASEPRI, r3
 800c3a4:	f3bf 8f6f 	isb	sy
 800c3a8:	f3bf 8f4f 	dsb	sy
 800c3ac:	b662      	cpsie	i
 800c3ae:	617b      	str	r3, [r7, #20]
}
 800c3b0:	bf00      	nop
 800c3b2:	e7fe      	b.n	800c3b2 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c3b4:	4b0a      	ldr	r3, [pc, #40]	; (800c3e0 <vTaskPlaceOnEventListRestricted+0x58>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	3318      	adds	r3, #24
 800c3ba:	4619      	mov	r1, r3
 800c3bc:	68f8      	ldr	r0, [r7, #12]
 800c3be:	f7fe fc32 	bl	800ac26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d002      	beq.n	800c3ce <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800c3c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c3cc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c3ce:	6879      	ldr	r1, [r7, #4]
 800c3d0:	68b8      	ldr	r0, [r7, #8]
 800c3d2:	f000 fa97 	bl	800c904 <prvAddCurrentTaskToDelayedList>
	}
 800c3d6:	bf00      	nop
 800c3d8:	3718      	adds	r7, #24
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
 800c3de:	bf00      	nop
 800c3e0:	20001288 	.word	0x20001288

0800c3e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b086      	sub	sp, #24
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	68db      	ldr	r3, [r3, #12]
 800c3f0:	68db      	ldr	r3, [r3, #12]
 800c3f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d10c      	bne.n	800c414 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800c3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3fe:	b672      	cpsid	i
 800c400:	f383 8811 	msr	BASEPRI, r3
 800c404:	f3bf 8f6f 	isb	sy
 800c408:	f3bf 8f4f 	dsb	sy
 800c40c:	b662      	cpsie	i
 800c40e:	60fb      	str	r3, [r7, #12]
}
 800c410:	bf00      	nop
 800c412:	e7fe      	b.n	800c412 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c414:	693b      	ldr	r3, [r7, #16]
 800c416:	3318      	adds	r3, #24
 800c418:	4618      	mov	r0, r3
 800c41a:	f7fe fc61 	bl	800ace0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c41e:	4b1e      	ldr	r3, [pc, #120]	; (800c498 <xTaskRemoveFromEventList+0xb4>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d11d      	bne.n	800c462 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c426:	693b      	ldr	r3, [r7, #16]
 800c428:	3304      	adds	r3, #4
 800c42a:	4618      	mov	r0, r3
 800c42c:	f7fe fc58 	bl	800ace0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c434:	4b19      	ldr	r3, [pc, #100]	; (800c49c <xTaskRemoveFromEventList+0xb8>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	429a      	cmp	r2, r3
 800c43a:	d903      	bls.n	800c444 <xTaskRemoveFromEventList+0x60>
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c440:	4a16      	ldr	r2, [pc, #88]	; (800c49c <xTaskRemoveFromEventList+0xb8>)
 800c442:	6013      	str	r3, [r2, #0]
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c448:	4613      	mov	r3, r2
 800c44a:	009b      	lsls	r3, r3, #2
 800c44c:	4413      	add	r3, r2
 800c44e:	009b      	lsls	r3, r3, #2
 800c450:	4a13      	ldr	r2, [pc, #76]	; (800c4a0 <xTaskRemoveFromEventList+0xbc>)
 800c452:	441a      	add	r2, r3
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	3304      	adds	r3, #4
 800c458:	4619      	mov	r1, r3
 800c45a:	4610      	mov	r0, r2
 800c45c:	f7fe fbe3 	bl	800ac26 <vListInsertEnd>
 800c460:	e005      	b.n	800c46e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	3318      	adds	r3, #24
 800c466:	4619      	mov	r1, r3
 800c468:	480e      	ldr	r0, [pc, #56]	; (800c4a4 <xTaskRemoveFromEventList+0xc0>)
 800c46a:	f7fe fbdc 	bl	800ac26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c472:	4b0d      	ldr	r3, [pc, #52]	; (800c4a8 <xTaskRemoveFromEventList+0xc4>)
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c478:	429a      	cmp	r2, r3
 800c47a:	d905      	bls.n	800c488 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c47c:	2301      	movs	r3, #1
 800c47e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c480:	4b0a      	ldr	r3, [pc, #40]	; (800c4ac <xTaskRemoveFromEventList+0xc8>)
 800c482:	2201      	movs	r2, #1
 800c484:	601a      	str	r2, [r3, #0]
 800c486:	e001      	b.n	800c48c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800c488:	2300      	movs	r3, #0
 800c48a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c48c:	697b      	ldr	r3, [r7, #20]
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3718      	adds	r7, #24
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	20001784 	.word	0x20001784
 800c49c:	20001764 	.word	0x20001764
 800c4a0:	2000128c 	.word	0x2000128c
 800c4a4:	2000171c 	.word	0x2000171c
 800c4a8:	20001288 	.word	0x20001288
 800c4ac:	20001770 	.word	0x20001770

0800c4b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b083      	sub	sp, #12
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c4b8:	4b06      	ldr	r3, [pc, #24]	; (800c4d4 <vTaskInternalSetTimeOutState+0x24>)
 800c4ba:	681a      	ldr	r2, [r3, #0]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c4c0:	4b05      	ldr	r3, [pc, #20]	; (800c4d8 <vTaskInternalSetTimeOutState+0x28>)
 800c4c2:	681a      	ldr	r2, [r3, #0]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	605a      	str	r2, [r3, #4]
}
 800c4c8:	bf00      	nop
 800c4ca:	370c      	adds	r7, #12
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr
 800c4d4:	20001774 	.word	0x20001774
 800c4d8:	20001760 	.word	0x20001760

0800c4dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b088      	sub	sp, #32
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d10c      	bne.n	800c506 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800c4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f0:	b672      	cpsid	i
 800c4f2:	f383 8811 	msr	BASEPRI, r3
 800c4f6:	f3bf 8f6f 	isb	sy
 800c4fa:	f3bf 8f4f 	dsb	sy
 800c4fe:	b662      	cpsie	i
 800c500:	613b      	str	r3, [r7, #16]
}
 800c502:	bf00      	nop
 800c504:	e7fe      	b.n	800c504 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d10c      	bne.n	800c526 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800c50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c510:	b672      	cpsid	i
 800c512:	f383 8811 	msr	BASEPRI, r3
 800c516:	f3bf 8f6f 	isb	sy
 800c51a:	f3bf 8f4f 	dsb	sy
 800c51e:	b662      	cpsie	i
 800c520:	60fb      	str	r3, [r7, #12]
}
 800c522:	bf00      	nop
 800c524:	e7fe      	b.n	800c524 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800c526:	f000 ff69 	bl	800d3fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c52a:	4b1d      	ldr	r3, [pc, #116]	; (800c5a0 <xTaskCheckForTimeOut+0xc4>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	69ba      	ldr	r2, [r7, #24]
 800c536:	1ad3      	subs	r3, r2, r3
 800c538:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c542:	d102      	bne.n	800c54a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c544:	2300      	movs	r3, #0
 800c546:	61fb      	str	r3, [r7, #28]
 800c548:	e023      	b.n	800c592 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681a      	ldr	r2, [r3, #0]
 800c54e:	4b15      	ldr	r3, [pc, #84]	; (800c5a4 <xTaskCheckForTimeOut+0xc8>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	429a      	cmp	r2, r3
 800c554:	d007      	beq.n	800c566 <xTaskCheckForTimeOut+0x8a>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	69ba      	ldr	r2, [r7, #24]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d302      	bcc.n	800c566 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c560:	2301      	movs	r3, #1
 800c562:	61fb      	str	r3, [r7, #28]
 800c564:	e015      	b.n	800c592 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	697a      	ldr	r2, [r7, #20]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d20b      	bcs.n	800c588 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	681a      	ldr	r2, [r3, #0]
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	1ad2      	subs	r2, r2, r3
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f7ff ff97 	bl	800c4b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c582:	2300      	movs	r3, #0
 800c584:	61fb      	str	r3, [r7, #28]
 800c586:	e004      	b.n	800c592 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	2200      	movs	r2, #0
 800c58c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c58e:	2301      	movs	r3, #1
 800c590:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c592:	f000 ff67 	bl	800d464 <vPortExitCritical>

	return xReturn;
 800c596:	69fb      	ldr	r3, [r7, #28]
}
 800c598:	4618      	mov	r0, r3
 800c59a:	3720      	adds	r7, #32
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}
 800c5a0:	20001760 	.word	0x20001760
 800c5a4:	20001774 	.word	0x20001774

0800c5a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c5ac:	4b03      	ldr	r3, [pc, #12]	; (800c5bc <vTaskMissedYield+0x14>)
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	601a      	str	r2, [r3, #0]
}
 800c5b2:	bf00      	nop
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr
 800c5bc:	20001770 	.word	0x20001770

0800c5c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b082      	sub	sp, #8
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c5c8:	f000 f854 	bl	800c674 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c5cc:	4b07      	ldr	r3, [pc, #28]	; (800c5ec <prvIdleTask+0x2c>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d907      	bls.n	800c5e4 <prvIdleTask+0x24>
			{
				taskYIELD();
 800c5d4:	4b06      	ldr	r3, [pc, #24]	; (800c5f0 <prvIdleTask+0x30>)
 800c5d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5da:	601a      	str	r2, [r3, #0]
 800c5dc:	f3bf 8f4f 	dsb	sy
 800c5e0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800c5e4:	f7f4 f806 	bl	80005f4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800c5e8:	e7ee      	b.n	800c5c8 <prvIdleTask+0x8>
 800c5ea:	bf00      	nop
 800c5ec:	2000128c 	.word	0x2000128c
 800c5f0:	e000ed04 	.word	0xe000ed04

0800c5f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b082      	sub	sp, #8
 800c5f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	607b      	str	r3, [r7, #4]
 800c5fe:	e00c      	b.n	800c61a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c600:	687a      	ldr	r2, [r7, #4]
 800c602:	4613      	mov	r3, r2
 800c604:	009b      	lsls	r3, r3, #2
 800c606:	4413      	add	r3, r2
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	4a12      	ldr	r2, [pc, #72]	; (800c654 <prvInitialiseTaskLists+0x60>)
 800c60c:	4413      	add	r3, r2
 800c60e:	4618      	mov	r0, r3
 800c610:	f7fe fadc 	bl	800abcc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	3301      	adds	r3, #1
 800c618:	607b      	str	r3, [r7, #4]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2b37      	cmp	r3, #55	; 0x37
 800c61e:	d9ef      	bls.n	800c600 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c620:	480d      	ldr	r0, [pc, #52]	; (800c658 <prvInitialiseTaskLists+0x64>)
 800c622:	f7fe fad3 	bl	800abcc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c626:	480d      	ldr	r0, [pc, #52]	; (800c65c <prvInitialiseTaskLists+0x68>)
 800c628:	f7fe fad0 	bl	800abcc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c62c:	480c      	ldr	r0, [pc, #48]	; (800c660 <prvInitialiseTaskLists+0x6c>)
 800c62e:	f7fe facd 	bl	800abcc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c632:	480c      	ldr	r0, [pc, #48]	; (800c664 <prvInitialiseTaskLists+0x70>)
 800c634:	f7fe faca 	bl	800abcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c638:	480b      	ldr	r0, [pc, #44]	; (800c668 <prvInitialiseTaskLists+0x74>)
 800c63a:	f7fe fac7 	bl	800abcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c63e:	4b0b      	ldr	r3, [pc, #44]	; (800c66c <prvInitialiseTaskLists+0x78>)
 800c640:	4a05      	ldr	r2, [pc, #20]	; (800c658 <prvInitialiseTaskLists+0x64>)
 800c642:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c644:	4b0a      	ldr	r3, [pc, #40]	; (800c670 <prvInitialiseTaskLists+0x7c>)
 800c646:	4a05      	ldr	r2, [pc, #20]	; (800c65c <prvInitialiseTaskLists+0x68>)
 800c648:	601a      	str	r2, [r3, #0]
}
 800c64a:	bf00      	nop
 800c64c:	3708      	adds	r7, #8
 800c64e:	46bd      	mov	sp, r7
 800c650:	bd80      	pop	{r7, pc}
 800c652:	bf00      	nop
 800c654:	2000128c 	.word	0x2000128c
 800c658:	200016ec 	.word	0x200016ec
 800c65c:	20001700 	.word	0x20001700
 800c660:	2000171c 	.word	0x2000171c
 800c664:	20001730 	.word	0x20001730
 800c668:	20001748 	.word	0x20001748
 800c66c:	20001714 	.word	0x20001714
 800c670:	20001718 	.word	0x20001718

0800c674 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c67a:	e019      	b.n	800c6b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c67c:	f000 febe 	bl	800d3fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c680:	4b10      	ldr	r3, [pc, #64]	; (800c6c4 <prvCheckTasksWaitingTermination+0x50>)
 800c682:	68db      	ldr	r3, [r3, #12]
 800c684:	68db      	ldr	r3, [r3, #12]
 800c686:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	3304      	adds	r3, #4
 800c68c:	4618      	mov	r0, r3
 800c68e:	f7fe fb27 	bl	800ace0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c692:	4b0d      	ldr	r3, [pc, #52]	; (800c6c8 <prvCheckTasksWaitingTermination+0x54>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	3b01      	subs	r3, #1
 800c698:	4a0b      	ldr	r2, [pc, #44]	; (800c6c8 <prvCheckTasksWaitingTermination+0x54>)
 800c69a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c69c:	4b0b      	ldr	r3, [pc, #44]	; (800c6cc <prvCheckTasksWaitingTermination+0x58>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	3b01      	subs	r3, #1
 800c6a2:	4a0a      	ldr	r2, [pc, #40]	; (800c6cc <prvCheckTasksWaitingTermination+0x58>)
 800c6a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c6a6:	f000 fedd 	bl	800d464 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f000 f848 	bl	800c740 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c6b0:	4b06      	ldr	r3, [pc, #24]	; (800c6cc <prvCheckTasksWaitingTermination+0x58>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d1e1      	bne.n	800c67c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c6b8:	bf00      	nop
 800c6ba:	bf00      	nop
 800c6bc:	3708      	adds	r7, #8
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	20001730 	.word	0x20001730
 800c6c8:	2000175c 	.word	0x2000175c
 800c6cc:	20001744 	.word	0x20001744

0800c6d0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800c6d0:	b480      	push	{r7}
 800c6d2:	b085      	sub	sp, #20
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 800c6d8:	2300      	movs	r3, #0
 800c6da:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c6dc:	e005      	b.n	800c6ea <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	3301      	adds	r3, #1
 800c6e2:	607b      	str	r3, [r7, #4]
			ulCount++;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	3301      	adds	r3, #1
 800c6e8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	2ba5      	cmp	r3, #165	; 0xa5
 800c6f0:	d0f5      	beq.n	800c6de <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	089b      	lsrs	r3, r3, #2
 800c6f6:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	b29b      	uxth	r3, r3
	}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3714      	adds	r7, #20
 800c700:	46bd      	mov	sp, r7
 800c702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c706:	4770      	bx	lr

0800c708 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b086      	sub	sp, #24
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d102      	bne.n	800c71c <uxTaskGetStackHighWaterMark+0x14>
 800c716:	4b09      	ldr	r3, [pc, #36]	; (800c73c <uxTaskGetStackHighWaterMark+0x34>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	e000      	b.n	800c71e <uxTaskGetStackHighWaterMark+0x16>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c724:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 800c726:	6938      	ldr	r0, [r7, #16]
 800c728:	f7ff ffd2 	bl	800c6d0 <prvTaskCheckFreeStackSpace>
 800c72c:	4603      	mov	r3, r0
 800c72e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 800c730:	68fb      	ldr	r3, [r7, #12]
	}
 800c732:	4618      	mov	r0, r3
 800c734:	3718      	adds	r7, #24
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}
 800c73a:	bf00      	nop
 800c73c:	20001288 	.word	0x20001288

0800c740 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c740:	b580      	push	{r7, lr}
 800c742:	b084      	sub	sp, #16
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d108      	bne.n	800c764 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c756:	4618      	mov	r0, r3
 800c758:	f001 f84c 	bl	800d7f4 <vPortFree>
				vPortFree( pxTCB );
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f001 f849 	bl	800d7f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c762:	e01a      	b.n	800c79a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c76a:	2b01      	cmp	r3, #1
 800c76c:	d103      	bne.n	800c776 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f001 f840 	bl	800d7f4 <vPortFree>
	}
 800c774:	e011      	b.n	800c79a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c77c:	2b02      	cmp	r3, #2
 800c77e:	d00c      	beq.n	800c79a <prvDeleteTCB+0x5a>
	__asm volatile
 800c780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c784:	b672      	cpsid	i
 800c786:	f383 8811 	msr	BASEPRI, r3
 800c78a:	f3bf 8f6f 	isb	sy
 800c78e:	f3bf 8f4f 	dsb	sy
 800c792:	b662      	cpsie	i
 800c794:	60fb      	str	r3, [r7, #12]
}
 800c796:	bf00      	nop
 800c798:	e7fe      	b.n	800c798 <prvDeleteTCB+0x58>
	}
 800c79a:	bf00      	nop
 800c79c:	3710      	adds	r7, #16
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
	...

0800c7a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b083      	sub	sp, #12
 800c7a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c7aa:	4b0c      	ldr	r3, [pc, #48]	; (800c7dc <prvResetNextTaskUnblockTime+0x38>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d104      	bne.n	800c7be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c7b4:	4b0a      	ldr	r3, [pc, #40]	; (800c7e0 <prvResetNextTaskUnblockTime+0x3c>)
 800c7b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c7ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c7bc:	e008      	b.n	800c7d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7be:	4b07      	ldr	r3, [pc, #28]	; (800c7dc <prvResetNextTaskUnblockTime+0x38>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	68db      	ldr	r3, [r3, #12]
 800c7c4:	68db      	ldr	r3, [r3, #12]
 800c7c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	4a04      	ldr	r2, [pc, #16]	; (800c7e0 <prvResetNextTaskUnblockTime+0x3c>)
 800c7ce:	6013      	str	r3, [r2, #0]
}
 800c7d0:	bf00      	nop
 800c7d2:	370c      	adds	r7, #12
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7da:	4770      	bx	lr
 800c7dc:	20001714 	.word	0x20001714
 800c7e0:	2000177c 	.word	0x2000177c

0800c7e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b083      	sub	sp, #12
 800c7e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c7ea:	4b0b      	ldr	r3, [pc, #44]	; (800c818 <xTaskGetSchedulerState+0x34>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d102      	bne.n	800c7f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	607b      	str	r3, [r7, #4]
 800c7f6:	e008      	b.n	800c80a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7f8:	4b08      	ldr	r3, [pc, #32]	; (800c81c <xTaskGetSchedulerState+0x38>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d102      	bne.n	800c806 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c800:	2302      	movs	r3, #2
 800c802:	607b      	str	r3, [r7, #4]
 800c804:	e001      	b.n	800c80a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c806:	2300      	movs	r3, #0
 800c808:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c80a:	687b      	ldr	r3, [r7, #4]
	}
 800c80c:	4618      	mov	r0, r3
 800c80e:	370c      	adds	r7, #12
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr
 800c818:	20001768 	.word	0x20001768
 800c81c:	20001784 	.word	0x20001784

0800c820 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c820:	b580      	push	{r7, lr}
 800c822:	b086      	sub	sp, #24
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c82c:	2300      	movs	r3, #0
 800c82e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d05a      	beq.n	800c8ec <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c836:	4b30      	ldr	r3, [pc, #192]	; (800c8f8 <xTaskPriorityDisinherit+0xd8>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	693a      	ldr	r2, [r7, #16]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d00c      	beq.n	800c85a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800c840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c844:	b672      	cpsid	i
 800c846:	f383 8811 	msr	BASEPRI, r3
 800c84a:	f3bf 8f6f 	isb	sy
 800c84e:	f3bf 8f4f 	dsb	sy
 800c852:	b662      	cpsie	i
 800c854:	60fb      	str	r3, [r7, #12]
}
 800c856:	bf00      	nop
 800c858:	e7fe      	b.n	800c858 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d10c      	bne.n	800c87c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800c862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c866:	b672      	cpsid	i
 800c868:	f383 8811 	msr	BASEPRI, r3
 800c86c:	f3bf 8f6f 	isb	sy
 800c870:	f3bf 8f4f 	dsb	sy
 800c874:	b662      	cpsie	i
 800c876:	60bb      	str	r3, [r7, #8]
}
 800c878:	bf00      	nop
 800c87a:	e7fe      	b.n	800c87a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c880:	1e5a      	subs	r2, r3, #1
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c88e:	429a      	cmp	r2, r3
 800c890:	d02c      	beq.n	800c8ec <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c896:	2b00      	cmp	r3, #0
 800c898:	d128      	bne.n	800c8ec <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	3304      	adds	r3, #4
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7fe fa1e 	bl	800ace0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8bc:	4b0f      	ldr	r3, [pc, #60]	; (800c8fc <xTaskPriorityDisinherit+0xdc>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d903      	bls.n	800c8cc <xTaskPriorityDisinherit+0xac>
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8c8:	4a0c      	ldr	r2, [pc, #48]	; (800c8fc <xTaskPriorityDisinherit+0xdc>)
 800c8ca:	6013      	str	r3, [r2, #0]
 800c8cc:	693b      	ldr	r3, [r7, #16]
 800c8ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8d0:	4613      	mov	r3, r2
 800c8d2:	009b      	lsls	r3, r3, #2
 800c8d4:	4413      	add	r3, r2
 800c8d6:	009b      	lsls	r3, r3, #2
 800c8d8:	4a09      	ldr	r2, [pc, #36]	; (800c900 <xTaskPriorityDisinherit+0xe0>)
 800c8da:	441a      	add	r2, r3
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	3304      	adds	r3, #4
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	4610      	mov	r0, r2
 800c8e4:	f7fe f99f 	bl	800ac26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c8ec:	697b      	ldr	r3, [r7, #20]
	}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3718      	adds	r7, #24
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}
 800c8f6:	bf00      	nop
 800c8f8:	20001288 	.word	0x20001288
 800c8fc:	20001764 	.word	0x20001764
 800c900:	2000128c 	.word	0x2000128c

0800c904 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b084      	sub	sp, #16
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c90e:	4b21      	ldr	r3, [pc, #132]	; (800c994 <prvAddCurrentTaskToDelayedList+0x90>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c914:	4b20      	ldr	r3, [pc, #128]	; (800c998 <prvAddCurrentTaskToDelayedList+0x94>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	3304      	adds	r3, #4
 800c91a:	4618      	mov	r0, r3
 800c91c:	f7fe f9e0 	bl	800ace0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c926:	d10a      	bne.n	800c93e <prvAddCurrentTaskToDelayedList+0x3a>
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d007      	beq.n	800c93e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c92e:	4b1a      	ldr	r3, [pc, #104]	; (800c998 <prvAddCurrentTaskToDelayedList+0x94>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	3304      	adds	r3, #4
 800c934:	4619      	mov	r1, r3
 800c936:	4819      	ldr	r0, [pc, #100]	; (800c99c <prvAddCurrentTaskToDelayedList+0x98>)
 800c938:	f7fe f975 	bl	800ac26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c93c:	e026      	b.n	800c98c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c93e:	68fa      	ldr	r2, [r7, #12]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	4413      	add	r3, r2
 800c944:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c946:	4b14      	ldr	r3, [pc, #80]	; (800c998 <prvAddCurrentTaskToDelayedList+0x94>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	68ba      	ldr	r2, [r7, #8]
 800c94c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c94e:	68ba      	ldr	r2, [r7, #8]
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	429a      	cmp	r2, r3
 800c954:	d209      	bcs.n	800c96a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c956:	4b12      	ldr	r3, [pc, #72]	; (800c9a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c958:	681a      	ldr	r2, [r3, #0]
 800c95a:	4b0f      	ldr	r3, [pc, #60]	; (800c998 <prvAddCurrentTaskToDelayedList+0x94>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	3304      	adds	r3, #4
 800c960:	4619      	mov	r1, r3
 800c962:	4610      	mov	r0, r2
 800c964:	f7fe f983 	bl	800ac6e <vListInsert>
}
 800c968:	e010      	b.n	800c98c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c96a:	4b0e      	ldr	r3, [pc, #56]	; (800c9a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c96c:	681a      	ldr	r2, [r3, #0]
 800c96e:	4b0a      	ldr	r3, [pc, #40]	; (800c998 <prvAddCurrentTaskToDelayedList+0x94>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	3304      	adds	r3, #4
 800c974:	4619      	mov	r1, r3
 800c976:	4610      	mov	r0, r2
 800c978:	f7fe f979 	bl	800ac6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c97c:	4b0a      	ldr	r3, [pc, #40]	; (800c9a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	68ba      	ldr	r2, [r7, #8]
 800c982:	429a      	cmp	r2, r3
 800c984:	d202      	bcs.n	800c98c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c986:	4a08      	ldr	r2, [pc, #32]	; (800c9a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	6013      	str	r3, [r2, #0]
}
 800c98c:	bf00      	nop
 800c98e:	3710      	adds	r7, #16
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}
 800c994:	20001760 	.word	0x20001760
 800c998:	20001288 	.word	0x20001288
 800c99c:	20001748 	.word	0x20001748
 800c9a0:	20001718 	.word	0x20001718
 800c9a4:	20001714 	.word	0x20001714
 800c9a8:	2000177c 	.word	0x2000177c

0800c9ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b08a      	sub	sp, #40	; 0x28
 800c9b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c9b6:	f000 fbb5 	bl	800d124 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c9ba:	4b1d      	ldr	r3, [pc, #116]	; (800ca30 <xTimerCreateTimerTask+0x84>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d021      	beq.n	800ca06 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c9ca:	1d3a      	adds	r2, r7, #4
 800c9cc:	f107 0108 	add.w	r1, r7, #8
 800c9d0:	f107 030c 	add.w	r3, r7, #12
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f7fe f8df 	bl	800ab98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c9da:	6879      	ldr	r1, [r7, #4]
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	68fa      	ldr	r2, [r7, #12]
 800c9e0:	9202      	str	r2, [sp, #8]
 800c9e2:	9301      	str	r3, [sp, #4]
 800c9e4:	2302      	movs	r3, #2
 800c9e6:	9300      	str	r3, [sp, #0]
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	460a      	mov	r2, r1
 800c9ec:	4911      	ldr	r1, [pc, #68]	; (800ca34 <xTimerCreateTimerTask+0x88>)
 800c9ee:	4812      	ldr	r0, [pc, #72]	; (800ca38 <xTimerCreateTimerTask+0x8c>)
 800c9f0:	f7fe ff72 	bl	800b8d8 <xTaskCreateStatic>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	4a11      	ldr	r2, [pc, #68]	; (800ca3c <xTimerCreateTimerTask+0x90>)
 800c9f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c9fa:	4b10      	ldr	r3, [pc, #64]	; (800ca3c <xTimerCreateTimerTask+0x90>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d001      	beq.n	800ca06 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ca02:	2301      	movs	r3, #1
 800ca04:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d10c      	bne.n	800ca26 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800ca0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca10:	b672      	cpsid	i
 800ca12:	f383 8811 	msr	BASEPRI, r3
 800ca16:	f3bf 8f6f 	isb	sy
 800ca1a:	f3bf 8f4f 	dsb	sy
 800ca1e:	b662      	cpsie	i
 800ca20:	613b      	str	r3, [r7, #16]
}
 800ca22:	bf00      	nop
 800ca24:	e7fe      	b.n	800ca24 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800ca26:	697b      	ldr	r3, [r7, #20]
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3718      	adds	r7, #24
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}
 800ca30:	200017b8 	.word	0x200017b8
 800ca34:	0800e434 	.word	0x0800e434
 800ca38:	0800ccbd 	.word	0x0800ccbd
 800ca3c:	200017bc 	.word	0x200017bc

0800ca40 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b088      	sub	sp, #32
 800ca44:	af02      	add	r7, sp, #8
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	607a      	str	r2, [r7, #4]
 800ca4c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800ca4e:	202c      	movs	r0, #44	; 0x2c
 800ca50:	f000 fe00 	bl	800d654 <pvPortMalloc>
 800ca54:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d00d      	beq.n	800ca78 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	9301      	str	r3, [sp, #4]
 800ca68:	6a3b      	ldr	r3, [r7, #32]
 800ca6a:	9300      	str	r3, [sp, #0]
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	687a      	ldr	r2, [r7, #4]
 800ca70:	68b9      	ldr	r1, [r7, #8]
 800ca72:	68f8      	ldr	r0, [r7, #12]
 800ca74:	f000 f847 	bl	800cb06 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800ca78:	697b      	ldr	r3, [r7, #20]
	}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3718      	adds	r7, #24
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}

0800ca82 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800ca82:	b580      	push	{r7, lr}
 800ca84:	b08a      	sub	sp, #40	; 0x28
 800ca86:	af02      	add	r7, sp, #8
 800ca88:	60f8      	str	r0, [r7, #12]
 800ca8a:	60b9      	str	r1, [r7, #8]
 800ca8c:	607a      	str	r2, [r7, #4]
 800ca8e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800ca90:	232c      	movs	r3, #44	; 0x2c
 800ca92:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	2b2c      	cmp	r3, #44	; 0x2c
 800ca98:	d00c      	beq.n	800cab4 <xTimerCreateStatic+0x32>
	__asm volatile
 800ca9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9e:	b672      	cpsid	i
 800caa0:	f383 8811 	msr	BASEPRI, r3
 800caa4:	f3bf 8f6f 	isb	sy
 800caa8:	f3bf 8f4f 	dsb	sy
 800caac:	b662      	cpsie	i
 800caae:	61bb      	str	r3, [r7, #24]
}
 800cab0:	bf00      	nop
 800cab2:	e7fe      	b.n	800cab2 <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cab4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800cab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d10c      	bne.n	800cad6 <xTimerCreateStatic+0x54>
	__asm volatile
 800cabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac0:	b672      	cpsid	i
 800cac2:	f383 8811 	msr	BASEPRI, r3
 800cac6:	f3bf 8f6f 	isb	sy
 800caca:	f3bf 8f4f 	dsb	sy
 800cace:	b662      	cpsie	i
 800cad0:	617b      	str	r3, [r7, #20]
}
 800cad2:	bf00      	nop
 800cad4:	e7fe      	b.n	800cad4 <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800cad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800cada:	69fb      	ldr	r3, [r7, #28]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d00d      	beq.n	800cafc <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800cae0:	69fb      	ldr	r3, [r7, #28]
 800cae2:	2202      	movs	r2, #2
 800cae4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800cae8:	69fb      	ldr	r3, [r7, #28]
 800caea:	9301      	str	r3, [sp, #4]
 800caec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caee:	9300      	str	r3, [sp, #0]
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	687a      	ldr	r2, [r7, #4]
 800caf4:	68b9      	ldr	r1, [r7, #8]
 800caf6:	68f8      	ldr	r0, [r7, #12]
 800caf8:	f000 f805 	bl	800cb06 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800cafc:	69fb      	ldr	r3, [r7, #28]
	}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3720      	adds	r7, #32
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}

0800cb06 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800cb06:	b580      	push	{r7, lr}
 800cb08:	b086      	sub	sp, #24
 800cb0a:	af00      	add	r7, sp, #0
 800cb0c:	60f8      	str	r0, [r7, #12]
 800cb0e:	60b9      	str	r1, [r7, #8]
 800cb10:	607a      	str	r2, [r7, #4]
 800cb12:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d10c      	bne.n	800cb34 <prvInitialiseNewTimer+0x2e>
	__asm volatile
 800cb1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb1e:	b672      	cpsid	i
 800cb20:	f383 8811 	msr	BASEPRI, r3
 800cb24:	f3bf 8f6f 	isb	sy
 800cb28:	f3bf 8f4f 	dsb	sy
 800cb2c:	b662      	cpsie	i
 800cb2e:	617b      	str	r3, [r7, #20]
}
 800cb30:	bf00      	nop
 800cb32:	e7fe      	b.n	800cb32 <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800cb34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d01e      	beq.n	800cb78 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800cb3a:	f000 faf3 	bl	800d124 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800cb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb40:	68fa      	ldr	r2, [r7, #12]
 800cb42:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800cb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb46:	68ba      	ldr	r2, [r7, #8]
 800cb48:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800cb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4c:	683a      	ldr	r2, [r7, #0]
 800cb4e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800cb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb52:	6a3a      	ldr	r2, [r7, #32]
 800cb54:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800cb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb58:	3304      	adds	r3, #4
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7fe f856 	bl	800ac0c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d008      	beq.n	800cb78 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800cb66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cb6c:	f043 0304 	orr.w	r3, r3, #4
 800cb70:	b2da      	uxtb	r2, r3
 800cb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800cb78:	bf00      	nop
 800cb7a:	3718      	adds	r7, #24
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}

0800cb80 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b08a      	sub	sp, #40	; 0x28
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	60f8      	str	r0, [r7, #12]
 800cb88:	60b9      	str	r1, [r7, #8]
 800cb8a:	607a      	str	r2, [r7, #4]
 800cb8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d10c      	bne.n	800cbb2 <xTimerGenericCommand+0x32>
	__asm volatile
 800cb98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb9c:	b672      	cpsid	i
 800cb9e:	f383 8811 	msr	BASEPRI, r3
 800cba2:	f3bf 8f6f 	isb	sy
 800cba6:	f3bf 8f4f 	dsb	sy
 800cbaa:	b662      	cpsie	i
 800cbac:	623b      	str	r3, [r7, #32]
}
 800cbae:	bf00      	nop
 800cbb0:	e7fe      	b.n	800cbb0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cbb2:	4b1a      	ldr	r3, [pc, #104]	; (800cc1c <xTimerGenericCommand+0x9c>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d02a      	beq.n	800cc10 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cbc6:	68bb      	ldr	r3, [r7, #8]
 800cbc8:	2b05      	cmp	r3, #5
 800cbca:	dc18      	bgt.n	800cbfe <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cbcc:	f7ff fe0a 	bl	800c7e4 <xTaskGetSchedulerState>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	2b02      	cmp	r3, #2
 800cbd4:	d109      	bne.n	800cbea <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cbd6:	4b11      	ldr	r3, [pc, #68]	; (800cc1c <xTimerGenericCommand+0x9c>)
 800cbd8:	6818      	ldr	r0, [r3, #0]
 800cbda:	f107 0110 	add.w	r1, r7, #16
 800cbde:	2300      	movs	r3, #0
 800cbe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbe2:	f7fe f9f9 	bl	800afd8 <xQueueGenericSend>
 800cbe6:	6278      	str	r0, [r7, #36]	; 0x24
 800cbe8:	e012      	b.n	800cc10 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cbea:	4b0c      	ldr	r3, [pc, #48]	; (800cc1c <xTimerGenericCommand+0x9c>)
 800cbec:	6818      	ldr	r0, [r3, #0]
 800cbee:	f107 0110 	add.w	r1, r7, #16
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	f7fe f9ef 	bl	800afd8 <xQueueGenericSend>
 800cbfa:	6278      	str	r0, [r7, #36]	; 0x24
 800cbfc:	e008      	b.n	800cc10 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cbfe:	4b07      	ldr	r3, [pc, #28]	; (800cc1c <xTimerGenericCommand+0x9c>)
 800cc00:	6818      	ldr	r0, [r3, #0]
 800cc02:	f107 0110 	add.w	r1, r7, #16
 800cc06:	2300      	movs	r3, #0
 800cc08:	683a      	ldr	r2, [r7, #0]
 800cc0a:	f7fe faeb 	bl	800b1e4 <xQueueGenericSendFromISR>
 800cc0e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cc10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3728      	adds	r7, #40	; 0x28
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}
 800cc1a:	bf00      	nop
 800cc1c:	200017b8 	.word	0x200017b8

0800cc20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b088      	sub	sp, #32
 800cc24:	af02      	add	r7, sp, #8
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc2a:	4b23      	ldr	r3, [pc, #140]	; (800ccb8 <prvProcessExpiredTimer+0x98>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	68db      	ldr	r3, [r3, #12]
 800cc30:	68db      	ldr	r3, [r3, #12]
 800cc32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	3304      	adds	r3, #4
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f7fe f851 	bl	800ace0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc44:	f003 0304 	and.w	r3, r3, #4
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d024      	beq.n	800cc96 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	699a      	ldr	r2, [r3, #24]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	18d1      	adds	r1, r2, r3
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	683a      	ldr	r2, [r7, #0]
 800cc58:	6978      	ldr	r0, [r7, #20]
 800cc5a:	f000 f8d3 	bl	800ce04 <prvInsertTimerInActiveList>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d021      	beq.n	800cca8 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cc64:	2300      	movs	r3, #0
 800cc66:	9300      	str	r3, [sp, #0]
 800cc68:	2300      	movs	r3, #0
 800cc6a:	687a      	ldr	r2, [r7, #4]
 800cc6c:	2100      	movs	r1, #0
 800cc6e:	6978      	ldr	r0, [r7, #20]
 800cc70:	f7ff ff86 	bl	800cb80 <xTimerGenericCommand>
 800cc74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d115      	bne.n	800cca8 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800cc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc80:	b672      	cpsid	i
 800cc82:	f383 8811 	msr	BASEPRI, r3
 800cc86:	f3bf 8f6f 	isb	sy
 800cc8a:	f3bf 8f4f 	dsb	sy
 800cc8e:	b662      	cpsie	i
 800cc90:	60fb      	str	r3, [r7, #12]
}
 800cc92:	bf00      	nop
 800cc94:	e7fe      	b.n	800cc94 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc9c:	f023 0301 	bic.w	r3, r3, #1
 800cca0:	b2da      	uxtb	r2, r3
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	6a1b      	ldr	r3, [r3, #32]
 800ccac:	6978      	ldr	r0, [r7, #20]
 800ccae:	4798      	blx	r3
}
 800ccb0:	bf00      	nop
 800ccb2:	3718      	adds	r7, #24
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	200017b0 	.word	0x200017b0

0800ccbc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b084      	sub	sp, #16
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ccc4:	f107 0308 	add.w	r3, r7, #8
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f000 f857 	bl	800cd7c <prvGetNextExpireTime>
 800ccce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	4619      	mov	r1, r3
 800ccd4:	68f8      	ldr	r0, [r7, #12]
 800ccd6:	f000 f803 	bl	800cce0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ccda:	f000 f8d5 	bl	800ce88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ccde:	e7f1      	b.n	800ccc4 <prvTimerTask+0x8>

0800cce0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b084      	sub	sp, #16
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ccea:	f7ff f91d 	bl	800bf28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ccee:	f107 0308 	add.w	r3, r7, #8
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f000 f866 	bl	800cdc4 <prvSampleTimeNow>
 800ccf8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d130      	bne.n	800cd62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d10a      	bne.n	800cd1c <prvProcessTimerOrBlockTask+0x3c>
 800cd06:	687a      	ldr	r2, [r7, #4]
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d806      	bhi.n	800cd1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cd0e:	f7ff f919 	bl	800bf44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cd12:	68f9      	ldr	r1, [r7, #12]
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f7ff ff83 	bl	800cc20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cd1a:	e024      	b.n	800cd66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d008      	beq.n	800cd34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cd22:	4b13      	ldr	r3, [pc, #76]	; (800cd70 <prvProcessTimerOrBlockTask+0x90>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d101      	bne.n	800cd30 <prvProcessTimerOrBlockTask+0x50>
 800cd2c:	2301      	movs	r3, #1
 800cd2e:	e000      	b.n	800cd32 <prvProcessTimerOrBlockTask+0x52>
 800cd30:	2300      	movs	r3, #0
 800cd32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cd34:	4b0f      	ldr	r3, [pc, #60]	; (800cd74 <prvProcessTimerOrBlockTask+0x94>)
 800cd36:	6818      	ldr	r0, [r3, #0]
 800cd38:	687a      	ldr	r2, [r7, #4]
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	1ad3      	subs	r3, r2, r3
 800cd3e:	683a      	ldr	r2, [r7, #0]
 800cd40:	4619      	mov	r1, r3
 800cd42:	f7fe fd95 	bl	800b870 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cd46:	f7ff f8fd 	bl	800bf44 <xTaskResumeAll>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d10a      	bne.n	800cd66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cd50:	4b09      	ldr	r3, [pc, #36]	; (800cd78 <prvProcessTimerOrBlockTask+0x98>)
 800cd52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd56:	601a      	str	r2, [r3, #0]
 800cd58:	f3bf 8f4f 	dsb	sy
 800cd5c:	f3bf 8f6f 	isb	sy
}
 800cd60:	e001      	b.n	800cd66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cd62:	f7ff f8ef 	bl	800bf44 <xTaskResumeAll>
}
 800cd66:	bf00      	nop
 800cd68:	3710      	adds	r7, #16
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	200017b4 	.word	0x200017b4
 800cd74:	200017b8 	.word	0x200017b8
 800cd78:	e000ed04 	.word	0xe000ed04

0800cd7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b085      	sub	sp, #20
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cd84:	4b0e      	ldr	r3, [pc, #56]	; (800cdc0 <prvGetNextExpireTime+0x44>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d101      	bne.n	800cd92 <prvGetNextExpireTime+0x16>
 800cd8e:	2201      	movs	r2, #1
 800cd90:	e000      	b.n	800cd94 <prvGetNextExpireTime+0x18>
 800cd92:	2200      	movs	r2, #0
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d105      	bne.n	800cdac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cda0:	4b07      	ldr	r3, [pc, #28]	; (800cdc0 <prvGetNextExpireTime+0x44>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	68db      	ldr	r3, [r3, #12]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	60fb      	str	r3, [r7, #12]
 800cdaa:	e001      	b.n	800cdb0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cdac:	2300      	movs	r3, #0
 800cdae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3714      	adds	r7, #20
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbc:	4770      	bx	lr
 800cdbe:	bf00      	nop
 800cdc0:	200017b0 	.word	0x200017b0

0800cdc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b084      	sub	sp, #16
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cdcc:	f7ff f95a 	bl	800c084 <xTaskGetTickCount>
 800cdd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cdd2:	4b0b      	ldr	r3, [pc, #44]	; (800ce00 <prvSampleTimeNow+0x3c>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	68fa      	ldr	r2, [r7, #12]
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d205      	bcs.n	800cde8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cddc:	f000 f93c 	bl	800d058 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2201      	movs	r2, #1
 800cde4:	601a      	str	r2, [r3, #0]
 800cde6:	e002      	b.n	800cdee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2200      	movs	r2, #0
 800cdec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cdee:	4a04      	ldr	r2, [pc, #16]	; (800ce00 <prvSampleTimeNow+0x3c>)
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3710      	adds	r7, #16
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}
 800cdfe:	bf00      	nop
 800ce00:	200017c0 	.word	0x200017c0

0800ce04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b086      	sub	sp, #24
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	60f8      	str	r0, [r7, #12]
 800ce0c:	60b9      	str	r1, [r7, #8]
 800ce0e:	607a      	str	r2, [r7, #4]
 800ce10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ce12:	2300      	movs	r3, #0
 800ce14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	68ba      	ldr	r2, [r7, #8]
 800ce1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	68fa      	ldr	r2, [r7, #12]
 800ce20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ce22:	68ba      	ldr	r2, [r7, #8]
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d812      	bhi.n	800ce50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce2a:	687a      	ldr	r2, [r7, #4]
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	1ad2      	subs	r2, r2, r3
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	699b      	ldr	r3, [r3, #24]
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d302      	bcc.n	800ce3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ce38:	2301      	movs	r3, #1
 800ce3a:	617b      	str	r3, [r7, #20]
 800ce3c:	e01b      	b.n	800ce76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ce3e:	4b10      	ldr	r3, [pc, #64]	; (800ce80 <prvInsertTimerInActiveList+0x7c>)
 800ce40:	681a      	ldr	r2, [r3, #0]
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	3304      	adds	r3, #4
 800ce46:	4619      	mov	r1, r3
 800ce48:	4610      	mov	r0, r2
 800ce4a:	f7fd ff10 	bl	800ac6e <vListInsert>
 800ce4e:	e012      	b.n	800ce76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ce50:	687a      	ldr	r2, [r7, #4]
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d206      	bcs.n	800ce66 <prvInsertTimerInActiveList+0x62>
 800ce58:	68ba      	ldr	r2, [r7, #8]
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d302      	bcc.n	800ce66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ce60:	2301      	movs	r3, #1
 800ce62:	617b      	str	r3, [r7, #20]
 800ce64:	e007      	b.n	800ce76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ce66:	4b07      	ldr	r3, [pc, #28]	; (800ce84 <prvInsertTimerInActiveList+0x80>)
 800ce68:	681a      	ldr	r2, [r3, #0]
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	3304      	adds	r3, #4
 800ce6e:	4619      	mov	r1, r3
 800ce70:	4610      	mov	r0, r2
 800ce72:	f7fd fefc 	bl	800ac6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ce76:	697b      	ldr	r3, [r7, #20]
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3718      	adds	r7, #24
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}
 800ce80:	200017b4 	.word	0x200017b4
 800ce84:	200017b0 	.word	0x200017b0

0800ce88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b08e      	sub	sp, #56	; 0x38
 800ce8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ce8e:	e0d0      	b.n	800d032 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	da1a      	bge.n	800cecc <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ce96:	1d3b      	adds	r3, r7, #4
 800ce98:	3304      	adds	r3, #4
 800ce9a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ce9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d10c      	bne.n	800cebc <prvProcessReceivedCommands+0x34>
	__asm volatile
 800cea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea6:	b672      	cpsid	i
 800cea8:	f383 8811 	msr	BASEPRI, r3
 800ceac:	f3bf 8f6f 	isb	sy
 800ceb0:	f3bf 8f4f 	dsb	sy
 800ceb4:	b662      	cpsie	i
 800ceb6:	61fb      	str	r3, [r7, #28]
}
 800ceb8:	bf00      	nop
 800ceba:	e7fe      	b.n	800ceba <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cec2:	6850      	ldr	r0, [r2, #4]
 800cec4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cec6:	6892      	ldr	r2, [r2, #8]
 800cec8:	4611      	mov	r1, r2
 800ceca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	f2c0 80ae 	blt.w	800d030 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ced8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceda:	695b      	ldr	r3, [r3, #20]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d004      	beq.n	800ceea <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee2:	3304      	adds	r3, #4
 800cee4:	4618      	mov	r0, r3
 800cee6:	f7fd fefb 	bl	800ace0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ceea:	463b      	mov	r3, r7
 800ceec:	4618      	mov	r0, r3
 800ceee:	f7ff ff69 	bl	800cdc4 <prvSampleTimeNow>
 800cef2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2b09      	cmp	r3, #9
 800cef8:	f200 809b 	bhi.w	800d032 <prvProcessReceivedCommands+0x1aa>
 800cefc:	a201      	add	r2, pc, #4	; (adr r2, 800cf04 <prvProcessReceivedCommands+0x7c>)
 800cefe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf02:	bf00      	nop
 800cf04:	0800cf2d 	.word	0x0800cf2d
 800cf08:	0800cf2d 	.word	0x0800cf2d
 800cf0c:	0800cf2d 	.word	0x0800cf2d
 800cf10:	0800cfa5 	.word	0x0800cfa5
 800cf14:	0800cfb9 	.word	0x0800cfb9
 800cf18:	0800d007 	.word	0x0800d007
 800cf1c:	0800cf2d 	.word	0x0800cf2d
 800cf20:	0800cf2d 	.word	0x0800cf2d
 800cf24:	0800cfa5 	.word	0x0800cfa5
 800cf28:	0800cfb9 	.word	0x0800cfb9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cf2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf32:	f043 0301 	orr.w	r3, r3, #1
 800cf36:	b2da      	uxtb	r2, r3
 800cf38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cf3e:	68ba      	ldr	r2, [r7, #8]
 800cf40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf42:	699b      	ldr	r3, [r3, #24]
 800cf44:	18d1      	adds	r1, r2, r3
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf4c:	f7ff ff5a 	bl	800ce04 <prvInsertTimerInActiveList>
 800cf50:	4603      	mov	r3, r0
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d06d      	beq.n	800d032 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf58:	6a1b      	ldr	r3, [r3, #32]
 800cf5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf64:	f003 0304 	and.w	r3, r3, #4
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d062      	beq.n	800d032 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cf6c:	68ba      	ldr	r2, [r7, #8]
 800cf6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf70:	699b      	ldr	r3, [r3, #24]
 800cf72:	441a      	add	r2, r3
 800cf74:	2300      	movs	r3, #0
 800cf76:	9300      	str	r3, [sp, #0]
 800cf78:	2300      	movs	r3, #0
 800cf7a:	2100      	movs	r1, #0
 800cf7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf7e:	f7ff fdff 	bl	800cb80 <xTimerGenericCommand>
 800cf82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cf84:	6a3b      	ldr	r3, [r7, #32]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d153      	bne.n	800d032 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800cf8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8e:	b672      	cpsid	i
 800cf90:	f383 8811 	msr	BASEPRI, r3
 800cf94:	f3bf 8f6f 	isb	sy
 800cf98:	f3bf 8f4f 	dsb	sy
 800cf9c:	b662      	cpsie	i
 800cf9e:	61bb      	str	r3, [r7, #24]
}
 800cfa0:	bf00      	nop
 800cfa2:	e7fe      	b.n	800cfa2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfaa:	f023 0301 	bic.w	r3, r3, #1
 800cfae:	b2da      	uxtb	r2, r3
 800cfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800cfb6:	e03c      	b.n	800d032 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cfb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfbe:	f043 0301 	orr.w	r3, r3, #1
 800cfc2:	b2da      	uxtb	r2, r3
 800cfc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cfca:	68ba      	ldr	r2, [r7, #8]
 800cfcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfd2:	699b      	ldr	r3, [r3, #24]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d10c      	bne.n	800cff2 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800cfd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfdc:	b672      	cpsid	i
 800cfde:	f383 8811 	msr	BASEPRI, r3
 800cfe2:	f3bf 8f6f 	isb	sy
 800cfe6:	f3bf 8f4f 	dsb	sy
 800cfea:	b662      	cpsie	i
 800cfec:	617b      	str	r3, [r7, #20]
}
 800cfee:	bf00      	nop
 800cff0:	e7fe      	b.n	800cff0 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff4:	699a      	ldr	r2, [r3, #24]
 800cff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff8:	18d1      	adds	r1, r2, r3
 800cffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cffe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d000:	f7ff ff00 	bl	800ce04 <prvInsertTimerInActiveList>
					break;
 800d004:	e015      	b.n	800d032 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d008:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d00c:	f003 0302 	and.w	r3, r3, #2
 800d010:	2b00      	cmp	r3, #0
 800d012:	d103      	bne.n	800d01c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800d014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d016:	f000 fbed 	bl	800d7f4 <vPortFree>
 800d01a:	e00a      	b.n	800d032 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d022:	f023 0301 	bic.w	r3, r3, #1
 800d026:	b2da      	uxtb	r2, r3
 800d028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d02a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d02e:	e000      	b.n	800d032 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d030:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d032:	4b08      	ldr	r3, [pc, #32]	; (800d054 <prvProcessReceivedCommands+0x1cc>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	1d39      	adds	r1, r7, #4
 800d038:	2200      	movs	r2, #0
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7fe f972 	bl	800b324 <xQueueReceive>
 800d040:	4603      	mov	r3, r0
 800d042:	2b00      	cmp	r3, #0
 800d044:	f47f af24 	bne.w	800ce90 <prvProcessReceivedCommands+0x8>
	}
}
 800d048:	bf00      	nop
 800d04a:	bf00      	nop
 800d04c:	3730      	adds	r7, #48	; 0x30
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}
 800d052:	bf00      	nop
 800d054:	200017b8 	.word	0x200017b8

0800d058 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b088      	sub	sp, #32
 800d05c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d05e:	e04a      	b.n	800d0f6 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d060:	4b2e      	ldr	r3, [pc, #184]	; (800d11c <prvSwitchTimerLists+0xc4>)
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	68db      	ldr	r3, [r3, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d06a:	4b2c      	ldr	r3, [pc, #176]	; (800d11c <prvSwitchTimerLists+0xc4>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	68db      	ldr	r3, [r3, #12]
 800d070:	68db      	ldr	r3, [r3, #12]
 800d072:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	3304      	adds	r3, #4
 800d078:	4618      	mov	r0, r3
 800d07a:	f7fd fe31 	bl	800ace0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	6a1b      	ldr	r3, [r3, #32]
 800d082:	68f8      	ldr	r0, [r7, #12]
 800d084:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d08c:	f003 0304 	and.w	r3, r3, #4
 800d090:	2b00      	cmp	r3, #0
 800d092:	d030      	beq.n	800d0f6 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	699b      	ldr	r3, [r3, #24]
 800d098:	693a      	ldr	r2, [r7, #16]
 800d09a:	4413      	add	r3, r2
 800d09c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d09e:	68ba      	ldr	r2, [r7, #8]
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d90e      	bls.n	800d0c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	68ba      	ldr	r2, [r7, #8]
 800d0aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	68fa      	ldr	r2, [r7, #12]
 800d0b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d0b2:	4b1a      	ldr	r3, [pc, #104]	; (800d11c <prvSwitchTimerLists+0xc4>)
 800d0b4:	681a      	ldr	r2, [r3, #0]
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	3304      	adds	r3, #4
 800d0ba:	4619      	mov	r1, r3
 800d0bc:	4610      	mov	r0, r2
 800d0be:	f7fd fdd6 	bl	800ac6e <vListInsert>
 800d0c2:	e018      	b.n	800d0f6 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	9300      	str	r3, [sp, #0]
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	693a      	ldr	r2, [r7, #16]
 800d0cc:	2100      	movs	r1, #0
 800d0ce:	68f8      	ldr	r0, [r7, #12]
 800d0d0:	f7ff fd56 	bl	800cb80 <xTimerGenericCommand>
 800d0d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d10c      	bne.n	800d0f6 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800d0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e0:	b672      	cpsid	i
 800d0e2:	f383 8811 	msr	BASEPRI, r3
 800d0e6:	f3bf 8f6f 	isb	sy
 800d0ea:	f3bf 8f4f 	dsb	sy
 800d0ee:	b662      	cpsie	i
 800d0f0:	603b      	str	r3, [r7, #0]
}
 800d0f2:	bf00      	nop
 800d0f4:	e7fe      	b.n	800d0f4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d0f6:	4b09      	ldr	r3, [pc, #36]	; (800d11c <prvSwitchTimerLists+0xc4>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d1af      	bne.n	800d060 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d100:	4b06      	ldr	r3, [pc, #24]	; (800d11c <prvSwitchTimerLists+0xc4>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d106:	4b06      	ldr	r3, [pc, #24]	; (800d120 <prvSwitchTimerLists+0xc8>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	4a04      	ldr	r2, [pc, #16]	; (800d11c <prvSwitchTimerLists+0xc4>)
 800d10c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d10e:	4a04      	ldr	r2, [pc, #16]	; (800d120 <prvSwitchTimerLists+0xc8>)
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	6013      	str	r3, [r2, #0]
}
 800d114:	bf00      	nop
 800d116:	3718      	adds	r7, #24
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}
 800d11c:	200017b0 	.word	0x200017b0
 800d120:	200017b4 	.word	0x200017b4

0800d124 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b082      	sub	sp, #8
 800d128:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d12a:	f000 f967 	bl	800d3fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d12e:	4b15      	ldr	r3, [pc, #84]	; (800d184 <prvCheckForValidListAndQueue+0x60>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d120      	bne.n	800d178 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d136:	4814      	ldr	r0, [pc, #80]	; (800d188 <prvCheckForValidListAndQueue+0x64>)
 800d138:	f7fd fd48 	bl	800abcc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d13c:	4813      	ldr	r0, [pc, #76]	; (800d18c <prvCheckForValidListAndQueue+0x68>)
 800d13e:	f7fd fd45 	bl	800abcc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d142:	4b13      	ldr	r3, [pc, #76]	; (800d190 <prvCheckForValidListAndQueue+0x6c>)
 800d144:	4a10      	ldr	r2, [pc, #64]	; (800d188 <prvCheckForValidListAndQueue+0x64>)
 800d146:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d148:	4b12      	ldr	r3, [pc, #72]	; (800d194 <prvCheckForValidListAndQueue+0x70>)
 800d14a:	4a10      	ldr	r2, [pc, #64]	; (800d18c <prvCheckForValidListAndQueue+0x68>)
 800d14c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d14e:	2300      	movs	r3, #0
 800d150:	9300      	str	r3, [sp, #0]
 800d152:	4b11      	ldr	r3, [pc, #68]	; (800d198 <prvCheckForValidListAndQueue+0x74>)
 800d154:	4a11      	ldr	r2, [pc, #68]	; (800d19c <prvCheckForValidListAndQueue+0x78>)
 800d156:	2110      	movs	r1, #16
 800d158:	200a      	movs	r0, #10
 800d15a:	f7fd fe55 	bl	800ae08 <xQueueGenericCreateStatic>
 800d15e:	4603      	mov	r3, r0
 800d160:	4a08      	ldr	r2, [pc, #32]	; (800d184 <prvCheckForValidListAndQueue+0x60>)
 800d162:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d164:	4b07      	ldr	r3, [pc, #28]	; (800d184 <prvCheckForValidListAndQueue+0x60>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d005      	beq.n	800d178 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d16c:	4b05      	ldr	r3, [pc, #20]	; (800d184 <prvCheckForValidListAndQueue+0x60>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	490b      	ldr	r1, [pc, #44]	; (800d1a0 <prvCheckForValidListAndQueue+0x7c>)
 800d172:	4618      	mov	r0, r3
 800d174:	f7fe fb52 	bl	800b81c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d178:	f000 f974 	bl	800d464 <vPortExitCritical>
}
 800d17c:	bf00      	nop
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}
 800d182:	bf00      	nop
 800d184:	200017b8 	.word	0x200017b8
 800d188:	20001788 	.word	0x20001788
 800d18c:	2000179c 	.word	0x2000179c
 800d190:	200017b0 	.word	0x200017b0
 800d194:	200017b4 	.word	0x200017b4
 800d198:	20001864 	.word	0x20001864
 800d19c:	200017c4 	.word	0x200017c4
 800d1a0:	0800e43c 	.word	0x0800e43c

0800d1a4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b086      	sub	sp, #24
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d10c      	bne.n	800d1d0 <pvTimerGetTimerID+0x2c>
	__asm volatile
 800d1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ba:	b672      	cpsid	i
 800d1bc:	f383 8811 	msr	BASEPRI, r3
 800d1c0:	f3bf 8f6f 	isb	sy
 800d1c4:	f3bf 8f4f 	dsb	sy
 800d1c8:	b662      	cpsie	i
 800d1ca:	60fb      	str	r3, [r7, #12]
}
 800d1cc:	bf00      	nop
 800d1ce:	e7fe      	b.n	800d1ce <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 800d1d0:	f000 f914 	bl	800d3fc <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	69db      	ldr	r3, [r3, #28]
 800d1d8:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800d1da:	f000 f943 	bl	800d464 <vPortExitCritical>

	return pvReturn;
 800d1de:	693b      	ldr	r3, [r7, #16]
}
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3718      	adds	r7, #24
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b085      	sub	sp, #20
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	60f8      	str	r0, [r7, #12]
 800d1f0:	60b9      	str	r1, [r7, #8]
 800d1f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	3b04      	subs	r3, #4
 800d1f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d200:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	3b04      	subs	r3, #4
 800d206:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	f023 0201 	bic.w	r2, r3, #1
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	3b04      	subs	r3, #4
 800d216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d218:	4a0c      	ldr	r2, [pc, #48]	; (800d24c <pxPortInitialiseStack+0x64>)
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	3b14      	subs	r3, #20
 800d222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d224:	687a      	ldr	r2, [r7, #4]
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	3b04      	subs	r3, #4
 800d22e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	f06f 0202 	mvn.w	r2, #2
 800d236:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	3b20      	subs	r3, #32
 800d23c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d23e:	68fb      	ldr	r3, [r7, #12]
}
 800d240:	4618      	mov	r0, r3
 800d242:	3714      	adds	r7, #20
 800d244:	46bd      	mov	sp, r7
 800d246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24a:	4770      	bx	lr
 800d24c:	0800d251 	.word	0x0800d251

0800d250 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d250:	b480      	push	{r7}
 800d252:	b085      	sub	sp, #20
 800d254:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d256:	2300      	movs	r3, #0
 800d258:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d25a:	4b14      	ldr	r3, [pc, #80]	; (800d2ac <prvTaskExitError+0x5c>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d262:	d00c      	beq.n	800d27e <prvTaskExitError+0x2e>
	__asm volatile
 800d264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d268:	b672      	cpsid	i
 800d26a:	f383 8811 	msr	BASEPRI, r3
 800d26e:	f3bf 8f6f 	isb	sy
 800d272:	f3bf 8f4f 	dsb	sy
 800d276:	b662      	cpsie	i
 800d278:	60fb      	str	r3, [r7, #12]
}
 800d27a:	bf00      	nop
 800d27c:	e7fe      	b.n	800d27c <prvTaskExitError+0x2c>
	__asm volatile
 800d27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d282:	b672      	cpsid	i
 800d284:	f383 8811 	msr	BASEPRI, r3
 800d288:	f3bf 8f6f 	isb	sy
 800d28c:	f3bf 8f4f 	dsb	sy
 800d290:	b662      	cpsie	i
 800d292:	60bb      	str	r3, [r7, #8]
}
 800d294:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d296:	bf00      	nop
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d0fc      	beq.n	800d298 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d29e:	bf00      	nop
 800d2a0:	bf00      	nop
 800d2a2:	3714      	adds	r7, #20
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2aa:	4770      	bx	lr
 800d2ac:	20000050 	.word	0x20000050

0800d2b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d2b0:	4b07      	ldr	r3, [pc, #28]	; (800d2d0 <pxCurrentTCBConst2>)
 800d2b2:	6819      	ldr	r1, [r3, #0]
 800d2b4:	6808      	ldr	r0, [r1, #0]
 800d2b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2ba:	f380 8809 	msr	PSP, r0
 800d2be:	f3bf 8f6f 	isb	sy
 800d2c2:	f04f 0000 	mov.w	r0, #0
 800d2c6:	f380 8811 	msr	BASEPRI, r0
 800d2ca:	4770      	bx	lr
 800d2cc:	f3af 8000 	nop.w

0800d2d0 <pxCurrentTCBConst2>:
 800d2d0:	20001288 	.word	0x20001288
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d2d4:	bf00      	nop
 800d2d6:	bf00      	nop

0800d2d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d2d8:	4808      	ldr	r0, [pc, #32]	; (800d2fc <prvPortStartFirstTask+0x24>)
 800d2da:	6800      	ldr	r0, [r0, #0]
 800d2dc:	6800      	ldr	r0, [r0, #0]
 800d2de:	f380 8808 	msr	MSP, r0
 800d2e2:	f04f 0000 	mov.w	r0, #0
 800d2e6:	f380 8814 	msr	CONTROL, r0
 800d2ea:	b662      	cpsie	i
 800d2ec:	b661      	cpsie	f
 800d2ee:	f3bf 8f4f 	dsb	sy
 800d2f2:	f3bf 8f6f 	isb	sy
 800d2f6:	df00      	svc	0
 800d2f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d2fa:	bf00      	nop
 800d2fc:	e000ed08 	.word	0xe000ed08

0800d300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b084      	sub	sp, #16
 800d304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d306:	4b37      	ldr	r3, [pc, #220]	; (800d3e4 <xPortStartScheduler+0xe4>)
 800d308:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	b2db      	uxtb	r3, r3
 800d310:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	22ff      	movs	r2, #255	; 0xff
 800d316:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	781b      	ldrb	r3, [r3, #0]
 800d31c:	b2db      	uxtb	r3, r3
 800d31e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d320:	78fb      	ldrb	r3, [r7, #3]
 800d322:	b2db      	uxtb	r3, r3
 800d324:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d328:	b2da      	uxtb	r2, r3
 800d32a:	4b2f      	ldr	r3, [pc, #188]	; (800d3e8 <xPortStartScheduler+0xe8>)
 800d32c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d32e:	4b2f      	ldr	r3, [pc, #188]	; (800d3ec <xPortStartScheduler+0xec>)
 800d330:	2207      	movs	r2, #7
 800d332:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d334:	e009      	b.n	800d34a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d336:	4b2d      	ldr	r3, [pc, #180]	; (800d3ec <xPortStartScheduler+0xec>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	3b01      	subs	r3, #1
 800d33c:	4a2b      	ldr	r2, [pc, #172]	; (800d3ec <xPortStartScheduler+0xec>)
 800d33e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d340:	78fb      	ldrb	r3, [r7, #3]
 800d342:	b2db      	uxtb	r3, r3
 800d344:	005b      	lsls	r3, r3, #1
 800d346:	b2db      	uxtb	r3, r3
 800d348:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d34a:	78fb      	ldrb	r3, [r7, #3]
 800d34c:	b2db      	uxtb	r3, r3
 800d34e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d352:	2b80      	cmp	r3, #128	; 0x80
 800d354:	d0ef      	beq.n	800d336 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d356:	4b25      	ldr	r3, [pc, #148]	; (800d3ec <xPortStartScheduler+0xec>)
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	f1c3 0307 	rsb	r3, r3, #7
 800d35e:	2b04      	cmp	r3, #4
 800d360:	d00c      	beq.n	800d37c <xPortStartScheduler+0x7c>
	__asm volatile
 800d362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d366:	b672      	cpsid	i
 800d368:	f383 8811 	msr	BASEPRI, r3
 800d36c:	f3bf 8f6f 	isb	sy
 800d370:	f3bf 8f4f 	dsb	sy
 800d374:	b662      	cpsie	i
 800d376:	60bb      	str	r3, [r7, #8]
}
 800d378:	bf00      	nop
 800d37a:	e7fe      	b.n	800d37a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d37c:	4b1b      	ldr	r3, [pc, #108]	; (800d3ec <xPortStartScheduler+0xec>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	021b      	lsls	r3, r3, #8
 800d382:	4a1a      	ldr	r2, [pc, #104]	; (800d3ec <xPortStartScheduler+0xec>)
 800d384:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d386:	4b19      	ldr	r3, [pc, #100]	; (800d3ec <xPortStartScheduler+0xec>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d38e:	4a17      	ldr	r2, [pc, #92]	; (800d3ec <xPortStartScheduler+0xec>)
 800d390:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	b2da      	uxtb	r2, r3
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d39a:	4b15      	ldr	r3, [pc, #84]	; (800d3f0 <xPortStartScheduler+0xf0>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	4a14      	ldr	r2, [pc, #80]	; (800d3f0 <xPortStartScheduler+0xf0>)
 800d3a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d3a4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d3a6:	4b12      	ldr	r3, [pc, #72]	; (800d3f0 <xPortStartScheduler+0xf0>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	4a11      	ldr	r2, [pc, #68]	; (800d3f0 <xPortStartScheduler+0xf0>)
 800d3ac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d3b0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d3b2:	f000 f8dd 	bl	800d570 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d3b6:	4b0f      	ldr	r3, [pc, #60]	; (800d3f4 <xPortStartScheduler+0xf4>)
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d3bc:	f000 f8fc 	bl	800d5b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d3c0:	4b0d      	ldr	r3, [pc, #52]	; (800d3f8 <xPortStartScheduler+0xf8>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4a0c      	ldr	r2, [pc, #48]	; (800d3f8 <xPortStartScheduler+0xf8>)
 800d3c6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d3ca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d3cc:	f7ff ff84 	bl	800d2d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d3d0:	f7fe ff30 	bl	800c234 <vTaskSwitchContext>
	prvTaskExitError();
 800d3d4:	f7ff ff3c 	bl	800d250 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d3d8:	2300      	movs	r3, #0
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3710      	adds	r7, #16
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
 800d3e2:	bf00      	nop
 800d3e4:	e000e400 	.word	0xe000e400
 800d3e8:	200018b4 	.word	0x200018b4
 800d3ec:	200018b8 	.word	0x200018b8
 800d3f0:	e000ed20 	.word	0xe000ed20
 800d3f4:	20000050 	.word	0x20000050
 800d3f8:	e000ef34 	.word	0xe000ef34

0800d3fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b083      	sub	sp, #12
 800d400:	af00      	add	r7, sp, #0
	__asm volatile
 800d402:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d406:	b672      	cpsid	i
 800d408:	f383 8811 	msr	BASEPRI, r3
 800d40c:	f3bf 8f6f 	isb	sy
 800d410:	f3bf 8f4f 	dsb	sy
 800d414:	b662      	cpsie	i
 800d416:	607b      	str	r3, [r7, #4]
}
 800d418:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d41a:	4b10      	ldr	r3, [pc, #64]	; (800d45c <vPortEnterCritical+0x60>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	3301      	adds	r3, #1
 800d420:	4a0e      	ldr	r2, [pc, #56]	; (800d45c <vPortEnterCritical+0x60>)
 800d422:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d424:	4b0d      	ldr	r3, [pc, #52]	; (800d45c <vPortEnterCritical+0x60>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	2b01      	cmp	r3, #1
 800d42a:	d111      	bne.n	800d450 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d42c:	4b0c      	ldr	r3, [pc, #48]	; (800d460 <vPortEnterCritical+0x64>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	b2db      	uxtb	r3, r3
 800d432:	2b00      	cmp	r3, #0
 800d434:	d00c      	beq.n	800d450 <vPortEnterCritical+0x54>
	__asm volatile
 800d436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d43a:	b672      	cpsid	i
 800d43c:	f383 8811 	msr	BASEPRI, r3
 800d440:	f3bf 8f6f 	isb	sy
 800d444:	f3bf 8f4f 	dsb	sy
 800d448:	b662      	cpsie	i
 800d44a:	603b      	str	r3, [r7, #0]
}
 800d44c:	bf00      	nop
 800d44e:	e7fe      	b.n	800d44e <vPortEnterCritical+0x52>
	}
}
 800d450:	bf00      	nop
 800d452:	370c      	adds	r7, #12
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr
 800d45c:	20000050 	.word	0x20000050
 800d460:	e000ed04 	.word	0xe000ed04

0800d464 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d464:	b480      	push	{r7}
 800d466:	b083      	sub	sp, #12
 800d468:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d46a:	4b13      	ldr	r3, [pc, #76]	; (800d4b8 <vPortExitCritical+0x54>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d10c      	bne.n	800d48c <vPortExitCritical+0x28>
	__asm volatile
 800d472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d476:	b672      	cpsid	i
 800d478:	f383 8811 	msr	BASEPRI, r3
 800d47c:	f3bf 8f6f 	isb	sy
 800d480:	f3bf 8f4f 	dsb	sy
 800d484:	b662      	cpsie	i
 800d486:	607b      	str	r3, [r7, #4]
}
 800d488:	bf00      	nop
 800d48a:	e7fe      	b.n	800d48a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d48c:	4b0a      	ldr	r3, [pc, #40]	; (800d4b8 <vPortExitCritical+0x54>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	3b01      	subs	r3, #1
 800d492:	4a09      	ldr	r2, [pc, #36]	; (800d4b8 <vPortExitCritical+0x54>)
 800d494:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d496:	4b08      	ldr	r3, [pc, #32]	; (800d4b8 <vPortExitCritical+0x54>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d105      	bne.n	800d4aa <vPortExitCritical+0x46>
 800d49e:	2300      	movs	r3, #0
 800d4a0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	f383 8811 	msr	BASEPRI, r3
}
 800d4a8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d4aa:	bf00      	nop
 800d4ac:	370c      	adds	r7, #12
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b4:	4770      	bx	lr
 800d4b6:	bf00      	nop
 800d4b8:	20000050 	.word	0x20000050
 800d4bc:	00000000 	.word	0x00000000

0800d4c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d4c0:	f3ef 8009 	mrs	r0, PSP
 800d4c4:	f3bf 8f6f 	isb	sy
 800d4c8:	4b15      	ldr	r3, [pc, #84]	; (800d520 <pxCurrentTCBConst>)
 800d4ca:	681a      	ldr	r2, [r3, #0]
 800d4cc:	f01e 0f10 	tst.w	lr, #16
 800d4d0:	bf08      	it	eq
 800d4d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d4d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4da:	6010      	str	r0, [r2, #0]
 800d4dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d4e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d4e4:	b672      	cpsid	i
 800d4e6:	f380 8811 	msr	BASEPRI, r0
 800d4ea:	f3bf 8f4f 	dsb	sy
 800d4ee:	f3bf 8f6f 	isb	sy
 800d4f2:	b662      	cpsie	i
 800d4f4:	f7fe fe9e 	bl	800c234 <vTaskSwitchContext>
 800d4f8:	f04f 0000 	mov.w	r0, #0
 800d4fc:	f380 8811 	msr	BASEPRI, r0
 800d500:	bc09      	pop	{r0, r3}
 800d502:	6819      	ldr	r1, [r3, #0]
 800d504:	6808      	ldr	r0, [r1, #0]
 800d506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d50a:	f01e 0f10 	tst.w	lr, #16
 800d50e:	bf08      	it	eq
 800d510:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d514:	f380 8809 	msr	PSP, r0
 800d518:	f3bf 8f6f 	isb	sy
 800d51c:	4770      	bx	lr
 800d51e:	bf00      	nop

0800d520 <pxCurrentTCBConst>:
 800d520:	20001288 	.word	0x20001288
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d524:	bf00      	nop
 800d526:	bf00      	nop

0800d528 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af00      	add	r7, sp, #0
	__asm volatile
 800d52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d532:	b672      	cpsid	i
 800d534:	f383 8811 	msr	BASEPRI, r3
 800d538:	f3bf 8f6f 	isb	sy
 800d53c:	f3bf 8f4f 	dsb	sy
 800d540:	b662      	cpsie	i
 800d542:	607b      	str	r3, [r7, #4]
}
 800d544:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d546:	f7fe fdb9 	bl	800c0bc <xTaskIncrementTick>
 800d54a:	4603      	mov	r3, r0
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d003      	beq.n	800d558 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d550:	4b06      	ldr	r3, [pc, #24]	; (800d56c <SysTick_Handler+0x44>)
 800d552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d556:	601a      	str	r2, [r3, #0]
 800d558:	2300      	movs	r3, #0
 800d55a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	f383 8811 	msr	BASEPRI, r3
}
 800d562:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d564:	bf00      	nop
 800d566:	3708      	adds	r7, #8
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}
 800d56c:	e000ed04 	.word	0xe000ed04

0800d570 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d570:	b480      	push	{r7}
 800d572:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d574:	4b0b      	ldr	r3, [pc, #44]	; (800d5a4 <vPortSetupTimerInterrupt+0x34>)
 800d576:	2200      	movs	r2, #0
 800d578:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d57a:	4b0b      	ldr	r3, [pc, #44]	; (800d5a8 <vPortSetupTimerInterrupt+0x38>)
 800d57c:	2200      	movs	r2, #0
 800d57e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d580:	4b0a      	ldr	r3, [pc, #40]	; (800d5ac <vPortSetupTimerInterrupt+0x3c>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	4a0a      	ldr	r2, [pc, #40]	; (800d5b0 <vPortSetupTimerInterrupt+0x40>)
 800d586:	fba2 2303 	umull	r2, r3, r2, r3
 800d58a:	099b      	lsrs	r3, r3, #6
 800d58c:	4a09      	ldr	r2, [pc, #36]	; (800d5b4 <vPortSetupTimerInterrupt+0x44>)
 800d58e:	3b01      	subs	r3, #1
 800d590:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d592:	4b04      	ldr	r3, [pc, #16]	; (800d5a4 <vPortSetupTimerInterrupt+0x34>)
 800d594:	2207      	movs	r2, #7
 800d596:	601a      	str	r2, [r3, #0]
}
 800d598:	bf00      	nop
 800d59a:	46bd      	mov	sp, r7
 800d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a0:	4770      	bx	lr
 800d5a2:	bf00      	nop
 800d5a4:	e000e010 	.word	0xe000e010
 800d5a8:	e000e018 	.word	0xe000e018
 800d5ac:	20000008 	.word	0x20000008
 800d5b0:	10624dd3 	.word	0x10624dd3
 800d5b4:	e000e014 	.word	0xe000e014

0800d5b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d5b8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d5c8 <vPortEnableVFP+0x10>
 800d5bc:	6801      	ldr	r1, [r0, #0]
 800d5be:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d5c2:	6001      	str	r1, [r0, #0]
 800d5c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d5c6:	bf00      	nop
 800d5c8:	e000ed88 	.word	0xe000ed88

0800d5cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b085      	sub	sp, #20
 800d5d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d5d2:	f3ef 8305 	mrs	r3, IPSR
 800d5d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	2b0f      	cmp	r3, #15
 800d5dc:	d916      	bls.n	800d60c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d5de:	4a19      	ldr	r2, [pc, #100]	; (800d644 <vPortValidateInterruptPriority+0x78>)
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	4413      	add	r3, r2
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d5e8:	4b17      	ldr	r3, [pc, #92]	; (800d648 <vPortValidateInterruptPriority+0x7c>)
 800d5ea:	781b      	ldrb	r3, [r3, #0]
 800d5ec:	7afa      	ldrb	r2, [r7, #11]
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	d20c      	bcs.n	800d60c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800d5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f6:	b672      	cpsid	i
 800d5f8:	f383 8811 	msr	BASEPRI, r3
 800d5fc:	f3bf 8f6f 	isb	sy
 800d600:	f3bf 8f4f 	dsb	sy
 800d604:	b662      	cpsie	i
 800d606:	607b      	str	r3, [r7, #4]
}
 800d608:	bf00      	nop
 800d60a:	e7fe      	b.n	800d60a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d60c:	4b0f      	ldr	r3, [pc, #60]	; (800d64c <vPortValidateInterruptPriority+0x80>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d614:	4b0e      	ldr	r3, [pc, #56]	; (800d650 <vPortValidateInterruptPriority+0x84>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	429a      	cmp	r2, r3
 800d61a:	d90c      	bls.n	800d636 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800d61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d620:	b672      	cpsid	i
 800d622:	f383 8811 	msr	BASEPRI, r3
 800d626:	f3bf 8f6f 	isb	sy
 800d62a:	f3bf 8f4f 	dsb	sy
 800d62e:	b662      	cpsie	i
 800d630:	603b      	str	r3, [r7, #0]
}
 800d632:	bf00      	nop
 800d634:	e7fe      	b.n	800d634 <vPortValidateInterruptPriority+0x68>
	}
 800d636:	bf00      	nop
 800d638:	3714      	adds	r7, #20
 800d63a:	46bd      	mov	sp, r7
 800d63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d640:	4770      	bx	lr
 800d642:	bf00      	nop
 800d644:	e000e3f0 	.word	0xe000e3f0
 800d648:	200018b4 	.word	0x200018b4
 800d64c:	e000ed0c 	.word	0xe000ed0c
 800d650:	200018b8 	.word	0x200018b8

0800d654 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b08a      	sub	sp, #40	; 0x28
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d65c:	2300      	movs	r3, #0
 800d65e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d660:	f7fe fc62 	bl	800bf28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d664:	4b5e      	ldr	r3, [pc, #376]	; (800d7e0 <pvPortMalloc+0x18c>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d101      	bne.n	800d670 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d66c:	f000 f920 	bl	800d8b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d670:	4b5c      	ldr	r3, [pc, #368]	; (800d7e4 <pvPortMalloc+0x190>)
 800d672:	681a      	ldr	r2, [r3, #0]
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	4013      	ands	r3, r2
 800d678:	2b00      	cmp	r3, #0
 800d67a:	f040 8092 	bne.w	800d7a2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d01f      	beq.n	800d6c4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800d684:	2208      	movs	r2, #8
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	4413      	add	r3, r2
 800d68a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f003 0307 	and.w	r3, r3, #7
 800d692:	2b00      	cmp	r3, #0
 800d694:	d016      	beq.n	800d6c4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	f023 0307 	bic.w	r3, r3, #7
 800d69c:	3308      	adds	r3, #8
 800d69e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f003 0307 	and.w	r3, r3, #7
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d00c      	beq.n	800d6c4 <pvPortMalloc+0x70>
	__asm volatile
 800d6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ae:	b672      	cpsid	i
 800d6b0:	f383 8811 	msr	BASEPRI, r3
 800d6b4:	f3bf 8f6f 	isb	sy
 800d6b8:	f3bf 8f4f 	dsb	sy
 800d6bc:	b662      	cpsie	i
 800d6be:	617b      	str	r3, [r7, #20]
}
 800d6c0:	bf00      	nop
 800d6c2:	e7fe      	b.n	800d6c2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d06b      	beq.n	800d7a2 <pvPortMalloc+0x14e>
 800d6ca:	4b47      	ldr	r3, [pc, #284]	; (800d7e8 <pvPortMalloc+0x194>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	687a      	ldr	r2, [r7, #4]
 800d6d0:	429a      	cmp	r2, r3
 800d6d2:	d866      	bhi.n	800d7a2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d6d4:	4b45      	ldr	r3, [pc, #276]	; (800d7ec <pvPortMalloc+0x198>)
 800d6d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d6d8:	4b44      	ldr	r3, [pc, #272]	; (800d7ec <pvPortMalloc+0x198>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d6de:	e004      	b.n	800d6ea <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800d6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ec:	685b      	ldr	r3, [r3, #4]
 800d6ee:	687a      	ldr	r2, [r7, #4]
 800d6f0:	429a      	cmp	r2, r3
 800d6f2:	d903      	bls.n	800d6fc <pvPortMalloc+0xa8>
 800d6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d1f1      	bne.n	800d6e0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d6fc:	4b38      	ldr	r3, [pc, #224]	; (800d7e0 <pvPortMalloc+0x18c>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d702:	429a      	cmp	r2, r3
 800d704:	d04d      	beq.n	800d7a2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d706:	6a3b      	ldr	r3, [r7, #32]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	2208      	movs	r2, #8
 800d70c:	4413      	add	r3, r2
 800d70e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d712:	681a      	ldr	r2, [r3, #0]
 800d714:	6a3b      	ldr	r3, [r7, #32]
 800d716:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d71a:	685a      	ldr	r2, [r3, #4]
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	1ad2      	subs	r2, r2, r3
 800d720:	2308      	movs	r3, #8
 800d722:	005b      	lsls	r3, r3, #1
 800d724:	429a      	cmp	r2, r3
 800d726:	d921      	bls.n	800d76c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	4413      	add	r3, r2
 800d72e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	f003 0307 	and.w	r3, r3, #7
 800d736:	2b00      	cmp	r3, #0
 800d738:	d00c      	beq.n	800d754 <pvPortMalloc+0x100>
	__asm volatile
 800d73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d73e:	b672      	cpsid	i
 800d740:	f383 8811 	msr	BASEPRI, r3
 800d744:	f3bf 8f6f 	isb	sy
 800d748:	f3bf 8f4f 	dsb	sy
 800d74c:	b662      	cpsie	i
 800d74e:	613b      	str	r3, [r7, #16]
}
 800d750:	bf00      	nop
 800d752:	e7fe      	b.n	800d752 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d756:	685a      	ldr	r2, [r3, #4]
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	1ad2      	subs	r2, r2, r3
 800d75c:	69bb      	ldr	r3, [r7, #24]
 800d75e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d762:	687a      	ldr	r2, [r7, #4]
 800d764:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d766:	69b8      	ldr	r0, [r7, #24]
 800d768:	f000 f904 	bl	800d974 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d76c:	4b1e      	ldr	r3, [pc, #120]	; (800d7e8 <pvPortMalloc+0x194>)
 800d76e:	681a      	ldr	r2, [r3, #0]
 800d770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	1ad3      	subs	r3, r2, r3
 800d776:	4a1c      	ldr	r2, [pc, #112]	; (800d7e8 <pvPortMalloc+0x194>)
 800d778:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d77a:	4b1b      	ldr	r3, [pc, #108]	; (800d7e8 <pvPortMalloc+0x194>)
 800d77c:	681a      	ldr	r2, [r3, #0]
 800d77e:	4b1c      	ldr	r3, [pc, #112]	; (800d7f0 <pvPortMalloc+0x19c>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	429a      	cmp	r2, r3
 800d784:	d203      	bcs.n	800d78e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d786:	4b18      	ldr	r3, [pc, #96]	; (800d7e8 <pvPortMalloc+0x194>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	4a19      	ldr	r2, [pc, #100]	; (800d7f0 <pvPortMalloc+0x19c>)
 800d78c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d790:	685a      	ldr	r2, [r3, #4]
 800d792:	4b14      	ldr	r3, [pc, #80]	; (800d7e4 <pvPortMalloc+0x190>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	431a      	orrs	r2, r3
 800d798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d79e:	2200      	movs	r2, #0
 800d7a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d7a2:	f7fe fbcf 	bl	800bf44 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800d7a6:	69fb      	ldr	r3, [r7, #28]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d101      	bne.n	800d7b0 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800d7ac:	f7f2 ff34 	bl	8000618 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d7b0:	69fb      	ldr	r3, [r7, #28]
 800d7b2:	f003 0307 	and.w	r3, r3, #7
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d00c      	beq.n	800d7d4 <pvPortMalloc+0x180>
	__asm volatile
 800d7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7be:	b672      	cpsid	i
 800d7c0:	f383 8811 	msr	BASEPRI, r3
 800d7c4:	f3bf 8f6f 	isb	sy
 800d7c8:	f3bf 8f4f 	dsb	sy
 800d7cc:	b662      	cpsie	i
 800d7ce:	60fb      	str	r3, [r7, #12]
}
 800d7d0:	bf00      	nop
 800d7d2:	e7fe      	b.n	800d7d2 <pvPortMalloc+0x17e>
	return pvReturn;
 800d7d4:	69fb      	ldr	r3, [r7, #28]
}
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	3728      	adds	r7, #40	; 0x28
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}
 800d7de:	bf00      	nop
 800d7e0:	200098c4 	.word	0x200098c4
 800d7e4:	200098d0 	.word	0x200098d0
 800d7e8:	200098c8 	.word	0x200098c8
 800d7ec:	200098bc 	.word	0x200098bc
 800d7f0:	200098cc 	.word	0x200098cc

0800d7f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b086      	sub	sp, #24
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d04c      	beq.n	800d8a0 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d806:	2308      	movs	r3, #8
 800d808:	425b      	negs	r3, r3
 800d80a:	697a      	ldr	r2, [r7, #20]
 800d80c:	4413      	add	r3, r2
 800d80e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d810:	697b      	ldr	r3, [r7, #20]
 800d812:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d814:	693b      	ldr	r3, [r7, #16]
 800d816:	685a      	ldr	r2, [r3, #4]
 800d818:	4b23      	ldr	r3, [pc, #140]	; (800d8a8 <vPortFree+0xb4>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	4013      	ands	r3, r2
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d10c      	bne.n	800d83c <vPortFree+0x48>
	__asm volatile
 800d822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d826:	b672      	cpsid	i
 800d828:	f383 8811 	msr	BASEPRI, r3
 800d82c:	f3bf 8f6f 	isb	sy
 800d830:	f3bf 8f4f 	dsb	sy
 800d834:	b662      	cpsie	i
 800d836:	60fb      	str	r3, [r7, #12]
}
 800d838:	bf00      	nop
 800d83a:	e7fe      	b.n	800d83a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d00c      	beq.n	800d85e <vPortFree+0x6a>
	__asm volatile
 800d844:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d848:	b672      	cpsid	i
 800d84a:	f383 8811 	msr	BASEPRI, r3
 800d84e:	f3bf 8f6f 	isb	sy
 800d852:	f3bf 8f4f 	dsb	sy
 800d856:	b662      	cpsie	i
 800d858:	60bb      	str	r3, [r7, #8]
}
 800d85a:	bf00      	nop
 800d85c:	e7fe      	b.n	800d85c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d85e:	693b      	ldr	r3, [r7, #16]
 800d860:	685a      	ldr	r2, [r3, #4]
 800d862:	4b11      	ldr	r3, [pc, #68]	; (800d8a8 <vPortFree+0xb4>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	4013      	ands	r3, r2
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d019      	beq.n	800d8a0 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d86c:	693b      	ldr	r3, [r7, #16]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d115      	bne.n	800d8a0 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	685a      	ldr	r2, [r3, #4]
 800d878:	4b0b      	ldr	r3, [pc, #44]	; (800d8a8 <vPortFree+0xb4>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	43db      	mvns	r3, r3
 800d87e:	401a      	ands	r2, r3
 800d880:	693b      	ldr	r3, [r7, #16]
 800d882:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d884:	f7fe fb50 	bl	800bf28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d888:	693b      	ldr	r3, [r7, #16]
 800d88a:	685a      	ldr	r2, [r3, #4]
 800d88c:	4b07      	ldr	r3, [pc, #28]	; (800d8ac <vPortFree+0xb8>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	4413      	add	r3, r2
 800d892:	4a06      	ldr	r2, [pc, #24]	; (800d8ac <vPortFree+0xb8>)
 800d894:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d896:	6938      	ldr	r0, [r7, #16]
 800d898:	f000 f86c 	bl	800d974 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d89c:	f7fe fb52 	bl	800bf44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d8a0:	bf00      	nop
 800d8a2:	3718      	adds	r7, #24
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}
 800d8a8:	200098d0 	.word	0x200098d0
 800d8ac:	200098c8 	.word	0x200098c8

0800d8b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b085      	sub	sp, #20
 800d8b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d8b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d8ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d8bc:	4b27      	ldr	r3, [pc, #156]	; (800d95c <prvHeapInit+0xac>)
 800d8be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	f003 0307 	and.w	r3, r3, #7
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d00c      	beq.n	800d8e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	3307      	adds	r3, #7
 800d8ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	f023 0307 	bic.w	r3, r3, #7
 800d8d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d8d8:	68ba      	ldr	r2, [r7, #8]
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	1ad3      	subs	r3, r2, r3
 800d8de:	4a1f      	ldr	r2, [pc, #124]	; (800d95c <prvHeapInit+0xac>)
 800d8e0:	4413      	add	r3, r2
 800d8e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d8e8:	4a1d      	ldr	r2, [pc, #116]	; (800d960 <prvHeapInit+0xb0>)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d8ee:	4b1c      	ldr	r3, [pc, #112]	; (800d960 <prvHeapInit+0xb0>)
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	68ba      	ldr	r2, [r7, #8]
 800d8f8:	4413      	add	r3, r2
 800d8fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d8fc:	2208      	movs	r2, #8
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	1a9b      	subs	r3, r3, r2
 800d902:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	f023 0307 	bic.w	r3, r3, #7
 800d90a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	4a15      	ldr	r2, [pc, #84]	; (800d964 <prvHeapInit+0xb4>)
 800d910:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d912:	4b14      	ldr	r3, [pc, #80]	; (800d964 <prvHeapInit+0xb4>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	2200      	movs	r2, #0
 800d918:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d91a:	4b12      	ldr	r3, [pc, #72]	; (800d964 <prvHeapInit+0xb4>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	2200      	movs	r2, #0
 800d920:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	68fa      	ldr	r2, [r7, #12]
 800d92a:	1ad2      	subs	r2, r2, r3
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d930:	4b0c      	ldr	r3, [pc, #48]	; (800d964 <prvHeapInit+0xb4>)
 800d932:	681a      	ldr	r2, [r3, #0]
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	685b      	ldr	r3, [r3, #4]
 800d93c:	4a0a      	ldr	r2, [pc, #40]	; (800d968 <prvHeapInit+0xb8>)
 800d93e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	685b      	ldr	r3, [r3, #4]
 800d944:	4a09      	ldr	r2, [pc, #36]	; (800d96c <prvHeapInit+0xbc>)
 800d946:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d948:	4b09      	ldr	r3, [pc, #36]	; (800d970 <prvHeapInit+0xc0>)
 800d94a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d94e:	601a      	str	r2, [r3, #0]
}
 800d950:	bf00      	nop
 800d952:	3714      	adds	r7, #20
 800d954:	46bd      	mov	sp, r7
 800d956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95a:	4770      	bx	lr
 800d95c:	200018bc 	.word	0x200018bc
 800d960:	200098bc 	.word	0x200098bc
 800d964:	200098c4 	.word	0x200098c4
 800d968:	200098cc 	.word	0x200098cc
 800d96c:	200098c8 	.word	0x200098c8
 800d970:	200098d0 	.word	0x200098d0

0800d974 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d974:	b480      	push	{r7}
 800d976:	b085      	sub	sp, #20
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d97c:	4b28      	ldr	r3, [pc, #160]	; (800da20 <prvInsertBlockIntoFreeList+0xac>)
 800d97e:	60fb      	str	r3, [r7, #12]
 800d980:	e002      	b.n	800d988 <prvInsertBlockIntoFreeList+0x14>
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	60fb      	str	r3, [r7, #12]
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	687a      	ldr	r2, [r7, #4]
 800d98e:	429a      	cmp	r2, r3
 800d990:	d8f7      	bhi.n	800d982 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	685b      	ldr	r3, [r3, #4]
 800d99a:	68ba      	ldr	r2, [r7, #8]
 800d99c:	4413      	add	r3, r2
 800d99e:	687a      	ldr	r2, [r7, #4]
 800d9a0:	429a      	cmp	r2, r3
 800d9a2:	d108      	bne.n	800d9b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	685a      	ldr	r2, [r3, #4]
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	685b      	ldr	r3, [r3, #4]
 800d9ac:	441a      	add	r2, r3
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	685b      	ldr	r3, [r3, #4]
 800d9be:	68ba      	ldr	r2, [r7, #8]
 800d9c0:	441a      	add	r2, r3
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	d118      	bne.n	800d9fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	681a      	ldr	r2, [r3, #0]
 800d9ce:	4b15      	ldr	r3, [pc, #84]	; (800da24 <prvInsertBlockIntoFreeList+0xb0>)
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	d00d      	beq.n	800d9f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	685a      	ldr	r2, [r3, #4]
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	685b      	ldr	r3, [r3, #4]
 800d9e0:	441a      	add	r2, r3
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	681a      	ldr	r2, [r3, #0]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	601a      	str	r2, [r3, #0]
 800d9f0:	e008      	b.n	800da04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d9f2:	4b0c      	ldr	r3, [pc, #48]	; (800da24 <prvInsertBlockIntoFreeList+0xb0>)
 800d9f4:	681a      	ldr	r2, [r3, #0]
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	601a      	str	r2, [r3, #0]
 800d9fa:	e003      	b.n	800da04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	681a      	ldr	r2, [r3, #0]
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800da04:	68fa      	ldr	r2, [r7, #12]
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	429a      	cmp	r2, r3
 800da0a:	d002      	beq.n	800da12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	687a      	ldr	r2, [r7, #4]
 800da10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da12:	bf00      	nop
 800da14:	3714      	adds	r7, #20
 800da16:	46bd      	mov	sp, r7
 800da18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1c:	4770      	bx	lr
 800da1e:	bf00      	nop
 800da20:	200098bc 	.word	0x200098bc
 800da24:	200098c4 	.word	0x200098c4

0800da28 <__errno>:
 800da28:	4b01      	ldr	r3, [pc, #4]	; (800da30 <__errno+0x8>)
 800da2a:	6818      	ldr	r0, [r3, #0]
 800da2c:	4770      	bx	lr
 800da2e:	bf00      	nop
 800da30:	20000054 	.word	0x20000054

0800da34 <__libc_init_array>:
 800da34:	b570      	push	{r4, r5, r6, lr}
 800da36:	4d0d      	ldr	r5, [pc, #52]	; (800da6c <__libc_init_array+0x38>)
 800da38:	4c0d      	ldr	r4, [pc, #52]	; (800da70 <__libc_init_array+0x3c>)
 800da3a:	1b64      	subs	r4, r4, r5
 800da3c:	10a4      	asrs	r4, r4, #2
 800da3e:	2600      	movs	r6, #0
 800da40:	42a6      	cmp	r6, r4
 800da42:	d109      	bne.n	800da58 <__libc_init_array+0x24>
 800da44:	4d0b      	ldr	r5, [pc, #44]	; (800da74 <__libc_init_array+0x40>)
 800da46:	4c0c      	ldr	r4, [pc, #48]	; (800da78 <__libc_init_array+0x44>)
 800da48:	f000 fc96 	bl	800e378 <_init>
 800da4c:	1b64      	subs	r4, r4, r5
 800da4e:	10a4      	asrs	r4, r4, #2
 800da50:	2600      	movs	r6, #0
 800da52:	42a6      	cmp	r6, r4
 800da54:	d105      	bne.n	800da62 <__libc_init_array+0x2e>
 800da56:	bd70      	pop	{r4, r5, r6, pc}
 800da58:	f855 3b04 	ldr.w	r3, [r5], #4
 800da5c:	4798      	blx	r3
 800da5e:	3601      	adds	r6, #1
 800da60:	e7ee      	b.n	800da40 <__libc_init_array+0xc>
 800da62:	f855 3b04 	ldr.w	r3, [r5], #4
 800da66:	4798      	blx	r3
 800da68:	3601      	adds	r6, #1
 800da6a:	e7f2      	b.n	800da52 <__libc_init_array+0x1e>
 800da6c:	080101fc 	.word	0x080101fc
 800da70:	080101fc 	.word	0x080101fc
 800da74:	080101fc 	.word	0x080101fc
 800da78:	08010200 	.word	0x08010200

0800da7c <malloc>:
 800da7c:	4b02      	ldr	r3, [pc, #8]	; (800da88 <malloc+0xc>)
 800da7e:	4601      	mov	r1, r0
 800da80:	6818      	ldr	r0, [r3, #0]
 800da82:	f000 b885 	b.w	800db90 <_malloc_r>
 800da86:	bf00      	nop
 800da88:	20000054 	.word	0x20000054

0800da8c <memcpy>:
 800da8c:	440a      	add	r2, r1
 800da8e:	4291      	cmp	r1, r2
 800da90:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800da94:	d100      	bne.n	800da98 <memcpy+0xc>
 800da96:	4770      	bx	lr
 800da98:	b510      	push	{r4, lr}
 800da9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800daa2:	4291      	cmp	r1, r2
 800daa4:	d1f9      	bne.n	800da9a <memcpy+0xe>
 800daa6:	bd10      	pop	{r4, pc}

0800daa8 <memset>:
 800daa8:	4402      	add	r2, r0
 800daaa:	4603      	mov	r3, r0
 800daac:	4293      	cmp	r3, r2
 800daae:	d100      	bne.n	800dab2 <memset+0xa>
 800dab0:	4770      	bx	lr
 800dab2:	f803 1b01 	strb.w	r1, [r3], #1
 800dab6:	e7f9      	b.n	800daac <memset+0x4>

0800dab8 <_free_r>:
 800dab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800daba:	2900      	cmp	r1, #0
 800dabc:	d044      	beq.n	800db48 <_free_r+0x90>
 800dabe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dac2:	9001      	str	r0, [sp, #4]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	f1a1 0404 	sub.w	r4, r1, #4
 800daca:	bfb8      	it	lt
 800dacc:	18e4      	addlt	r4, r4, r3
 800dace:	f000 f903 	bl	800dcd8 <__malloc_lock>
 800dad2:	4a1e      	ldr	r2, [pc, #120]	; (800db4c <_free_r+0x94>)
 800dad4:	9801      	ldr	r0, [sp, #4]
 800dad6:	6813      	ldr	r3, [r2, #0]
 800dad8:	b933      	cbnz	r3, 800dae8 <_free_r+0x30>
 800dada:	6063      	str	r3, [r4, #4]
 800dadc:	6014      	str	r4, [r2, #0]
 800dade:	b003      	add	sp, #12
 800dae0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dae4:	f000 b8fe 	b.w	800dce4 <__malloc_unlock>
 800dae8:	42a3      	cmp	r3, r4
 800daea:	d908      	bls.n	800dafe <_free_r+0x46>
 800daec:	6825      	ldr	r5, [r4, #0]
 800daee:	1961      	adds	r1, r4, r5
 800daf0:	428b      	cmp	r3, r1
 800daf2:	bf01      	itttt	eq
 800daf4:	6819      	ldreq	r1, [r3, #0]
 800daf6:	685b      	ldreq	r3, [r3, #4]
 800daf8:	1949      	addeq	r1, r1, r5
 800dafa:	6021      	streq	r1, [r4, #0]
 800dafc:	e7ed      	b.n	800dada <_free_r+0x22>
 800dafe:	461a      	mov	r2, r3
 800db00:	685b      	ldr	r3, [r3, #4]
 800db02:	b10b      	cbz	r3, 800db08 <_free_r+0x50>
 800db04:	42a3      	cmp	r3, r4
 800db06:	d9fa      	bls.n	800dafe <_free_r+0x46>
 800db08:	6811      	ldr	r1, [r2, #0]
 800db0a:	1855      	adds	r5, r2, r1
 800db0c:	42a5      	cmp	r5, r4
 800db0e:	d10b      	bne.n	800db28 <_free_r+0x70>
 800db10:	6824      	ldr	r4, [r4, #0]
 800db12:	4421      	add	r1, r4
 800db14:	1854      	adds	r4, r2, r1
 800db16:	42a3      	cmp	r3, r4
 800db18:	6011      	str	r1, [r2, #0]
 800db1a:	d1e0      	bne.n	800dade <_free_r+0x26>
 800db1c:	681c      	ldr	r4, [r3, #0]
 800db1e:	685b      	ldr	r3, [r3, #4]
 800db20:	6053      	str	r3, [r2, #4]
 800db22:	4421      	add	r1, r4
 800db24:	6011      	str	r1, [r2, #0]
 800db26:	e7da      	b.n	800dade <_free_r+0x26>
 800db28:	d902      	bls.n	800db30 <_free_r+0x78>
 800db2a:	230c      	movs	r3, #12
 800db2c:	6003      	str	r3, [r0, #0]
 800db2e:	e7d6      	b.n	800dade <_free_r+0x26>
 800db30:	6825      	ldr	r5, [r4, #0]
 800db32:	1961      	adds	r1, r4, r5
 800db34:	428b      	cmp	r3, r1
 800db36:	bf04      	itt	eq
 800db38:	6819      	ldreq	r1, [r3, #0]
 800db3a:	685b      	ldreq	r3, [r3, #4]
 800db3c:	6063      	str	r3, [r4, #4]
 800db3e:	bf04      	itt	eq
 800db40:	1949      	addeq	r1, r1, r5
 800db42:	6021      	streq	r1, [r4, #0]
 800db44:	6054      	str	r4, [r2, #4]
 800db46:	e7ca      	b.n	800dade <_free_r+0x26>
 800db48:	b003      	add	sp, #12
 800db4a:	bd30      	pop	{r4, r5, pc}
 800db4c:	200098d4 	.word	0x200098d4

0800db50 <sbrk_aligned>:
 800db50:	b570      	push	{r4, r5, r6, lr}
 800db52:	4e0e      	ldr	r6, [pc, #56]	; (800db8c <sbrk_aligned+0x3c>)
 800db54:	460c      	mov	r4, r1
 800db56:	6831      	ldr	r1, [r6, #0]
 800db58:	4605      	mov	r5, r0
 800db5a:	b911      	cbnz	r1, 800db62 <sbrk_aligned+0x12>
 800db5c:	f000 f88c 	bl	800dc78 <_sbrk_r>
 800db60:	6030      	str	r0, [r6, #0]
 800db62:	4621      	mov	r1, r4
 800db64:	4628      	mov	r0, r5
 800db66:	f000 f887 	bl	800dc78 <_sbrk_r>
 800db6a:	1c43      	adds	r3, r0, #1
 800db6c:	d00a      	beq.n	800db84 <sbrk_aligned+0x34>
 800db6e:	1cc4      	adds	r4, r0, #3
 800db70:	f024 0403 	bic.w	r4, r4, #3
 800db74:	42a0      	cmp	r0, r4
 800db76:	d007      	beq.n	800db88 <sbrk_aligned+0x38>
 800db78:	1a21      	subs	r1, r4, r0
 800db7a:	4628      	mov	r0, r5
 800db7c:	f000 f87c 	bl	800dc78 <_sbrk_r>
 800db80:	3001      	adds	r0, #1
 800db82:	d101      	bne.n	800db88 <sbrk_aligned+0x38>
 800db84:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800db88:	4620      	mov	r0, r4
 800db8a:	bd70      	pop	{r4, r5, r6, pc}
 800db8c:	200098d8 	.word	0x200098d8

0800db90 <_malloc_r>:
 800db90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db94:	1ccd      	adds	r5, r1, #3
 800db96:	f025 0503 	bic.w	r5, r5, #3
 800db9a:	3508      	adds	r5, #8
 800db9c:	2d0c      	cmp	r5, #12
 800db9e:	bf38      	it	cc
 800dba0:	250c      	movcc	r5, #12
 800dba2:	2d00      	cmp	r5, #0
 800dba4:	4607      	mov	r7, r0
 800dba6:	db01      	blt.n	800dbac <_malloc_r+0x1c>
 800dba8:	42a9      	cmp	r1, r5
 800dbaa:	d905      	bls.n	800dbb8 <_malloc_r+0x28>
 800dbac:	230c      	movs	r3, #12
 800dbae:	603b      	str	r3, [r7, #0]
 800dbb0:	2600      	movs	r6, #0
 800dbb2:	4630      	mov	r0, r6
 800dbb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbb8:	4e2e      	ldr	r6, [pc, #184]	; (800dc74 <_malloc_r+0xe4>)
 800dbba:	f000 f88d 	bl	800dcd8 <__malloc_lock>
 800dbbe:	6833      	ldr	r3, [r6, #0]
 800dbc0:	461c      	mov	r4, r3
 800dbc2:	bb34      	cbnz	r4, 800dc12 <_malloc_r+0x82>
 800dbc4:	4629      	mov	r1, r5
 800dbc6:	4638      	mov	r0, r7
 800dbc8:	f7ff ffc2 	bl	800db50 <sbrk_aligned>
 800dbcc:	1c43      	adds	r3, r0, #1
 800dbce:	4604      	mov	r4, r0
 800dbd0:	d14d      	bne.n	800dc6e <_malloc_r+0xde>
 800dbd2:	6834      	ldr	r4, [r6, #0]
 800dbd4:	4626      	mov	r6, r4
 800dbd6:	2e00      	cmp	r6, #0
 800dbd8:	d140      	bne.n	800dc5c <_malloc_r+0xcc>
 800dbda:	6823      	ldr	r3, [r4, #0]
 800dbdc:	4631      	mov	r1, r6
 800dbde:	4638      	mov	r0, r7
 800dbe0:	eb04 0803 	add.w	r8, r4, r3
 800dbe4:	f000 f848 	bl	800dc78 <_sbrk_r>
 800dbe8:	4580      	cmp	r8, r0
 800dbea:	d13a      	bne.n	800dc62 <_malloc_r+0xd2>
 800dbec:	6821      	ldr	r1, [r4, #0]
 800dbee:	3503      	adds	r5, #3
 800dbf0:	1a6d      	subs	r5, r5, r1
 800dbf2:	f025 0503 	bic.w	r5, r5, #3
 800dbf6:	3508      	adds	r5, #8
 800dbf8:	2d0c      	cmp	r5, #12
 800dbfa:	bf38      	it	cc
 800dbfc:	250c      	movcc	r5, #12
 800dbfe:	4629      	mov	r1, r5
 800dc00:	4638      	mov	r0, r7
 800dc02:	f7ff ffa5 	bl	800db50 <sbrk_aligned>
 800dc06:	3001      	adds	r0, #1
 800dc08:	d02b      	beq.n	800dc62 <_malloc_r+0xd2>
 800dc0a:	6823      	ldr	r3, [r4, #0]
 800dc0c:	442b      	add	r3, r5
 800dc0e:	6023      	str	r3, [r4, #0]
 800dc10:	e00e      	b.n	800dc30 <_malloc_r+0xa0>
 800dc12:	6822      	ldr	r2, [r4, #0]
 800dc14:	1b52      	subs	r2, r2, r5
 800dc16:	d41e      	bmi.n	800dc56 <_malloc_r+0xc6>
 800dc18:	2a0b      	cmp	r2, #11
 800dc1a:	d916      	bls.n	800dc4a <_malloc_r+0xba>
 800dc1c:	1961      	adds	r1, r4, r5
 800dc1e:	42a3      	cmp	r3, r4
 800dc20:	6025      	str	r5, [r4, #0]
 800dc22:	bf18      	it	ne
 800dc24:	6059      	strne	r1, [r3, #4]
 800dc26:	6863      	ldr	r3, [r4, #4]
 800dc28:	bf08      	it	eq
 800dc2a:	6031      	streq	r1, [r6, #0]
 800dc2c:	5162      	str	r2, [r4, r5]
 800dc2e:	604b      	str	r3, [r1, #4]
 800dc30:	4638      	mov	r0, r7
 800dc32:	f104 060b 	add.w	r6, r4, #11
 800dc36:	f000 f855 	bl	800dce4 <__malloc_unlock>
 800dc3a:	f026 0607 	bic.w	r6, r6, #7
 800dc3e:	1d23      	adds	r3, r4, #4
 800dc40:	1af2      	subs	r2, r6, r3
 800dc42:	d0b6      	beq.n	800dbb2 <_malloc_r+0x22>
 800dc44:	1b9b      	subs	r3, r3, r6
 800dc46:	50a3      	str	r3, [r4, r2]
 800dc48:	e7b3      	b.n	800dbb2 <_malloc_r+0x22>
 800dc4a:	6862      	ldr	r2, [r4, #4]
 800dc4c:	42a3      	cmp	r3, r4
 800dc4e:	bf0c      	ite	eq
 800dc50:	6032      	streq	r2, [r6, #0]
 800dc52:	605a      	strne	r2, [r3, #4]
 800dc54:	e7ec      	b.n	800dc30 <_malloc_r+0xa0>
 800dc56:	4623      	mov	r3, r4
 800dc58:	6864      	ldr	r4, [r4, #4]
 800dc5a:	e7b2      	b.n	800dbc2 <_malloc_r+0x32>
 800dc5c:	4634      	mov	r4, r6
 800dc5e:	6876      	ldr	r6, [r6, #4]
 800dc60:	e7b9      	b.n	800dbd6 <_malloc_r+0x46>
 800dc62:	230c      	movs	r3, #12
 800dc64:	603b      	str	r3, [r7, #0]
 800dc66:	4638      	mov	r0, r7
 800dc68:	f000 f83c 	bl	800dce4 <__malloc_unlock>
 800dc6c:	e7a1      	b.n	800dbb2 <_malloc_r+0x22>
 800dc6e:	6025      	str	r5, [r4, #0]
 800dc70:	e7de      	b.n	800dc30 <_malloc_r+0xa0>
 800dc72:	bf00      	nop
 800dc74:	200098d4 	.word	0x200098d4

0800dc78 <_sbrk_r>:
 800dc78:	b538      	push	{r3, r4, r5, lr}
 800dc7a:	4d06      	ldr	r5, [pc, #24]	; (800dc94 <_sbrk_r+0x1c>)
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	4604      	mov	r4, r0
 800dc80:	4608      	mov	r0, r1
 800dc82:	602b      	str	r3, [r5, #0]
 800dc84:	f7f4 f97e 	bl	8001f84 <_sbrk>
 800dc88:	1c43      	adds	r3, r0, #1
 800dc8a:	d102      	bne.n	800dc92 <_sbrk_r+0x1a>
 800dc8c:	682b      	ldr	r3, [r5, #0]
 800dc8e:	b103      	cbz	r3, 800dc92 <_sbrk_r+0x1a>
 800dc90:	6023      	str	r3, [r4, #0]
 800dc92:	bd38      	pop	{r3, r4, r5, pc}
 800dc94:	200098dc 	.word	0x200098dc

0800dc98 <siprintf>:
 800dc98:	b40e      	push	{r1, r2, r3}
 800dc9a:	b500      	push	{lr}
 800dc9c:	b09c      	sub	sp, #112	; 0x70
 800dc9e:	ab1d      	add	r3, sp, #116	; 0x74
 800dca0:	9002      	str	r0, [sp, #8]
 800dca2:	9006      	str	r0, [sp, #24]
 800dca4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dca8:	4809      	ldr	r0, [pc, #36]	; (800dcd0 <siprintf+0x38>)
 800dcaa:	9107      	str	r1, [sp, #28]
 800dcac:	9104      	str	r1, [sp, #16]
 800dcae:	4909      	ldr	r1, [pc, #36]	; (800dcd4 <siprintf+0x3c>)
 800dcb0:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcb4:	9105      	str	r1, [sp, #20]
 800dcb6:	6800      	ldr	r0, [r0, #0]
 800dcb8:	9301      	str	r3, [sp, #4]
 800dcba:	a902      	add	r1, sp, #8
 800dcbc:	f000 f874 	bl	800dda8 <_svfiprintf_r>
 800dcc0:	9b02      	ldr	r3, [sp, #8]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	701a      	strb	r2, [r3, #0]
 800dcc6:	b01c      	add	sp, #112	; 0x70
 800dcc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800dccc:	b003      	add	sp, #12
 800dcce:	4770      	bx	lr
 800dcd0:	20000054 	.word	0x20000054
 800dcd4:	ffff0208 	.word	0xffff0208

0800dcd8 <__malloc_lock>:
 800dcd8:	4801      	ldr	r0, [pc, #4]	; (800dce0 <__malloc_lock+0x8>)
 800dcda:	f000 baf9 	b.w	800e2d0 <__retarget_lock_acquire_recursive>
 800dcde:	bf00      	nop
 800dce0:	200098e0 	.word	0x200098e0

0800dce4 <__malloc_unlock>:
 800dce4:	4801      	ldr	r0, [pc, #4]	; (800dcec <__malloc_unlock+0x8>)
 800dce6:	f000 baf4 	b.w	800e2d2 <__retarget_lock_release_recursive>
 800dcea:	bf00      	nop
 800dcec:	200098e0 	.word	0x200098e0

0800dcf0 <__ssputs_r>:
 800dcf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcf4:	688e      	ldr	r6, [r1, #8]
 800dcf6:	429e      	cmp	r6, r3
 800dcf8:	4682      	mov	sl, r0
 800dcfa:	460c      	mov	r4, r1
 800dcfc:	4690      	mov	r8, r2
 800dcfe:	461f      	mov	r7, r3
 800dd00:	d838      	bhi.n	800dd74 <__ssputs_r+0x84>
 800dd02:	898a      	ldrh	r2, [r1, #12]
 800dd04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dd08:	d032      	beq.n	800dd70 <__ssputs_r+0x80>
 800dd0a:	6825      	ldr	r5, [r4, #0]
 800dd0c:	6909      	ldr	r1, [r1, #16]
 800dd0e:	eba5 0901 	sub.w	r9, r5, r1
 800dd12:	6965      	ldr	r5, [r4, #20]
 800dd14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dd18:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dd1c:	3301      	adds	r3, #1
 800dd1e:	444b      	add	r3, r9
 800dd20:	106d      	asrs	r5, r5, #1
 800dd22:	429d      	cmp	r5, r3
 800dd24:	bf38      	it	cc
 800dd26:	461d      	movcc	r5, r3
 800dd28:	0553      	lsls	r3, r2, #21
 800dd2a:	d531      	bpl.n	800dd90 <__ssputs_r+0xa0>
 800dd2c:	4629      	mov	r1, r5
 800dd2e:	f7ff ff2f 	bl	800db90 <_malloc_r>
 800dd32:	4606      	mov	r6, r0
 800dd34:	b950      	cbnz	r0, 800dd4c <__ssputs_r+0x5c>
 800dd36:	230c      	movs	r3, #12
 800dd38:	f8ca 3000 	str.w	r3, [sl]
 800dd3c:	89a3      	ldrh	r3, [r4, #12]
 800dd3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd42:	81a3      	strh	r3, [r4, #12]
 800dd44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd4c:	6921      	ldr	r1, [r4, #16]
 800dd4e:	464a      	mov	r2, r9
 800dd50:	f7ff fe9c 	bl	800da8c <memcpy>
 800dd54:	89a3      	ldrh	r3, [r4, #12]
 800dd56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dd5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd5e:	81a3      	strh	r3, [r4, #12]
 800dd60:	6126      	str	r6, [r4, #16]
 800dd62:	6165      	str	r5, [r4, #20]
 800dd64:	444e      	add	r6, r9
 800dd66:	eba5 0509 	sub.w	r5, r5, r9
 800dd6a:	6026      	str	r6, [r4, #0]
 800dd6c:	60a5      	str	r5, [r4, #8]
 800dd6e:	463e      	mov	r6, r7
 800dd70:	42be      	cmp	r6, r7
 800dd72:	d900      	bls.n	800dd76 <__ssputs_r+0x86>
 800dd74:	463e      	mov	r6, r7
 800dd76:	6820      	ldr	r0, [r4, #0]
 800dd78:	4632      	mov	r2, r6
 800dd7a:	4641      	mov	r1, r8
 800dd7c:	f000 faaa 	bl	800e2d4 <memmove>
 800dd80:	68a3      	ldr	r3, [r4, #8]
 800dd82:	1b9b      	subs	r3, r3, r6
 800dd84:	60a3      	str	r3, [r4, #8]
 800dd86:	6823      	ldr	r3, [r4, #0]
 800dd88:	4433      	add	r3, r6
 800dd8a:	6023      	str	r3, [r4, #0]
 800dd8c:	2000      	movs	r0, #0
 800dd8e:	e7db      	b.n	800dd48 <__ssputs_r+0x58>
 800dd90:	462a      	mov	r2, r5
 800dd92:	f000 fab9 	bl	800e308 <_realloc_r>
 800dd96:	4606      	mov	r6, r0
 800dd98:	2800      	cmp	r0, #0
 800dd9a:	d1e1      	bne.n	800dd60 <__ssputs_r+0x70>
 800dd9c:	6921      	ldr	r1, [r4, #16]
 800dd9e:	4650      	mov	r0, sl
 800dda0:	f7ff fe8a 	bl	800dab8 <_free_r>
 800dda4:	e7c7      	b.n	800dd36 <__ssputs_r+0x46>
	...

0800dda8 <_svfiprintf_r>:
 800dda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddac:	4698      	mov	r8, r3
 800ddae:	898b      	ldrh	r3, [r1, #12]
 800ddb0:	061b      	lsls	r3, r3, #24
 800ddb2:	b09d      	sub	sp, #116	; 0x74
 800ddb4:	4607      	mov	r7, r0
 800ddb6:	460d      	mov	r5, r1
 800ddb8:	4614      	mov	r4, r2
 800ddba:	d50e      	bpl.n	800ddda <_svfiprintf_r+0x32>
 800ddbc:	690b      	ldr	r3, [r1, #16]
 800ddbe:	b963      	cbnz	r3, 800ddda <_svfiprintf_r+0x32>
 800ddc0:	2140      	movs	r1, #64	; 0x40
 800ddc2:	f7ff fee5 	bl	800db90 <_malloc_r>
 800ddc6:	6028      	str	r0, [r5, #0]
 800ddc8:	6128      	str	r0, [r5, #16]
 800ddca:	b920      	cbnz	r0, 800ddd6 <_svfiprintf_r+0x2e>
 800ddcc:	230c      	movs	r3, #12
 800ddce:	603b      	str	r3, [r7, #0]
 800ddd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ddd4:	e0d1      	b.n	800df7a <_svfiprintf_r+0x1d2>
 800ddd6:	2340      	movs	r3, #64	; 0x40
 800ddd8:	616b      	str	r3, [r5, #20]
 800ddda:	2300      	movs	r3, #0
 800dddc:	9309      	str	r3, [sp, #36]	; 0x24
 800ddde:	2320      	movs	r3, #32
 800dde0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dde4:	f8cd 800c 	str.w	r8, [sp, #12]
 800dde8:	2330      	movs	r3, #48	; 0x30
 800ddea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800df94 <_svfiprintf_r+0x1ec>
 800ddee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ddf2:	f04f 0901 	mov.w	r9, #1
 800ddf6:	4623      	mov	r3, r4
 800ddf8:	469a      	mov	sl, r3
 800ddfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ddfe:	b10a      	cbz	r2, 800de04 <_svfiprintf_r+0x5c>
 800de00:	2a25      	cmp	r2, #37	; 0x25
 800de02:	d1f9      	bne.n	800ddf8 <_svfiprintf_r+0x50>
 800de04:	ebba 0b04 	subs.w	fp, sl, r4
 800de08:	d00b      	beq.n	800de22 <_svfiprintf_r+0x7a>
 800de0a:	465b      	mov	r3, fp
 800de0c:	4622      	mov	r2, r4
 800de0e:	4629      	mov	r1, r5
 800de10:	4638      	mov	r0, r7
 800de12:	f7ff ff6d 	bl	800dcf0 <__ssputs_r>
 800de16:	3001      	adds	r0, #1
 800de18:	f000 80aa 	beq.w	800df70 <_svfiprintf_r+0x1c8>
 800de1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de1e:	445a      	add	r2, fp
 800de20:	9209      	str	r2, [sp, #36]	; 0x24
 800de22:	f89a 3000 	ldrb.w	r3, [sl]
 800de26:	2b00      	cmp	r3, #0
 800de28:	f000 80a2 	beq.w	800df70 <_svfiprintf_r+0x1c8>
 800de2c:	2300      	movs	r3, #0
 800de2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de36:	f10a 0a01 	add.w	sl, sl, #1
 800de3a:	9304      	str	r3, [sp, #16]
 800de3c:	9307      	str	r3, [sp, #28]
 800de3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de42:	931a      	str	r3, [sp, #104]	; 0x68
 800de44:	4654      	mov	r4, sl
 800de46:	2205      	movs	r2, #5
 800de48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de4c:	4851      	ldr	r0, [pc, #324]	; (800df94 <_svfiprintf_r+0x1ec>)
 800de4e:	f7f2 f9ff 	bl	8000250 <memchr>
 800de52:	9a04      	ldr	r2, [sp, #16]
 800de54:	b9d8      	cbnz	r0, 800de8e <_svfiprintf_r+0xe6>
 800de56:	06d0      	lsls	r0, r2, #27
 800de58:	bf44      	itt	mi
 800de5a:	2320      	movmi	r3, #32
 800de5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de60:	0711      	lsls	r1, r2, #28
 800de62:	bf44      	itt	mi
 800de64:	232b      	movmi	r3, #43	; 0x2b
 800de66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de6a:	f89a 3000 	ldrb.w	r3, [sl]
 800de6e:	2b2a      	cmp	r3, #42	; 0x2a
 800de70:	d015      	beq.n	800de9e <_svfiprintf_r+0xf6>
 800de72:	9a07      	ldr	r2, [sp, #28]
 800de74:	4654      	mov	r4, sl
 800de76:	2000      	movs	r0, #0
 800de78:	f04f 0c0a 	mov.w	ip, #10
 800de7c:	4621      	mov	r1, r4
 800de7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de82:	3b30      	subs	r3, #48	; 0x30
 800de84:	2b09      	cmp	r3, #9
 800de86:	d94e      	bls.n	800df26 <_svfiprintf_r+0x17e>
 800de88:	b1b0      	cbz	r0, 800deb8 <_svfiprintf_r+0x110>
 800de8a:	9207      	str	r2, [sp, #28]
 800de8c:	e014      	b.n	800deb8 <_svfiprintf_r+0x110>
 800de8e:	eba0 0308 	sub.w	r3, r0, r8
 800de92:	fa09 f303 	lsl.w	r3, r9, r3
 800de96:	4313      	orrs	r3, r2
 800de98:	9304      	str	r3, [sp, #16]
 800de9a:	46a2      	mov	sl, r4
 800de9c:	e7d2      	b.n	800de44 <_svfiprintf_r+0x9c>
 800de9e:	9b03      	ldr	r3, [sp, #12]
 800dea0:	1d19      	adds	r1, r3, #4
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	9103      	str	r1, [sp, #12]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	bfbb      	ittet	lt
 800deaa:	425b      	neglt	r3, r3
 800deac:	f042 0202 	orrlt.w	r2, r2, #2
 800deb0:	9307      	strge	r3, [sp, #28]
 800deb2:	9307      	strlt	r3, [sp, #28]
 800deb4:	bfb8      	it	lt
 800deb6:	9204      	strlt	r2, [sp, #16]
 800deb8:	7823      	ldrb	r3, [r4, #0]
 800deba:	2b2e      	cmp	r3, #46	; 0x2e
 800debc:	d10c      	bne.n	800ded8 <_svfiprintf_r+0x130>
 800debe:	7863      	ldrb	r3, [r4, #1]
 800dec0:	2b2a      	cmp	r3, #42	; 0x2a
 800dec2:	d135      	bne.n	800df30 <_svfiprintf_r+0x188>
 800dec4:	9b03      	ldr	r3, [sp, #12]
 800dec6:	1d1a      	adds	r2, r3, #4
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	9203      	str	r2, [sp, #12]
 800decc:	2b00      	cmp	r3, #0
 800dece:	bfb8      	it	lt
 800ded0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ded4:	3402      	adds	r4, #2
 800ded6:	9305      	str	r3, [sp, #20]
 800ded8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dfa4 <_svfiprintf_r+0x1fc>
 800dedc:	7821      	ldrb	r1, [r4, #0]
 800dede:	2203      	movs	r2, #3
 800dee0:	4650      	mov	r0, sl
 800dee2:	f7f2 f9b5 	bl	8000250 <memchr>
 800dee6:	b140      	cbz	r0, 800defa <_svfiprintf_r+0x152>
 800dee8:	2340      	movs	r3, #64	; 0x40
 800deea:	eba0 000a 	sub.w	r0, r0, sl
 800deee:	fa03 f000 	lsl.w	r0, r3, r0
 800def2:	9b04      	ldr	r3, [sp, #16]
 800def4:	4303      	orrs	r3, r0
 800def6:	3401      	adds	r4, #1
 800def8:	9304      	str	r3, [sp, #16]
 800defa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800defe:	4826      	ldr	r0, [pc, #152]	; (800df98 <_svfiprintf_r+0x1f0>)
 800df00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df04:	2206      	movs	r2, #6
 800df06:	f7f2 f9a3 	bl	8000250 <memchr>
 800df0a:	2800      	cmp	r0, #0
 800df0c:	d038      	beq.n	800df80 <_svfiprintf_r+0x1d8>
 800df0e:	4b23      	ldr	r3, [pc, #140]	; (800df9c <_svfiprintf_r+0x1f4>)
 800df10:	bb1b      	cbnz	r3, 800df5a <_svfiprintf_r+0x1b2>
 800df12:	9b03      	ldr	r3, [sp, #12]
 800df14:	3307      	adds	r3, #7
 800df16:	f023 0307 	bic.w	r3, r3, #7
 800df1a:	3308      	adds	r3, #8
 800df1c:	9303      	str	r3, [sp, #12]
 800df1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df20:	4433      	add	r3, r6
 800df22:	9309      	str	r3, [sp, #36]	; 0x24
 800df24:	e767      	b.n	800ddf6 <_svfiprintf_r+0x4e>
 800df26:	fb0c 3202 	mla	r2, ip, r2, r3
 800df2a:	460c      	mov	r4, r1
 800df2c:	2001      	movs	r0, #1
 800df2e:	e7a5      	b.n	800de7c <_svfiprintf_r+0xd4>
 800df30:	2300      	movs	r3, #0
 800df32:	3401      	adds	r4, #1
 800df34:	9305      	str	r3, [sp, #20]
 800df36:	4619      	mov	r1, r3
 800df38:	f04f 0c0a 	mov.w	ip, #10
 800df3c:	4620      	mov	r0, r4
 800df3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df42:	3a30      	subs	r2, #48	; 0x30
 800df44:	2a09      	cmp	r2, #9
 800df46:	d903      	bls.n	800df50 <_svfiprintf_r+0x1a8>
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d0c5      	beq.n	800ded8 <_svfiprintf_r+0x130>
 800df4c:	9105      	str	r1, [sp, #20]
 800df4e:	e7c3      	b.n	800ded8 <_svfiprintf_r+0x130>
 800df50:	fb0c 2101 	mla	r1, ip, r1, r2
 800df54:	4604      	mov	r4, r0
 800df56:	2301      	movs	r3, #1
 800df58:	e7f0      	b.n	800df3c <_svfiprintf_r+0x194>
 800df5a:	ab03      	add	r3, sp, #12
 800df5c:	9300      	str	r3, [sp, #0]
 800df5e:	462a      	mov	r2, r5
 800df60:	4b0f      	ldr	r3, [pc, #60]	; (800dfa0 <_svfiprintf_r+0x1f8>)
 800df62:	a904      	add	r1, sp, #16
 800df64:	4638      	mov	r0, r7
 800df66:	f3af 8000 	nop.w
 800df6a:	1c42      	adds	r2, r0, #1
 800df6c:	4606      	mov	r6, r0
 800df6e:	d1d6      	bne.n	800df1e <_svfiprintf_r+0x176>
 800df70:	89ab      	ldrh	r3, [r5, #12]
 800df72:	065b      	lsls	r3, r3, #25
 800df74:	f53f af2c 	bmi.w	800ddd0 <_svfiprintf_r+0x28>
 800df78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df7a:	b01d      	add	sp, #116	; 0x74
 800df7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df80:	ab03      	add	r3, sp, #12
 800df82:	9300      	str	r3, [sp, #0]
 800df84:	462a      	mov	r2, r5
 800df86:	4b06      	ldr	r3, [pc, #24]	; (800dfa0 <_svfiprintf_r+0x1f8>)
 800df88:	a904      	add	r1, sp, #16
 800df8a:	4638      	mov	r0, r7
 800df8c:	f000 f87a 	bl	800e084 <_printf_i>
 800df90:	e7eb      	b.n	800df6a <_svfiprintf_r+0x1c2>
 800df92:	bf00      	nop
 800df94:	080101c0 	.word	0x080101c0
 800df98:	080101ca 	.word	0x080101ca
 800df9c:	00000000 	.word	0x00000000
 800dfa0:	0800dcf1 	.word	0x0800dcf1
 800dfa4:	080101c6 	.word	0x080101c6

0800dfa8 <_printf_common>:
 800dfa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfac:	4616      	mov	r6, r2
 800dfae:	4699      	mov	r9, r3
 800dfb0:	688a      	ldr	r2, [r1, #8]
 800dfb2:	690b      	ldr	r3, [r1, #16]
 800dfb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dfb8:	4293      	cmp	r3, r2
 800dfba:	bfb8      	it	lt
 800dfbc:	4613      	movlt	r3, r2
 800dfbe:	6033      	str	r3, [r6, #0]
 800dfc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dfc4:	4607      	mov	r7, r0
 800dfc6:	460c      	mov	r4, r1
 800dfc8:	b10a      	cbz	r2, 800dfce <_printf_common+0x26>
 800dfca:	3301      	adds	r3, #1
 800dfcc:	6033      	str	r3, [r6, #0]
 800dfce:	6823      	ldr	r3, [r4, #0]
 800dfd0:	0699      	lsls	r1, r3, #26
 800dfd2:	bf42      	ittt	mi
 800dfd4:	6833      	ldrmi	r3, [r6, #0]
 800dfd6:	3302      	addmi	r3, #2
 800dfd8:	6033      	strmi	r3, [r6, #0]
 800dfda:	6825      	ldr	r5, [r4, #0]
 800dfdc:	f015 0506 	ands.w	r5, r5, #6
 800dfe0:	d106      	bne.n	800dff0 <_printf_common+0x48>
 800dfe2:	f104 0a19 	add.w	sl, r4, #25
 800dfe6:	68e3      	ldr	r3, [r4, #12]
 800dfe8:	6832      	ldr	r2, [r6, #0]
 800dfea:	1a9b      	subs	r3, r3, r2
 800dfec:	42ab      	cmp	r3, r5
 800dfee:	dc26      	bgt.n	800e03e <_printf_common+0x96>
 800dff0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dff4:	1e13      	subs	r3, r2, #0
 800dff6:	6822      	ldr	r2, [r4, #0]
 800dff8:	bf18      	it	ne
 800dffa:	2301      	movne	r3, #1
 800dffc:	0692      	lsls	r2, r2, #26
 800dffe:	d42b      	bmi.n	800e058 <_printf_common+0xb0>
 800e000:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e004:	4649      	mov	r1, r9
 800e006:	4638      	mov	r0, r7
 800e008:	47c0      	blx	r8
 800e00a:	3001      	adds	r0, #1
 800e00c:	d01e      	beq.n	800e04c <_printf_common+0xa4>
 800e00e:	6823      	ldr	r3, [r4, #0]
 800e010:	68e5      	ldr	r5, [r4, #12]
 800e012:	6832      	ldr	r2, [r6, #0]
 800e014:	f003 0306 	and.w	r3, r3, #6
 800e018:	2b04      	cmp	r3, #4
 800e01a:	bf08      	it	eq
 800e01c:	1aad      	subeq	r5, r5, r2
 800e01e:	68a3      	ldr	r3, [r4, #8]
 800e020:	6922      	ldr	r2, [r4, #16]
 800e022:	bf0c      	ite	eq
 800e024:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e028:	2500      	movne	r5, #0
 800e02a:	4293      	cmp	r3, r2
 800e02c:	bfc4      	itt	gt
 800e02e:	1a9b      	subgt	r3, r3, r2
 800e030:	18ed      	addgt	r5, r5, r3
 800e032:	2600      	movs	r6, #0
 800e034:	341a      	adds	r4, #26
 800e036:	42b5      	cmp	r5, r6
 800e038:	d11a      	bne.n	800e070 <_printf_common+0xc8>
 800e03a:	2000      	movs	r0, #0
 800e03c:	e008      	b.n	800e050 <_printf_common+0xa8>
 800e03e:	2301      	movs	r3, #1
 800e040:	4652      	mov	r2, sl
 800e042:	4649      	mov	r1, r9
 800e044:	4638      	mov	r0, r7
 800e046:	47c0      	blx	r8
 800e048:	3001      	adds	r0, #1
 800e04a:	d103      	bne.n	800e054 <_printf_common+0xac>
 800e04c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e054:	3501      	adds	r5, #1
 800e056:	e7c6      	b.n	800dfe6 <_printf_common+0x3e>
 800e058:	18e1      	adds	r1, r4, r3
 800e05a:	1c5a      	adds	r2, r3, #1
 800e05c:	2030      	movs	r0, #48	; 0x30
 800e05e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e062:	4422      	add	r2, r4
 800e064:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e068:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e06c:	3302      	adds	r3, #2
 800e06e:	e7c7      	b.n	800e000 <_printf_common+0x58>
 800e070:	2301      	movs	r3, #1
 800e072:	4622      	mov	r2, r4
 800e074:	4649      	mov	r1, r9
 800e076:	4638      	mov	r0, r7
 800e078:	47c0      	blx	r8
 800e07a:	3001      	adds	r0, #1
 800e07c:	d0e6      	beq.n	800e04c <_printf_common+0xa4>
 800e07e:	3601      	adds	r6, #1
 800e080:	e7d9      	b.n	800e036 <_printf_common+0x8e>
	...

0800e084 <_printf_i>:
 800e084:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e088:	7e0f      	ldrb	r7, [r1, #24]
 800e08a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e08c:	2f78      	cmp	r7, #120	; 0x78
 800e08e:	4691      	mov	r9, r2
 800e090:	4680      	mov	r8, r0
 800e092:	460c      	mov	r4, r1
 800e094:	469a      	mov	sl, r3
 800e096:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e09a:	d807      	bhi.n	800e0ac <_printf_i+0x28>
 800e09c:	2f62      	cmp	r7, #98	; 0x62
 800e09e:	d80a      	bhi.n	800e0b6 <_printf_i+0x32>
 800e0a0:	2f00      	cmp	r7, #0
 800e0a2:	f000 80d8 	beq.w	800e256 <_printf_i+0x1d2>
 800e0a6:	2f58      	cmp	r7, #88	; 0x58
 800e0a8:	f000 80a3 	beq.w	800e1f2 <_printf_i+0x16e>
 800e0ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e0b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e0b4:	e03a      	b.n	800e12c <_printf_i+0xa8>
 800e0b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e0ba:	2b15      	cmp	r3, #21
 800e0bc:	d8f6      	bhi.n	800e0ac <_printf_i+0x28>
 800e0be:	a101      	add	r1, pc, #4	; (adr r1, 800e0c4 <_printf_i+0x40>)
 800e0c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e0c4:	0800e11d 	.word	0x0800e11d
 800e0c8:	0800e131 	.word	0x0800e131
 800e0cc:	0800e0ad 	.word	0x0800e0ad
 800e0d0:	0800e0ad 	.word	0x0800e0ad
 800e0d4:	0800e0ad 	.word	0x0800e0ad
 800e0d8:	0800e0ad 	.word	0x0800e0ad
 800e0dc:	0800e131 	.word	0x0800e131
 800e0e0:	0800e0ad 	.word	0x0800e0ad
 800e0e4:	0800e0ad 	.word	0x0800e0ad
 800e0e8:	0800e0ad 	.word	0x0800e0ad
 800e0ec:	0800e0ad 	.word	0x0800e0ad
 800e0f0:	0800e23d 	.word	0x0800e23d
 800e0f4:	0800e161 	.word	0x0800e161
 800e0f8:	0800e21f 	.word	0x0800e21f
 800e0fc:	0800e0ad 	.word	0x0800e0ad
 800e100:	0800e0ad 	.word	0x0800e0ad
 800e104:	0800e25f 	.word	0x0800e25f
 800e108:	0800e0ad 	.word	0x0800e0ad
 800e10c:	0800e161 	.word	0x0800e161
 800e110:	0800e0ad 	.word	0x0800e0ad
 800e114:	0800e0ad 	.word	0x0800e0ad
 800e118:	0800e227 	.word	0x0800e227
 800e11c:	682b      	ldr	r3, [r5, #0]
 800e11e:	1d1a      	adds	r2, r3, #4
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	602a      	str	r2, [r5, #0]
 800e124:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e128:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e12c:	2301      	movs	r3, #1
 800e12e:	e0a3      	b.n	800e278 <_printf_i+0x1f4>
 800e130:	6820      	ldr	r0, [r4, #0]
 800e132:	6829      	ldr	r1, [r5, #0]
 800e134:	0606      	lsls	r6, r0, #24
 800e136:	f101 0304 	add.w	r3, r1, #4
 800e13a:	d50a      	bpl.n	800e152 <_printf_i+0xce>
 800e13c:	680e      	ldr	r6, [r1, #0]
 800e13e:	602b      	str	r3, [r5, #0]
 800e140:	2e00      	cmp	r6, #0
 800e142:	da03      	bge.n	800e14c <_printf_i+0xc8>
 800e144:	232d      	movs	r3, #45	; 0x2d
 800e146:	4276      	negs	r6, r6
 800e148:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e14c:	485e      	ldr	r0, [pc, #376]	; (800e2c8 <_printf_i+0x244>)
 800e14e:	230a      	movs	r3, #10
 800e150:	e019      	b.n	800e186 <_printf_i+0x102>
 800e152:	680e      	ldr	r6, [r1, #0]
 800e154:	602b      	str	r3, [r5, #0]
 800e156:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e15a:	bf18      	it	ne
 800e15c:	b236      	sxthne	r6, r6
 800e15e:	e7ef      	b.n	800e140 <_printf_i+0xbc>
 800e160:	682b      	ldr	r3, [r5, #0]
 800e162:	6820      	ldr	r0, [r4, #0]
 800e164:	1d19      	adds	r1, r3, #4
 800e166:	6029      	str	r1, [r5, #0]
 800e168:	0601      	lsls	r1, r0, #24
 800e16a:	d501      	bpl.n	800e170 <_printf_i+0xec>
 800e16c:	681e      	ldr	r6, [r3, #0]
 800e16e:	e002      	b.n	800e176 <_printf_i+0xf2>
 800e170:	0646      	lsls	r6, r0, #25
 800e172:	d5fb      	bpl.n	800e16c <_printf_i+0xe8>
 800e174:	881e      	ldrh	r6, [r3, #0]
 800e176:	4854      	ldr	r0, [pc, #336]	; (800e2c8 <_printf_i+0x244>)
 800e178:	2f6f      	cmp	r7, #111	; 0x6f
 800e17a:	bf0c      	ite	eq
 800e17c:	2308      	moveq	r3, #8
 800e17e:	230a      	movne	r3, #10
 800e180:	2100      	movs	r1, #0
 800e182:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e186:	6865      	ldr	r5, [r4, #4]
 800e188:	60a5      	str	r5, [r4, #8]
 800e18a:	2d00      	cmp	r5, #0
 800e18c:	bfa2      	ittt	ge
 800e18e:	6821      	ldrge	r1, [r4, #0]
 800e190:	f021 0104 	bicge.w	r1, r1, #4
 800e194:	6021      	strge	r1, [r4, #0]
 800e196:	b90e      	cbnz	r6, 800e19c <_printf_i+0x118>
 800e198:	2d00      	cmp	r5, #0
 800e19a:	d04d      	beq.n	800e238 <_printf_i+0x1b4>
 800e19c:	4615      	mov	r5, r2
 800e19e:	fbb6 f1f3 	udiv	r1, r6, r3
 800e1a2:	fb03 6711 	mls	r7, r3, r1, r6
 800e1a6:	5dc7      	ldrb	r7, [r0, r7]
 800e1a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e1ac:	4637      	mov	r7, r6
 800e1ae:	42bb      	cmp	r3, r7
 800e1b0:	460e      	mov	r6, r1
 800e1b2:	d9f4      	bls.n	800e19e <_printf_i+0x11a>
 800e1b4:	2b08      	cmp	r3, #8
 800e1b6:	d10b      	bne.n	800e1d0 <_printf_i+0x14c>
 800e1b8:	6823      	ldr	r3, [r4, #0]
 800e1ba:	07de      	lsls	r6, r3, #31
 800e1bc:	d508      	bpl.n	800e1d0 <_printf_i+0x14c>
 800e1be:	6923      	ldr	r3, [r4, #16]
 800e1c0:	6861      	ldr	r1, [r4, #4]
 800e1c2:	4299      	cmp	r1, r3
 800e1c4:	bfde      	ittt	le
 800e1c6:	2330      	movle	r3, #48	; 0x30
 800e1c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e1cc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e1d0:	1b52      	subs	r2, r2, r5
 800e1d2:	6122      	str	r2, [r4, #16]
 800e1d4:	f8cd a000 	str.w	sl, [sp]
 800e1d8:	464b      	mov	r3, r9
 800e1da:	aa03      	add	r2, sp, #12
 800e1dc:	4621      	mov	r1, r4
 800e1de:	4640      	mov	r0, r8
 800e1e0:	f7ff fee2 	bl	800dfa8 <_printf_common>
 800e1e4:	3001      	adds	r0, #1
 800e1e6:	d14c      	bne.n	800e282 <_printf_i+0x1fe>
 800e1e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e1ec:	b004      	add	sp, #16
 800e1ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1f2:	4835      	ldr	r0, [pc, #212]	; (800e2c8 <_printf_i+0x244>)
 800e1f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e1f8:	6829      	ldr	r1, [r5, #0]
 800e1fa:	6823      	ldr	r3, [r4, #0]
 800e1fc:	f851 6b04 	ldr.w	r6, [r1], #4
 800e200:	6029      	str	r1, [r5, #0]
 800e202:	061d      	lsls	r5, r3, #24
 800e204:	d514      	bpl.n	800e230 <_printf_i+0x1ac>
 800e206:	07df      	lsls	r7, r3, #31
 800e208:	bf44      	itt	mi
 800e20a:	f043 0320 	orrmi.w	r3, r3, #32
 800e20e:	6023      	strmi	r3, [r4, #0]
 800e210:	b91e      	cbnz	r6, 800e21a <_printf_i+0x196>
 800e212:	6823      	ldr	r3, [r4, #0]
 800e214:	f023 0320 	bic.w	r3, r3, #32
 800e218:	6023      	str	r3, [r4, #0]
 800e21a:	2310      	movs	r3, #16
 800e21c:	e7b0      	b.n	800e180 <_printf_i+0xfc>
 800e21e:	6823      	ldr	r3, [r4, #0]
 800e220:	f043 0320 	orr.w	r3, r3, #32
 800e224:	6023      	str	r3, [r4, #0]
 800e226:	2378      	movs	r3, #120	; 0x78
 800e228:	4828      	ldr	r0, [pc, #160]	; (800e2cc <_printf_i+0x248>)
 800e22a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e22e:	e7e3      	b.n	800e1f8 <_printf_i+0x174>
 800e230:	0659      	lsls	r1, r3, #25
 800e232:	bf48      	it	mi
 800e234:	b2b6      	uxthmi	r6, r6
 800e236:	e7e6      	b.n	800e206 <_printf_i+0x182>
 800e238:	4615      	mov	r5, r2
 800e23a:	e7bb      	b.n	800e1b4 <_printf_i+0x130>
 800e23c:	682b      	ldr	r3, [r5, #0]
 800e23e:	6826      	ldr	r6, [r4, #0]
 800e240:	6961      	ldr	r1, [r4, #20]
 800e242:	1d18      	adds	r0, r3, #4
 800e244:	6028      	str	r0, [r5, #0]
 800e246:	0635      	lsls	r5, r6, #24
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	d501      	bpl.n	800e250 <_printf_i+0x1cc>
 800e24c:	6019      	str	r1, [r3, #0]
 800e24e:	e002      	b.n	800e256 <_printf_i+0x1d2>
 800e250:	0670      	lsls	r0, r6, #25
 800e252:	d5fb      	bpl.n	800e24c <_printf_i+0x1c8>
 800e254:	8019      	strh	r1, [r3, #0]
 800e256:	2300      	movs	r3, #0
 800e258:	6123      	str	r3, [r4, #16]
 800e25a:	4615      	mov	r5, r2
 800e25c:	e7ba      	b.n	800e1d4 <_printf_i+0x150>
 800e25e:	682b      	ldr	r3, [r5, #0]
 800e260:	1d1a      	adds	r2, r3, #4
 800e262:	602a      	str	r2, [r5, #0]
 800e264:	681d      	ldr	r5, [r3, #0]
 800e266:	6862      	ldr	r2, [r4, #4]
 800e268:	2100      	movs	r1, #0
 800e26a:	4628      	mov	r0, r5
 800e26c:	f7f1 fff0 	bl	8000250 <memchr>
 800e270:	b108      	cbz	r0, 800e276 <_printf_i+0x1f2>
 800e272:	1b40      	subs	r0, r0, r5
 800e274:	6060      	str	r0, [r4, #4]
 800e276:	6863      	ldr	r3, [r4, #4]
 800e278:	6123      	str	r3, [r4, #16]
 800e27a:	2300      	movs	r3, #0
 800e27c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e280:	e7a8      	b.n	800e1d4 <_printf_i+0x150>
 800e282:	6923      	ldr	r3, [r4, #16]
 800e284:	462a      	mov	r2, r5
 800e286:	4649      	mov	r1, r9
 800e288:	4640      	mov	r0, r8
 800e28a:	47d0      	blx	sl
 800e28c:	3001      	adds	r0, #1
 800e28e:	d0ab      	beq.n	800e1e8 <_printf_i+0x164>
 800e290:	6823      	ldr	r3, [r4, #0]
 800e292:	079b      	lsls	r3, r3, #30
 800e294:	d413      	bmi.n	800e2be <_printf_i+0x23a>
 800e296:	68e0      	ldr	r0, [r4, #12]
 800e298:	9b03      	ldr	r3, [sp, #12]
 800e29a:	4298      	cmp	r0, r3
 800e29c:	bfb8      	it	lt
 800e29e:	4618      	movlt	r0, r3
 800e2a0:	e7a4      	b.n	800e1ec <_printf_i+0x168>
 800e2a2:	2301      	movs	r3, #1
 800e2a4:	4632      	mov	r2, r6
 800e2a6:	4649      	mov	r1, r9
 800e2a8:	4640      	mov	r0, r8
 800e2aa:	47d0      	blx	sl
 800e2ac:	3001      	adds	r0, #1
 800e2ae:	d09b      	beq.n	800e1e8 <_printf_i+0x164>
 800e2b0:	3501      	adds	r5, #1
 800e2b2:	68e3      	ldr	r3, [r4, #12]
 800e2b4:	9903      	ldr	r1, [sp, #12]
 800e2b6:	1a5b      	subs	r3, r3, r1
 800e2b8:	42ab      	cmp	r3, r5
 800e2ba:	dcf2      	bgt.n	800e2a2 <_printf_i+0x21e>
 800e2bc:	e7eb      	b.n	800e296 <_printf_i+0x212>
 800e2be:	2500      	movs	r5, #0
 800e2c0:	f104 0619 	add.w	r6, r4, #25
 800e2c4:	e7f5      	b.n	800e2b2 <_printf_i+0x22e>
 800e2c6:	bf00      	nop
 800e2c8:	080101d1 	.word	0x080101d1
 800e2cc:	080101e2 	.word	0x080101e2

0800e2d0 <__retarget_lock_acquire_recursive>:
 800e2d0:	4770      	bx	lr

0800e2d2 <__retarget_lock_release_recursive>:
 800e2d2:	4770      	bx	lr

0800e2d4 <memmove>:
 800e2d4:	4288      	cmp	r0, r1
 800e2d6:	b510      	push	{r4, lr}
 800e2d8:	eb01 0402 	add.w	r4, r1, r2
 800e2dc:	d902      	bls.n	800e2e4 <memmove+0x10>
 800e2de:	4284      	cmp	r4, r0
 800e2e0:	4623      	mov	r3, r4
 800e2e2:	d807      	bhi.n	800e2f4 <memmove+0x20>
 800e2e4:	1e43      	subs	r3, r0, #1
 800e2e6:	42a1      	cmp	r1, r4
 800e2e8:	d008      	beq.n	800e2fc <memmove+0x28>
 800e2ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e2f2:	e7f8      	b.n	800e2e6 <memmove+0x12>
 800e2f4:	4402      	add	r2, r0
 800e2f6:	4601      	mov	r1, r0
 800e2f8:	428a      	cmp	r2, r1
 800e2fa:	d100      	bne.n	800e2fe <memmove+0x2a>
 800e2fc:	bd10      	pop	{r4, pc}
 800e2fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e302:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e306:	e7f7      	b.n	800e2f8 <memmove+0x24>

0800e308 <_realloc_r>:
 800e308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e30c:	4680      	mov	r8, r0
 800e30e:	4614      	mov	r4, r2
 800e310:	460e      	mov	r6, r1
 800e312:	b921      	cbnz	r1, 800e31e <_realloc_r+0x16>
 800e314:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e318:	4611      	mov	r1, r2
 800e31a:	f7ff bc39 	b.w	800db90 <_malloc_r>
 800e31e:	b92a      	cbnz	r2, 800e32c <_realloc_r+0x24>
 800e320:	f7ff fbca 	bl	800dab8 <_free_r>
 800e324:	4625      	mov	r5, r4
 800e326:	4628      	mov	r0, r5
 800e328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e32c:	f000 f81b 	bl	800e366 <_malloc_usable_size_r>
 800e330:	4284      	cmp	r4, r0
 800e332:	4607      	mov	r7, r0
 800e334:	d802      	bhi.n	800e33c <_realloc_r+0x34>
 800e336:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e33a:	d812      	bhi.n	800e362 <_realloc_r+0x5a>
 800e33c:	4621      	mov	r1, r4
 800e33e:	4640      	mov	r0, r8
 800e340:	f7ff fc26 	bl	800db90 <_malloc_r>
 800e344:	4605      	mov	r5, r0
 800e346:	2800      	cmp	r0, #0
 800e348:	d0ed      	beq.n	800e326 <_realloc_r+0x1e>
 800e34a:	42bc      	cmp	r4, r7
 800e34c:	4622      	mov	r2, r4
 800e34e:	4631      	mov	r1, r6
 800e350:	bf28      	it	cs
 800e352:	463a      	movcs	r2, r7
 800e354:	f7ff fb9a 	bl	800da8c <memcpy>
 800e358:	4631      	mov	r1, r6
 800e35a:	4640      	mov	r0, r8
 800e35c:	f7ff fbac 	bl	800dab8 <_free_r>
 800e360:	e7e1      	b.n	800e326 <_realloc_r+0x1e>
 800e362:	4635      	mov	r5, r6
 800e364:	e7df      	b.n	800e326 <_realloc_r+0x1e>

0800e366 <_malloc_usable_size_r>:
 800e366:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e36a:	1f18      	subs	r0, r3, #4
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	bfbc      	itt	lt
 800e370:	580b      	ldrlt	r3, [r1, r0]
 800e372:	18c0      	addlt	r0, r0, r3
 800e374:	4770      	bx	lr
	...

0800e378 <_init>:
 800e378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e37a:	bf00      	nop
 800e37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e37e:	bc08      	pop	{r3}
 800e380:	469e      	mov	lr, r3
 800e382:	4770      	bx	lr

0800e384 <_fini>:
 800e384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e386:	bf00      	nop
 800e388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e38a:	bc08      	pop	{r3}
 800e38c:	469e      	mov	lr, r3
 800e38e:	4770      	bx	lr
