
EmbSys.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f54  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d34  0800a154  0800a154  0001a154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be88  0800be88  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  0800be88  0800be88  0001be88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be90  0800be90  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be90  0800be90  0001be90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be94  0800be94  0001be94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800be98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009720  20000024  0800bebc  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20009744  0800bebc  00029744  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003208d  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005448  00000000  00000000  000520df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022d0  00000000  00000000  00057528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002078  00000000  00000000  000597f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000393a9  00000000  00000000  0005b870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002aa98  00000000  00000000  00094c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00154cb1  00000000  00000000  000bf6b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00214362  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009354  00000000  00000000  002143b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000024 	.word	0x20000024
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a13c 	.word	0x0800a13c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000028 	.word	0x20000028
 800023c:	0800a13c 	.word	0x0800a13c

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000250:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr

08000552 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000552:	b480      	push	{r7}
 8000554:	b083      	sub	sp, #12
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
 800055a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800055c:	bf00      	nop
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr

08000568 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
	...

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f001 faea 	bl	8001b54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f822 	bl	80005c8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000584:	f000 f89c 	bl	80006c0 <PeriphCommonClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000588:	f000 fe19 	bl	80011be <BSP_LCD_Init>

BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 800058c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000590:	2000      	movs	r0, #0
 8000592:	f000 ffb1 	bl	80014f8 <BSP_LCD_LayerDefaultInit>
BSP_LCD_Clear(LCD_COLOR_DARKCYAN);
 8000596:	4808      	ldr	r0, [pc, #32]	; (80005b8 <main+0x40>)
 8000598:	f001 f828 	bl	80015ec <BSP_LCD_Clear>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800059c:	f006 ff9a 	bl	80074d4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005a0:	4a06      	ldr	r2, [pc, #24]	; (80005bc <main+0x44>)
 80005a2:	2100      	movs	r1, #0
 80005a4:	4806      	ldr	r0, [pc, #24]	; (80005c0 <main+0x48>)
 80005a6:	f006 ffff 	bl	80075a8 <osThreadNew>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a05      	ldr	r2, [pc, #20]	; (80005c4 <main+0x4c>)
 80005ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005b0:	f006 ffc4 	bl	800753c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b4:	e7fe      	b.n	80005b4 <main+0x3c>
 80005b6:	bf00      	nop
 80005b8:	ff008080 	.word	0xff008080
 80005bc:	0800a178 	.word	0x0800a178
 80005c0:	08000721 	.word	0x08000721
 80005c4:	200006a8 	.word	0x200006a8

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	; 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 031c 	add.w	r3, r7, #28
 80005d2:	2234      	movs	r2, #52	; 0x34
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f009 fda8 	bl	800a12c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 0308 	add.w	r3, r7, #8
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005ec:	f004 fe06 	bl	80051fc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	4b31      	ldr	r3, [pc, #196]	; (80006b8 <SystemClock_Config+0xf0>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	4a30      	ldr	r2, [pc, #192]	; (80006b8 <SystemClock_Config+0xf0>)
 80005f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fa:	6413      	str	r3, [r2, #64]	; 0x40
 80005fc:	4b2e      	ldr	r3, [pc, #184]	; (80006b8 <SystemClock_Config+0xf0>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000608:	4b2c      	ldr	r3, [pc, #176]	; (80006bc <SystemClock_Config+0xf4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a2b      	ldr	r2, [pc, #172]	; (80006bc <SystemClock_Config+0xf4>)
 800060e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b29      	ldr	r3, [pc, #164]	; (80006bc <SystemClock_Config+0xf4>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800061c:	603b      	str	r3, [r7, #0]
 800061e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000620:	230b      	movs	r3, #11
 8000622:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000624:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000628:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062a:	2301      	movs	r3, #1
 800062c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062e:	2310      	movs	r3, #16
 8000630:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000632:	2301      	movs	r3, #1
 8000634:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000636:	2302      	movs	r3, #2
 8000638:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800063e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000640:	2319      	movs	r3, #25
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000644:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000648:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064a:	2302      	movs	r3, #2
 800064c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800064e:	2304      	movs	r3, #4
 8000650:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000652:	2302      	movs	r3, #2
 8000654:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	4618      	mov	r0, r3
 800065c:	f004 fe2e 	bl	80052bc <HAL_RCC_OscConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000666:	f000 f875 	bl	8000754 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800066a:	f004 fdd7 	bl	800521c <HAL_PWREx_EnableOverDrive>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000674:	f000 f86e 	bl	8000754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000678:	230f      	movs	r3, #15
 800067a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067c:	2302      	movs	r3, #2
 800067e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000684:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000688:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800068e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	2107      	movs	r1, #7
 8000696:	4618      	mov	r0, r3
 8000698:	f005 f8be 	bl	8005818 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xde>
  {
    Error_Handler();
 80006a2:	f000 f857 	bl	8000754 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2100      	movs	r1, #0
 80006aa:	2000      	movs	r0, #0
 80006ac:	f005 f9a0 	bl	80059f0 <HAL_RCC_MCOConfig>
}
 80006b0:	bf00      	nop
 80006b2:	3750      	adds	r7, #80	; 0x50
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b0a4      	sub	sp, #144	; 0x90
 80006c4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006c6:	463b      	mov	r3, r7
 80006c8:	2290      	movs	r2, #144	; 0x90
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f009 fd2d 	bl	800a12c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SAI1
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <PeriphCommonClock_Config+0x5c>)
 80006d4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_SAI2|RCC_PERIPHCLK_SDMMC2
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80006d6:	23c0      	movs	r3, #192	; 0xc0
 80006d8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80006da:	2302      	movs	r3, #2
 80006dc:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 80006de:	2303      	movs	r3, #3
 80006e0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 80006e2:	2301      	movs	r3, #1
 80006e4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80006e6:	2301      	movs	r3, #1
 80006e8:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80006ea:	2300      	movs	r3, #0
 80006ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 80006ee:	2300      	movs	r3, #0
 80006f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80006f2:	2300      	movs	r3, #0
 80006f4:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80006f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80006fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_CLK48;
 80006fc:	2300      	movs	r3, #0
 80006fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000702:	463b      	mov	r3, r7
 8000704:	4618      	mov	r0, r3
 8000706:	f005 faef 	bl	8005ce8 <HAL_RCCEx_PeriphCLKConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8000710:	f000 f820 	bl	8000754 <Error_Handler>
  }
}
 8000714:	bf00      	nop
 8000716:	3790      	adds	r7, #144	; 0x90
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	04380008 	.word	0x04380008

08000720 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000728:	2001      	movs	r0, #1
 800072a:	f006 ffe3 	bl	80076f4 <osDelay>
 800072e:	e7fb      	b.n	8000728 <StartDefaultTask+0x8>

08000730 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a04      	ldr	r2, [pc, #16]	; (8000750 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d101      	bne.n	8000746 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000742:	f001 fa15 	bl	8001b70 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40001000 	.word	0x40001000

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075c:	e7fe      	b.n	800075c <Error_Handler+0x8>
	...

08000760 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <HAL_MspInit+0x4c>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076a:	4a10      	ldr	r2, [pc, #64]	; (80007ac <HAL_MspInit+0x4c>)
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000770:	6413      	str	r3, [r2, #64]	; 0x40
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <HAL_MspInit+0x4c>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <HAL_MspInit+0x4c>)
 8000780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000782:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <HAL_MspInit+0x4c>)
 8000784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000788:	6453      	str	r3, [r2, #68]	; 0x44
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <HAL_MspInit+0x4c>)
 800078c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	210f      	movs	r1, #15
 800079a:	f06f 0001 	mvn.w	r0, #1
 800079e:	f001 fc03 	bl	8001fa8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800

080007b0 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a0d      	ldr	r2, [pc, #52]	; (80007f4 <HAL_DMA2D_MspInit+0x44>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d113      	bne.n	80007ea <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80007c2:	4b0d      	ldr	r3, [pc, #52]	; (80007f8 <HAL_DMA2D_MspInit+0x48>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a0c      	ldr	r2, [pc, #48]	; (80007f8 <HAL_DMA2D_MspInit+0x48>)
 80007c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <HAL_DMA2D_MspInit+0x48>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	2105      	movs	r1, #5
 80007de:	205a      	movs	r0, #90	; 0x5a
 80007e0:	f001 fbe2 	bl	8001fa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80007e4:	205a      	movs	r0, #90	; 0x5a
 80007e6:	f001 fbfb 	bl	8001fe0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80007ea:	bf00      	nop
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	4002b000 	.word	0x4002b000
 80007f8:	40023800 	.word	0x40023800

080007fc <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	; 0x28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  if(hdsi->Instance==DSI)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a1b      	ldr	r2, [pc, #108]	; (8000888 <HAL_DSI_MspInit+0x8c>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d12f      	bne.n	800087e <HAL_DSI_MspInit+0x82>
  {
  /* USER CODE BEGIN DSI_MspInit 0 */

  /* USER CODE END DSI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 800081e:	4b1b      	ldr	r3, [pc, #108]	; (800088c <HAL_DSI_MspInit+0x90>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	4a1a      	ldr	r2, [pc, #104]	; (800088c <HAL_DSI_MspInit+0x90>)
 8000824:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000828:	6453      	str	r3, [r2, #68]	; 0x44
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <HAL_DSI_MspInit+0x90>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000832:	613b      	str	r3, [r7, #16]
 8000834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <HAL_DSI_MspInit+0x90>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a14      	ldr	r2, [pc, #80]	; (800088c <HAL_DSI_MspInit+0x90>)
 800083c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b12      	ldr	r3, [pc, #72]	; (800088c <HAL_DSI_MspInit+0x90>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = DSIHOST_TE_Pin;
 800084e:	2304      	movs	r3, #4
 8000850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000852:	2302      	movs	r3, #2
 8000854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085a:	2300      	movs	r3, #0
 800085c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800085e:	230d      	movs	r3, #13
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	4809      	ldr	r0, [pc, #36]	; (8000890 <HAL_DSI_MspInit+0x94>)
 800086a:	f002 ff01 	bl	8003670 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2105      	movs	r1, #5
 8000872:	2062      	movs	r0, #98	; 0x62
 8000874:	f001 fb98 	bl	8001fa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8000878:	2062      	movs	r0, #98	; 0x62
 800087a:	f001 fbb1 	bl	8001fe0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DSI_MspInit 1 */

  /* USER CODE END DSI_MspInit 1 */
  }

}
 800087e:	bf00      	nop
 8000880:	3728      	adds	r7, #40	; 0x28
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40016c00 	.word	0x40016c00
 800088c:	40023800 	.word	0x40023800
 8000890:	40022400 	.word	0x40022400

08000894 <HAL_DSI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspDeInit(DSI_HandleTypeDef* hdsi)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance==DSI)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a09      	ldr	r2, [pc, #36]	; (80008c8 <HAL_DSI_MspDeInit+0x34>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d10c      	bne.n	80008c0 <HAL_DSI_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN DSI_MspDeInit 0 */

  /* USER CODE END DSI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DSI_CLK_DISABLE();
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <HAL_DSI_MspDeInit+0x38>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	4a08      	ldr	r2, [pc, #32]	; (80008cc <HAL_DSI_MspDeInit+0x38>)
 80008ac:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80008b0:	6453      	str	r3, [r2, #68]	; 0x44

    /**DSIHOST GPIO Configuration
    PJ2     ------> DSIHOST_TE
    */
    HAL_GPIO_DeInit(DSIHOST_TE_GPIO_Port, DSIHOST_TE_Pin);
 80008b2:	2104      	movs	r1, #4
 80008b4:	4806      	ldr	r0, [pc, #24]	; (80008d0 <HAL_DSI_MspDeInit+0x3c>)
 80008b6:	f003 f887 	bl	80039c8 <HAL_GPIO_DeInit>

    /* DSI interrupt DeInit */
    HAL_NVIC_DisableIRQ(DSI_IRQn);
 80008ba:	2062      	movs	r0, #98	; 0x62
 80008bc:	f001 fb9e 	bl	8001ffc <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN DSI_MspDeInit 1 */

  /* USER CODE END DSI_MspDeInit 1 */
  }

}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40016c00 	.word	0x40016c00
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40022400 	.word	0x40022400

080008d4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance==LTDC)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a0d      	ldr	r2, [pc, #52]	; (8000918 <HAL_LTDC_MspInit+0x44>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d113      	bne.n	800090e <HAL_LTDC_MspInit+0x3a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <HAL_LTDC_MspInit+0x48>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ea:	4a0c      	ldr	r2, [pc, #48]	; (800091c <HAL_LTDC_MspInit+0x48>)
 80008ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80008f0:	6453      	str	r3, [r2, #68]	; 0x44
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <HAL_LTDC_MspInit+0x48>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2105      	movs	r1, #5
 8000902:	2058      	movs	r0, #88	; 0x58
 8000904:	f001 fb50 	bl	8001fa8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000908:	2058      	movs	r0, #88	; 0x58
 800090a:	f001 fb69 	bl	8001fe0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800090e:	bf00      	nop
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40016800 	.word	0x40016800
 800091c:	40023800 	.word	0x40023800

08000920 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000920:	b480      	push	{r7}
 8000922:	b087      	sub	sp, #28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a1c      	ldr	r2, [pc, #112]	; (80009a0 <HAL_TIM_Base_MspInit+0x80>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d10c      	bne.n	800094c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000932:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <HAL_TIM_Base_MspInit+0x84>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	4a1b      	ldr	r2, [pc, #108]	; (80009a4 <HAL_TIM_Base_MspInit+0x84>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6453      	str	r3, [r2, #68]	; 0x44
 800093e:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <HAL_TIM_Base_MspInit+0x84>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	617b      	str	r3, [r7, #20]
 8000948:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800094a:	e022      	b.n	8000992 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM10)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a15      	ldr	r2, [pc, #84]	; (80009a8 <HAL_TIM_Base_MspInit+0x88>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d10c      	bne.n	8000970 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000956:	4b13      	ldr	r3, [pc, #76]	; (80009a4 <HAL_TIM_Base_MspInit+0x84>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	4a12      	ldr	r2, [pc, #72]	; (80009a4 <HAL_TIM_Base_MspInit+0x84>)
 800095c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000960:	6453      	str	r3, [r2, #68]	; 0x44
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <HAL_TIM_Base_MspInit+0x84>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]
}
 800096e:	e010      	b.n	8000992 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM11)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a0d      	ldr	r2, [pc, #52]	; (80009ac <HAL_TIM_Base_MspInit+0x8c>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d10b      	bne.n	8000992 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <HAL_TIM_Base_MspInit+0x84>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	4a09      	ldr	r2, [pc, #36]	; (80009a4 <HAL_TIM_Base_MspInit+0x84>)
 8000980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000984:	6453      	str	r3, [r2, #68]	; 0x44
 8000986:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <HAL_TIM_Base_MspInit+0x84>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
}
 8000992:	bf00      	nop
 8000994:	371c      	adds	r7, #28
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40010000 	.word	0x40010000
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40014400 	.word	0x40014400
 80009ac:	40014800 	.word	0x40014800

080009b0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80009c4:	4b3b      	ldr	r3, [pc, #236]	; (8000ab4 <HAL_FMC_MspInit+0x104>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d16f      	bne.n	8000aac <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80009cc:	4b39      	ldr	r3, [pc, #228]	; (8000ab4 <HAL_FMC_MspInit+0x104>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80009d2:	4b39      	ldr	r3, [pc, #228]	; (8000ab8 <HAL_FMC_MspInit+0x108>)
 80009d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009d6:	4a38      	ldr	r2, [pc, #224]	; (8000ab8 <HAL_FMC_MspInit+0x108>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6393      	str	r3, [r2, #56]	; 0x38
 80009de:	4b36      	ldr	r3, [pc, #216]	; (8000ab8 <HAL_FMC_MspInit+0x108>)
 80009e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80009ea:	f64f 7383 	movw	r3, #65411	; 0xff83
 80009ee:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f8:	2303      	movs	r3, #3
 80009fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009fc:	230c      	movs	r3, #12
 80009fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	4619      	mov	r1, r3
 8000a04:	482d      	ldr	r0, [pc, #180]	; (8000abc <HAL_FMC_MspInit+0x10c>)
 8000a06:	f002 fe33 	bl	8003670 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin
 8000a0a:	f248 1337 	movw	r3, #33079	; 0x8137
 8000a0e:	607b      	str	r3, [r7, #4]
                          |FMC_A10_Pin|FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a1c:	230c      	movs	r3, #12
 8000a1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	4619      	mov	r1, r3
 8000a24:	4826      	ldr	r0, [pc, #152]	; (8000ac0 <HAL_FMC_MspInit+0x110>)
 8000a26:	f002 fe23 	bl	8003670 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000a2a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000a2e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a3c:	230c      	movs	r3, #12
 8000a3e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	4619      	mov	r1, r3
 8000a44:	481f      	ldr	r0, [pc, #124]	; (8000ac4 <HAL_FMC_MspInit+0x114>)
 8000a46:	f002 fe13 	bl	8003670 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8000a4a:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8000a4e:	607b      	str	r3, [r7, #4]
                          |D29_Pin|D31_Pin|D28_Pin|D25_Pin
                          |D30_Pin|D24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a5c:	230c      	movs	r3, #12
 8000a5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	4619      	mov	r1, r3
 8000a64:	4818      	ldr	r0, [pc, #96]	; (8000ac8 <HAL_FMC_MspInit+0x118>)
 8000a66:	f002 fe03 	bl	8003670 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000a6a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000a6e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a7c:	230c      	movs	r3, #12
 8000a7e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	4619      	mov	r1, r3
 8000a84:	4811      	ldr	r0, [pc, #68]	; (8000acc <HAL_FMC_MspInit+0x11c>)
 8000a86:	f002 fdf3 	bl	8003670 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin
 8000a8a:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8000a8e:	607b      	str	r3, [r7, #4]
                          |FMC_SDNE0_Pin|FMC_SDCKE0_Pin|D20_Pin|FMC_D_7_Pin
                          |FMC_D19_Pin|FMC_D16_Pin|FMC_D18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a9c:	230c      	movs	r3, #12
 8000a9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480a      	ldr	r0, [pc, #40]	; (8000ad0 <HAL_FMC_MspInit+0x120>)
 8000aa6:	f002 fde3 	bl	8003670 <HAL_GPIO_Init>
 8000aaa:	e000      	b.n	8000aae <HAL_FMC_MspInit+0xfe>
    return;
 8000aac:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000aae:	3718      	adds	r7, #24
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200006ac 	.word	0x200006ac
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	40021800 	.word	0x40021800
 8000ac4:	40020c00 	.word	0x40020c00
 8000ac8:	40022000 	.word	0x40022000
 8000acc:	40021400 	.word	0x40021400
 8000ad0:	40021c00 	.word	0x40021c00

08000ad4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000adc:	f7ff ff68 	bl	80009b0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08e      	sub	sp, #56	; 0x38
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000af0:	2300      	movs	r3, #0
 8000af2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000af4:	2300      	movs	r3, #0
 8000af6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000af8:	4b33      	ldr	r3, [pc, #204]	; (8000bc8 <HAL_InitTick+0xe0>)
 8000afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afc:	4a32      	ldr	r2, [pc, #200]	; (8000bc8 <HAL_InitTick+0xe0>)
 8000afe:	f043 0310 	orr.w	r3, r3, #16
 8000b02:	6413      	str	r3, [r2, #64]	; 0x40
 8000b04:	4b30      	ldr	r3, [pc, #192]	; (8000bc8 <HAL_InitTick+0xe0>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b08:	f003 0310 	and.w	r3, r3, #16
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b10:	f107 0210 	add.w	r2, r7, #16
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4611      	mov	r1, r2
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f005 f8b2 	bl	8005c84 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b20:	6a3b      	ldr	r3, [r7, #32]
 8000b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d103      	bne.n	8000b32 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b2a:	f005 f897 	bl	8005c5c <HAL_RCC_GetPCLK1Freq>
 8000b2e:	6378      	str	r0, [r7, #52]	; 0x34
 8000b30:	e004      	b.n	8000b3c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b32:	f005 f893 	bl	8005c5c <HAL_RCC_GetPCLK1Freq>
 8000b36:	4603      	mov	r3, r0
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b3e:	4a23      	ldr	r2, [pc, #140]	; (8000bcc <HAL_InitTick+0xe4>)
 8000b40:	fba2 2303 	umull	r2, r3, r2, r3
 8000b44:	0c9b      	lsrs	r3, r3, #18
 8000b46:	3b01      	subs	r3, #1
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b4a:	4b21      	ldr	r3, [pc, #132]	; (8000bd0 <HAL_InitTick+0xe8>)
 8000b4c:	4a21      	ldr	r2, [pc, #132]	; (8000bd4 <HAL_InitTick+0xec>)
 8000b4e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b50:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <HAL_InitTick+0xe8>)
 8000b52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b56:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b58:	4a1d      	ldr	r2, [pc, #116]	; (8000bd0 <HAL_InitTick+0xe8>)
 8000b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b5c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	; (8000bd0 <HAL_InitTick+0xe8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b64:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <HAL_InitTick+0xe8>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6a:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <HAL_InitTick+0xe8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b70:	4817      	ldr	r0, [pc, #92]	; (8000bd0 <HAL_InitTick+0xe8>)
 8000b72:	f005 fd72 	bl	800665a <HAL_TIM_Base_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d11b      	bne.n	8000bbc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b84:	4812      	ldr	r0, [pc, #72]	; (8000bd0 <HAL_InitTick+0xe8>)
 8000b86:	f005 fdbf 	bl	8006708 <HAL_TIM_Base_Start_IT>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d111      	bne.n	8000bbc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b98:	2036      	movs	r0, #54	; 0x36
 8000b9a:	f001 fa21 	bl	8001fe0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b0f      	cmp	r3, #15
 8000ba2:	d808      	bhi.n	8000bb6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	2036      	movs	r0, #54	; 0x36
 8000baa:	f001 f9fd 	bl	8001fa8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bae:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <HAL_InitTick+0xf0>)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6013      	str	r3, [r2, #0]
 8000bb4:	e002      	b.n	8000bbc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bbc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3738      	adds	r7, #56	; 0x38
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40023800 	.word	0x40023800
 8000bcc:	431bde83 	.word	0x431bde83
 8000bd0:	200006b0 	.word	0x200006b0
 8000bd4:	40001000 	.word	0x40001000
 8000bd8:	20000018 	.word	0x20000018

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <NMI_Handler+0x4>

08000be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <MemManage_Handler+0x4>

08000bee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <TIM6_DAC_IRQHandler+0x10>)
 8000c0e:	f005 fdf3 	bl	80067f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200006b0 	.word	0x200006b0

08000c1c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000c20:	4802      	ldr	r0, [pc, #8]	; (8000c2c <OTG_HS_IRQHandler+0x10>)
 8000c22:	f003 fbb1 	bl	8004388 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200001a0 	.word	0x200001a0

08000c30 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <LTDC_IRQHandler+0x10>)
 8000c36:	f003 f8bd 	bl	8003db4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200000f8 	.word	0x200000f8

08000c44 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <DMA2D_IRQHandler+0x10>)
 8000c4a:	f001 fd11 	bl	8002670 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000040 	.word	0x20000040

08000c58 <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <CEC_IRQHandler+0x10>)
 8000c5e:	f000 ffcb 	bl	8001bf8 <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200000b4 	.word	0x200000b4

08000c6c <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <DSI_IRQHandler+0x10>)
 8000c72:	f002 f91f 	bl	8002eb4 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000098 	.word	0x20000098

08000c80 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <SystemInit+0x20>)
 8000c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <SystemInit+0x20>)
 8000c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca8:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000caa:	490e      	ldr	r1, [pc, #56]	; (8000ce4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc0:	4c0b      	ldr	r4, [pc, #44]	; (8000cf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cce:	f7ff ffd7 	bl	8000c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f009 f9f9 	bl	800a0c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd6:	f7ff fc4f 	bl	8000578 <main>
  bx  lr    
 8000cda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cdc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000ce8:	0800be98 	.word	0x0800be98
  ldr r2, =_sbss
 8000cec:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000cf0:	20009744 	.word	0x20009744

08000cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC_IRQHandler>
	...

08000cf8 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000d02:	49c1      	ldr	r1, [pc, #772]	; (8001008 <OTM8009A_Init+0x310>)
 8000d04:	2000      	movs	r0, #0
 8000d06:	f000 fc99 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 8000d0a:	49c0      	ldr	r1, [pc, #768]	; (800100c <OTM8009A_Init+0x314>)
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	f000 fc95 	bl	800163c <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 8000d12:	49bf      	ldr	r1, [pc, #764]	; (8001010 <OTM8009A_Init+0x318>)
 8000d14:	2000      	movs	r0, #0
 8000d16:	f000 fc91 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 8000d1a:	49be      	ldr	r1, [pc, #760]	; (8001014 <OTM8009A_Init+0x31c>)
 8000d1c:	2002      	movs	r0, #2
 8000d1e:	f000 fc8d 	bl	800163c <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000d22:	49bb      	ldr	r1, [pc, #748]	; (8001010 <OTM8009A_Init+0x318>)
 8000d24:	2000      	movs	r0, #0
 8000d26:	f000 fc89 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 8000d2a:	49bb      	ldr	r1, [pc, #748]	; (8001018 <OTM8009A_Init+0x320>)
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f000 fc85 	bl	800163c <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8000d32:	200a      	movs	r0, #10
 8000d34:	f000 fa38 	bl	80011a8 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 8000d38:	49b8      	ldr	r1, [pc, #736]	; (800101c <OTM8009A_Init+0x324>)
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f000 fc7e 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8000d40:	49b7      	ldr	r1, [pc, #732]	; (8001020 <OTM8009A_Init+0x328>)
 8000d42:	2000      	movs	r0, #0
 8000d44:	f000 fc7a 	bl	800163c <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8000d48:	200a      	movs	r0, #10
 8000d4a:	f000 fa2d 	bl	80011a8 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8000d4e:	49b5      	ldr	r1, [pc, #724]	; (8001024 <OTM8009A_Init+0x32c>)
 8000d50:	2000      	movs	r0, #0
 8000d52:	f000 fc73 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8000d56:	49b4      	ldr	r1, [pc, #720]	; (8001028 <OTM8009A_Init+0x330>)
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f000 fc6f 	bl	800163c <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8000d5e:	49b3      	ldr	r1, [pc, #716]	; (800102c <OTM8009A_Init+0x334>)
 8000d60:	2000      	movs	r0, #0
 8000d62:	f000 fc6b 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8000d66:	49b2      	ldr	r1, [pc, #712]	; (8001030 <OTM8009A_Init+0x338>)
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f000 fc67 	bl	800163c <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8000d6e:	49b1      	ldr	r1, [pc, #708]	; (8001034 <OTM8009A_Init+0x33c>)
 8000d70:	2000      	movs	r0, #0
 8000d72:	f000 fc63 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8000d76:	49b0      	ldr	r1, [pc, #704]	; (8001038 <OTM8009A_Init+0x340>)
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f000 fc5f 	bl	800163c <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000d7e:	49a2      	ldr	r1, [pc, #648]	; (8001008 <OTM8009A_Init+0x310>)
 8000d80:	2000      	movs	r0, #0
 8000d82:	f000 fc5b 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 8000d86:	49ad      	ldr	r1, [pc, #692]	; (800103c <OTM8009A_Init+0x344>)
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f000 fc57 	bl	800163c <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000d8e:	49ac      	ldr	r1, [pc, #688]	; (8001040 <OTM8009A_Init+0x348>)
 8000d90:	2000      	movs	r0, #0
 8000d92:	f000 fc53 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8000d96:	49ab      	ldr	r1, [pc, #684]	; (8001044 <OTM8009A_Init+0x34c>)
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f000 fc4f 	bl	800163c <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000d9e:	49aa      	ldr	r1, [pc, #680]	; (8001048 <OTM8009A_Init+0x350>)
 8000da0:	2000      	movs	r0, #0
 8000da2:	f000 fc4b 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8000da6:	49a9      	ldr	r1, [pc, #676]	; (800104c <OTM8009A_Init+0x354>)
 8000da8:	2000      	movs	r0, #0
 8000daa:	f000 fc47 	bl	800163c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8000dae:	49a8      	ldr	r1, [pc, #672]	; (8001050 <OTM8009A_Init+0x358>)
 8000db0:	2000      	movs	r0, #0
 8000db2:	f000 fc43 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 8000db6:	49a7      	ldr	r1, [pc, #668]	; (8001054 <OTM8009A_Init+0x35c>)
 8000db8:	2000      	movs	r0, #0
 8000dba:	f000 fc3f 	bl	800163c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8000dbe:	49a6      	ldr	r1, [pc, #664]	; (8001058 <OTM8009A_Init+0x360>)
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f000 fc3b 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8000dc6:	499a      	ldr	r1, [pc, #616]	; (8001030 <OTM8009A_Init+0x338>)
 8000dc8:	2000      	movs	r0, #0
 8000dca:	f000 fc37 	bl	800163c <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000dce:	498e      	ldr	r1, [pc, #568]	; (8001008 <OTM8009A_Init+0x310>)
 8000dd0:	2000      	movs	r0, #0
 8000dd2:	f000 fc33 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 8000dd6:	49a1      	ldr	r1, [pc, #644]	; (800105c <OTM8009A_Init+0x364>)
 8000dd8:	2002      	movs	r0, #2
 8000dda:	f000 fc2f 	bl	800163c <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 8000dde:	49a0      	ldr	r1, [pc, #640]	; (8001060 <OTM8009A_Init+0x368>)
 8000de0:	2000      	movs	r0, #0
 8000de2:	f000 fc2b 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 8000de6:	499f      	ldr	r1, [pc, #636]	; (8001064 <OTM8009A_Init+0x36c>)
 8000de8:	2000      	movs	r0, #0
 8000dea:	f000 fc27 	bl	800163c <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 8000dee:	499e      	ldr	r1, [pc, #632]	; (8001068 <OTM8009A_Init+0x370>)
 8000df0:	2000      	movs	r0, #0
 8000df2:	f000 fc23 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 8000df6:	499d      	ldr	r1, [pc, #628]	; (800106c <OTM8009A_Init+0x374>)
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f000 fc1f 	bl	800163c <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 8000dfe:	499c      	ldr	r1, [pc, #624]	; (8001070 <OTM8009A_Init+0x378>)
 8000e00:	2000      	movs	r0, #0
 8000e02:	f000 fc1b 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 8000e06:	499b      	ldr	r1, [pc, #620]	; (8001074 <OTM8009A_Init+0x37c>)
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f000 fc17 	bl	800163c <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000e0e:	498c      	ldr	r1, [pc, #560]	; (8001040 <OTM8009A_Init+0x348>)
 8000e10:	2000      	movs	r0, #0
 8000e12:	f000 fc13 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8000e16:	4998      	ldr	r1, [pc, #608]	; (8001078 <OTM8009A_Init+0x380>)
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f000 fc0f 	bl	800163c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8000e1e:	498a      	ldr	r1, [pc, #552]	; (8001048 <OTM8009A_Init+0x350>)
 8000e20:	2000      	movs	r0, #0
 8000e22:	f000 fc0b 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8000e26:	4995      	ldr	r1, [pc, #596]	; (800107c <OTM8009A_Init+0x384>)
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f000 fc07 	bl	800163c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8000e2e:	4994      	ldr	r1, [pc, #592]	; (8001080 <OTM8009A_Init+0x388>)
 8000e30:	2000      	movs	r0, #0
 8000e32:	f000 fc03 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8000e36:	4993      	ldr	r1, [pc, #588]	; (8001084 <OTM8009A_Init+0x38c>)
 8000e38:	2002      	movs	r0, #2
 8000e3a:	f000 fbff 	bl	800163c <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000e3e:	4974      	ldr	r1, [pc, #464]	; (8001010 <OTM8009A_Init+0x318>)
 8000e40:	2000      	movs	r0, #0
 8000e42:	f000 fbfb 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8000e46:	4990      	ldr	r1, [pc, #576]	; (8001088 <OTM8009A_Init+0x390>)
 8000e48:	2006      	movs	r0, #6
 8000e4a:	f000 fbf7 	bl	800163c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000e4e:	498f      	ldr	r1, [pc, #572]	; (800108c <OTM8009A_Init+0x394>)
 8000e50:	2000      	movs	r0, #0
 8000e52:	f000 fbf3 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 8000e56:	498e      	ldr	r1, [pc, #568]	; (8001090 <OTM8009A_Init+0x398>)
 8000e58:	200e      	movs	r0, #14
 8000e5a:	f000 fbef 	bl	800163c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000e5e:	498d      	ldr	r1, [pc, #564]	; (8001094 <OTM8009A_Init+0x39c>)
 8000e60:	2000      	movs	r0, #0
 8000e62:	f000 fbeb 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8000e66:	498c      	ldr	r1, [pc, #560]	; (8001098 <OTM8009A_Init+0x3a0>)
 8000e68:	200e      	movs	r0, #14
 8000e6a:	f000 fbe7 	bl	800163c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000e6e:	498b      	ldr	r1, [pc, #556]	; (800109c <OTM8009A_Init+0x3a4>)
 8000e70:	2000      	movs	r0, #0
 8000e72:	f000 fbe3 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8000e76:	498a      	ldr	r1, [pc, #552]	; (80010a0 <OTM8009A_Init+0x3a8>)
 8000e78:	200a      	movs	r0, #10
 8000e7a:	f000 fbdf 	bl	800163c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000e7e:	4989      	ldr	r1, [pc, #548]	; (80010a4 <OTM8009A_Init+0x3ac>)
 8000e80:	2000      	movs	r0, #0
 8000e82:	f000 fbdb 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 8000e86:	4988      	ldr	r1, [pc, #544]	; (80010a8 <OTM8009A_Init+0x3b0>)
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f000 fbd7 	bl	800163c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000e8e:	4960      	ldr	r1, [pc, #384]	; (8001010 <OTM8009A_Init+0x318>)
 8000e90:	2000      	movs	r0, #0
 8000e92:	f000 fbd3 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 8000e96:	4985      	ldr	r1, [pc, #532]	; (80010ac <OTM8009A_Init+0x3b4>)
 8000e98:	200a      	movs	r0, #10
 8000e9a:	f000 fbcf 	bl	800163c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000e9e:	4984      	ldr	r1, [pc, #528]	; (80010b0 <OTM8009A_Init+0x3b8>)
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f000 fbcb 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 8000ea6:	4983      	ldr	r1, [pc, #524]	; (80010b4 <OTM8009A_Init+0x3bc>)
 8000ea8:	200f      	movs	r0, #15
 8000eaa:	f000 fbc7 	bl	800163c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000eae:	4977      	ldr	r1, [pc, #476]	; (800108c <OTM8009A_Init+0x394>)
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f000 fbc3 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 8000eb6:	4980      	ldr	r1, [pc, #512]	; (80010b8 <OTM8009A_Init+0x3c0>)
 8000eb8:	200f      	movs	r0, #15
 8000eba:	f000 fbbf 	bl	800163c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000ebe:	4975      	ldr	r1, [pc, #468]	; (8001094 <OTM8009A_Init+0x39c>)
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f000 fbbb 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 8000ec6:	497d      	ldr	r1, [pc, #500]	; (80010bc <OTM8009A_Init+0x3c4>)
 8000ec8:	200a      	movs	r0, #10
 8000eca:	f000 fbb7 	bl	800163c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000ece:	4973      	ldr	r1, [pc, #460]	; (800109c <OTM8009A_Init+0x3a4>)
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f000 fbb3 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 8000ed6:	497a      	ldr	r1, [pc, #488]	; (80010c0 <OTM8009A_Init+0x3c8>)
 8000ed8:	200f      	movs	r0, #15
 8000eda:	f000 fbaf 	bl	800163c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000ede:	4971      	ldr	r1, [pc, #452]	; (80010a4 <OTM8009A_Init+0x3ac>)
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f000 fbab 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 8000ee6:	4977      	ldr	r1, [pc, #476]	; (80010c4 <OTM8009A_Init+0x3cc>)
 8000ee8:	200f      	movs	r0, #15
 8000eea:	f000 fba7 	bl	800163c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8000eee:	4976      	ldr	r1, [pc, #472]	; (80010c8 <OTM8009A_Init+0x3d0>)
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f000 fba3 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8000ef6:	4975      	ldr	r1, [pc, #468]	; (80010cc <OTM8009A_Init+0x3d4>)
 8000ef8:	200a      	movs	r0, #10
 8000efa:	f000 fb9f 	bl	800163c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8000efe:	4974      	ldr	r1, [pc, #464]	; (80010d0 <OTM8009A_Init+0x3d8>)
 8000f00:	2000      	movs	r0, #0
 8000f02:	f000 fb9b 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8000f06:	4973      	ldr	r1, [pc, #460]	; (80010d4 <OTM8009A_Init+0x3dc>)
 8000f08:	200a      	movs	r0, #10
 8000f0a:	f000 fb97 	bl	800163c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8000f0e:	4940      	ldr	r1, [pc, #256]	; (8001010 <OTM8009A_Init+0x318>)
 8000f10:	2000      	movs	r0, #0
 8000f12:	f000 fb93 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8000f16:	4970      	ldr	r1, [pc, #448]	; (80010d8 <OTM8009A_Init+0x3e0>)
 8000f18:	200a      	movs	r0, #10
 8000f1a:	f000 fb8f 	bl	800163c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8000f1e:	4964      	ldr	r1, [pc, #400]	; (80010b0 <OTM8009A_Init+0x3b8>)
 8000f20:	2000      	movs	r0, #0
 8000f22:	f000 fb8b 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8000f26:	496d      	ldr	r1, [pc, #436]	; (80010dc <OTM8009A_Init+0x3e4>)
 8000f28:	200f      	movs	r0, #15
 8000f2a:	f000 fb87 	bl	800163c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8000f2e:	4957      	ldr	r1, [pc, #348]	; (800108c <OTM8009A_Init+0x394>)
 8000f30:	2000      	movs	r0, #0
 8000f32:	f000 fb83 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 8000f36:	496a      	ldr	r1, [pc, #424]	; (80010e0 <OTM8009A_Init+0x3e8>)
 8000f38:	200f      	movs	r0, #15
 8000f3a:	f000 fb7f 	bl	800163c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8000f3e:	4955      	ldr	r1, [pc, #340]	; (8001094 <OTM8009A_Init+0x39c>)
 8000f40:	2000      	movs	r0, #0
 8000f42:	f000 fb7b 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8000f46:	4967      	ldr	r1, [pc, #412]	; (80010e4 <OTM8009A_Init+0x3ec>)
 8000f48:	200a      	movs	r0, #10
 8000f4a:	f000 fb77 	bl	800163c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8000f4e:	4953      	ldr	r1, [pc, #332]	; (800109c <OTM8009A_Init+0x3a4>)
 8000f50:	2000      	movs	r0, #0
 8000f52:	f000 fb73 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8000f56:	4964      	ldr	r1, [pc, #400]	; (80010e8 <OTM8009A_Init+0x3f0>)
 8000f58:	200f      	movs	r0, #15
 8000f5a:	f000 fb6f 	bl	800163c <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8000f5e:	4951      	ldr	r1, [pc, #324]	; (80010a4 <OTM8009A_Init+0x3ac>)
 8000f60:	2000      	movs	r0, #0
 8000f62:	f000 fb6b 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8000f66:	4961      	ldr	r1, [pc, #388]	; (80010ec <OTM8009A_Init+0x3f4>)
 8000f68:	200f      	movs	r0, #15
 8000f6a:	f000 fb67 	bl	800163c <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8000f6e:	4934      	ldr	r1, [pc, #208]	; (8001040 <OTM8009A_Init+0x348>)
 8000f70:	2000      	movs	r0, #0
 8000f72:	f000 fb63 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 8000f76:	495e      	ldr	r1, [pc, #376]	; (80010f0 <OTM8009A_Init+0x3f8>)
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f000 fb5f 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 8000f7e:	495d      	ldr	r1, [pc, #372]	; (80010f4 <OTM8009A_Init+0x3fc>)
 8000f80:	2000      	movs	r0, #0
 8000f82:	f000 fb5b 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 8000f86:	495c      	ldr	r1, [pc, #368]	; (80010f8 <OTM8009A_Init+0x400>)
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f000 fb57 	bl	800163c <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 22,7kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 8000f8e:	495b      	ldr	r1, [pc, #364]	; (80010fc <OTM8009A_Init+0x404>)
 8000f90:	2000      	movs	r0, #0
 8000f92:	f000 fb53 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 8000f96:	495a      	ldr	r1, [pc, #360]	; (8001100 <OTM8009A_Init+0x408>)
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f000 fb4f 	bl	800163c <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000f9e:	491a      	ldr	r1, [pc, #104]	; (8001008 <OTM8009A_Init+0x310>)
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f000 fb4b 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 8000fa6:	4957      	ldr	r1, [pc, #348]	; (8001104 <OTM8009A_Init+0x40c>)
 8000fa8:	2003      	movs	r0, #3
 8000faa:	f000 fb47 	bl	800163c <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000fae:	4916      	ldr	r1, [pc, #88]	; (8001008 <OTM8009A_Init+0x310>)
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f000 fb43 	bl	800163c <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000fb6:	4914      	ldr	r1, [pc, #80]	; (8001008 <OTM8009A_Init+0x310>)
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f000 fb3f 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 8000fbe:	4952      	ldr	r1, [pc, #328]	; (8001108 <OTM8009A_Init+0x410>)
 8000fc0:	2010      	movs	r0, #16
 8000fc2:	f000 fb3b 	bl	800163c <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8000fc6:	4910      	ldr	r1, [pc, #64]	; (8001008 <OTM8009A_Init+0x310>)
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f000 fb37 	bl	800163c <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8000fce:	494f      	ldr	r1, [pc, #316]	; (800110c <OTM8009A_Init+0x414>)
 8000fd0:	2010      	movs	r0, #16
 8000fd2:	f000 fb33 	bl	800163c <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8000fd6:	494e      	ldr	r1, [pc, #312]	; (8001110 <OTM8009A_Init+0x418>)
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f000 fb2f 	bl	800163c <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8000fde:	2078      	movs	r0, #120	; 0x78
 8000fe0:	f000 f8e2 	bl	80011a8 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d008      	beq.n	8000ffc <OTM8009A_Init+0x304>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	f040 8095 	bne.w	800111c <OTM8009A_Init+0x424>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8000ff2:	4948      	ldr	r1, [pc, #288]	; (8001114 <OTM8009A_Init+0x41c>)
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f000 fb21 	bl	800163c <DSI_IO_WriteCmd>
    break;
 8000ffa:	e090      	b.n	800111e <OTM8009A_Init+0x426>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8000ffc:	4946      	ldr	r1, [pc, #280]	; (8001118 <OTM8009A_Init+0x420>)
 8000ffe:	2000      	movs	r0, #0
 8001000:	f000 fb1c 	bl	800163c <DSI_IO_WriteCmd>
    break;
 8001004:	e08b      	b.n	800111e <OTM8009A_Init+0x426>
 8001006:	bf00      	nop
 8001008:	0800a2fc 	.word	0x0800a2fc
 800100c:	0800a1b4 	.word	0x0800a1b4
 8001010:	0800a300 	.word	0x0800a300
 8001014:	0800a1b8 	.word	0x0800a1b8
 8001018:	0800a304 	.word	0x0800a304
 800101c:	0800a308 	.word	0x0800a308
 8001020:	0800a30c 	.word	0x0800a30c
 8001024:	0800a310 	.word	0x0800a310
 8001028:	0800a314 	.word	0x0800a314
 800102c:	0800a318 	.word	0x0800a318
 8001030:	0800a31c 	.word	0x0800a31c
 8001034:	0800a320 	.word	0x0800a320
 8001038:	0800a324 	.word	0x0800a324
 800103c:	0800a328 	.word	0x0800a328
 8001040:	0800a32c 	.word	0x0800a32c
 8001044:	0800a330 	.word	0x0800a330
 8001048:	0800a334 	.word	0x0800a334
 800104c:	0800a338 	.word	0x0800a338
 8001050:	0800a33c 	.word	0x0800a33c
 8001054:	0800a340 	.word	0x0800a340
 8001058:	0800a344 	.word	0x0800a344
 800105c:	0800a1e4 	.word	0x0800a1e4
 8001060:	0800a348 	.word	0x0800a348
 8001064:	0800a34c 	.word	0x0800a34c
 8001068:	0800a350 	.word	0x0800a350
 800106c:	0800a354 	.word	0x0800a354
 8001070:	0800a358 	.word	0x0800a358
 8001074:	0800a35c 	.word	0x0800a35c
 8001078:	0800a360 	.word	0x0800a360
 800107c:	0800a364 	.word	0x0800a364
 8001080:	0800a368 	.word	0x0800a368
 8001084:	0800a1e8 	.word	0x0800a1e8
 8001088:	0800a1ec 	.word	0x0800a1ec
 800108c:	0800a36c 	.word	0x0800a36c
 8001090:	0800a1f4 	.word	0x0800a1f4
 8001094:	0800a370 	.word	0x0800a370
 8001098:	0800a204 	.word	0x0800a204
 800109c:	0800a374 	.word	0x0800a374
 80010a0:	0800a214 	.word	0x0800a214
 80010a4:	0800a378 	.word	0x0800a378
 80010a8:	0800a3b0 	.word	0x0800a3b0
 80010ac:	0800a220 	.word	0x0800a220
 80010b0:	0800a37c 	.word	0x0800a37c
 80010b4:	0800a22c 	.word	0x0800a22c
 80010b8:	0800a23c 	.word	0x0800a23c
 80010bc:	0800a24c 	.word	0x0800a24c
 80010c0:	0800a258 	.word	0x0800a258
 80010c4:	0800a268 	.word	0x0800a268
 80010c8:	0800a380 	.word	0x0800a380
 80010cc:	0800a278 	.word	0x0800a278
 80010d0:	0800a384 	.word	0x0800a384
 80010d4:	0800a284 	.word	0x0800a284
 80010d8:	0800a290 	.word	0x0800a290
 80010dc:	0800a29c 	.word	0x0800a29c
 80010e0:	0800a2ac 	.word	0x0800a2ac
 80010e4:	0800a2bc 	.word	0x0800a2bc
 80010e8:	0800a2c8 	.word	0x0800a2c8
 80010ec:	0800a2d8 	.word	0x0800a2d8
 80010f0:	0800a3b4 	.word	0x0800a3b4
 80010f4:	0800a3b8 	.word	0x0800a3b8
 80010f8:	0800a3bc 	.word	0x0800a3bc
 80010fc:	0800a3c0 	.word	0x0800a3c0
 8001100:	0800a3c4 	.word	0x0800a3c4
 8001104:	0800a2e8 	.word	0x0800a2e8
 8001108:	0800a1bc 	.word	0x0800a1bc
 800110c:	0800a1d0 	.word	0x0800a1d0
 8001110:	0800a388 	.word	0x0800a388
 8001114:	0800a38c 	.word	0x0800a38c
 8001118:	0800a390 	.word	0x0800a390
  default :
    break;
 800111c:	bf00      	nop
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d10b      	bne.n	800113c <OTM8009A_Init+0x444>
  {
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 8001124:	4916      	ldr	r1, [pc, #88]	; (8001180 <OTM8009A_Init+0x488>)
 8001126:	2000      	movs	r0, #0
 8001128:	f000 fa88 	bl	800163c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 800112c:	4915      	ldr	r1, [pc, #84]	; (8001184 <OTM8009A_Init+0x48c>)
 800112e:	2004      	movs	r0, #4
 8001130:	f000 fa84 	bl	800163c <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 8001134:	4914      	ldr	r1, [pc, #80]	; (8001188 <OTM8009A_Init+0x490>)
 8001136:	2004      	movs	r0, #4
 8001138:	f000 fa80 	bl	800163c <DSI_IO_WriteCmd>
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 800113c:	4913      	ldr	r1, [pc, #76]	; (800118c <OTM8009A_Init+0x494>)
 800113e:	2000      	movs	r0, #0
 8001140:	f000 fa7c 	bl	800163c <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 8001144:	4912      	ldr	r1, [pc, #72]	; (8001190 <OTM8009A_Init+0x498>)
 8001146:	2000      	movs	r0, #0
 8001148:	f000 fa78 	bl	800163c <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 800114c:	4911      	ldr	r1, [pc, #68]	; (8001194 <OTM8009A_Init+0x49c>)
 800114e:	2000      	movs	r0, #0
 8001150:	f000 fa74 	bl	800163c <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8001154:	4910      	ldr	r1, [pc, #64]	; (8001198 <OTM8009A_Init+0x4a0>)
 8001156:	2000      	movs	r0, #0
 8001158:	f000 fa70 	bl	800163c <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 800115c:	490f      	ldr	r1, [pc, #60]	; (800119c <OTM8009A_Init+0x4a4>)
 800115e:	2000      	movs	r0, #0
 8001160:	f000 fa6c 	bl	800163c <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8001164:	490e      	ldr	r1, [pc, #56]	; (80011a0 <OTM8009A_Init+0x4a8>)
 8001166:	2000      	movs	r0, #0
 8001168:	f000 fa68 	bl	800163c <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 800116c:	490d      	ldr	r1, [pc, #52]	; (80011a4 <OTM8009A_Init+0x4ac>)
 800116e:	2000      	movs	r0, #0
 8001170:	f000 fa64 	bl	800163c <DSI_IO_WriteCmd>

  return 0;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	0800a394 	.word	0x0800a394
 8001184:	0800a2ec 	.word	0x0800a2ec
 8001188:	0800a2f4 	.word	0x0800a2f4
 800118c:	0800a398 	.word	0x0800a398
 8001190:	0800a39c 	.word	0x0800a39c
 8001194:	0800a3a0 	.word	0x0800a3a0
 8001198:	0800a3a4 	.word	0x0800a3a4
 800119c:	0800a3a8 	.word	0x0800a3a8
 80011a0:	0800a2fc 	.word	0x0800a2fc
 80011a4:	0800a3ac 	.word	0x0800a3ac

080011a8 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay: Delay in ms
  */
void OTM8009A_IO_Delay(uint32_t Delay)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 fcfd 	bl	8001bb0 <HAL_Delay>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <BSP_LCD_Init>:
/**
  * @brief  Initializes the DSI LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	af00      	add	r7, sp, #0
  return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 80011c2:	2001      	movs	r0, #1
 80011c4:	f000 f804 	bl	80011d0 <BSP_LCD_InitEx>
 80011c8:	4603      	mov	r3, r0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <BSP_LCD_InitEx>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  orientation: LCD orientation, can be LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(LCD_OrientationTypeDef orientation)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b090      	sub	sp, #64	; 0x40
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
  DSI_PLLInitTypeDef dsiPllInit;
  static RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
  uint32_t LcdClock  = 27429; /*!< LcdClk = 27429 kHz */
 80011da:	f646 3325 	movw	r3, #27429	; 0x6b25
 80011de:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t read_id = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	877b      	strh	r3, [r7, #58]	; 0x3a

  uint32_t laneByteClk_kHz = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t                   HFP; /*!< Horizontal Front Porch time in units of lcdClk */
  uint32_t                   HACT; /*!< Horizontal Active time in units of lcdClk = imageSize X in pixels to display */

  /* Toggle Hardware Reset of the DSI LCD using
  * its XRES signal (active low) */
  BSP_LCD_Reset();
 80011e8:	f000 f936 	bl	8001458 <BSP_LCD_Reset>

  /* Check the connected monitor */
  read_id = LCD_IO_GetID();
 80011ec:	f000 fa50 	bl	8001690 <LCD_IO_GetID>
 80011f0:	4603      	mov	r3, r0
 80011f2:	877b      	strh	r3, [r7, #58]	; 0x3a
  else if(read_id != LCD_DSI_ID)
  {
    return LCD_ERROR;  
  }
#else
  if(read_id != LCD_DSI_ID)
 80011f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80011f6:	2b11      	cmp	r3, #17
 80011f8:	d001      	beq.n	80011fe <BSP_LCD_InitEx+0x2e>
  {
    return LCD_ERROR;  
 80011fa:	2301      	movs	r3, #1
 80011fc:	e113      	b.n	8001426 <BSP_LCD_InitEx+0x256>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  BSP_LCD_MspInit();
 80011fe:	f000 fa4f 	bl	80016a0 <BSP_LCD_MspInit>

/*************************DSI Initialization***********************************/  

  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hdsi_discovery.Instance = DSI;
 8001202:	4b8b      	ldr	r3, [pc, #556]	; (8001430 <BSP_LCD_InitEx+0x260>)
 8001204:	4a8b      	ldr	r2, [pc, #556]	; (8001434 <BSP_LCD_InitEx+0x264>)
 8001206:	601a      	str	r2, [r3, #0]

  HAL_DSI_DeInit(&(hdsi_discovery));
 8001208:	4889      	ldr	r0, [pc, #548]	; (8001430 <BSP_LCD_InitEx+0x260>)
 800120a:	f001 fddf 	bl	8002dcc <HAL_DSI_DeInit>

  dsiPllInit.PLLNDIV  = 100;
 800120e:	2364      	movs	r3, #100	; 0x64
 8001210:	60bb      	str	r3, [r7, #8]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 8001212:	2305      	movs	r3, #5
 8001214:	60fb      	str	r3, [r7, #12]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
  laneByteClk_kHz = 62500; /* 500 MHz / 8 = 62.5 MHz = 62500 kHz */
 800121a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800121e:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set number of Lanes */
  hdsi_discovery.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8001220:	4b83      	ldr	r3, [pc, #524]	; (8001430 <BSP_LCD_InitEx+0x260>)
 8001222:	2201      	movs	r2, #1
 8001224:	60da      	str	r2, [r3, #12]

  /* TXEscapeCkdiv = f(LaneByteClk)/15.62 = 4 */
  hdsi_discovery.Init.TXEscapeCkdiv = laneByteClk_kHz/15620; 
 8001226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001228:	089b      	lsrs	r3, r3, #2
 800122a:	4a83      	ldr	r2, [pc, #524]	; (8001438 <BSP_LCD_InitEx+0x268>)
 800122c:	fba2 2303 	umull	r2, r3, r2, r3
 8001230:	0a9b      	lsrs	r3, r3, #10
 8001232:	4a7f      	ldr	r2, [pc, #508]	; (8001430 <BSP_LCD_InitEx+0x260>)
 8001234:	6093      	str	r3, [r2, #8]

  HAL_DSI_Init(&(hdsi_discovery), &(dsiPllInit));
 8001236:	f107 0308 	add.w	r3, r7, #8
 800123a:	4619      	mov	r1, r3
 800123c:	487c      	ldr	r0, [pc, #496]	; (8001430 <BSP_LCD_InitEx+0x260>)
 800123e:	f001 fca9 	bl	8002b94 <HAL_DSI_Init>

  /* Timing parameters for all Video modes
  * Set Timing parameters of LTDC depending on its chosen orientation
  */
  if(orientation == LCD_ORIENTATION_PORTRAIT)
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d108      	bne.n	800125a <BSP_LCD_InitEx+0x8a>
  {
    lcd_x_size = OTM8009A_480X800_WIDTH;  /* 480 */
 8001248:	4b7c      	ldr	r3, [pc, #496]	; (800143c <BSP_LCD_InitEx+0x26c>)
 800124a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800124e:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_480X800_HEIGHT; /* 800 */                                
 8001250:	4b7b      	ldr	r3, [pc, #492]	; (8001440 <BSP_LCD_InitEx+0x270>)
 8001252:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	e007      	b.n	800126a <BSP_LCD_InitEx+0x9a>
  }
  else
  {
    /* lcd_orientation == LCD_ORIENTATION_LANDSCAPE */
    lcd_x_size = OTM8009A_800X480_WIDTH;  /* 800 */
 800125a:	4b78      	ldr	r3, [pc, #480]	; (800143c <BSP_LCD_InitEx+0x26c>)
 800125c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001260:	601a      	str	r2, [r3, #0]
    lcd_y_size = OTM8009A_800X480_HEIGHT; /* 480 */                                
 8001262:	4b77      	ldr	r3, [pc, #476]	; (8001440 <BSP_LCD_InitEx+0x270>)
 8001264:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001268:	601a      	str	r2, [r3, #0]
  }

  HACT = lcd_x_size;
 800126a:	4b74      	ldr	r3, [pc, #464]	; (800143c <BSP_LCD_InitEx+0x26c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	633b      	str	r3, [r7, #48]	; 0x30
  VACT = lcd_y_size;
 8001270:	4b73      	ldr	r3, [pc, #460]	; (8001440 <BSP_LCD_InitEx+0x270>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* The following values are same for portrait and landscape orientations */
  VSA  = OTM8009A_480X800_VSYNC;        /* 12  */
 8001276:	2301      	movs	r3, #1
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
  VBP  = OTM8009A_480X800_VBP;          /* 12  */
 800127a:	230f      	movs	r3, #15
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
  VFP  = OTM8009A_480X800_VFP;          /* 12  */
 800127e:	2310      	movs	r3, #16
 8001280:	623b      	str	r3, [r7, #32]
  HSA  = OTM8009A_480X800_HSYNC;        /* 63  */
 8001282:	2302      	movs	r3, #2
 8001284:	61fb      	str	r3, [r7, #28]
  HBP  = OTM8009A_480X800_HBP;          /* 120 */
 8001286:	2322      	movs	r3, #34	; 0x22
 8001288:	61bb      	str	r3, [r7, #24]
  HFP  = OTM8009A_480X800_HFP;          /* 120 */   
 800128a:	2322      	movs	r3, #34	; 0x22
 800128c:	617b      	str	r3, [r7, #20]

  hdsivideo_handle.VirtualChannelID = LCD_OTM8009A_ID;
 800128e:	4b6d      	ldr	r3, [pc, #436]	; (8001444 <BSP_LCD_InitEx+0x274>)
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
  hdsivideo_handle.ColorCoding = LCD_DSI_PIXEL_DATA_FMT_RBG888;
 8001294:	4b6b      	ldr	r3, [pc, #428]	; (8001444 <BSP_LCD_InitEx+0x274>)
 8001296:	2205      	movs	r2, #5
 8001298:	605a      	str	r2, [r3, #4]
  hdsivideo_handle.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 800129a:	4b6a      	ldr	r3, [pc, #424]	; (8001444 <BSP_LCD_InitEx+0x274>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]
  hdsivideo_handle.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 80012a0:	4b68      	ldr	r3, [pc, #416]	; (8001444 <BSP_LCD_InitEx+0x274>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  hdsivideo_handle.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;  
 80012a6:	4b67      	ldr	r3, [pc, #412]	; (8001444 <BSP_LCD_InitEx+0x274>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	625a      	str	r2, [r3, #36]	; 0x24
  hdsivideo_handle.Mode = DSI_VID_MODE_BURST; /* Mode Video burst ie : one LgP per line */
 80012ac:	4b65      	ldr	r3, [pc, #404]	; (8001444 <BSP_LCD_InitEx+0x274>)
 80012ae:	2202      	movs	r2, #2
 80012b0:	60da      	str	r2, [r3, #12]
  hdsivideo_handle.NullPacketSize = 0xFFF;
 80012b2:	4b64      	ldr	r3, [pc, #400]	; (8001444 <BSP_LCD_InitEx+0x274>)
 80012b4:	f640 72ff 	movw	r2, #4095	; 0xfff
 80012b8:	619a      	str	r2, [r3, #24]
  hdsivideo_handle.NumberOfChunks = 0;
 80012ba:	4b62      	ldr	r3, [pc, #392]	; (8001444 <BSP_LCD_InitEx+0x274>)
 80012bc:	2200      	movs	r2, #0
 80012be:	615a      	str	r2, [r3, #20]
  hdsivideo_handle.PacketSize                = HACT; /* Value depending on display orientation choice portrait/landscape */ 
 80012c0:	4a60      	ldr	r2, [pc, #384]	; (8001444 <BSP_LCD_InitEx+0x274>)
 80012c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c4:	6113      	str	r3, [r2, #16]
  hdsivideo_handle.HorizontalSyncActive      = (HSA * laneByteClk_kHz)/LcdClock;
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012ca:	fb03 f202 	mul.w	r2, r3, r2
 80012ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d4:	4a5b      	ldr	r2, [pc, #364]	; (8001444 <BSP_LCD_InitEx+0x274>)
 80012d6:	6293      	str	r3, [r2, #40]	; 0x28
  hdsivideo_handle.HorizontalBackPorch       = (HBP * laneByteClk_kHz)/LcdClock;
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012dc:	fb03 f202 	mul.w	r2, r3, r2
 80012e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e6:	4a57      	ldr	r2, [pc, #348]	; (8001444 <BSP_LCD_InitEx+0x274>)
 80012e8:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsivideo_handle.HorizontalLine            = ((HACT + HSA + HBP + HFP) * laneByteClk_kHz)/LcdClock; /* Value depending on display orientation choice portrait/landscape */
 80012ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	441a      	add	r2, r3
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	441a      	add	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	4413      	add	r3, r2
 80012f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80012fa:	fb03 f202 	mul.w	r2, r3, r2
 80012fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001300:	fbb2 f3f3 	udiv	r3, r2, r3
 8001304:	4a4f      	ldr	r2, [pc, #316]	; (8001444 <BSP_LCD_InitEx+0x274>)
 8001306:	6313      	str	r3, [r2, #48]	; 0x30
  hdsivideo_handle.VerticalSyncActive        = VSA;
 8001308:	4a4e      	ldr	r2, [pc, #312]	; (8001444 <BSP_LCD_InitEx+0x274>)
 800130a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800130c:	6353      	str	r3, [r2, #52]	; 0x34
  hdsivideo_handle.VerticalBackPorch         = VBP;
 800130e:	4a4d      	ldr	r2, [pc, #308]	; (8001444 <BSP_LCD_InitEx+0x274>)
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	6393      	str	r3, [r2, #56]	; 0x38
  hdsivideo_handle.VerticalFrontPorch        = VFP;
 8001314:	4a4b      	ldr	r2, [pc, #300]	; (8001444 <BSP_LCD_InitEx+0x274>)
 8001316:	6a3b      	ldr	r3, [r7, #32]
 8001318:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsivideo_handle.VerticalActive            = VACT; /* Value depending on display orientation choice portrait/landscape */
 800131a:	4a4a      	ldr	r2, [pc, #296]	; (8001444 <BSP_LCD_InitEx+0x274>)
 800131c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131e:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable or disable sending LP command while streaming is active in video mode */
  hdsivideo_handle.LPCommandEnable = DSI_LP_COMMAND_ENABLE; /* Enable sending commands in mode LP (Low Power) */
 8001320:	4b48      	ldr	r3, [pc, #288]	; (8001444 <BSP_LCD_InitEx+0x274>)
 8001322:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001326:	645a      	str	r2, [r3, #68]	; 0x44

  /* Largest packet size possible to transmit in LP mode in VSA, VBP, VFP regions */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPLargestPacketSize = 16;
 8001328:	4b46      	ldr	r3, [pc, #280]	; (8001444 <BSP_LCD_InitEx+0x274>)
 800132a:	2210      	movs	r2, #16
 800132c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Largest packet size possible to transmit in LP mode in HFP region during VACT period */
  /* Only useful when sending LP packets is allowed while streaming is active in video mode */
  hdsivideo_handle.LPVACTLargestPacketSize = 0;
 800132e:	4b45      	ldr	r3, [pc, #276]	; (8001444 <BSP_LCD_InitEx+0x274>)
 8001330:	2200      	movs	r2, #0
 8001332:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Specify for each region of the video frame, if the transmission of command in LP mode is allowed in this region */
  /* while streaming is active in video mode                                                                         */
  hdsivideo_handle.LPHorizontalFrontPorchEnable = DSI_LP_HFP_ENABLE;   /* Allow sending LP commands during HFP period */
 8001334:	4b43      	ldr	r3, [pc, #268]	; (8001444 <BSP_LCD_InitEx+0x274>)
 8001336:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800133a:	651a      	str	r2, [r3, #80]	; 0x50
  hdsivideo_handle.LPHorizontalBackPorchEnable  = DSI_LP_HBP_ENABLE;   /* Allow sending LP commands during HBP period */
 800133c:	4b41      	ldr	r3, [pc, #260]	; (8001444 <BSP_LCD_InitEx+0x274>)
 800133e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001342:	655a      	str	r2, [r3, #84]	; 0x54
  hdsivideo_handle.LPVerticalActiveEnable = DSI_LP_VACT_ENABLE;  /* Allow sending LP commands during VACT period */
 8001344:	4b3f      	ldr	r3, [pc, #252]	; (8001444 <BSP_LCD_InitEx+0x274>)
 8001346:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800134a:	659a      	str	r2, [r3, #88]	; 0x58
  hdsivideo_handle.LPVerticalFrontPorchEnable = DSI_LP_VFP_ENABLE;   /* Allow sending LP commands during VFP period */
 800134c:	4b3d      	ldr	r3, [pc, #244]	; (8001444 <BSP_LCD_InitEx+0x274>)
 800134e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001352:	65da      	str	r2, [r3, #92]	; 0x5c
  hdsivideo_handle.LPVerticalBackPorchEnable = DSI_LP_VBP_ENABLE;   /* Allow sending LP commands during VBP period */
 8001354:	4b3b      	ldr	r3, [pc, #236]	; (8001444 <BSP_LCD_InitEx+0x274>)
 8001356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800135a:	661a      	str	r2, [r3, #96]	; 0x60
  hdsivideo_handle.LPVerticalSyncActiveEnable = DSI_LP_VSYNC_ENABLE; /* Allow sending LP commands during VSync = VSA period */
 800135c:	4b39      	ldr	r3, [pc, #228]	; (8001444 <BSP_LCD_InitEx+0x274>)
 800135e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001362:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure DSI Video mode timings with settings set above */
  HAL_DSI_ConfigVideoMode(&(hdsi_discovery), &(hdsivideo_handle));
 8001364:	4937      	ldr	r1, [pc, #220]	; (8001444 <BSP_LCD_InitEx+0x274>)
 8001366:	4832      	ldr	r0, [pc, #200]	; (8001430 <BSP_LCD_InitEx+0x260>)
 8001368:	f001 fe8c 	bl	8003084 <HAL_DSI_ConfigVideoMode>
  
  
/************************LTDC Initialization***********************************/  

  /* Timing Configuration */    
  hltdc_discovery.Init.HorizontalSync = (HSA - 1);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	3b01      	subs	r3, #1
 8001370:	4a35      	ldr	r2, [pc, #212]	; (8001448 <BSP_LCD_InitEx+0x278>)
 8001372:	6153      	str	r3, [r2, #20]
  hltdc_discovery.Init.AccumulatedHBP = (HSA + HBP - 1);
 8001374:	69fa      	ldr	r2, [r7, #28]
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	4413      	add	r3, r2
 800137a:	3b01      	subs	r3, #1
 800137c:	4a32      	ldr	r2, [pc, #200]	; (8001448 <BSP_LCD_InitEx+0x278>)
 800137e:	61d3      	str	r3, [r2, #28]
  hltdc_discovery.Init.AccumulatedActiveW = (lcd_x_size + HSA + HBP - 1);
 8001380:	4b2e      	ldr	r3, [pc, #184]	; (800143c <BSP_LCD_InitEx+0x26c>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	441a      	add	r2, r3
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	4413      	add	r3, r2
 800138c:	3b01      	subs	r3, #1
 800138e:	4a2e      	ldr	r2, [pc, #184]	; (8001448 <BSP_LCD_InitEx+0x278>)
 8001390:	6253      	str	r3, [r2, #36]	; 0x24
  hltdc_discovery.Init.TotalWidth = (lcd_x_size + HSA + HBP + HFP - 1);
 8001392:	4b2a      	ldr	r3, [pc, #168]	; (800143c <BSP_LCD_InitEx+0x26c>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	441a      	add	r2, r3
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	441a      	add	r2, r3
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	4413      	add	r3, r2
 80013a2:	3b01      	subs	r3, #1
 80013a4:	4a28      	ldr	r2, [pc, #160]	; (8001448 <BSP_LCD_InitEx+0x278>)
 80013a6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Initialize the LCD pixel width and pixel height */
  hltdc_discovery.LayerCfg->ImageWidth  = lcd_x_size;
 80013a8:	4b24      	ldr	r3, [pc, #144]	; (800143c <BSP_LCD_InitEx+0x26c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a26      	ldr	r2, [pc, #152]	; (8001448 <BSP_LCD_InitEx+0x278>)
 80013ae:	6613      	str	r3, [r2, #96]	; 0x60
  hltdc_discovery.LayerCfg->ImageHeight = lcd_y_size;   
 80013b0:	4b23      	ldr	r3, [pc, #140]	; (8001440 <BSP_LCD_InitEx+0x270>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a24      	ldr	r2, [pc, #144]	; (8001448 <BSP_LCD_InitEx+0x278>)
 80013b6:	6653      	str	r3, [r2, #100]	; 0x64
    * PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz 
    * PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 384 Mhz 
    * PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 384 MHz / 7 = 54.85 MHz 
    * LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_2 = 54.85 MHz / 2 = 27.429 MHz 
    */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <BSP_LCD_InitEx+0x27c>)
 80013ba:	2208      	movs	r2, #8
 80013bc:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80013be:	4b23      	ldr	r3, [pc, #140]	; (800144c <BSP_LCD_InitEx+0x27c>)
 80013c0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80013c4:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 7;
 80013c6:	4b21      	ldr	r3, [pc, #132]	; (800144c <BSP_LCD_InitEx+0x27c>)
 80013c8:	2207      	movs	r2, #7
 80013ca:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80013cc:	4b1f      	ldr	r3, [pc, #124]	; (800144c <BSP_LCD_InitEx+0x27c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80013d2:	481e      	ldr	r0, [pc, #120]	; (800144c <BSP_LCD_InitEx+0x27c>)
 80013d4:	f004 fc88 	bl	8005ce8 <HAL_RCCEx_PeriphCLKConfig>

  /* Background value */
  hltdc_discovery.Init.Backcolor.Blue = 0;
 80013d8:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <BSP_LCD_InitEx+0x278>)
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc_discovery.Init.Backcolor.Green = 0;
 80013e0:	4b19      	ldr	r3, [pc, #100]	; (8001448 <BSP_LCD_InitEx+0x278>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc_discovery.Init.Backcolor.Red = 0;
 80013e8:	4b17      	ldr	r3, [pc, #92]	; (8001448 <BSP_LCD_InitEx+0x278>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  hltdc_discovery.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <BSP_LCD_InitEx+0x278>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
  hltdc_discovery.Instance = LTDC;
 80013f6:	4b14      	ldr	r3, [pc, #80]	; (8001448 <BSP_LCD_InitEx+0x278>)
 80013f8:	4a15      	ldr	r2, [pc, #84]	; (8001450 <BSP_LCD_InitEx+0x280>)
 80013fa:	601a      	str	r2, [r3, #0]

  /* Get LTDC Configuration from DSI Configuration */
  HAL_LTDC_StructInitFromVideoConfig(&(hltdc_discovery), &(hdsivideo_handle));
 80013fc:	4911      	ldr	r1, [pc, #68]	; (8001444 <BSP_LCD_InitEx+0x274>)
 80013fe:	4812      	ldr	r0, [pc, #72]	; (8001448 <BSP_LCD_InitEx+0x278>)
 8001400:	f002 ff72 	bl	80042e8 <HAL_LTDCEx_StructInitFromVideoConfig>

  /* Initialize the LTDC */  
  HAL_LTDC_Init(&hltdc_discovery);
 8001404:	4810      	ldr	r0, [pc, #64]	; (8001448 <BSP_LCD_InitEx+0x278>)
 8001406:	f002 fc05 	bl	8003c14 <HAL_LTDC_Init>

  /* Enable the DSI host and wrapper after the LTDC initialization
     To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
  HAL_DSI_Start(&hdsi_discovery);
 800140a:	4809      	ldr	r0, [pc, #36]	; (8001430 <BSP_LCD_InitEx+0x260>)
 800140c:	f002 f83a 	bl	8003484 <HAL_DSI_Start>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001410:	f000 f9e8 	bl	80017e4 <BSP_SDRAM_Init>
#endif /* DATA_IN_ExtSDRAM */

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001414:	480f      	ldr	r0, [pc, #60]	; (8001454 <BSP_LCD_InitEx+0x284>)
 8001416:	f000 f8cf 	bl	80015b8 <BSP_LCD_SetFont>
/***********************OTM8009A Initialization********************************/ 

  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  *  depending on configuration set in 'hdsivideo_handle'.
  */
  OTM8009A_Init(OTM8009A_FORMAT_RGB888, orientation);
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	4619      	mov	r1, r3
 800141e:	2000      	movs	r0, #0
 8001420:	f7ff fc6a 	bl	8000cf8 <OTM8009A_Init>

/***********************End OTM8009A Initialization****************************/ 

  return LCD_OK; 
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3740      	adds	r7, #64	; 0x40
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000868 	.word	0x20000868
 8001434:	40016c00 	.word	0x40016c00
 8001438:	43215e57 	.word	0x43215e57
 800143c:	2000000c 	.word	0x2000000c
 8001440:	20000010 	.word	0x20000010
 8001444:	200006fc 	.word	0x200006fc
 8001448:	200007c0 	.word	0x200007c0
 800144c:	200008a0 	.word	0x200008a0
 8001450:	40016800 	.word	0x40016800
 8001454:	20000004 	.word	0x20000004

08001458 <BSP_LCD_Reset>:
  * @brief  BSP LCD Reset
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and desactivating it later.
  */
void BSP_LCD_Reset(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800145e:	4b18      	ldr	r3, [pc, #96]	; (80014c0 <BSP_LCD_Reset+0x68>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a17      	ldr	r2, [pc, #92]	; (80014c0 <BSP_LCD_Reset+0x68>)
 8001464:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <BSP_LCD_Reset+0x68>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]

    /* Configure the GPIO on PJ15 */
    gpio_init_structure.Pin   = GPIO_PIN_15;
 8001476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800147a:	607b      	str	r3, [r7, #4]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800147c:	2301      	movs	r3, #1
 800147e:	60bb      	str	r3, [r7, #8]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 8001480:	2301      	movs	r3, #1
 8001482:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	4619      	mov	r1, r3
 800148c:	480d      	ldr	r0, [pc, #52]	; (80014c4 <BSP_LCD_Reset+0x6c>)
 800148e:	f002 f8ef 	bl	8003670 <HAL_GPIO_Init>

    /* Activate XRES active low */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001498:	480a      	ldr	r0, [pc, #40]	; (80014c4 <BSP_LCD_Reset+0x6c>)
 800149a:	f002 fba1 	bl	8003be0 <HAL_GPIO_WritePin>

    HAL_Delay(20); /* wait 20 ms */
 800149e:	2014      	movs	r0, #20
 80014a0:	f000 fb86 	bl	8001bb0 <HAL_Delay>

    /* Desactivate XRES */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_15, GPIO_PIN_SET);
 80014a4:	2201      	movs	r2, #1
 80014a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014aa:	4806      	ldr	r0, [pc, #24]	; (80014c4 <BSP_LCD_Reset+0x6c>)
 80014ac:	f002 fb98 	bl	8003be0 <HAL_GPIO_WritePin>
    
    /* Wait for 10ms after releasing XRES before sending commands */
    HAL_Delay(10);
 80014b0:	200a      	movs	r0, #10
 80014b2:	f000 fb7d 	bl	8001bb0 <HAL_Delay>
}
 80014b6:	bf00      	nop
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40022400 	.word	0x40022400

080014c8 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return (lcd_x_size);
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <BSP_LCD_GetXSize+0x14>)
 80014ce:	681b      	ldr	r3, [r3, #0]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	2000000c 	.word	0x2000000c

080014e0 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return (lcd_y_size);
 80014e4:	4b03      	ldr	r3, [pc, #12]	; (80014f4 <BSP_LCD_GetYSize+0x14>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	20000010 	.word	0x20000010

080014f8 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b090      	sub	sp, #64	; 0x40
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	6039      	str	r1, [r7, #0]
 8001502:	80fb      	strh	r3, [r7, #6]
    LCD_LayerCfgTypeDef  Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001508:	f7ff ffde 	bl	80014c8 <BSP_LCD_GetXSize>
 800150c:	4603      	mov	r3, r0
 800150e:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001514:	f7ff ffe4 	bl	80014e0 <BSP_LCD_GetYSize>
 8001518:	4603      	mov	r3, r0
 800151a:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800151c:	2300      	movs	r3, #0
 800151e:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8001524:	23ff      	movs	r3, #255	; 0xff
 8001526:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800153e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001544:	2307      	movs	r3, #7
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001548:	f7ff ffbe 	bl	80014c8 <BSP_LCD_GetXSize>
 800154c:	4603      	mov	r3, r0
 800154e:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001550:	f7ff ffc6 	bl	80014e0 <BSP_LCD_GetYSize>
 8001554:	4603      	mov	r3, r0
 8001556:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hltdc_discovery, &Layercfg, LayerIndex); 
 8001558:	88fa      	ldrh	r2, [r7, #6]
 800155a:	f107 030c 	add.w	r3, r7, #12
 800155e:	4619      	mov	r1, r3
 8001560:	4812      	ldr	r0, [pc, #72]	; (80015ac <BSP_LCD_LayerDefaultInit+0xb4>)
 8001562:	f002 fce9 	bl	8003f38 <HAL_LTDC_ConfigLayer>
  
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001566:	88fa      	ldrh	r2, [r7, #6]
 8001568:	4911      	ldr	r1, [pc, #68]	; (80015b0 <BSP_LCD_LayerDefaultInit+0xb8>)
 800156a:	4613      	mov	r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	4413      	add	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	3304      	adds	r3, #4
 8001576:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800157a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 800157c:	88fa      	ldrh	r2, [r7, #6]
 800157e:	490c      	ldr	r1, [pc, #48]	; (80015b0 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001580:	4613      	mov	r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4413      	add	r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	3308      	adds	r3, #8
 800158c:	4a09      	ldr	r2, [pc, #36]	; (80015b4 <BSP_LCD_LayerDefaultInit+0xbc>)
 800158e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8001590:	88fa      	ldrh	r2, [r7, #6]
 8001592:	4907      	ldr	r1, [pc, #28]	; (80015b0 <BSP_LCD_LayerDefaultInit+0xb8>)
 8001594:	4613      	mov	r3, r2
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	4413      	add	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	440b      	add	r3, r1
 800159e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80015a2:	601a      	str	r2, [r3, #0]
}
 80015a4:	bf00      	nop
 80015a6:	3740      	adds	r7, #64	; 0x40
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	200007c0 	.word	0x200007c0
 80015b0:	20000888 	.word	0x20000888
 80015b4:	20000004 	.word	0x20000004

080015b8 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <BSP_LCD_SetFont+0x2c>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4908      	ldr	r1, [pc, #32]	; (80015e8 <BSP_LCD_SetFont+0x30>)
 80015c6:	4613      	mov	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	440b      	add	r3, r1
 80015d0:	3308      	adds	r3, #8
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	601a      	str	r2, [r3, #0]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20000884 	.word	0x20000884
 80015e8:	20000888 	.word	0x20000888

080015ec <BSP_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 80015ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af02      	add	r7, sp, #8
 80015f2:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hltdc_discovery.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <BSP_LCD_Clear+0x48>)
 80015f6:	681c      	ldr	r4, [r3, #0]
 80015f8:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <BSP_LCD_Clear+0x48>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a0e      	ldr	r2, [pc, #56]	; (8001638 <BSP_LCD_Clear+0x4c>)
 80015fe:	2134      	movs	r1, #52	; 0x34
 8001600:	fb01 f303 	mul.w	r3, r1, r3
 8001604:	4413      	add	r3, r2
 8001606:	335c      	adds	r3, #92	; 0x5c
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	461e      	mov	r6, r3
 800160c:	f7ff ff5c 	bl	80014c8 <BSP_LCD_GetXSize>
 8001610:	4605      	mov	r5, r0
 8001612:	f7ff ff65 	bl	80014e0 <BSP_LCD_GetYSize>
 8001616:	4602      	mov	r2, r0
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	9301      	str	r3, [sp, #4]
 800161c:	2300      	movs	r3, #0
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	4613      	mov	r3, r2
 8001622:	462a      	mov	r2, r5
 8001624:	4631      	mov	r1, r6
 8001626:	4620      	mov	r0, r4
 8001628:	f000 f8a4 	bl	8001774 <LL_FillBuffer>
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001634:	20000884 	.word	0x20000884
 8001638:	200007c0 	.word	0x200007c0

0800163c <DSI_IO_WriteCmd>:
  *                 If inferior to 2, a long write command is performed else short.
  * @param  pParams: Pointer to parameter values table.
  * @retval HAL status
  */
void DSI_IO_WriteCmd(uint32_t NbrParams, uint8_t *pParams)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af02      	add	r7, sp, #8
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  if(NbrParams <= 1)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d80d      	bhi.n	8001668 <DSI_IO_WriteCmd+0x2c>
  {
   HAL_DSI_ShortWrite(&hdsi_discovery, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	3301      	adds	r3, #1
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	4613      	mov	r3, r2
 800165c:	2215      	movs	r2, #21
 800165e:	2100      	movs	r1, #0
 8001660:	480a      	ldr	r0, [pc, #40]	; (800168c <DSI_IO_WriteCmd+0x50>)
 8001662:	f001 ff4b 	bl	80034fc <HAL_DSI_ShortWrite>
  }
  else
  {
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
  } 
}
 8001666:	e00d      	b.n	8001684 <DSI_IO_WriteCmd+0x48>
   HAL_DSI_LongWrite(&hdsi_discovery,  LCD_OTM8009A_ID, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4413      	add	r3, r2
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	9301      	str	r3, [sp, #4]
 8001676:	9200      	str	r2, [sp, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2239      	movs	r2, #57	; 0x39
 800167c:	2100      	movs	r1, #0
 800167e:	4803      	ldr	r0, [pc, #12]	; (800168c <DSI_IO_WriteCmd+0x50>)
 8001680:	f001 ff5e 	bl	8003540 <HAL_DSI_LongWrite>
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000868 	.word	0x20000868

08001690 <LCD_IO_GetID>:
  * @brief  Returns the ID of connected screen by checking the HDMI
  *        (adv7533 component) ID or LCD DSI (via TS ID) ID.
  * @retval LCD ID
  */
static uint16_t LCD_IO_GetID(void)
{ 
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  else
  {
    return 0;
  }
#else 
  return LCD_DSI_ID; 
 8001694:	2311      	movs	r3, #17
#endif /* USE_LCD_HDMI */
}
 8001696:	4618      	mov	r0, r3
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <BSP_LCD_MspInit>:
/**
  * @brief  Initialize the BSP LCD Msp.
  * Application can surcharge if needed this function implementation
  */
__weak void BSP_LCD_MspInit(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80016a6:	4b32      	ldr	r3, [pc, #200]	; (8001770 <BSP_LCD_MspInit+0xd0>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	4a31      	ldr	r2, [pc, #196]	; (8001770 <BSP_LCD_MspInit+0xd0>)
 80016ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016b0:	6453      	str	r3, [r2, #68]	; 0x44
 80016b2:	4b2f      	ldr	r3, [pc, #188]	; (8001770 <BSP_LCD_MspInit+0xd0>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 80016be:	4b2c      	ldr	r3, [pc, #176]	; (8001770 <BSP_LCD_MspInit+0xd0>)
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c2:	4a2b      	ldr	r2, [pc, #172]	; (8001770 <BSP_LCD_MspInit+0xd0>)
 80016c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016c8:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_LTDC_RELEASE_RESET();
 80016ca:	4b29      	ldr	r3, [pc, #164]	; (8001770 <BSP_LCD_MspInit+0xd0>)
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	4a28      	ldr	r2, [pc, #160]	; (8001770 <BSP_LCD_MspInit+0xd0>)
 80016d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80016d4:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80016d6:	4b26      	ldr	r3, [pc, #152]	; (8001770 <BSP_LCD_MspInit+0xd0>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a25      	ldr	r2, [pc, #148]	; (8001770 <BSP_LCD_MspInit+0xd0>)
 80016dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b23      	ldr	r3, [pc, #140]	; (8001770 <BSP_LCD_MspInit+0xd0>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 80016ee:	4b20      	ldr	r3, [pc, #128]	; (8001770 <BSP_LCD_MspInit+0xd0>)
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	4a1f      	ldr	r2, [pc, #124]	; (8001770 <BSP_LCD_MspInit+0xd0>)
 80016f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016f8:	6113      	str	r3, [r2, #16]
  __HAL_RCC_DMA2D_RELEASE_RESET();
 80016fa:	4b1d      	ldr	r3, [pc, #116]	; (8001770 <BSP_LCD_MspInit+0xd0>)
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	4a1c      	ldr	r2, [pc, #112]	; (8001770 <BSP_LCD_MspInit+0xd0>)
 8001700:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001704:	6113      	str	r3, [r2, #16]

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 8001706:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <BSP_LCD_MspInit+0xd0>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	4a19      	ldr	r2, [pc, #100]	; (8001770 <BSP_LCD_MspInit+0xd0>)
 800170c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001710:	6453      	str	r3, [r2, #68]	; 0x44
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <BSP_LCD_MspInit+0xd0>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 800171e:	4b14      	ldr	r3, [pc, #80]	; (8001770 <BSP_LCD_MspInit+0xd0>)
 8001720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001722:	4a13      	ldr	r2, [pc, #76]	; (8001770 <BSP_LCD_MspInit+0xd0>)
 8001724:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001728:	6253      	str	r3, [r2, #36]	; 0x24
  __HAL_RCC_DSI_RELEASE_RESET();
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <BSP_LCD_MspInit+0xd0>)
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	4a10      	ldr	r2, [pc, #64]	; (8001770 <BSP_LCD_MspInit+0xd0>)
 8001730:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8001734:	6253      	str	r3, [r2, #36]	; 0x24

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 3, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2103      	movs	r1, #3
 800173a:	2058      	movs	r0, #88	; 0x58
 800173c:	f000 fc34 	bl	8001fa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001740:	2058      	movs	r0, #88	; 0x58
 8001742:	f000 fc4d 	bl	8001fe0 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 3, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2103      	movs	r1, #3
 800174a:	205a      	movs	r0, #90	; 0x5a
 800174c:	f000 fc2c 	bl	8001fa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001750:	205a      	movs	r0, #90	; 0x5a
 8001752:	f000 fc45 	bl	8001fe0 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 3, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2103      	movs	r1, #3
 800175a:	2062      	movs	r0, #98	; 0x62
 800175c:	f000 fc24 	bl	8001fa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001760:	2062      	movs	r0, #98	; 0x62
 8001762:	f000 fc3d 	bl	8001fe0 <HAL_NVIC_EnableIRQ>
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40023800 	.word	0x40023800

08001774 <LL_FillBuffer>:
  * @param  ySize: Buffer height
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af02      	add	r7, sp, #8
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
 8001780:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */
  hdma2d_discovery.Init.Mode         = DMA2D_R2M;
 8001782:	4b16      	ldr	r3, [pc, #88]	; (80017dc <LL_FillBuffer+0x68>)
 8001784:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001788:	605a      	str	r2, [r3, #4]
  hdma2d_discovery.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 800178a:	4b14      	ldr	r3, [pc, #80]	; (80017dc <LL_FillBuffer+0x68>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  hdma2d_discovery.Init.OutputOffset = OffLine;
 8001790:	4a12      	ldr	r2, [pc, #72]	; (80017dc <LL_FillBuffer+0x68>)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	60d3      	str	r3, [r2, #12]

  hdma2d_discovery.Instance = DMA2D;
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <LL_FillBuffer+0x68>)
 8001798:	4a11      	ldr	r2, [pc, #68]	; (80017e0 <LL_FillBuffer+0x6c>)
 800179a:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d_discovery) == HAL_OK)
 800179c:	480f      	ldr	r0, [pc, #60]	; (80017dc <LL_FillBuffer+0x68>)
 800179e:	f000 fdf9 	bl	8002394 <HAL_DMA2D_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d115      	bne.n	80017d4 <LL_FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d_discovery, LayerIndex) == HAL_OK)
 80017a8:	68f9      	ldr	r1, [r7, #12]
 80017aa:	480c      	ldr	r0, [pc, #48]	; (80017dc <LL_FillBuffer+0x68>)
 80017ac:	f001 f870 	bl	8002890 <HAL_DMA2D_ConfigLayer>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10e      	bne.n	80017d4 <LL_FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&hdma2d_discovery, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69f9      	ldr	r1, [r7, #28]
 80017c0:	4806      	ldr	r0, [pc, #24]	; (80017dc <LL_FillBuffer+0x68>)
 80017c2:	f000 fe41 	bl	8002448 <HAL_DMA2D_Start>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d103      	bne.n	80017d4 <LL_FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hdma2d_discovery, 10);
 80017cc:	210a      	movs	r1, #10
 80017ce:	4803      	ldr	r0, [pc, #12]	; (80017dc <LL_FillBuffer+0x68>)
 80017d0:	f000 fe65 	bl	800249e <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80017d4:	bf00      	nop
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000768 	.word	0x20000768
 80017e0:	4002b000 	.word	0x4002b000

080017e4 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80017e8:	4b29      	ldr	r3, [pc, #164]	; (8001890 <BSP_SDRAM_Init+0xac>)
 80017ea:	4a2a      	ldr	r2, [pc, #168]	; (8001894 <BSP_SDRAM_Init+0xb0>)
 80017ec:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80017ee:	4b2a      	ldr	r3, [pc, #168]	; (8001898 <BSP_SDRAM_Init+0xb4>)
 80017f0:	2202      	movs	r2, #2
 80017f2:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80017f4:	4b28      	ldr	r3, [pc, #160]	; (8001898 <BSP_SDRAM_Init+0xb4>)
 80017f6:	2207      	movs	r2, #7
 80017f8:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80017fa:	4b27      	ldr	r3, [pc, #156]	; (8001898 <BSP_SDRAM_Init+0xb4>)
 80017fc:	2204      	movs	r2, #4
 80017fe:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8001800:	4b25      	ldr	r3, [pc, #148]	; (8001898 <BSP_SDRAM_Init+0xb4>)
 8001802:	2207      	movs	r2, #7
 8001804:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8001806:	4b24      	ldr	r3, [pc, #144]	; (8001898 <BSP_SDRAM_Init+0xb4>)
 8001808:	2202      	movs	r2, #2
 800180a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 800180c:	4b22      	ldr	r3, [pc, #136]	; (8001898 <BSP_SDRAM_Init+0xb4>)
 800180e:	2202      	movs	r2, #2
 8001810:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8001812:	4b21      	ldr	r3, [pc, #132]	; (8001898 <BSP_SDRAM_Init+0xb4>)
 8001814:	2202      	movs	r2, #2
 8001816:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8001818:	4b1d      	ldr	r3, [pc, #116]	; (8001890 <BSP_SDRAM_Init+0xac>)
 800181a:	2200      	movs	r2, #0
 800181c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800181e:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <BSP_SDRAM_Init+0xac>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001824:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <BSP_SDRAM_Init+0xac>)
 8001826:	2204      	movs	r2, #4
 8001828:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800182a:	4b19      	ldr	r3, [pc, #100]	; (8001890 <BSP_SDRAM_Init+0xac>)
 800182c:	2220      	movs	r2, #32
 800182e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001830:	4b17      	ldr	r3, [pc, #92]	; (8001890 <BSP_SDRAM_Init+0xac>)
 8001832:	2240      	movs	r2, #64	; 0x40
 8001834:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8001836:	4b16      	ldr	r3, [pc, #88]	; (8001890 <BSP_SDRAM_Init+0xac>)
 8001838:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800183c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800183e:	4b14      	ldr	r3, [pc, #80]	; (8001890 <BSP_SDRAM_Init+0xac>)
 8001840:	2200      	movs	r2, #0
 8001842:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <BSP_SDRAM_Init+0xac>)
 8001846:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800184a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800184c:	4b10      	ldr	r3, [pc, #64]	; (8001890 <BSP_SDRAM_Init+0xac>)
 800184e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001852:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001854:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <BSP_SDRAM_Init+0xac>)
 8001856:	2200      	movs	r2, #0
 8001858:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800185a:	2100      	movs	r1, #0
 800185c:	480c      	ldr	r0, [pc, #48]	; (8001890 <BSP_SDRAM_Init+0xac>)
 800185e:	f000 f87f 	bl	8001960 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8001862:	490d      	ldr	r1, [pc, #52]	; (8001898 <BSP_SDRAM_Init+0xb4>)
 8001864:	480a      	ldr	r0, [pc, #40]	; (8001890 <BSP_SDRAM_Init+0xac>)
 8001866:	f004 fe67 	bl	8006538 <HAL_SDRAM_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <BSP_SDRAM_Init+0xb8>)
 8001872:	2201      	movs	r2, #1
 8001874:	701a      	strb	r2, [r3, #0]
 8001876:	e002      	b.n	800187e <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <BSP_SDRAM_Init+0xb8>)
 800187a:	2200      	movs	r2, #0
 800187c:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800187e:	f240 6003 	movw	r0, #1539	; 0x603
 8001882:	f000 f80d 	bl	80018a0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8001886:	4b05      	ldr	r3, [pc, #20]	; (800189c <BSP_SDRAM_Init+0xb8>)
 8001888:	781b      	ldrb	r3, [r3, #0]
}
 800188a:	4618      	mov	r0, r3
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000930 	.word	0x20000930
 8001894:	a0000140 	.word	0xa0000140
 8001898:	20000964 	.word	0x20000964
 800189c:	20000014 	.word	0x20000014

080018a0 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80018ac:	4b2a      	ldr	r3, [pc, #168]	; (8001958 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80018b2:	4b29      	ldr	r3, [pc, #164]	; (8001958 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018b4:	2210      	movs	r2, #16
 80018b6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80018b8:	4b27      	ldr	r3, [pc, #156]	; (8001958 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80018be:	4b26      	ldr	r3, [pc, #152]	; (8001958 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80018c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018c8:	4923      	ldr	r1, [pc, #140]	; (8001958 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018ca:	4824      	ldr	r0, [pc, #144]	; (800195c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80018cc:	f004 fe68 	bl	80065a0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80018d0:	2001      	movs	r0, #1
 80018d2:	f000 f96d 	bl	8001bb0 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80018d6:	4b20      	ldr	r3, [pc, #128]	; (8001958 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018d8:	2202      	movs	r2, #2
 80018da:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80018dc:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018de:	2210      	movs	r2, #16
 80018e0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80018e2:	4b1d      	ldr	r3, [pc, #116]	; (8001958 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80018e8:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80018ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018f2:	4919      	ldr	r1, [pc, #100]	; (8001958 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018f4:	4819      	ldr	r0, [pc, #100]	; (800195c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80018f6:	f004 fe53 	bl	80065a0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80018fa:	4b17      	ldr	r3, [pc, #92]	; (8001958 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80018fc:	2203      	movs	r2, #3
 80018fe:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001900:	4b15      	ldr	r3, [pc, #84]	; (8001958 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001902:	2210      	movs	r2, #16
 8001904:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8001906:	4b14      	ldr	r3, [pc, #80]	; (8001958 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001908:	2208      	movs	r2, #8
 800190a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800190e:	2200      	movs	r2, #0
 8001910:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8001912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001916:	4910      	ldr	r1, [pc, #64]	; (8001958 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001918:	4810      	ldr	r0, [pc, #64]	; (800195c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800191a:	f004 fe41 	bl	80065a0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800191e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001922:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001926:	2204      	movs	r2, #4
 8001928:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800192a:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800192c:	2210      	movs	r2, #16
 800192e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001932:	2201      	movs	r2, #1
 8001934:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4a07      	ldr	r2, [pc, #28]	; (8001958 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800193a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800193c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001940:	4905      	ldr	r1, [pc, #20]	; (8001958 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8001942:	4806      	ldr	r0, [pc, #24]	; (800195c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8001944:	f004 fe2c 	bl	80065a0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8001948:	6879      	ldr	r1, [r7, #4]
 800194a:	4804      	ldr	r0, [pc, #16]	; (800195c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800194c:	f004 fe5d 	bl	800660a <HAL_SDRAM_ProgramRefreshRate>
}
 8001950:	bf00      	nop
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000980 	.word	0x20000980
 800195c:	20000930 	.word	0x20000930

08001960 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params  
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8001960:	b580      	push	{r7, lr}
 8001962:	b090      	sub	sp, #64	; 0x40
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800196a:	4b71      	ldr	r3, [pc, #452]	; (8001b30 <BSP_SDRAM_MspInit+0x1d0>)
 800196c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800196e:	4a70      	ldr	r2, [pc, #448]	; (8001b30 <BSP_SDRAM_MspInit+0x1d0>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6393      	str	r3, [r2, #56]	; 0x38
 8001976:	4b6e      	ldr	r3, [pc, #440]	; (8001b30 <BSP_SDRAM_MspInit+0x1d0>)
 8001978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001980:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8001982:	4b6b      	ldr	r3, [pc, #428]	; (8001b30 <BSP_SDRAM_MspInit+0x1d0>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a6a      	ldr	r2, [pc, #424]	; (8001b30 <BSP_SDRAM_MspInit+0x1d0>)
 8001988:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b68      	ldr	r3, [pc, #416]	; (8001b30 <BSP_SDRAM_MspInit+0x1d0>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
 8001998:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800199a:	4b65      	ldr	r3, [pc, #404]	; (8001b30 <BSP_SDRAM_MspInit+0x1d0>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a64      	ldr	r2, [pc, #400]	; (8001b30 <BSP_SDRAM_MspInit+0x1d0>)
 80019a0:	f043 0308 	orr.w	r3, r3, #8
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b62      	ldr	r3, [pc, #392]	; (8001b30 <BSP_SDRAM_MspInit+0x1d0>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	623b      	str	r3, [r7, #32]
 80019b0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019b2:	4b5f      	ldr	r3, [pc, #380]	; (8001b30 <BSP_SDRAM_MspInit+0x1d0>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a5e      	ldr	r2, [pc, #376]	; (8001b30 <BSP_SDRAM_MspInit+0x1d0>)
 80019b8:	f043 0310 	orr.w	r3, r3, #16
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b5c      	ldr	r3, [pc, #368]	; (8001b30 <BSP_SDRAM_MspInit+0x1d0>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f003 0310 	and.w	r3, r3, #16
 80019c6:	61fb      	str	r3, [r7, #28]
 80019c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019ca:	4b59      	ldr	r3, [pc, #356]	; (8001b30 <BSP_SDRAM_MspInit+0x1d0>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a58      	ldr	r2, [pc, #352]	; (8001b30 <BSP_SDRAM_MspInit+0x1d0>)
 80019d0:	f043 0320 	orr.w	r3, r3, #32
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b56      	ldr	r3, [pc, #344]	; (8001b30 <BSP_SDRAM_MspInit+0x1d0>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0320 	and.w	r3, r3, #32
 80019de:	61bb      	str	r3, [r7, #24]
 80019e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019e2:	4b53      	ldr	r3, [pc, #332]	; (8001b30 <BSP_SDRAM_MspInit+0x1d0>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a52      	ldr	r2, [pc, #328]	; (8001b30 <BSP_SDRAM_MspInit+0x1d0>)
 80019e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b50      	ldr	r3, [pc, #320]	; (8001b30 <BSP_SDRAM_MspInit+0x1d0>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019fa:	4b4d      	ldr	r3, [pc, #308]	; (8001b30 <BSP_SDRAM_MspInit+0x1d0>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a4c      	ldr	r2, [pc, #304]	; (8001b30 <BSP_SDRAM_MspInit+0x1d0>)
 8001a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b4a      	ldr	r3, [pc, #296]	; (8001b30 <BSP_SDRAM_MspInit+0x1d0>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001a12:	4b47      	ldr	r3, [pc, #284]	; (8001b30 <BSP_SDRAM_MspInit+0x1d0>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a46      	ldr	r2, [pc, #280]	; (8001b30 <BSP_SDRAM_MspInit+0x1d0>)
 8001a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b44      	ldr	r3, [pc, #272]	; (8001b30 <BSP_SDRAM_MspInit+0x1d0>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8001a32:	2303      	movs	r3, #3
 8001a34:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001a36:	230c      	movs	r3, #12
 8001a38:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8001a3a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;
 
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001a40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a44:	4619      	mov	r1, r3
 8001a46:	483b      	ldr	r0, [pc, #236]	; (8001b34 <BSP_SDRAM_MspInit+0x1d4>)
 8001a48:	f001 fe12 	bl	8003670 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001a4c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001a50:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
      
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001a52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a56:	4619      	mov	r1, r3
 8001a58:	4837      	ldr	r0, [pc, #220]	; (8001b38 <BSP_SDRAM_MspInit+0x1d8>)
 8001a5a:	f001 fe09 	bl	8003670 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001a5e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
    
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001a64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4834      	ldr	r0, [pc, #208]	; (8001b3c <BSP_SDRAM_MspInit+0x1dc>)
 8001a6c:	f001 fe00 	bl	8003670 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4|\
 8001a70:	f248 1337 	movw	r3, #33079	; 0x8137
 8001a74:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001a76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4830      	ldr	r0, [pc, #192]	; (8001b40 <BSP_SDRAM_MspInit+0x1e0>)
 8001a7e:	f001 fdf7 	bl	8003670 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8001a82:	f64f 732c 	movw	r3, #65324	; 0xff2c
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8001a88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	482d      	ldr	r0, [pc, #180]	; (8001b44 <BSP_SDRAM_MspInit+0x1e4>)
 8001a90:	f001 fdee 	bl	8003670 <HAL_GPIO_Init>
  
  /* GPIOI configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8001a94:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);  
 8001a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4829      	ldr	r0, [pc, #164]	; (8001b48 <BSP_SDRAM_MspInit+0x1e8>)
 8001aa2:	f001 fde5 	bl	8003670 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001aa6:	4b29      	ldr	r3, [pc, #164]	; (8001b4c <BSP_SDRAM_MspInit+0x1ec>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8001aac:	4b27      	ldr	r3, [pc, #156]	; (8001b4c <BSP_SDRAM_MspInit+0x1ec>)
 8001aae:	2280      	movs	r2, #128	; 0x80
 8001ab0:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001ab2:	4b26      	ldr	r3, [pc, #152]	; (8001b4c <BSP_SDRAM_MspInit+0x1ec>)
 8001ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ab8:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8001aba:	4b24      	ldr	r3, [pc, #144]	; (8001b4c <BSP_SDRAM_MspInit+0x1ec>)
 8001abc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ac0:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ac2:	4b22      	ldr	r3, [pc, #136]	; (8001b4c <BSP_SDRAM_MspInit+0x1ec>)
 8001ac4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ac8:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001aca:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <BSP_SDRAM_MspInit+0x1ec>)
 8001acc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ad0:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8001ad2:	4b1e      	ldr	r3, [pc, #120]	; (8001b4c <BSP_SDRAM_MspInit+0x1ec>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001ad8:	4b1c      	ldr	r3, [pc, #112]	; (8001b4c <BSP_SDRAM_MspInit+0x1ec>)
 8001ada:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ade:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8001ae0:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <BSP_SDRAM_MspInit+0x1ec>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001ae6:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <BSP_SDRAM_MspInit+0x1ec>)
 8001ae8:	2203      	movs	r2, #3
 8001aea:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001aec:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <BSP_SDRAM_MspInit+0x1ec>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001af2:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <BSP_SDRAM_MspInit+0x1ec>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8001af8:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <BSP_SDRAM_MspInit+0x1ec>)
 8001afa:	4a15      	ldr	r2, [pc, #84]	; (8001b50 <BSP_SDRAM_MspInit+0x1f0>)
 8001afc:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <BSP_SDRAM_MspInit+0x1ec>)
 8001b02:	631a      	str	r2, [r3, #48]	; 0x30
 8001b04:	4a11      	ldr	r2, [pc, #68]	; (8001b4c <BSP_SDRAM_MspInit+0x1ec>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8001b0a:	4810      	ldr	r0, [pc, #64]	; (8001b4c <BSP_SDRAM_MspInit+0x1ec>)
 8001b0c:	f000 fb32 	bl	8002174 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8001b10:	480e      	ldr	r0, [pc, #56]	; (8001b4c <BSP_SDRAM_MspInit+0x1ec>)
 8001b12:	f000 fa81 	bl	8002018 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	210f      	movs	r1, #15
 8001b1a:	2038      	movs	r0, #56	; 0x38
 8001b1c:	f000 fa44 	bl	8001fa8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001b20:	2038      	movs	r0, #56	; 0x38
 8001b22:	f000 fa5d 	bl	8001fe0 <HAL_NVIC_EnableIRQ>
}
 8001b26:	bf00      	nop
 8001b28:	3740      	adds	r7, #64	; 0x40
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40020c00 	.word	0x40020c00
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40021400 	.word	0x40021400
 8001b40:	40021800 	.word	0x40021800
 8001b44:	40021c00 	.word	0x40021c00
 8001b48:	40022000 	.word	0x40022000
 8001b4c:	20000990 	.word	0x20000990
 8001b50:	40026410 	.word	0x40026410

08001b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b58:	2003      	movs	r0, #3
 8001b5a:	f000 fa1a 	bl	8001f92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b5e:	2000      	movs	r0, #0
 8001b60:	f7fe ffc2 	bl	8000ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b64:	f7fe fdfc 	bl	8000760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_IncTick+0x20>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_IncTick+0x24>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4413      	add	r3, r2
 8001b80:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <HAL_IncTick+0x24>)
 8001b82:	6013      	str	r3, [r2, #0]
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	2000001c 	.word	0x2000001c
 8001b94:	200009f0 	.word	0x200009f0

08001b98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <HAL_GetTick+0x14>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	200009f0 	.word	0x200009f0

08001bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bb8:	f7ff ffee 	bl	8001b98 <HAL_GetTick>
 8001bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bc8:	d005      	beq.n	8001bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_Delay+0x44>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bd6:	bf00      	nop
 8001bd8:	f7ff ffde 	bl	8001b98 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d8f7      	bhi.n	8001bd8 <HAL_Delay+0x28>
  {
  }
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	2000001c 	.word	0x2000001c

08001bf8 <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t itflag;
  itflag = hcec->Instance->ISR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_ARBLST))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00a      	beq.n	8001c28 <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2280      	movs	r2, #128	; 0x80
 8001c16:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691a      	ldr	r2, [r3, #16]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c26:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXBR))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d01c      	beq.n	8001c6c <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2222      	movs	r2, #34	; 0x22
 8001c36:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->RxXferSize++;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	865a      	strh	r2, [r3, #50]	; 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691a      	ldr	r2, [r3, #16]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXEND))
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d01e      	beq.n	8001cb4 <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	691a      	ldr	r2, [r3, #16]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f042 0202 	orr.w	r2, r2, #2
 8001c84:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2220      	movs	r2, #32
 8001c8a:	63da      	str	r2, [r3, #60]	; 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	641a      	str	r2, [r3, #64]	; 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001c9a:	425b      	negs	r3, r3
 8001c9c:	441a      	add	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f88b 	bl	8001dc4 <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXBR))
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d024      	beq.n	8001d08 <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	861a      	strh	r2, [r3, #48]	; 0x30
    if (hcec->TxXferCount == 0U)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d107      	bne.n	8001ce2 <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f042 0204 	orr.w	r2, r2, #4
 8001ce0:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = (uint8_t)*hcec->pTxBuffPtr;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce6:	781a      	ldrb	r2, [r3, #0]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf2:	1c5a      	adds	r2, r3, #1
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	691a      	ldr	r2, [r3, #16]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d06:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXEND))
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d014      	beq.n	8001d3c <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	691a      	ldr	r2, [r3, #16]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d20:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2220      	movs	r2, #32
 8001d26:	639a      	str	r2, [r3, #56]	; 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f83a 	bl	8001db0 <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR |
 8001d3c:	68fa      	ldr	r2, [r7, #12]
 8001d3e:	f641 437c 	movw	r3, #7292	; 0x1c7c
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d02f      	beq.n	8001da8 <HAL_CEC_IRQHandler+0x1b0>
              CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = itflag;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6919      	ldr	r1, [r3, #16]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	f641 437c 	movw	r3, #7292	; 0x1c7c
 8001d5c:	430b      	orrs	r3, r1
 8001d5e:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00e      	beq.n	8001d88 <HAL_CEC_IRQHandler+0x190>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001d72:	425b      	negs	r3, r3
 8001d74:	441a      	add	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	629a      	str	r2, [r3, #40]	; 0x28
      hcec->RxXferSize = 0U;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	865a      	strh	r2, [r3, #50]	; 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2220      	movs	r2, #32
 8001d84:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d86:	e00c      	b.n	8001da2 <HAL_CEC_IRQHandler+0x1aa>
    }
    else if (((itflag & CEC_ISR_ARBLST) == 0U) && ((itflag & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d107      	bne.n	8001da2 <HAL_CEC_IRQHandler+0x1aa>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d002      	beq.n	8001da2 <HAL_CEC_IRQHandler+0x1aa>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2220      	movs	r2, #32
 8001da0:	639a      	str	r2, [r3, #56]	; 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 f819 	bl	8001dda <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 8001da8:	bf00      	nop
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 8001dce:	bf00      	nop
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e00:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <__NVIC_SetPriorityGrouping+0x40>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <__NVIC_SetPriorityGrouping+0x44>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e1e:	4a04      	ldr	r2, [pc, #16]	; (8001e30 <__NVIC_SetPriorityGrouping+0x40>)
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	60d3      	str	r3, [r2, #12]
}
 8001e24:	bf00      	nop
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000ed00 	.word	0xe000ed00
 8001e34:	05fa0000 	.word	0x05fa0000

08001e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e3c:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <__NVIC_GetPriorityGrouping+0x18>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	0a1b      	lsrs	r3, r3, #8
 8001e42:	f003 0307 	and.w	r3, r3, #7
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	db0b      	blt.n	8001e7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e66:	79fb      	ldrb	r3, [r7, #7]
 8001e68:	f003 021f 	and.w	r2, r3, #31
 8001e6c:	4907      	ldr	r1, [pc, #28]	; (8001e8c <__NVIC_EnableIRQ+0x38>)
 8001e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e72:	095b      	lsrs	r3, r3, #5
 8001e74:	2001      	movs	r0, #1
 8001e76:	fa00 f202 	lsl.w	r2, r0, r2
 8001e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000e100 	.word	0xe000e100

08001e90 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	db12      	blt.n	8001ec8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	f003 021f 	and.w	r2, r3, #31
 8001ea8:	490a      	ldr	r1, [pc, #40]	; (8001ed4 <__NVIC_DisableIRQ+0x44>)
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	095b      	lsrs	r3, r3, #5
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001eb6:	3320      	adds	r3, #32
 8001eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ebc:	f3bf 8f4f 	dsb	sy
}
 8001ec0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ec2:	f3bf 8f6f 	isb	sy
}
 8001ec6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000e100 	.word	0xe000e100

08001ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	6039      	str	r1, [r7, #0]
 8001ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	db0a      	blt.n	8001f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	490c      	ldr	r1, [pc, #48]	; (8001f24 <__NVIC_SetPriority+0x4c>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	0112      	lsls	r2, r2, #4
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	440b      	add	r3, r1
 8001efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f00:	e00a      	b.n	8001f18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	4908      	ldr	r1, [pc, #32]	; (8001f28 <__NVIC_SetPriority+0x50>)
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	3b04      	subs	r3, #4
 8001f10:	0112      	lsls	r2, r2, #4
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	440b      	add	r3, r1
 8001f16:	761a      	strb	r2, [r3, #24]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000e100 	.word	0xe000e100
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	; 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f1c3 0307 	rsb	r3, r3, #7
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	bf28      	it	cs
 8001f4a:	2304      	movcs	r3, #4
 8001f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3304      	adds	r3, #4
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d902      	bls.n	8001f5c <NVIC_EncodePriority+0x30>
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3b03      	subs	r3, #3
 8001f5a:	e000      	b.n	8001f5e <NVIC_EncodePriority+0x32>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	401a      	ands	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	43d9      	mvns	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f84:	4313      	orrs	r3, r2
         );
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3724      	adds	r7, #36	; 0x24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff ff28 	bl	8001df0 <__NVIC_SetPriorityGrouping>
}
 8001fa0:	bf00      	nop
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
 8001fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fba:	f7ff ff3d 	bl	8001e38 <__NVIC_GetPriorityGrouping>
 8001fbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	68b9      	ldr	r1, [r7, #8]
 8001fc4:	6978      	ldr	r0, [r7, #20]
 8001fc6:	f7ff ffb1 	bl	8001f2c <NVIC_EncodePriority>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd0:	4611      	mov	r1, r2
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff ff80 	bl	8001ed8 <__NVIC_SetPriority>
}
 8001fd8:	bf00      	nop
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ff30 	bl	8001e54 <__NVIC_EnableIRQ>
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff ff40 	bl	8001e90 <__NVIC_DisableIRQ>
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002024:	f7ff fdb8 	bl	8001b98 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e099      	b.n	8002168 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2202      	movs	r2, #2
 8002038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f022 0201 	bic.w	r2, r2, #1
 8002052:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002054:	e00f      	b.n	8002076 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002056:	f7ff fd9f 	bl	8001b98 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b05      	cmp	r3, #5
 8002062:	d908      	bls.n	8002076 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2220      	movs	r2, #32
 8002068:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2203      	movs	r2, #3
 800206e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e078      	b.n	8002168 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1e8      	bne.n	8002056 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	4b38      	ldr	r3, [pc, #224]	; (8002170 <HAL_DMA_Init+0x158>)
 8002090:	4013      	ands	r3, r2
 8002092:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d107      	bne.n	80020e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	4313      	orrs	r3, r2
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	4313      	orrs	r3, r2
 80020de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	f023 0307 	bic.w	r3, r3, #7
 80020f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	697a      	ldr	r2, [r7, #20]
 80020fe:	4313      	orrs	r3, r2
 8002100:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002106:	2b04      	cmp	r3, #4
 8002108:	d117      	bne.n	800213a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	4313      	orrs	r3, r2
 8002112:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00e      	beq.n	800213a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 f8bd 	bl	800229c <DMA_CheckFifoParam>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d008      	beq.n	800213a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2240      	movs	r2, #64	; 0x40
 800212c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002136:	2301      	movs	r3, #1
 8002138:	e016      	b.n	8002168 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f874 	bl	8002230 <DMA_CalcBaseAndBitshift>
 8002148:	4603      	mov	r3, r0
 800214a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002150:	223f      	movs	r2, #63	; 0x3f
 8002152:	409a      	lsls	r2, r3
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	e010803f 	.word	0xe010803f

08002174 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b084      	sub	sp, #16
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e050      	b.n	8002228 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d101      	bne.n	8002196 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002192:	2302      	movs	r3, #2
 8002194:	e048      	b.n	8002228 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 0201 	bic.w	r2, r2, #1
 80021a4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2200      	movs	r2, #0
 80021b4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2200      	movs	r2, #0
 80021c4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2200      	movs	r2, #0
 80021cc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2221      	movs	r2, #33	; 0x21
 80021d4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f82a 	bl	8002230 <DMA_CalcBaseAndBitshift>
 80021dc:	4603      	mov	r3, r0
 80021de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e4:	223f      	movs	r2, #63	; 0x3f
 80021e6:	409a      	lsls	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	b2db      	uxtb	r3, r3
 800223e:	3b10      	subs	r3, #16
 8002240:	4a13      	ldr	r2, [pc, #76]	; (8002290 <DMA_CalcBaseAndBitshift+0x60>)
 8002242:	fba2 2303 	umull	r2, r3, r2, r3
 8002246:	091b      	lsrs	r3, r3, #4
 8002248:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800224a:	4a12      	ldr	r2, [pc, #72]	; (8002294 <DMA_CalcBaseAndBitshift+0x64>)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4413      	add	r3, r2
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2b03      	cmp	r3, #3
 800225c:	d908      	bls.n	8002270 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	461a      	mov	r2, r3
 8002264:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <DMA_CalcBaseAndBitshift+0x68>)
 8002266:	4013      	ands	r3, r2
 8002268:	1d1a      	adds	r2, r3, #4
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	659a      	str	r2, [r3, #88]	; 0x58
 800226e:	e006      	b.n	800227e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	461a      	mov	r2, r3
 8002276:	4b08      	ldr	r3, [pc, #32]	; (8002298 <DMA_CalcBaseAndBitshift+0x68>)
 8002278:	4013      	ands	r3, r2
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002282:	4618      	mov	r0, r3
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	aaaaaaab 	.word	0xaaaaaaab
 8002294:	0800be80 	.word	0x0800be80
 8002298:	fffffc00 	.word	0xfffffc00

0800229c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d11f      	bne.n	80022f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d856      	bhi.n	800236a <DMA_CheckFifoParam+0xce>
 80022bc:	a201      	add	r2, pc, #4	; (adr r2, 80022c4 <DMA_CheckFifoParam+0x28>)
 80022be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c2:	bf00      	nop
 80022c4:	080022d5 	.word	0x080022d5
 80022c8:	080022e7 	.word	0x080022e7
 80022cc:	080022d5 	.word	0x080022d5
 80022d0:	0800236b 	.word	0x0800236b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d046      	beq.n	800236e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022e4:	e043      	b.n	800236e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022ee:	d140      	bne.n	8002372 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022f4:	e03d      	b.n	8002372 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022fe:	d121      	bne.n	8002344 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	2b03      	cmp	r3, #3
 8002304:	d837      	bhi.n	8002376 <DMA_CheckFifoParam+0xda>
 8002306:	a201      	add	r2, pc, #4	; (adr r2, 800230c <DMA_CheckFifoParam+0x70>)
 8002308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800230c:	0800231d 	.word	0x0800231d
 8002310:	08002323 	.word	0x08002323
 8002314:	0800231d 	.word	0x0800231d
 8002318:	08002335 	.word	0x08002335
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
      break;
 8002320:	e030      	b.n	8002384 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d025      	beq.n	800237a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002332:	e022      	b.n	800237a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002338:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800233c:	d11f      	bne.n	800237e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002342:	e01c      	b.n	800237e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d903      	bls.n	8002352 <DMA_CheckFifoParam+0xb6>
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2b03      	cmp	r3, #3
 800234e:	d003      	beq.n	8002358 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002350:	e018      	b.n	8002384 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	73fb      	strb	r3, [r7, #15]
      break;
 8002356:	e015      	b.n	8002384 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00e      	beq.n	8002382 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	73fb      	strb	r3, [r7, #15]
      break;
 8002368:	e00b      	b.n	8002382 <DMA_CheckFifoParam+0xe6>
      break;
 800236a:	bf00      	nop
 800236c:	e00a      	b.n	8002384 <DMA_CheckFifoParam+0xe8>
      break;
 800236e:	bf00      	nop
 8002370:	e008      	b.n	8002384 <DMA_CheckFifoParam+0xe8>
      break;
 8002372:	bf00      	nop
 8002374:	e006      	b.n	8002384 <DMA_CheckFifoParam+0xe8>
      break;
 8002376:	bf00      	nop
 8002378:	e004      	b.n	8002384 <DMA_CheckFifoParam+0xe8>
      break;
 800237a:	bf00      	nop
 800237c:	e002      	b.n	8002384 <DMA_CheckFifoParam+0xe8>
      break;   
 800237e:	bf00      	nop
 8002380:	e000      	b.n	8002384 <DMA_CheckFifoParam+0xe8>
      break;
 8002382:	bf00      	nop
    }
  } 
  
  return status; 
 8002384:	7bfb      	ldrb	r3, [r7, #15]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop

08002394 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e049      	b.n	800243a <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d106      	bne.n	80023c0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7fe f9f8 	bl	80007b0 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e4:	f023 0107 	bic.w	r1, r3, #7
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023fa:	4b12      	ldr	r3, [pc, #72]	; (8002444 <HAL_DMA2D_Init+0xb0>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68d1      	ldr	r1, [r2, #12]
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	430b      	orrs	r3, r1
 8002408:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002410:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	051a      	lsls	r2, r3, #20
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	055b      	lsls	r3, r3, #21
 8002420:	431a      	orrs	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	ffffc000 	.word	0xffffc000

08002448 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af02      	add	r7, sp, #8
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <HAL_DMA2D_Start+0x1c>
 8002460:	2302      	movs	r3, #2
 8002462:	e018      	b.n	8002496 <HAL_DMA2D_Start+0x4e>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 faa4 	bl	80029cc <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0201 	orr.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b086      	sub	sp, #24
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d056      	beq.n	8002568 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80024ba:	f7ff fb6d 	bl	8001b98 <HAL_GetTick>
 80024be:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80024c0:	e04b      	b.n	800255a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d023      	beq.n	800251c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f003 0320 	and.w	r3, r3, #32
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d005      	beq.n	80024ea <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e2:	f043 0202 	orr.w	r2, r3, #2
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d005      	beq.n	8002500 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f8:	f043 0201 	orr.w	r2, r3, #1
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2221      	movs	r2, #33	; 0x21
 8002506:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2204      	movs	r2, #4
 800250c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0a5      	b.n	8002668 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002522:	d01a      	beq.n	800255a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002524:	f7ff fb38 	bl	8001b98 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	429a      	cmp	r2, r3
 8002532:	d302      	bcc.n	800253a <HAL_DMA2D_PollForTransfer+0x9c>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10f      	bne.n	800255a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800253e:	f043 0220 	orr.w	r2, r3, #32
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2203      	movs	r2, #3
 800254a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e086      	b.n	8002668 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0ac      	beq.n	80024c2 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f003 0320 	and.w	r3, r3, #32
 8002572:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	f003 0320 	and.w	r3, r3, #32
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	4313      	orrs	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d061      	beq.n	800264e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800258a:	f7ff fb05 	bl	8001b98 <HAL_GetTick>
 800258e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002590:	e056      	b.n	8002640 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d02e      	beq.n	8002602 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d005      	beq.n	80025ba <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b2:	f043 0204 	orr.w	r2, r3, #4
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f003 0320 	and.w	r3, r3, #32
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c8:	f043 0202 	orr.w	r2, r3, #2
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	655a      	str	r2, [r3, #84]	; 0x54
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025de:	f043 0201 	orr.w	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	655a      	str	r2, [r3, #84]	; 0x54
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2229      	movs	r2, #41	; 0x29
 80025ec:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2204      	movs	r2, #4
 80025f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e032      	b.n	8002668 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002608:	d01a      	beq.n	8002640 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800260a:	f7ff fac5 	bl	8001b98 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	429a      	cmp	r2, r3
 8002618:	d302      	bcc.n	8002620 <HAL_DMA2D_PollForTransfer+0x182>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10f      	bne.n	8002640 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002624:	f043 0220 	orr.w	r2, r3, #32
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2203      	movs	r2, #3
 8002630:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e013      	b.n	8002668 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 0310 	and.w	r3, r3, #16
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0a1      	beq.n	8002592 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2212      	movs	r2, #18
 8002654:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d026      	beq.n	80026e0 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002698:	2b00      	cmp	r3, #0
 800269a:	d021      	beq.n	80026e0 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026aa:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b0:	f043 0201 	orr.w	r2, r3, #1
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2201      	movs	r2, #1
 80026be:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2204      	movs	r2, #4
 80026c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d026      	beq.n	8002738 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d021      	beq.n	8002738 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002702:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2220      	movs	r2, #32
 800270a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002710:	f043 0202 	orr.w	r2, r3, #2
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2204      	movs	r2, #4
 800271c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d026      	beq.n	8002790 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002748:	2b00      	cmp	r3, #0
 800274a:	d021      	beq.n	8002790 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800275a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2208      	movs	r2, #8
 8002762:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002768:	f043 0204 	orr.w	r2, r3, #4
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2204      	movs	r2, #4
 8002774:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferErrorCallback != NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 0304 	and.w	r3, r3, #4
 8002796:	2b00      	cmp	r3, #0
 8002798:	d013      	beq.n	80027c2 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00e      	beq.n	80027c2 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027b2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2204      	movs	r2, #4
 80027ba:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f853 	bl	8002868 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d024      	beq.n	8002816 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d01f      	beq.n	8002816 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027e4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2202      	movs	r2, #2
 80027ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      if (hdma2d->XferCpltCallback != NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f003 0310 	and.w	r3, r3, #16
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01f      	beq.n	8002860 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d01a      	beq.n	8002860 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002838:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2210      	movs	r2, #16
 8002840:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f80e 	bl	800287c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002860:	bf00      	nop
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002890:	b480      	push	{r7}
 8002892:	b087      	sub	sp, #28
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_DMA2D_ConfigLayer+0x20>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e084      	b.n	80029ba <HAL_DMA2D_ConfigLayer+0x12a>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80028c0:	683a      	ldr	r2, [r7, #0]
 80028c2:	4613      	mov	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	4413      	add	r3, r2
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	3320      	adds	r3, #32
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	4413      	add	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	041b      	lsls	r3, r3, #16
 80028dc:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80028e4:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80028ec:	4313      	orrs	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 80028f0:	4b35      	ldr	r3, [pc, #212]	; (80029c8 <HAL_DMA2D_ConfigLayer+0x138>)
 80028f2:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b0a      	cmp	r3, #10
 80028fa:	d003      	beq.n	8002904 <HAL_DMA2D_ConfigLayer+0x74>
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b09      	cmp	r3, #9
 8002902:	d107      	bne.n	8002914 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	4313      	orrs	r3, r2
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	e005      	b.n	8002920 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	061b      	lsls	r3, r3, #24
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	4313      	orrs	r3, r2
 800291e:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d120      	bne.n	8002968 <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	43db      	mvns	r3, r3
 8002930:	ea02 0103 	and.w	r1, r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	430a      	orrs	r2, r1
 800293c:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	693a      	ldr	r2, [r7, #16]
 8002944:	6812      	ldr	r2, [r2, #0]
 8002946:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b0a      	cmp	r3, #10
 800294e:	d003      	beq.n	8002958 <HAL_DMA2D_ConfigLayer+0xc8>
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b09      	cmp	r3, #9
 8002956:	d127      	bne.n	80029a8 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002964:	629a      	str	r2, [r3, #40]	; 0x28
 8002966:	e01f      	b.n	80029a8 <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	69da      	ldr	r2, [r3, #28]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	43db      	mvns	r3, r3
 8002972:	ea02 0103 	and.w	r1, r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	430a      	orrs	r2, r1
 800297e:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	6812      	ldr	r2, [r2, #0]
 8002988:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b0a      	cmp	r3, #10
 8002990:	d003      	beq.n	800299a <HAL_DMA2D_ConfigLayer+0x10a>
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b09      	cmp	r3, #9
 8002998:	d106      	bne.n	80029a8 <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	68da      	ldr	r2, [r3, #12]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80029a6:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	371c      	adds	r7, #28
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	ff33000f 	.word	0xff33000f

080029cc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b08b      	sub	sp, #44	; 0x2c
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e0:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	041a      	lsls	r2, r3, #16
 80029e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ea:	431a      	orrs	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a04:	d174      	bne.n	8002af0 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002a0c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002a14:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002a1c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d108      	bne.n	8002a3e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	431a      	orrs	r2, r3
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	697a      	ldr	r2, [r7, #20]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3c:	e053      	b.n	8002ae6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d106      	bne.n	8002a54 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
 8002a52:	e048      	b.n	8002ae6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d111      	bne.n	8002a80 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	0cdb      	lsrs	r3, r3, #19
 8002a60:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	0a9b      	lsrs	r3, r3, #10
 8002a66:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	08db      	lsrs	r3, r3, #3
 8002a6c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	015a      	lsls	r2, r3, #5
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	02db      	lsls	r3, r3, #11
 8002a76:	4313      	orrs	r3, r2
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a7e:	e032      	b.n	8002ae6 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d117      	bne.n	8002ab8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	0fdb      	lsrs	r3, r3, #31
 8002a8c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	0cdb      	lsrs	r3, r3, #19
 8002a92:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	0adb      	lsrs	r3, r3, #11
 8002a98:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	08db      	lsrs	r3, r3, #3
 8002a9e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	029b      	lsls	r3, r3, #10
 8002aa8:	431a      	orrs	r2, r3
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	03db      	lsls	r3, r3, #15
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab6:	e016      	b.n	8002ae6 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	0f1b      	lsrs	r3, r3, #28
 8002abc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	0d1b      	lsrs	r3, r3, #20
 8002ac2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	0b1b      	lsrs	r3, r3, #12
 8002ac8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	091b      	lsrs	r3, r3, #4
 8002ace:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	011a      	lsls	r2, r3, #4
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	021b      	lsls	r3, r3, #8
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	031b      	lsls	r3, r3, #12
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aec:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8002aee:	e003      	b.n	8002af8 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	60da      	str	r2, [r3, #12]
}
 8002af8:	bf00      	nop
 8002afa:	372c      	adds	r7, #44	; 0x2c
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
 8002b10:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	019a      	lsls	r2, r3, #6
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	021b      	lsls	r3, r3, #8
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	041b      	lsls	r3, r3, #16
 8002b24:	431a      	orrs	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8002b2a:	bf00      	nop
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b086      	sub	sp, #24
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	60f8      	str	r0, [r7, #12]
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
 8002b42:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b44:	f7ff f828 	bl	8001b98 <HAL_GetTick>
 8002b48:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002b4a:	e009      	b.n	8002b60 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002b4c:	f7ff f824 	bl	8001b98 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b5a:	d901      	bls.n	8002b60 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e015      	b.n	8002b8c <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0ee      	beq.n	8002b4c <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	019a      	lsls	r2, r3, #6
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	431a      	orrs	r2, r3
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	021b      	lsls	r3, r3, #8
 8002b7a:	ea42 0103 	orr.w	r1, r2, r3
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	041a      	lsls	r2, r3, #16
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e109      	b.n	8002dbc <HAL_DSI_Init+0x228>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	7c5b      	ldrb	r3, [r3, #17]
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d102      	bne.n	8002bb8 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7fd fe22 	bl	80007fc <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2203      	movs	r2, #3
 8002bbc:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002bd2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002bde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002be2:	613b      	str	r3, [r7, #16]
 8002be4:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002be6:	f7fe ffd7 	bl	8001b98 <HAL_GetTick>
 8002bea:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002bec:	e009      	b.n	8002c02 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002bee:	f7fe ffd3 	bl	8001b98 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bfc:	d901      	bls.n	8002c02 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e0dc      	b.n	8002dbc <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002c0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0ed      	beq.n	8002bee <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	4b69      	ldr	r3, [pc, #420]	; (8002dc4 <HAL_DSI_Init+0x230>)
 8002c20:	400b      	ands	r3, r1
 8002c22:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002c3a:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002c42:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0201 	orr.w	r2, r2, #1
 8002c62:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8002c76:	2001      	movs	r0, #1
 8002c78:	f7fe ff9a 	bl	8001bb0 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c7c:	f7fe ff8c 	bl	8001b98 <HAL_GetTick>
 8002c80:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002c82:	e009      	b.n	8002c98 <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002c84:	f7fe ff88 	bl	8001b98 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c92:	d901      	bls.n	8002c98 <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e091      	b.n	8002dbc <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0ed      	beq.n	8002c84 <HAL_DSI_Init+0xf0>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f042 0206 	orr.w	r2, r2, #6
 8002cb8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0203 	bic.w	r2, r2, #3
 8002ccc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
 8002ce6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0203 	bic.w	r2, r2, #3
 8002cfa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d22:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6899      	ldr	r1, [r3, #8]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_DSI_Init+0x1b0>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	e000      	b.n	8002d46 <HAL_DSI_Init+0x1b2>
 8002d44:	2301      	movs	r3, #1
 8002d46:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	4a1f      	ldr	r2, [pc, #124]	; (8002dc8 <HAL_DSI_Init+0x234>)
 8002d4c:	fb03 f202 	mul.w	r2, r3, r2
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	409a      	lsls	r2, r3
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8002d62:	fb01 f303 	mul.w	r3, r1, r3
 8002d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d6a:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002d7c:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3720      	adds	r7, #32
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	fffc8603 	.word	0xfffc8603
 8002dc8:	003d0900 	.word	0x003d0900

08002dcc <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e066      	b.n	8002eac <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2203      	movs	r2, #3
 8002de2:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0208 	bic.w	r2, r2, #8
 8002df8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	613b      	str	r3, [r7, #16]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0201 	bic.w	r2, r2, #1
 8002e1e:	605a      	str	r2, [r3, #4]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	613b      	str	r3, [r7, #16]
 8002e2c:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0206 	bic.w	r2, r2, #6
 8002e3e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0201 	bic.w	r2, r2, #1
 8002e56:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002e62:	f003 0301 	and.w	r3, r3, #1
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002e7e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002e8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7fd fcfe 	bl	8000894 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00f      	beq.n	8002eec <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002ed4:	f003 0301 	and.w	r3, r3, #1
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d007      	beq.n	8002eec <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f8ad 	bl	8003046 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00f      	beq.n	8002f1c <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d007      	beq.n	8002f1c <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2202      	movs	r2, #2
 8002f12:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f89f 	bl	800305a <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 808c 	beq.w	800303e <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002f2e:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002f46:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	4013      	ands	r3, r2
 8002f54:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d005      	beq.n	8002f6a <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	f043 0201 	orr.w	r2, r3, #1
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d005      	beq.n	8002f80 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	f043 0202 	orr.w	r2, r3, #2
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d005      	beq.n	8002f96 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	f043 0204 	orr.w	r2, r3, #4
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d005      	beq.n	8002fac <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	f043 0208 	orr.w	r2, r3, #8
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f003 030c 	and.w	r3, r3, #12
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d005      	beq.n	8002fc2 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	f043 0210 	orr.w	r2, r3, #16
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	f003 0310 	and.w	r3, r3, #16
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d005      	beq.n	8002fd8 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	f043 0220 	orr.w	r2, r3, #32
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f003 0320 	and.w	r3, r3, #32
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d005      	beq.n	8002fee <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300a:	2b00      	cmp	r3, #0
 800300c:	d005      	beq.n	800301a <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f818 	bl	800306e <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 800303e:	bf00      	nop
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_EndOfRefreshCallback could be implemented in the user file
   */
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
	...

08003084 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	7c1b      	ldrb	r3, [r3, #16]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d101      	bne.n	800309a <HAL_DSI_ConfigVideoMode+0x16>
 8003096:	2302      	movs	r3, #2
 8003098:	e1ee      	b.n	8003478 <HAL_DSI_ConfigVideoMode+0x3f4>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0201 	bic.w	r2, r2, #1
 80030ae:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f022 0201 	bic.w	r2, r2, #1
 80030c0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 0203 	bic.w	r2, r2, #3
 80030d2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	4b8b      	ldr	r3, [pc, #556]	; (8003320 <HAL_DSI_ConfigVideoMode+0x29c>)
 80030f2:	400b      	ands	r3, r1
 80030f4:	63d3      	str	r3, [r2, #60]	; 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	4b84      	ldr	r3, [pc, #528]	; (8003324 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8003114:	400b      	ands	r3, r1
 8003116:	6413      	str	r3, [r2, #64]	; 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	695a      	ldr	r2, [r3, #20]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	4b7b      	ldr	r3, [pc, #492]	; (8003324 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8003136:	400b      	ands	r3, r1
 8003138:	6453      	str	r3, [r2, #68]	; 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	699a      	ldr	r2, [r3, #24]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f022 0203 	bic.w	r2, r2, #3
 800315a:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68d9      	ldr	r1, [r3, #12]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695a      	ldr	r2, [r3, #20]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0207 	bic.w	r2, r2, #7
 800317c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6959      	ldr	r1, [r3, #20]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	431a      	orrs	r2, r3
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	430a      	orrs	r2, r1
 800319a:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	691a      	ldr	r2, [r3, #16]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 020f 	bic.w	r2, r2, #15
 80031aa:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6919      	ldr	r1, [r3, #16]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 020e 	bic.w	r2, r2, #14
 80031ce:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	005a      	lsls	r2, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b03      	cmp	r3, #3
 80031f0:	d110      	bne.n	8003214 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003200:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6919      	ldr	r1, [r3, #16]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	4b42      	ldr	r3, [pc, #264]	; (8003328 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8003220:	400b      	ands	r3, r1
 8003222:	6493      	str	r3, [r2, #72]	; 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	4b39      	ldr	r3, [pc, #228]	; (8003328 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8003242:	400b      	ands	r3, r1
 8003244:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	430a      	orrs	r2, r1
 8003256:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	4b32      	ldr	r3, [pc, #200]	; (800332c <HAL_DSI_ConfigVideoMode+0x2a8>)
 8003264:	400b      	ands	r3, r1
 8003266:	6513      	str	r3, [r2, #80]	; 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	430a      	orrs	r2, r1
 8003278:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	4b2a      	ldr	r3, [pc, #168]	; (8003330 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8003286:	400b      	ands	r3, r1
 8003288:	6553      	str	r3, [r2, #84]	; 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	4b22      	ldr	r3, [pc, #136]	; (8003330 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80032a8:	400b      	ands	r3, r1
 80032aa:	6593      	str	r3, [r2, #88]	; 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6d99      	ldr	r1, [r3, #88]	; 0x58
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	4b19      	ldr	r3, [pc, #100]	; (8003330 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80032ca:	400b      	ands	r3, r1
 80032cc:	65d3      	str	r3, [r2, #92]	; 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	4b0d      	ldr	r3, [pc, #52]	; (8003320 <HAL_DSI_ConfigVideoMode+0x29c>)
 80032ec:	400b      	ands	r3, r1
 80032ee:	6613      	str	r3, [r2, #96]	; 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6e19      	ldr	r1, [r3, #96]	; 0x60
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	661a      	str	r2, [r3, #96]	; 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003310:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800331c:	e00a      	b.n	8003334 <HAL_DSI_ConfigVideoMode+0x2b0>
 800331e:	bf00      	nop
 8003320:	ffffc000 	.word	0xffffc000
 8003324:	ffffe000 	.word	0xffffe000
 8003328:	fffff000 	.word	0xfffff000
 800332c:	ffff8000 	.word	0xffff8000
 8003330:	fffffc00 	.word	0xfffffc00
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699a      	ldr	r2, [r3, #24]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 800334a:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6999      	ldr	r1, [r3, #24]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003356:	041a      	lsls	r2, r3, #16
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699a      	ldr	r2, [r3, #24]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800336e:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6999      	ldr	r1, [r3, #24]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003390:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033b2:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033d4:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	430a      	orrs	r2, r1
 80033e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033f6:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003418:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	430a      	orrs	r2, r1
 800342a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800343a:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800345c:	639a      	str	r2, [r3, #56]	; 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	430a      	orrs	r2, r1
 800346e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	7c1b      	ldrb	r3, [r3, #16]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_DSI_Start+0x14>
 8003494:	2302      	movs	r3, #2
 8003496:	e02b      	b.n	80034f0 <HAL_DSI_Start+0x6c>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800349e:	2300      	movs	r3, #0
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 0201 	orr.w	r2, r2, #1
 80034b0:	605a      	str	r2, [r3, #4]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80034c0:	2300      	movs	r3, #0
 80034c2:	60bb      	str	r3, [r7, #8]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f042 0208 	orr.w	r2, r2, #8
 80034d4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	60bb      	str	r3, [r7, #8]
 80034e6:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b088      	sub	sp, #32
 8003500:	af02      	add	r7, sp, #8
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
 8003508:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	7c1b      	ldrb	r3, [r3, #16]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d101      	bne.n	8003516 <HAL_DSI_ShortWrite+0x1a>
 8003512:	2302      	movs	r3, #2
 8003514:	e010      	b.n	8003538 <HAL_DSI_ShortWrite+0x3c>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2201      	movs	r2, #1
 800351a:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	9300      	str	r3, [sp, #0]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	68b9      	ldr	r1, [r7, #8]
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f7ff fb05 	bl	8002b36 <DSI_ShortWrite>
 800352c:	4603      	mov	r3, r0
 800352e:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	741a      	strb	r2, [r3, #16]

  return status;
 8003536:	7dfb      	ldrb	r3, [r7, #23]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08c      	sub	sp, #48	; 0x30
 8003544:	af02      	add	r7, sp, #8
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 800354e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003550:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	7c1b      	ldrb	r3, [r3, #16]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_DSI_LongWrite+0x1e>
 800355a:	2302      	movs	r3, #2
 800355c:	e084      	b.n	8003668 <HAL_DSI_LongWrite+0x128>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2201      	movs	r2, #1
 8003562:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8003564:	f7fe fb18 	bl	8001b98 <HAL_GetTick>
 8003568:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800356a:	e00c      	b.n	8003586 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800356c:	f7fe fb14 	bl	8001b98 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800357a:	d904      	bls.n	8003586 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e070      	b.n	8003668 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0eb      	beq.n	800356c <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8003594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003596:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	2b03      	cmp	r3, #3
 800359c:	bf28      	it	cs
 800359e:	2303      	movcs	r3, #3
 80035a0:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 80035a2:	2300      	movs	r3, #0
 80035a4:	623b      	str	r3, [r7, #32]
 80035a6:	e00f      	b.n	80035c8 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	4413      	add	r3, r2
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	3301      	adds	r3, #1
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	69fa      	ldr	r2, [r7, #28]
 80035be:	4313      	orrs	r3, r2
 80035c0:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	3301      	adds	r3, #1
 80035c6:	623b      	str	r3, [r7, #32]
 80035c8:	6a3a      	ldr	r2, [r7, #32]
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d3eb      	bcc.n	80035a8 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	69fa      	ldr	r2, [r7, #28]
 80035d6:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 80035d8:	683a      	ldr	r2, [r7, #0]
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	4413      	add	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80035e8:	e028      	b.n	800363c <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80035ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ec:	2b04      	cmp	r3, #4
 80035ee:	bf28      	it	cs
 80035f0:	2304      	movcs	r3, #4
 80035f2:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80035f8:	2300      	movs	r3, #0
 80035fa:	623b      	str	r3, [r7, #32]
 80035fc:	e00e      	b.n	800361c <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	4413      	add	r3, r2
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	461a      	mov	r2, r3
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	69fa      	ldr	r2, [r7, #28]
 8003612:	4313      	orrs	r3, r2
 8003614:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8003616:	6a3b      	ldr	r3, [r7, #32]
 8003618:	3301      	adds	r3, #1
 800361a:	623b      	str	r3, [r7, #32]
 800361c:	6a3a      	ldr	r2, [r7, #32]
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	429a      	cmp	r2, r3
 8003622:	d3ec      	bcc.n	80035fe <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	69fa      	ldr	r2, [r7, #28]
 800362a:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 800362c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4413      	add	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 800363c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1d3      	bne.n	80035ea <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 800364a:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	3301      	adds	r3, #1
 8003650:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003652:	b2db      	uxtb	r3, r3
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	4613      	mov	r3, r2
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	68b9      	ldr	r1, [r7, #8]
 800365c:	f7ff fa52 	bl	8002b04 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3728      	adds	r7, #40	; 0x28
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003670:	b480      	push	{r7}
 8003672:	b089      	sub	sp, #36	; 0x24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800367a:	2300      	movs	r3, #0
 800367c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800367e:	2300      	movs	r3, #0
 8003680:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003682:	2300      	movs	r3, #0
 8003684:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003686:	2300      	movs	r3, #0
 8003688:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800368a:	2300      	movs	r3, #0
 800368c:	61fb      	str	r3, [r7, #28]
 800368e:	e175      	b.n	800397c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003690:	2201      	movs	r2, #1
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4013      	ands	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	f040 8164 	bne.w	8003976 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d005      	beq.n	80036c6 <HAL_GPIO_Init+0x56>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d130      	bne.n	8003728 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	2203      	movs	r2, #3
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	43db      	mvns	r3, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4013      	ands	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036fc:	2201      	movs	r2, #1
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	43db      	mvns	r3, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4013      	ands	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	091b      	lsrs	r3, r3, #4
 8003712:	f003 0201 	and.w	r2, r3, #1
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f003 0303 	and.w	r3, r3, #3
 8003730:	2b03      	cmp	r3, #3
 8003732:	d017      	beq.n	8003764 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	2203      	movs	r2, #3
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	43db      	mvns	r3, r3
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	4013      	ands	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	005b      	lsls	r3, r3, #1
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4313      	orrs	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d123      	bne.n	80037b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	08da      	lsrs	r2, r3, #3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	3208      	adds	r2, #8
 8003778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800377c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	220f      	movs	r2, #15
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	43db      	mvns	r3, r3
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	4013      	ands	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	08da      	lsrs	r2, r3, #3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3208      	adds	r2, #8
 80037b2:	69b9      	ldr	r1, [r7, #24]
 80037b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	2203      	movs	r2, #3
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4013      	ands	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 0203 	and.w	r2, r3, #3
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 80be 	beq.w	8003976 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037fa:	4b66      	ldr	r3, [pc, #408]	; (8003994 <HAL_GPIO_Init+0x324>)
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	4a65      	ldr	r2, [pc, #404]	; (8003994 <HAL_GPIO_Init+0x324>)
 8003800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003804:	6453      	str	r3, [r2, #68]	; 0x44
 8003806:	4b63      	ldr	r3, [pc, #396]	; (8003994 <HAL_GPIO_Init+0x324>)
 8003808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003812:	4a61      	ldr	r2, [pc, #388]	; (8003998 <HAL_GPIO_Init+0x328>)
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	089b      	lsrs	r3, r3, #2
 8003818:	3302      	adds	r3, #2
 800381a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800381e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f003 0303 	and.w	r3, r3, #3
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	220f      	movs	r2, #15
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	43db      	mvns	r3, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4013      	ands	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a58      	ldr	r2, [pc, #352]	; (800399c <HAL_GPIO_Init+0x32c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d037      	beq.n	80038ae <HAL_GPIO_Init+0x23e>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a57      	ldr	r2, [pc, #348]	; (80039a0 <HAL_GPIO_Init+0x330>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d031      	beq.n	80038aa <HAL_GPIO_Init+0x23a>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a56      	ldr	r2, [pc, #344]	; (80039a4 <HAL_GPIO_Init+0x334>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d02b      	beq.n	80038a6 <HAL_GPIO_Init+0x236>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a55      	ldr	r2, [pc, #340]	; (80039a8 <HAL_GPIO_Init+0x338>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d025      	beq.n	80038a2 <HAL_GPIO_Init+0x232>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a54      	ldr	r2, [pc, #336]	; (80039ac <HAL_GPIO_Init+0x33c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d01f      	beq.n	800389e <HAL_GPIO_Init+0x22e>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a53      	ldr	r2, [pc, #332]	; (80039b0 <HAL_GPIO_Init+0x340>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d019      	beq.n	800389a <HAL_GPIO_Init+0x22a>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a52      	ldr	r2, [pc, #328]	; (80039b4 <HAL_GPIO_Init+0x344>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d013      	beq.n	8003896 <HAL_GPIO_Init+0x226>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a51      	ldr	r2, [pc, #324]	; (80039b8 <HAL_GPIO_Init+0x348>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d00d      	beq.n	8003892 <HAL_GPIO_Init+0x222>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a50      	ldr	r2, [pc, #320]	; (80039bc <HAL_GPIO_Init+0x34c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d007      	beq.n	800388e <HAL_GPIO_Init+0x21e>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a4f      	ldr	r2, [pc, #316]	; (80039c0 <HAL_GPIO_Init+0x350>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d101      	bne.n	800388a <HAL_GPIO_Init+0x21a>
 8003886:	2309      	movs	r3, #9
 8003888:	e012      	b.n	80038b0 <HAL_GPIO_Init+0x240>
 800388a:	230a      	movs	r3, #10
 800388c:	e010      	b.n	80038b0 <HAL_GPIO_Init+0x240>
 800388e:	2308      	movs	r3, #8
 8003890:	e00e      	b.n	80038b0 <HAL_GPIO_Init+0x240>
 8003892:	2307      	movs	r3, #7
 8003894:	e00c      	b.n	80038b0 <HAL_GPIO_Init+0x240>
 8003896:	2306      	movs	r3, #6
 8003898:	e00a      	b.n	80038b0 <HAL_GPIO_Init+0x240>
 800389a:	2305      	movs	r3, #5
 800389c:	e008      	b.n	80038b0 <HAL_GPIO_Init+0x240>
 800389e:	2304      	movs	r3, #4
 80038a0:	e006      	b.n	80038b0 <HAL_GPIO_Init+0x240>
 80038a2:	2303      	movs	r3, #3
 80038a4:	e004      	b.n	80038b0 <HAL_GPIO_Init+0x240>
 80038a6:	2302      	movs	r3, #2
 80038a8:	e002      	b.n	80038b0 <HAL_GPIO_Init+0x240>
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <HAL_GPIO_Init+0x240>
 80038ae:	2300      	movs	r3, #0
 80038b0:	69fa      	ldr	r2, [r7, #28]
 80038b2:	f002 0203 	and.w	r2, r2, #3
 80038b6:	0092      	lsls	r2, r2, #2
 80038b8:	4093      	lsls	r3, r2
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4313      	orrs	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80038c0:	4935      	ldr	r1, [pc, #212]	; (8003998 <HAL_GPIO_Init+0x328>)
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	089b      	lsrs	r3, r3, #2
 80038c6:	3302      	adds	r3, #2
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038ce:	4b3d      	ldr	r3, [pc, #244]	; (80039c4 <HAL_GPIO_Init+0x354>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	43db      	mvns	r3, r3
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	4013      	ands	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038f2:	4a34      	ldr	r2, [pc, #208]	; (80039c4 <HAL_GPIO_Init+0x354>)
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038f8:	4b32      	ldr	r3, [pc, #200]	; (80039c4 <HAL_GPIO_Init+0x354>)
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	43db      	mvns	r3, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4013      	ands	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	4313      	orrs	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800391c:	4a29      	ldr	r2, [pc, #164]	; (80039c4 <HAL_GPIO_Init+0x354>)
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003922:	4b28      	ldr	r3, [pc, #160]	; (80039c4 <HAL_GPIO_Init+0x354>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	43db      	mvns	r3, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4013      	ands	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	4313      	orrs	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003946:	4a1f      	ldr	r2, [pc, #124]	; (80039c4 <HAL_GPIO_Init+0x354>)
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800394c:	4b1d      	ldr	r3, [pc, #116]	; (80039c4 <HAL_GPIO_Init+0x354>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	43db      	mvns	r3, r3
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4013      	ands	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003970:	4a14      	ldr	r2, [pc, #80]	; (80039c4 <HAL_GPIO_Init+0x354>)
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	3301      	adds	r3, #1
 800397a:	61fb      	str	r3, [r7, #28]
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	2b0f      	cmp	r3, #15
 8003980:	f67f ae86 	bls.w	8003690 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003984:	bf00      	nop
 8003986:	bf00      	nop
 8003988:	3724      	adds	r7, #36	; 0x24
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40023800 	.word	0x40023800
 8003998:	40013800 	.word	0x40013800
 800399c:	40020000 	.word	0x40020000
 80039a0:	40020400 	.word	0x40020400
 80039a4:	40020800 	.word	0x40020800
 80039a8:	40020c00 	.word	0x40020c00
 80039ac:	40021000 	.word	0x40021000
 80039b0:	40021400 	.word	0x40021400
 80039b4:	40021800 	.word	0x40021800
 80039b8:	40021c00 	.word	0x40021c00
 80039bc:	40022000 	.word	0x40022000
 80039c0:	40022400 	.word	0x40022400
 80039c4:	40013c00 	.word	0x40013c00

080039c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80039d2:	2300      	movs	r3, #0
 80039d4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80039da:	2300      	movs	r3, #0
 80039dc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80039de:	2300      	movs	r3, #0
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	e0d9      	b.n	8003b98 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80039e4:	2201      	movs	r2, #1
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	4013      	ands	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	f040 80c9 	bne.w	8003b92 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8003a00:	4a6b      	ldr	r2, [pc, #428]	; (8003bb0 <HAL_GPIO_DeInit+0x1e8>)
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	089b      	lsrs	r3, r3, #2
 8003a06:	3302      	adds	r3, #2
 8003a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a0c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f003 0303 	and.w	r3, r3, #3
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	220f      	movs	r2, #15
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a63      	ldr	r2, [pc, #396]	; (8003bb4 <HAL_GPIO_DeInit+0x1ec>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d037      	beq.n	8003a9a <HAL_GPIO_DeInit+0xd2>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a62      	ldr	r2, [pc, #392]	; (8003bb8 <HAL_GPIO_DeInit+0x1f0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d031      	beq.n	8003a96 <HAL_GPIO_DeInit+0xce>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a61      	ldr	r2, [pc, #388]	; (8003bbc <HAL_GPIO_DeInit+0x1f4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d02b      	beq.n	8003a92 <HAL_GPIO_DeInit+0xca>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a60      	ldr	r2, [pc, #384]	; (8003bc0 <HAL_GPIO_DeInit+0x1f8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d025      	beq.n	8003a8e <HAL_GPIO_DeInit+0xc6>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a5f      	ldr	r2, [pc, #380]	; (8003bc4 <HAL_GPIO_DeInit+0x1fc>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d01f      	beq.n	8003a8a <HAL_GPIO_DeInit+0xc2>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a5e      	ldr	r2, [pc, #376]	; (8003bc8 <HAL_GPIO_DeInit+0x200>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d019      	beq.n	8003a86 <HAL_GPIO_DeInit+0xbe>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a5d      	ldr	r2, [pc, #372]	; (8003bcc <HAL_GPIO_DeInit+0x204>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d013      	beq.n	8003a82 <HAL_GPIO_DeInit+0xba>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a5c      	ldr	r2, [pc, #368]	; (8003bd0 <HAL_GPIO_DeInit+0x208>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d00d      	beq.n	8003a7e <HAL_GPIO_DeInit+0xb6>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a5b      	ldr	r2, [pc, #364]	; (8003bd4 <HAL_GPIO_DeInit+0x20c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d007      	beq.n	8003a7a <HAL_GPIO_DeInit+0xb2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a5a      	ldr	r2, [pc, #360]	; (8003bd8 <HAL_GPIO_DeInit+0x210>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d101      	bne.n	8003a76 <HAL_GPIO_DeInit+0xae>
 8003a72:	2309      	movs	r3, #9
 8003a74:	e012      	b.n	8003a9c <HAL_GPIO_DeInit+0xd4>
 8003a76:	230a      	movs	r3, #10
 8003a78:	e010      	b.n	8003a9c <HAL_GPIO_DeInit+0xd4>
 8003a7a:	2308      	movs	r3, #8
 8003a7c:	e00e      	b.n	8003a9c <HAL_GPIO_DeInit+0xd4>
 8003a7e:	2307      	movs	r3, #7
 8003a80:	e00c      	b.n	8003a9c <HAL_GPIO_DeInit+0xd4>
 8003a82:	2306      	movs	r3, #6
 8003a84:	e00a      	b.n	8003a9c <HAL_GPIO_DeInit+0xd4>
 8003a86:	2305      	movs	r3, #5
 8003a88:	e008      	b.n	8003a9c <HAL_GPIO_DeInit+0xd4>
 8003a8a:	2304      	movs	r3, #4
 8003a8c:	e006      	b.n	8003a9c <HAL_GPIO_DeInit+0xd4>
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e004      	b.n	8003a9c <HAL_GPIO_DeInit+0xd4>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e002      	b.n	8003a9c <HAL_GPIO_DeInit+0xd4>
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <HAL_GPIO_DeInit+0xd4>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	f002 0203 	and.w	r2, r2, #3
 8003aa2:	0092      	lsls	r2, r2, #2
 8003aa4:	4093      	lsls	r3, r2
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d132      	bne.n	8003b12 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003aac:	4b4b      	ldr	r3, [pc, #300]	; (8003bdc <HAL_GPIO_DeInit+0x214>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	43db      	mvns	r3, r3
 8003ab4:	4949      	ldr	r1, [pc, #292]	; (8003bdc <HAL_GPIO_DeInit+0x214>)
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003aba:	4b48      	ldr	r3, [pc, #288]	; (8003bdc <HAL_GPIO_DeInit+0x214>)
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	4946      	ldr	r1, [pc, #280]	; (8003bdc <HAL_GPIO_DeInit+0x214>)
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003ac8:	4b44      	ldr	r3, [pc, #272]	; (8003bdc <HAL_GPIO_DeInit+0x214>)
 8003aca:	68da      	ldr	r2, [r3, #12]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	4942      	ldr	r1, [pc, #264]	; (8003bdc <HAL_GPIO_DeInit+0x214>)
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003ad6:	4b41      	ldr	r3, [pc, #260]	; (8003bdc <HAL_GPIO_DeInit+0x214>)
 8003ad8:	689a      	ldr	r2, [r3, #8]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	43db      	mvns	r3, r3
 8003ade:	493f      	ldr	r1, [pc, #252]	; (8003bdc <HAL_GPIO_DeInit+0x214>)
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	220f      	movs	r2, #15
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8003af4:	4a2e      	ldr	r2, [pc, #184]	; (8003bb0 <HAL_GPIO_DeInit+0x1e8>)
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	089b      	lsrs	r3, r3, #2
 8003afa:	3302      	adds	r3, #2
 8003afc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	43da      	mvns	r2, r3
 8003b04:	482a      	ldr	r0, [pc, #168]	; (8003bb0 <HAL_GPIO_DeInit+0x1e8>)
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	089b      	lsrs	r3, r3, #2
 8003b0a:	400a      	ands	r2, r1
 8003b0c:	3302      	adds	r3, #2
 8003b0e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	005b      	lsls	r3, r3, #1
 8003b1a:	2103      	movs	r1, #3
 8003b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b20:	43db      	mvns	r3, r3
 8003b22:	401a      	ands	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	08da      	lsrs	r2, r3, #3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3208      	adds	r2, #8
 8003b30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	f003 0307 	and.w	r3, r3, #7
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	220f      	movs	r2, #15
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	43db      	mvns	r3, r3
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	08d2      	lsrs	r2, r2, #3
 8003b48:	4019      	ands	r1, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3208      	adds	r2, #8
 8003b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	2103      	movs	r1, #3
 8003b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b60:	43db      	mvns	r3, r3
 8003b62:	401a      	ands	r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	fa01 f303 	lsl.w	r3, r1, r3
 8003b74:	43db      	mvns	r3, r3
 8003b76:	401a      	ands	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	005b      	lsls	r3, r3, #1
 8003b84:	2103      	movs	r1, #3
 8003b86:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8a:	43db      	mvns	r3, r3
 8003b8c:	401a      	ands	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	3301      	adds	r3, #1
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2b0f      	cmp	r3, #15
 8003b9c:	f67f af22 	bls.w	80039e4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003ba0:	bf00      	nop
 8003ba2:	bf00      	nop
 8003ba4:	371c      	adds	r7, #28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	40013800 	.word	0x40013800
 8003bb4:	40020000 	.word	0x40020000
 8003bb8:	40020400 	.word	0x40020400
 8003bbc:	40020800 	.word	0x40020800
 8003bc0:	40020c00 	.word	0x40020c00
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	40021400 	.word	0x40021400
 8003bcc:	40021800 	.word	0x40021800
 8003bd0:	40021c00 	.word	0x40021c00
 8003bd4:	40022000 	.word	0x40022000
 8003bd8:	40022400 	.word	0x40022400
 8003bdc:	40013c00 	.word	0x40013c00

08003be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	460b      	mov	r3, r1
 8003bea:	807b      	strh	r3, [r7, #2]
 8003bec:	4613      	mov	r3, r2
 8003bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bf0:	787b      	ldrb	r3, [r7, #1]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d003      	beq.n	8003bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bf6:	887a      	ldrh	r2, [r7, #2]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003bfc:	e003      	b.n	8003c06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003bfe:	887b      	ldrh	r3, [r7, #2]
 8003c00:	041a      	lsls	r2, r3, #16
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	619a      	str	r2, [r3, #24]
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e0bf      	b.n	8003da6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fc fe4a 	bl	80008d4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699a      	ldr	r2, [r3, #24]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003c56:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6999      	ldr	r1, [r3, #24]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c6c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6899      	ldr	r1, [r3, #8]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	4b4a      	ldr	r3, [pc, #296]	; (8003db0 <HAL_LTDC_Init+0x19c>)
 8003c88:	400b      	ands	r3, r1
 8003c8a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	041b      	lsls	r3, r3, #16
 8003c92:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6899      	ldr	r1, [r3, #8]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699a      	ldr	r2, [r3, #24]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68d9      	ldr	r1, [r3, #12]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	4b3e      	ldr	r3, [pc, #248]	; (8003db0 <HAL_LTDC_Init+0x19c>)
 8003cb6:	400b      	ands	r3, r1
 8003cb8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	041b      	lsls	r3, r3, #16
 8003cc0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68d9      	ldr	r1, [r3, #12]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1a      	ldr	r2, [r3, #32]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6919      	ldr	r1, [r3, #16]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	4b33      	ldr	r3, [pc, #204]	; (8003db0 <HAL_LTDC_Init+0x19c>)
 8003ce4:	400b      	ands	r3, r1
 8003ce6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	041b      	lsls	r3, r3, #16
 8003cee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6919      	ldr	r1, [r3, #16]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6959      	ldr	r1, [r3, #20]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	4b27      	ldr	r3, [pc, #156]	; (8003db0 <HAL_LTDC_Init+0x19c>)
 8003d12:	400b      	ands	r3, r1
 8003d14:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1a:	041b      	lsls	r3, r3, #16
 8003d1c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6959      	ldr	r1, [r3, #20]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d3a:	021b      	lsls	r3, r3, #8
 8003d3c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003d44:	041b      	lsls	r3, r3, #16
 8003d46:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003d56:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 0206 	orr.w	r2, r2, #6
 8003d82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	699a      	ldr	r2, [r3, #24]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	f000f800 	.word	0xf000f800

08003db4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dca:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d023      	beq.n	8003e1e <HAL_LTDC_IRQHandler+0x6a>
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d01e      	beq.n	8003e1e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0204 	bic.w	r2, r2, #4
 8003dee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2204      	movs	r2, #4
 8003df6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003dfe:	f043 0201 	orr.w	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2204      	movs	r2, #4
 8003e0c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f86f 	bl	8003efc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d023      	beq.n	8003e70 <HAL_LTDC_IRQHandler+0xbc>
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d01e      	beq.n	8003e70 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0202 	bic.w	r2, r2, #2
 8003e40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2202      	movs	r2, #2
 8003e48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e50:	f043 0202 	orr.w	r2, r3, #2
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2204      	movs	r2, #4
 8003e5e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f846 	bl	8003efc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d01b      	beq.n	8003eb2 <HAL_LTDC_IRQHandler+0xfe>
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d016      	beq.n	8003eb2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0201 	bic.w	r2, r2, #1
 8003e92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f82f 	bl	8003f10 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	f003 0308 	and.w	r3, r3, #8
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d01b      	beq.n	8003ef4 <HAL_LTDC_IRQHandler+0x140>
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d016      	beq.n	8003ef4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0208 	bic.w	r2, r2, #8
 8003ed4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2208      	movs	r2, #8
 8003edc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f818 	bl	8003f24 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003ef4:	bf00      	nop
 8003ef6:	3710      	adds	r7, #16
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003f2c:	bf00      	nop
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003f38:	b5b0      	push	{r4, r5, r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d101      	bne.n	8003f52 <HAL_LTDC_ConfigLayer+0x1a>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	e02c      	b.n	8003fac <HAL_LTDC_ConfigLayer+0x74>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2134      	movs	r1, #52	; 0x34
 8003f68:	fb01 f303 	mul.w	r3, r1, r3
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	4614      	mov	r4, r2
 8003f76:	461d      	mov	r5, r3
 8003f78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f84:	682b      	ldr	r3, [r5, #0]
 8003f86:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	68b9      	ldr	r1, [r7, #8]
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 f811 	bl	8003fb4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2201      	movs	r2, #1
 8003f98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bdb0      	pop	{r4, r5, r7, pc}

08003fb4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b089      	sub	sp, #36	; 0x24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	0c1b      	lsrs	r3, r3, #16
 8003fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd0:	4413      	add	r3, r2
 8003fd2:	041b      	lsls	r3, r3, #16
 8003fd4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	01db      	lsls	r3, r3, #7
 8003fe0:	4413      	add	r3, r2
 8003fe2:	3384      	adds	r3, #132	; 0x84
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	6812      	ldr	r2, [r2, #0]
 8003fea:	4611      	mov	r1, r2
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	01d2      	lsls	r2, r2, #7
 8003ff0:	440a      	add	r2, r1
 8003ff2:	3284      	adds	r2, #132	; 0x84
 8003ff4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003ff8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	0c1b      	lsrs	r3, r3, #16
 8004006:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800400a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800400c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4619      	mov	r1, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	01db      	lsls	r3, r3, #7
 8004018:	440b      	add	r3, r1
 800401a:	3384      	adds	r3, #132	; 0x84
 800401c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004022:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	68da      	ldr	r2, [r3, #12]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004032:	4413      	add	r3, r2
 8004034:	041b      	lsls	r3, r3, #16
 8004036:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	461a      	mov	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	01db      	lsls	r3, r3, #7
 8004042:	4413      	add	r3, r2
 8004044:	3384      	adds	r3, #132	; 0x84
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	6812      	ldr	r2, [r2, #0]
 800404c:	4611      	mov	r1, r2
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	01d2      	lsls	r2, r2, #7
 8004052:	440a      	add	r2, r1
 8004054:	3284      	adds	r2, #132	; 0x84
 8004056:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800405a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800406a:	4413      	add	r3, r2
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4619      	mov	r1, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	01db      	lsls	r3, r3, #7
 8004078:	440b      	add	r3, r1
 800407a:	3384      	adds	r3, #132	; 0x84
 800407c:	4619      	mov	r1, r3
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	4313      	orrs	r3, r2
 8004082:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	461a      	mov	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	01db      	lsls	r3, r3, #7
 800408e:	4413      	add	r3, r2
 8004090:	3384      	adds	r3, #132	; 0x84
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	6812      	ldr	r2, [r2, #0]
 8004098:	4611      	mov	r1, r2
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	01d2      	lsls	r2, r2, #7
 800409e:	440a      	add	r2, r1
 80040a0:	3284      	adds	r2, #132	; 0x84
 80040a2:	f023 0307 	bic.w	r3, r3, #7
 80040a6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	461a      	mov	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	01db      	lsls	r3, r3, #7
 80040b2:	4413      	add	r3, r2
 80040b4:	3384      	adds	r3, #132	; 0x84
 80040b6:	461a      	mov	r2, r3
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80040c4:	021b      	lsls	r3, r3, #8
 80040c6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80040ce:	041b      	lsls	r3, r3, #16
 80040d0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	061b      	lsls	r3, r3, #24
 80040d8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	01db      	lsls	r3, r3, #7
 80040e4:	4413      	add	r3, r2
 80040e6:	3384      	adds	r3, #132	; 0x84
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	461a      	mov	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	01db      	lsls	r3, r3, #7
 80040f4:	4413      	add	r3, r2
 80040f6:	3384      	adds	r3, #132	; 0x84
 80040f8:	461a      	mov	r2, r3
 80040fa:	2300      	movs	r3, #0
 80040fc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004104:	461a      	mov	r2, r3
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	431a      	orrs	r2, r3
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	431a      	orrs	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4619      	mov	r1, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	01db      	lsls	r3, r3, #7
 8004118:	440b      	add	r3, r1
 800411a:	3384      	adds	r3, #132	; 0x84
 800411c:	4619      	mov	r1, r3
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	4313      	orrs	r3, r2
 8004122:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	461a      	mov	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	01db      	lsls	r3, r3, #7
 800412e:	4413      	add	r3, r2
 8004130:	3384      	adds	r3, #132	; 0x84
 8004132:	695b      	ldr	r3, [r3, #20]
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	6812      	ldr	r2, [r2, #0]
 8004138:	4611      	mov	r1, r2
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	01d2      	lsls	r2, r2, #7
 800413e:	440a      	add	r2, r1
 8004140:	3284      	adds	r2, #132	; 0x84
 8004142:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004146:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	461a      	mov	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	01db      	lsls	r3, r3, #7
 8004152:	4413      	add	r3, r2
 8004154:	3384      	adds	r3, #132	; 0x84
 8004156:	461a      	mov	r2, r3
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	461a      	mov	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	01db      	lsls	r3, r3, #7
 8004168:	4413      	add	r3, r2
 800416a:	3384      	adds	r3, #132	; 0x84
 800416c:	69da      	ldr	r2, [r3, #28]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4619      	mov	r1, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	01db      	lsls	r3, r3, #7
 8004178:	440b      	add	r3, r1
 800417a:	3384      	adds	r3, #132	; 0x84
 800417c:	4619      	mov	r1, r3
 800417e:	4b58      	ldr	r3, [pc, #352]	; (80042e0 <LTDC_SetConfig+0x32c>)
 8004180:	4013      	ands	r3, r2
 8004182:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	69da      	ldr	r2, [r3, #28]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	68f9      	ldr	r1, [r7, #12]
 800418e:	6809      	ldr	r1, [r1, #0]
 8004190:	4608      	mov	r0, r1
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	01c9      	lsls	r1, r1, #7
 8004196:	4401      	add	r1, r0
 8004198:	3184      	adds	r1, #132	; 0x84
 800419a:	4313      	orrs	r3, r2
 800419c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	01db      	lsls	r3, r3, #7
 80041a8:	4413      	add	r3, r2
 80041aa:	3384      	adds	r3, #132	; 0x84
 80041ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	01db      	lsls	r3, r3, #7
 80041b8:	4413      	add	r3, r2
 80041ba:	3384      	adds	r3, #132	; 0x84
 80041bc:	461a      	mov	r2, r3
 80041be:	2300      	movs	r3, #0
 80041c0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	461a      	mov	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	01db      	lsls	r3, r3, #7
 80041cc:	4413      	add	r3, r2
 80041ce:	3384      	adds	r3, #132	; 0x84
 80041d0:	461a      	mov	r2, r3
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d102      	bne.n	80041e6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80041e0:	2304      	movs	r3, #4
 80041e2:	61fb      	str	r3, [r7, #28]
 80041e4:	e01b      	b.n	800421e <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d102      	bne.n	80041f4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80041ee:	2303      	movs	r3, #3
 80041f0:	61fb      	str	r3, [r7, #28]
 80041f2:	e014      	b.n	800421e <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d00b      	beq.n	8004214 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004200:	2b02      	cmp	r3, #2
 8004202:	d007      	beq.n	8004214 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004208:	2b03      	cmp	r3, #3
 800420a:	d003      	beq.n	8004214 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004210:	2b07      	cmp	r3, #7
 8004212:	d102      	bne.n	800421a <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8004214:	2302      	movs	r3, #2
 8004216:	61fb      	str	r3, [r7, #28]
 8004218:	e001      	b.n	800421e <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800421a:	2301      	movs	r3, #1
 800421c:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	01db      	lsls	r3, r3, #7
 8004228:	4413      	add	r3, r2
 800422a:	3384      	adds	r3, #132	; 0x84
 800422c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	6812      	ldr	r2, [r2, #0]
 8004232:	4611      	mov	r1, r2
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	01d2      	lsls	r2, r2, #7
 8004238:	440a      	add	r2, r1
 800423a:	3284      	adds	r2, #132	; 0x84
 800423c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004240:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	fb02 f303 	mul.w	r3, r2, r3
 800424c:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	6859      	ldr	r1, [r3, #4]
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	1acb      	subs	r3, r1, r3
 8004258:	69f9      	ldr	r1, [r7, #28]
 800425a:	fb01 f303 	mul.w	r3, r1, r3
 800425e:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004260:	68f9      	ldr	r1, [r7, #12]
 8004262:	6809      	ldr	r1, [r1, #0]
 8004264:	4608      	mov	r0, r1
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	01c9      	lsls	r1, r1, #7
 800426a:	4401      	add	r1, r0
 800426c:	3184      	adds	r1, #132	; 0x84
 800426e:	4313      	orrs	r3, r2
 8004270:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	01db      	lsls	r3, r3, #7
 800427c:	4413      	add	r3, r2
 800427e:	3384      	adds	r3, #132	; 0x84
 8004280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4619      	mov	r1, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	01db      	lsls	r3, r3, #7
 800428c:	440b      	add	r3, r1
 800428e:	3384      	adds	r3, #132	; 0x84
 8004290:	4619      	mov	r1, r3
 8004292:	4b14      	ldr	r3, [pc, #80]	; (80042e4 <LTDC_SetConfig+0x330>)
 8004294:	4013      	ands	r3, r2
 8004296:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	461a      	mov	r2, r3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	01db      	lsls	r3, r3, #7
 80042a2:	4413      	add	r3, r2
 80042a4:	3384      	adds	r3, #132	; 0x84
 80042a6:	461a      	mov	r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ac:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	461a      	mov	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	01db      	lsls	r3, r3, #7
 80042b8:	4413      	add	r3, r2
 80042ba:	3384      	adds	r3, #132	; 0x84
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	6812      	ldr	r2, [r2, #0]
 80042c2:	4611      	mov	r1, r2
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	01d2      	lsls	r2, r2, #7
 80042c8:	440a      	add	r2, r1
 80042ca:	3284      	adds	r2, #132	; 0x84
 80042cc:	f043 0301 	orr.w	r3, r3, #1
 80042d0:	6013      	str	r3, [r2, #0]
}
 80042d2:	bf00      	nop
 80042d4:	3724      	adds	r7, #36	; 0x24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	fffff8f8 	.word	0xfffff8f8
 80042e4:	fffff800 	.word	0xfffff800

080042e8 <HAL_LTDCEx_StructInitFromVideoConfig>:
  * @note   The implementation of this function is taking into account the LTDC
  *         polarities inversion as described in the current LTDC specification
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDCEx_StructInitFromVideoConfig(LTDC_HandleTypeDef *hltdc, DSI_VidCfgTypeDef *VidCfg)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]

  /* The following polarity is inverted:
                     LTDC_DEPOLARITY_AL <-> LTDC_DEPOLARITY_AH */

  /* Note 1 : Code in line w/ Current LTDC specification */
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                            DSI_DATA_ENABLE_ACTIVE_HIGH) ? LTDC_DEPOLARITY_AL : LTDC_DEPOLARITY_AH;
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_LTDCEx_StructInitFromVideoConfig+0x16>
 80042fa:	2200      	movs	r2, #0
 80042fc:	e001      	b.n	8004302 <HAL_LTDCEx_StructInitFromVideoConfig+0x1a>
 80042fe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  hltdc->Init.DEPolarity = (VidCfg->DEPolarity == \
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	60da      	str	r2, [r3, #12]
  hltdc->Init.VSPolarity = (VidCfg->VSPolarity == DSI_VSYNC_ACTIVE_HIGH) ? LTDC_VSPOLARITY_AH : LTDC_VSPOLARITY_AL;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d102      	bne.n	8004314 <HAL_LTDCEx_StructInitFromVideoConfig+0x2c>
 800430e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004312:	e000      	b.n	8004316 <HAL_LTDCEx_StructInitFromVideoConfig+0x2e>
 8004314:	2200      	movs	r2, #0
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	609a      	str	r2, [r3, #8]
  hltdc->Init.HSPolarity = (VidCfg->HSPolarity == DSI_HSYNC_ACTIVE_HIGH) ? LTDC_HSPOLARITY_AH : LTDC_HSPOLARITY_AL;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d102      	bne.n	8004328 <HAL_LTDCEx_StructInitFromVideoConfig+0x40>
 8004322:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004326:	e000      	b.n	800432a <HAL_LTDCEx_StructInitFromVideoConfig+0x42>
 8004328:	2200      	movs	r2, #0
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	605a      	str	r2, [r3, #4]
  /* hltdc->Init.DEPolarity = VidCfg->DEPolarity << 29;
     hltdc->Init.VSPolarity = VidCfg->VSPolarity << 29;
     hltdc->Init.HSPolarity = VidCfg->HSPolarity << 29; */

  /* Retrieve vertical timing parameters from DSI */
  hltdc->Init.VerticalSync       = VidCfg->VerticalSyncActive - 1U;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004332:	1e5a      	subs	r2, r3, #1
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	619a      	str	r2, [r3, #24]
  hltdc->Init.AccumulatedVBP     = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch - 1U;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004340:	4413      	add	r3, r2
 8004342:	1e5a      	subs	r2, r3, #1
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	621a      	str	r2, [r3, #32]
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004350:	441a      	add	r2, r3
                                   VidCfg->VerticalActive - 1U;
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8004356:	4413      	add	r3, r2
                                   VidCfg->VerticalActive - 1U;
 8004358:	1e5a      	subs	r2, r3, #1
  hltdc->Init.AccumulatedActiveH = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004366:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 800436c:	441a      	add	r2, r3
                                   VidCfg->VerticalActive + VidCfg->VerticalFrontPorch - 1U;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004372:	4413      	add	r3, r2
 8004374:	1e5a      	subs	r2, r3, #1
  hltdc->Init.TotalHeigh         = VidCfg->VerticalSyncActive + VidCfg->VerticalBackPorch + \
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004388:	b590      	push	{r4, r7, lr}
 800438a:	b08d      	sub	sp, #52	; 0x34
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4618      	mov	r0, r3
 80043a0:	f003 f800 	bl	80073a4 <USB_GetMode>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f040 84b7 	bne.w	8004d1a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f002 ff64 	bl	800727e <USB_ReadInterrupts>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 84ad 	beq.w	8004d18 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	0a1b      	lsrs	r3, r3, #8
 80043c8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f002 ff51 	bl	800727e <USB_ReadInterrupts>
 80043dc:	4603      	mov	r3, r0
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d107      	bne.n	80043f6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695a      	ldr	r2, [r3, #20]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f002 0202 	and.w	r2, r2, #2
 80043f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f002 ff3f 	bl	800727e <USB_ReadInterrupts>
 8004400:	4603      	mov	r3, r0
 8004402:	f003 0310 	and.w	r3, r3, #16
 8004406:	2b10      	cmp	r3, #16
 8004408:	d161      	bne.n	80044ce <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	699a      	ldr	r2, [r3, #24]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0210 	bic.w	r2, r2, #16
 8004418:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	f003 020f 	and.w	r2, r3, #15
 8004426:	4613      	mov	r3, r2
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	4413      	add	r3, r2
 8004436:	3304      	adds	r3, #4
 8004438:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	0c5b      	lsrs	r3, r3, #17
 800443e:	f003 030f 	and.w	r3, r3, #15
 8004442:	2b02      	cmp	r3, #2
 8004444:	d124      	bne.n	8004490 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800444c:	4013      	ands	r3, r2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d035      	beq.n	80044be <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	091b      	lsrs	r3, r3, #4
 800445a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800445c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004460:	b29b      	uxth	r3, r3
 8004462:	461a      	mov	r2, r3
 8004464:	6a38      	ldr	r0, [r7, #32]
 8004466:	f002 feb2 	bl	80071ce <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	691a      	ldr	r2, [r3, #16]
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	091b      	lsrs	r3, r3, #4
 8004472:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004476:	441a      	add	r2, r3
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	6a1a      	ldr	r2, [r3, #32]
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	091b      	lsrs	r3, r3, #4
 8004484:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004488:	441a      	add	r2, r3
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	621a      	str	r2, [r3, #32]
 800448e:	e016      	b.n	80044be <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	0c5b      	lsrs	r3, r3, #17
 8004494:	f003 030f 	and.w	r3, r3, #15
 8004498:	2b06      	cmp	r3, #6
 800449a:	d110      	bne.n	80044be <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80044a2:	2208      	movs	r2, #8
 80044a4:	4619      	mov	r1, r3
 80044a6:	6a38      	ldr	r0, [r7, #32]
 80044a8:	f002 fe91 	bl	80071ce <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	6a1a      	ldr	r2, [r3, #32]
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	091b      	lsrs	r3, r3, #4
 80044b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044b8:	441a      	add	r2, r3
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	699a      	ldr	r2, [r3, #24]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f042 0210 	orr.w	r2, r2, #16
 80044cc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f002 fed3 	bl	800727e <USB_ReadInterrupts>
 80044d8:	4603      	mov	r3, r0
 80044da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80044e2:	f040 80a7 	bne.w	8004634 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f002 fed8 	bl	80072a4 <USB_ReadDevAllOutEpInterrupt>
 80044f4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80044f6:	e099      	b.n	800462c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80044f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 808e 	beq.w	8004620 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800450a:	b2d2      	uxtb	r2, r2
 800450c:	4611      	mov	r1, r2
 800450e:	4618      	mov	r0, r3
 8004510:	f002 fefc 	bl	800730c <USB_ReadDevOutEPInterrupt>
 8004514:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00c      	beq.n	800453a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800452c:	461a      	mov	r2, r3
 800452e:	2301      	movs	r3, #1
 8004530:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004532:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 fd27 	bl	8004f88 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	f003 0308 	and.w	r3, r3, #8
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00c      	beq.n	800455e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004550:	461a      	mov	r2, r3
 8004552:	2308      	movs	r3, #8
 8004554:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004556:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 fdfd 	bl	8005158 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f003 0310 	and.w	r3, r3, #16
 8004564:	2b00      	cmp	r3, #0
 8004566:	d008      	beq.n	800457a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004574:	461a      	mov	r2, r3
 8004576:	2310      	movs	r3, #16
 8004578:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d030      	beq.n	80045e6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458c:	2b80      	cmp	r3, #128	; 0x80
 800458e:	d109      	bne.n	80045a4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	69fa      	ldr	r2, [r7, #28]
 800459a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800459e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045a2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80045a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a6:	4613      	mov	r3, r2
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	4413      	add	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	4413      	add	r3, r2
 80045b6:	3304      	adds	r3, #4
 80045b8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	78db      	ldrb	r3, [r3, #3]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d108      	bne.n	80045d4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	2200      	movs	r2, #0
 80045c6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	4619      	mov	r1, r3
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fbf0 	bl	8004db4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	015a      	lsls	r2, r3, #5
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	4413      	add	r3, r2
 80045dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e0:	461a      	mov	r2, r3
 80045e2:	2302      	movs	r3, #2
 80045e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f003 0320 	and.w	r3, r3, #32
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d008      	beq.n	8004602 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fc:	461a      	mov	r2, r3
 80045fe:	2320      	movs	r3, #32
 8004600:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d009      	beq.n	8004620 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004618:	461a      	mov	r2, r3
 800461a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800461e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	3301      	adds	r3, #1
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004628:	085b      	lsrs	r3, r3, #1
 800462a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800462c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462e:	2b00      	cmp	r3, #0
 8004630:	f47f af62 	bne.w	80044f8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4618      	mov	r0, r3
 800463a:	f002 fe20 	bl	800727e <USB_ReadInterrupts>
 800463e:	4603      	mov	r3, r0
 8004640:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004644:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004648:	f040 80db 	bne.w	8004802 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4618      	mov	r0, r3
 8004652:	f002 fe41 	bl	80072d8 <USB_ReadDevAllInEpInterrupt>
 8004656:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004658:	2300      	movs	r3, #0
 800465a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800465c:	e0cd      	b.n	80047fa <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800465e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 80c2 	beq.w	80047ee <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004670:	b2d2      	uxtb	r2, r2
 8004672:	4611      	mov	r1, r2
 8004674:	4618      	mov	r0, r3
 8004676:	f002 fe67 	bl	8007348 <USB_ReadDevInEPInterrupt>
 800467a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d057      	beq.n	8004736 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	f003 030f 	and.w	r3, r3, #15
 800468c:	2201      	movs	r2, #1
 800468e:	fa02 f303 	lsl.w	r3, r2, r3
 8004692:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800469a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	43db      	mvns	r3, r3
 80046a0:	69f9      	ldr	r1, [r7, #28]
 80046a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046a6:	4013      	ands	r3, r2
 80046a8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b6:	461a      	mov	r2, r3
 80046b8:	2301      	movs	r3, #1
 80046ba:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d132      	bne.n	800472a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c8:	4613      	mov	r3, r2
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	4413      	add	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	334c      	adds	r3, #76	; 0x4c
 80046d4:	6819      	ldr	r1, [r3, #0]
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046da:	4613      	mov	r3, r2
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	4413      	add	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4403      	add	r3, r0
 80046e4:	3348      	adds	r3, #72	; 0x48
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4419      	add	r1, r3
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ee:	4613      	mov	r3, r2
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	4413      	add	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4403      	add	r3, r0
 80046f8:	334c      	adds	r3, #76	; 0x4c
 80046fa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d113      	bne.n	800472a <HAL_PCD_IRQHandler+0x3a2>
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004706:	4613      	mov	r3, r2
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	4413      	add	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	440b      	add	r3, r1
 8004710:	3354      	adds	r3, #84	; 0x54
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d108      	bne.n	800472a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6818      	ldr	r0, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004722:	461a      	mov	r2, r3
 8004724:	2101      	movs	r1, #1
 8004726:	f002 fe6f 	bl	8007408 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	b2db      	uxtb	r3, r3
 800472e:	4619      	mov	r1, r3
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 fb01 	bl	8004d38 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f003 0308 	and.w	r3, r3, #8
 800473c:	2b00      	cmp	r3, #0
 800473e:	d008      	beq.n	8004752 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800474c:	461a      	mov	r2, r3
 800474e:	2308      	movs	r3, #8
 8004750:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f003 0310 	and.w	r3, r3, #16
 8004758:	2b00      	cmp	r3, #0
 800475a:	d008      	beq.n	800476e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004768:	461a      	mov	r2, r3
 800476a:	2310      	movs	r3, #16
 800476c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004774:	2b00      	cmp	r3, #0
 8004776:	d008      	beq.n	800478a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	015a      	lsls	r2, r3, #5
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	4413      	add	r3, r2
 8004780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004784:	461a      	mov	r2, r3
 8004786:	2340      	movs	r3, #64	; 0x40
 8004788:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b00      	cmp	r3, #0
 8004792:	d023      	beq.n	80047dc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004794:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004796:	6a38      	ldr	r0, [r7, #32]
 8004798:	f002 fbd8 	bl	8006f4c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800479c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800479e:	4613      	mov	r3, r2
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	4413      	add	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	3338      	adds	r3, #56	; 0x38
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	4413      	add	r3, r2
 80047ac:	3304      	adds	r3, #4
 80047ae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	78db      	ldrb	r3, [r3, #3]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d108      	bne.n	80047ca <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	2200      	movs	r2, #0
 80047bc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	4619      	mov	r1, r3
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 fb01 	bl	8004dcc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	015a      	lsls	r2, r3, #5
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	4413      	add	r3, r2
 80047d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047d6:	461a      	mov	r2, r3
 80047d8:	2302      	movs	r3, #2
 80047da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80047e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 fb40 	bl	8004e6e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	3301      	adds	r3, #1
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80047f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f6:	085b      	lsrs	r3, r3, #1
 80047f8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80047fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f47f af2e 	bne.w	800465e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f002 fd39 	bl	800727e <USB_ReadInterrupts>
 800480c:	4603      	mov	r3, r0
 800480e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004812:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004816:	d122      	bne.n	800485e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	69fa      	ldr	r2, [r7, #28]
 8004822:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004826:	f023 0301 	bic.w	r3, r3, #1
 800482a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004832:	2b01      	cmp	r3, #1
 8004834:	d108      	bne.n	8004848 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800483e:	2100      	movs	r1, #0
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 fccf 	bl	80051e4 <HAL_PCDEx_LPM_Callback>
 8004846:	e002      	b.n	800484e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 faa9 	bl	8004da0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	695a      	ldr	r2, [r3, #20]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800485c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4618      	mov	r0, r3
 8004864:	f002 fd0b 	bl	800727e <USB_ReadInterrupts>
 8004868:	4603      	mov	r3, r0
 800486a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800486e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004872:	d112      	bne.n	800489a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b01      	cmp	r3, #1
 8004882:	d102      	bne.n	800488a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 fa81 	bl	8004d8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695a      	ldr	r2, [r3, #20]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004898:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4618      	mov	r0, r3
 80048a0:	f002 fced 	bl	800727e <USB_ReadInterrupts>
 80048a4:	4603      	mov	r3, r0
 80048a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048ae:	d121      	bne.n	80048f4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695a      	ldr	r2, [r3, #20]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80048be:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d111      	bne.n	80048ee <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d8:	089b      	lsrs	r3, r3, #2
 80048da:	f003 020f 	and.w	r2, r3, #15
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80048e4:	2101      	movs	r1, #1
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 fc7c 	bl	80051e4 <HAL_PCDEx_LPM_Callback>
 80048ec:	e002      	b.n	80048f4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fa4c 	bl	8004d8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f002 fcc0 	bl	800727e <USB_ReadInterrupts>
 80048fe:	4603      	mov	r3, r0
 8004900:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004908:	f040 80b7 	bne.w	8004a7a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	69fa      	ldr	r2, [r7, #28]
 8004916:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800491a:	f023 0301 	bic.w	r3, r3, #1
 800491e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2110      	movs	r1, #16
 8004926:	4618      	mov	r0, r3
 8004928:	f002 fb10 	bl	8006f4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800492c:	2300      	movs	r3, #0
 800492e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004930:	e046      	b.n	80049c0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493e:	461a      	mov	r2, r3
 8004940:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004944:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	4413      	add	r3, r2
 800494e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004956:	0151      	lsls	r1, r2, #5
 8004958:	69fa      	ldr	r2, [r7, #28]
 800495a:	440a      	add	r2, r1
 800495c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004960:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004964:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004972:	461a      	mov	r2, r3
 8004974:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004978:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800497a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497c:	015a      	lsls	r2, r3, #5
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	4413      	add	r3, r2
 8004982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800498a:	0151      	lsls	r1, r2, #5
 800498c:	69fa      	ldr	r2, [r7, #28]
 800498e:	440a      	add	r2, r1
 8004990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004994:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004998:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800499a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499c:	015a      	lsls	r2, r3, #5
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	4413      	add	r3, r2
 80049a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049aa:	0151      	lsls	r1, r2, #5
 80049ac:	69fa      	ldr	r2, [r7, #28]
 80049ae:	440a      	add	r2, r1
 80049b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049b8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049bc:	3301      	adds	r3, #1
 80049be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d3b3      	bcc.n	8004932 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	69fa      	ldr	r2, [r7, #28]
 80049d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049d8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80049dc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d016      	beq.n	8004a14 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049f0:	69fa      	ldr	r2, [r7, #28]
 80049f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049f6:	f043 030b 	orr.w	r3, r3, #11
 80049fa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a06:	69fa      	ldr	r2, [r7, #28]
 8004a08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a0c:	f043 030b 	orr.w	r3, r3, #11
 8004a10:	6453      	str	r3, [r2, #68]	; 0x44
 8004a12:	e015      	b.n	8004a40 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a1a:	695a      	ldr	r2, [r3, #20]
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a22:	4619      	mov	r1, r3
 8004a24:	f242 032b 	movw	r3, #8235	; 0x202b
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	69fa      	ldr	r2, [r7, #28]
 8004a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a3a:	f043 030b 	orr.w	r3, r3, #11
 8004a3e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	69fa      	ldr	r2, [r7, #28]
 8004a4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a4e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004a52:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6818      	ldr	r0, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004a64:	461a      	mov	r2, r3
 8004a66:	f002 fccf 	bl	8007408 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	695a      	ldr	r2, [r3, #20]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004a78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f002 fbfd 	bl	800727e <USB_ReadInterrupts>
 8004a84:	4603      	mov	r3, r0
 8004a86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a8e:	d124      	bne.n	8004ada <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f002 fc93 	bl	80073c0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f002 fa88 	bl	8006fb4 <USB_GetDevSpeed>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681c      	ldr	r4, [r3, #0]
 8004ab0:	f001 f8c8 	bl	8005c44 <HAL_RCC_GetHCLKFreq>
 8004ab4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	461a      	mov	r2, r3
 8004abe:	4620      	mov	r0, r4
 8004ac0:	f002 f9a2 	bl	8006e08 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f957 	bl	8004d78 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	695a      	ldr	r2, [r3, #20]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004ad8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f002 fbcd 	bl	800727e <USB_ReadInterrupts>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	f003 0308 	and.w	r3, r3, #8
 8004aea:	2b08      	cmp	r3, #8
 8004aec:	d10a      	bne.n	8004b04 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f938 	bl	8004d64 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695a      	ldr	r2, [r3, #20]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f002 0208 	and.w	r2, r2, #8
 8004b02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f002 fbb8 	bl	800727e <USB_ReadInterrupts>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b14:	2b80      	cmp	r3, #128	; 0x80
 8004b16:	d122      	bne.n	8004b5e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004b18:	6a3b      	ldr	r3, [r7, #32]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b24:	2301      	movs	r3, #1
 8004b26:	627b      	str	r3, [r7, #36]	; 0x24
 8004b28:	e014      	b.n	8004b54 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2e:	4613      	mov	r3, r2
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	4413      	add	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	440b      	add	r3, r1
 8004b38:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d105      	bne.n	8004b4e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	4619      	mov	r1, r3
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 f95f 	bl	8004e0c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	3301      	adds	r3, #1
 8004b52:	627b      	str	r3, [r7, #36]	; 0x24
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d3e5      	bcc.n	8004b2a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f002 fb8b 	bl	800727e <USB_ReadInterrupts>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b72:	d13b      	bne.n	8004bec <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b74:	2301      	movs	r3, #1
 8004b76:	627b      	str	r3, [r7, #36]	; 0x24
 8004b78:	e02b      	b.n	8004bd2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b8a:	6879      	ldr	r1, [r7, #4]
 8004b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b8e:	4613      	mov	r3, r2
 8004b90:	00db      	lsls	r3, r3, #3
 8004b92:	4413      	add	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	440b      	add	r3, r1
 8004b98:	3340      	adds	r3, #64	; 0x40
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d115      	bne.n	8004bcc <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004ba0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	da12      	bge.n	8004bcc <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004ba6:	6879      	ldr	r1, [r7, #4]
 8004ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004baa:	4613      	mov	r3, r2
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	4413      	add	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	440b      	add	r3, r1
 8004bb4:	333f      	adds	r3, #63	; 0x3f
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f920 	bl	8004e0c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	3301      	adds	r3, #1
 8004bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d3ce      	bcc.n	8004b7a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	695a      	ldr	r2, [r3, #20]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004bea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f002 fb44 	bl	800727e <USB_ReadInterrupts>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c00:	d155      	bne.n	8004cae <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c02:	2301      	movs	r3, #1
 8004c04:	627b      	str	r3, [r7, #36]	; 0x24
 8004c06:	e045      	b.n	8004c94 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	015a      	lsls	r2, r3, #5
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	4413      	add	r3, r2
 8004c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c18:	6879      	ldr	r1, [r7, #4]
 8004c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	4413      	add	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d12e      	bne.n	8004c8e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004c30:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	da2b      	bge.n	8004c8e <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004c42:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d121      	bne.n	8004c8e <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004c4a:	6879      	ldr	r1, [r7, #4]
 8004c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c4e:	4613      	mov	r3, r2
 8004c50:	00db      	lsls	r3, r3, #3
 8004c52:	4413      	add	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	440b      	add	r3, r1
 8004c58:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10a      	bne.n	8004c8e <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	69fa      	ldr	r2, [r7, #28]
 8004c82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c8a:	6053      	str	r3, [r2, #4]
            break;
 8004c8c:	e007      	b.n	8004c9e <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	3301      	adds	r3, #1
 8004c92:	627b      	str	r3, [r7, #36]	; 0x24
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d3b4      	bcc.n	8004c08 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	695a      	ldr	r2, [r3, #20]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004cac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f002 fae3 	bl	800727e <USB_ReadInterrupts>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc2:	d10a      	bne.n	8004cda <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f88d 	bl	8004de4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	695a      	ldr	r2, [r3, #20]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004cd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f002 facd 	bl	800727e <USB_ReadInterrupts>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	f003 0304 	and.w	r3, r3, #4
 8004cea:	2b04      	cmp	r3, #4
 8004cec:	d115      	bne.n	8004d1a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d002      	beq.n	8004d06 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f879 	bl	8004df8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6859      	ldr	r1, [r3, #4]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	605a      	str	r2, [r3, #4]
 8004d16:	e000      	b.n	8004d1a <HAL_PCD_IRQHandler+0x992>
      return;
 8004d18:	bf00      	nop
    }
  }
}
 8004d1a:	3734      	adds	r7, #52	; 0x34
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd90      	pop	{r4, r7, pc}

08004d20 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	460b      	mov	r3, r1
 8004d2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataOutStageCallback could be implemented in the user file
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DataInStageCallback could be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SetupStageCallback could be implemented in the user file
   */
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <HAL_PCD_ResetCallback>:
  * @brief  USB Reset callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResetCallback could be implemented in the user file
   */
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOOUTIncompleteCallback could be implemented in the user file
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ISOINIncompleteCallback could be implemented in the user file
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_PCD_ConnectCallback>:
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ConnectCallback could be implemented in the user file
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_DisconnectCallback could be implemented in the user file
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	460b      	mov	r3, r1
 8004e16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004e18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	da0c      	bge.n	8004e3a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e20:	78fb      	ldrb	r3, [r7, #3]
 8004e22:	f003 020f 	and.w	r2, r3, #15
 8004e26:	4613      	mov	r3, r2
 8004e28:	00db      	lsls	r3, r3, #3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	3338      	adds	r3, #56	; 0x38
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	4413      	add	r3, r2
 8004e34:	3304      	adds	r3, #4
 8004e36:	60fb      	str	r3, [r7, #12]
 8004e38:	e00c      	b.n	8004e54 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e3a:	78fb      	ldrb	r3, [r7, #3]
 8004e3c:	f003 020f 	and.w	r2, r3, #15
 8004e40:	4613      	mov	r3, r2
 8004e42:	00db      	lsls	r3, r3, #3
 8004e44:	4413      	add	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	4413      	add	r3, r2
 8004e50:	3304      	adds	r3, #4
 8004e52:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68f9      	ldr	r1, [r7, #12]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f002 f8cf 	bl	8006ffe <USB_EPStopXfer>
 8004e60:	4603      	mov	r3, r0
 8004e62:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004e64:	7afb      	ldrb	r3, [r7, #11]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b08a      	sub	sp, #40	; 0x28
 8004e72:	af02      	add	r7, sp, #8
 8004e74:	6078      	str	r0, [r7, #4]
 8004e76:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	4613      	mov	r3, r2
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	4413      	add	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	3338      	adds	r3, #56	; 0x38
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	4413      	add	r3, r2
 8004e92:	3304      	adds	r3, #4
 8004e94:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a1a      	ldr	r2, [r3, #32]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d901      	bls.n	8004ea6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e06c      	b.n	8004f80 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	699a      	ldr	r2, [r3, #24]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6a1b      	ldr	r3, [r3, #32]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	69fa      	ldr	r2, [r7, #28]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d902      	bls.n	8004ec2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	3303      	adds	r3, #3
 8004ec6:	089b      	lsrs	r3, r3, #2
 8004ec8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004eca:	e02b      	b.n	8004f24 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	699a      	ldr	r2, [r3, #24]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	69fa      	ldr	r2, [r7, #28]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d902      	bls.n	8004ee8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	3303      	adds	r3, #3
 8004eec:	089b      	lsrs	r3, r3, #2
 8004eee:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6919      	ldr	r1, [r3, #16]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	4603      	mov	r3, r0
 8004f06:	6978      	ldr	r0, [r7, #20]
 8004f08:	f002 f923 	bl	8007152 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	691a      	ldr	r2, [r3, #16]
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	441a      	add	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6a1a      	ldr	r2, [r3, #32]
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	441a      	add	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	015a      	lsls	r2, r3, #5
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	69ba      	ldr	r2, [r7, #24]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d809      	bhi.n	8004f4e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6a1a      	ldr	r2, [r3, #32]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d203      	bcs.n	8004f4e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1be      	bne.n	8004ecc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	699a      	ldr	r2, [r3, #24]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d811      	bhi.n	8004f7e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	f003 030f 	and.w	r3, r3, #15
 8004f60:	2201      	movs	r2, #1
 8004f62:	fa02 f303 	lsl.w	r3, r2, r3
 8004f66:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	43db      	mvns	r3, r3
 8004f74:	6939      	ldr	r1, [r7, #16]
 8004f76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f7a:	4013      	ands	r3, r2
 8004f7c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3720      	adds	r7, #32
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b088      	sub	sp, #32
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	333c      	adds	r3, #60	; 0x3c
 8004fa0:	3304      	adds	r3, #4
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d17b      	bne.n	80050b6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	f003 0308 	and.w	r3, r3, #8
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d015      	beq.n	8004ff4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	4a61      	ldr	r2, [pc, #388]	; (8005150 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	f240 80b9 	bls.w	8005144 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 80b3 	beq.w	8005144 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	015a      	lsls	r2, r3, #5
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	4413      	add	r3, r2
 8004fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fea:	461a      	mov	r2, r3
 8004fec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ff0:	6093      	str	r3, [r2, #8]
 8004ff2:	e0a7      	b.n	8005144 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f003 0320 	and.w	r3, r3, #32
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d009      	beq.n	8005012 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	4413      	add	r3, r2
 8005006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800500a:	461a      	mov	r2, r3
 800500c:	2320      	movs	r3, #32
 800500e:	6093      	str	r3, [r2, #8]
 8005010:	e098      	b.n	8005144 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005018:	2b00      	cmp	r3, #0
 800501a:	f040 8093 	bne.w	8005144 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	4a4b      	ldr	r2, [pc, #300]	; (8005150 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d90f      	bls.n	8005046 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00a      	beq.n	8005046 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	015a      	lsls	r2, r3, #5
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	4413      	add	r3, r2
 8005038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503c:	461a      	mov	r2, r3
 800503e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005042:	6093      	str	r3, [r2, #8]
 8005044:	e07e      	b.n	8005144 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	4613      	mov	r3, r2
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	4413      	add	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	4413      	add	r3, r2
 8005058:	3304      	adds	r3, #4
 800505a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	69da      	ldr	r2, [r3, #28]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	0159      	lsls	r1, r3, #5
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	440b      	add	r3, r1
 8005068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005072:	1ad2      	subs	r2, r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d114      	bne.n	80050a8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d109      	bne.n	800509a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6818      	ldr	r0, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005090:	461a      	mov	r2, r3
 8005092:	2101      	movs	r1, #1
 8005094:	f002 f9b8 	bl	8007408 <USB_EP0_OutStart>
 8005098:	e006      	b.n	80050a8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	691a      	ldr	r2, [r3, #16]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	441a      	add	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	4619      	mov	r1, r3
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7ff fe36 	bl	8004d20 <HAL_PCD_DataOutStageCallback>
 80050b4:	e046      	b.n	8005144 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	4a26      	ldr	r2, [pc, #152]	; (8005154 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d124      	bne.n	8005108 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00a      	beq.n	80050de <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d4:	461a      	mov	r2, r3
 80050d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050da:	6093      	str	r3, [r2, #8]
 80050dc:	e032      	b.n	8005144 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f003 0320 	and.w	r3, r3, #32
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d008      	beq.n	80050fa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f4:	461a      	mov	r2, r3
 80050f6:	2320      	movs	r3, #32
 80050f8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	4619      	mov	r1, r3
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f7ff fe0d 	bl	8004d20 <HAL_PCD_DataOutStageCallback>
 8005106:	e01d      	b.n	8005144 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d114      	bne.n	8005138 <PCD_EP_OutXfrComplete_int+0x1b0>
 800510e:	6879      	ldr	r1, [r7, #4]
 8005110:	683a      	ldr	r2, [r7, #0]
 8005112:	4613      	mov	r3, r2
 8005114:	00db      	lsls	r3, r3, #3
 8005116:	4413      	add	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	440b      	add	r3, r1
 800511c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d108      	bne.n	8005138 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6818      	ldr	r0, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005130:	461a      	mov	r2, r3
 8005132:	2100      	movs	r1, #0
 8005134:	f002 f968 	bl	8007408 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	b2db      	uxtb	r3, r3
 800513c:	4619      	mov	r1, r3
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f7ff fdee 	bl	8004d20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3720      	adds	r7, #32
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	4f54300a 	.word	0x4f54300a
 8005154:	4f54310a 	.word	0x4f54310a

08005158 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	333c      	adds	r3, #60	; 0x3c
 8005170:	3304      	adds	r3, #4
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	4a15      	ldr	r2, [pc, #84]	; (80051e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d90e      	bls.n	80051ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005194:	2b00      	cmp	r3, #0
 8005196:	d009      	beq.n	80051ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a4:	461a      	mov	r2, r3
 80051a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f7ff fdcf 	bl	8004d50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	4a0a      	ldr	r2, [pc, #40]	; (80051e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d90c      	bls.n	80051d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d108      	bne.n	80051d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6818      	ldr	r0, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80051cc:	461a      	mov	r2, r3
 80051ce:	2101      	movs	r1, #1
 80051d0:	f002 f91a 	bl	8007408 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3718      	adds	r7, #24
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	4f54300a 	.word	0x4f54300a

080051e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80051fc:	b480      	push	{r7}
 80051fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005200:	4b05      	ldr	r3, [pc, #20]	; (8005218 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a04      	ldr	r2, [pc, #16]	; (8005218 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800520a:	6013      	str	r3, [r2, #0]
}
 800520c:	bf00      	nop
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	40007000 	.word	0x40007000

0800521c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005222:	2300      	movs	r3, #0
 8005224:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005226:	4b23      	ldr	r3, [pc, #140]	; (80052b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	4a22      	ldr	r2, [pc, #136]	; (80052b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800522c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005230:	6413      	str	r3, [r2, #64]	; 0x40
 8005232:	4b20      	ldr	r3, [pc, #128]	; (80052b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800523a:	603b      	str	r3, [r7, #0]
 800523c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800523e:	4b1e      	ldr	r3, [pc, #120]	; (80052b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a1d      	ldr	r2, [pc, #116]	; (80052b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005248:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800524a:	f7fc fca5 	bl	8001b98 <HAL_GetTick>
 800524e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005250:	e009      	b.n	8005266 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005252:	f7fc fca1 	bl	8001b98 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005260:	d901      	bls.n	8005266 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e022      	b.n	80052ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005266:	4b14      	ldr	r3, [pc, #80]	; (80052b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800526e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005272:	d1ee      	bne.n	8005252 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005274:	4b10      	ldr	r3, [pc, #64]	; (80052b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a0f      	ldr	r2, [pc, #60]	; (80052b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800527a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800527e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005280:	f7fc fc8a 	bl	8001b98 <HAL_GetTick>
 8005284:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005286:	e009      	b.n	800529c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005288:	f7fc fc86 	bl	8001b98 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005296:	d901      	bls.n	800529c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e007      	b.n	80052ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800529c:	4b06      	ldr	r3, [pc, #24]	; (80052b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052a8:	d1ee      	bne.n	8005288 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	40023800 	.word	0x40023800
 80052b8:	40007000 	.word	0x40007000

080052bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80052c4:	2300      	movs	r3, #0
 80052c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e29b      	b.n	800580a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f000 8087 	beq.w	80053ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052e0:	4b96      	ldr	r3, [pc, #600]	; (800553c <HAL_RCC_OscConfig+0x280>)
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f003 030c 	and.w	r3, r3, #12
 80052e8:	2b04      	cmp	r3, #4
 80052ea:	d00c      	beq.n	8005306 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ec:	4b93      	ldr	r3, [pc, #588]	; (800553c <HAL_RCC_OscConfig+0x280>)
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f003 030c 	and.w	r3, r3, #12
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	d112      	bne.n	800531e <HAL_RCC_OscConfig+0x62>
 80052f8:	4b90      	ldr	r3, [pc, #576]	; (800553c <HAL_RCC_OscConfig+0x280>)
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005300:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005304:	d10b      	bne.n	800531e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005306:	4b8d      	ldr	r3, [pc, #564]	; (800553c <HAL_RCC_OscConfig+0x280>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800530e:	2b00      	cmp	r3, #0
 8005310:	d06c      	beq.n	80053ec <HAL_RCC_OscConfig+0x130>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d168      	bne.n	80053ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e275      	b.n	800580a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005326:	d106      	bne.n	8005336 <HAL_RCC_OscConfig+0x7a>
 8005328:	4b84      	ldr	r3, [pc, #528]	; (800553c <HAL_RCC_OscConfig+0x280>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a83      	ldr	r2, [pc, #524]	; (800553c <HAL_RCC_OscConfig+0x280>)
 800532e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005332:	6013      	str	r3, [r2, #0]
 8005334:	e02e      	b.n	8005394 <HAL_RCC_OscConfig+0xd8>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10c      	bne.n	8005358 <HAL_RCC_OscConfig+0x9c>
 800533e:	4b7f      	ldr	r3, [pc, #508]	; (800553c <HAL_RCC_OscConfig+0x280>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a7e      	ldr	r2, [pc, #504]	; (800553c <HAL_RCC_OscConfig+0x280>)
 8005344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005348:	6013      	str	r3, [r2, #0]
 800534a:	4b7c      	ldr	r3, [pc, #496]	; (800553c <HAL_RCC_OscConfig+0x280>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a7b      	ldr	r2, [pc, #492]	; (800553c <HAL_RCC_OscConfig+0x280>)
 8005350:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	e01d      	b.n	8005394 <HAL_RCC_OscConfig+0xd8>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005360:	d10c      	bne.n	800537c <HAL_RCC_OscConfig+0xc0>
 8005362:	4b76      	ldr	r3, [pc, #472]	; (800553c <HAL_RCC_OscConfig+0x280>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a75      	ldr	r2, [pc, #468]	; (800553c <HAL_RCC_OscConfig+0x280>)
 8005368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	4b73      	ldr	r3, [pc, #460]	; (800553c <HAL_RCC_OscConfig+0x280>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a72      	ldr	r2, [pc, #456]	; (800553c <HAL_RCC_OscConfig+0x280>)
 8005374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005378:	6013      	str	r3, [r2, #0]
 800537a:	e00b      	b.n	8005394 <HAL_RCC_OscConfig+0xd8>
 800537c:	4b6f      	ldr	r3, [pc, #444]	; (800553c <HAL_RCC_OscConfig+0x280>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a6e      	ldr	r2, [pc, #440]	; (800553c <HAL_RCC_OscConfig+0x280>)
 8005382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005386:	6013      	str	r3, [r2, #0]
 8005388:	4b6c      	ldr	r3, [pc, #432]	; (800553c <HAL_RCC_OscConfig+0x280>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a6b      	ldr	r2, [pc, #428]	; (800553c <HAL_RCC_OscConfig+0x280>)
 800538e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d013      	beq.n	80053c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800539c:	f7fc fbfc 	bl	8001b98 <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053a4:	f7fc fbf8 	bl	8001b98 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b64      	cmp	r3, #100	; 0x64
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e229      	b.n	800580a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053b6:	4b61      	ldr	r3, [pc, #388]	; (800553c <HAL_RCC_OscConfig+0x280>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d0f0      	beq.n	80053a4 <HAL_RCC_OscConfig+0xe8>
 80053c2:	e014      	b.n	80053ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c4:	f7fc fbe8 	bl	8001b98 <HAL_GetTick>
 80053c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ca:	e008      	b.n	80053de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053cc:	f7fc fbe4 	bl	8001b98 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b64      	cmp	r3, #100	; 0x64
 80053d8:	d901      	bls.n	80053de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e215      	b.n	800580a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053de:	4b57      	ldr	r3, [pc, #348]	; (800553c <HAL_RCC_OscConfig+0x280>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1f0      	bne.n	80053cc <HAL_RCC_OscConfig+0x110>
 80053ea:	e000      	b.n	80053ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0302 	and.w	r3, r3, #2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d069      	beq.n	80054ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053fa:	4b50      	ldr	r3, [pc, #320]	; (800553c <HAL_RCC_OscConfig+0x280>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	f003 030c 	and.w	r3, r3, #12
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00b      	beq.n	800541e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005406:	4b4d      	ldr	r3, [pc, #308]	; (800553c <HAL_RCC_OscConfig+0x280>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 030c 	and.w	r3, r3, #12
 800540e:	2b08      	cmp	r3, #8
 8005410:	d11c      	bne.n	800544c <HAL_RCC_OscConfig+0x190>
 8005412:	4b4a      	ldr	r3, [pc, #296]	; (800553c <HAL_RCC_OscConfig+0x280>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d116      	bne.n	800544c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800541e:	4b47      	ldr	r3, [pc, #284]	; (800553c <HAL_RCC_OscConfig+0x280>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d005      	beq.n	8005436 <HAL_RCC_OscConfig+0x17a>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d001      	beq.n	8005436 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e1e9      	b.n	800580a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005436:	4b41      	ldr	r3, [pc, #260]	; (800553c <HAL_RCC_OscConfig+0x280>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	493d      	ldr	r1, [pc, #244]	; (800553c <HAL_RCC_OscConfig+0x280>)
 8005446:	4313      	orrs	r3, r2
 8005448:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800544a:	e040      	b.n	80054ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d023      	beq.n	800549c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005454:	4b39      	ldr	r3, [pc, #228]	; (800553c <HAL_RCC_OscConfig+0x280>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a38      	ldr	r2, [pc, #224]	; (800553c <HAL_RCC_OscConfig+0x280>)
 800545a:	f043 0301 	orr.w	r3, r3, #1
 800545e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005460:	f7fc fb9a 	bl	8001b98 <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005468:	f7fc fb96 	bl	8001b98 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e1c7      	b.n	800580a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800547a:	4b30      	ldr	r3, [pc, #192]	; (800553c <HAL_RCC_OscConfig+0x280>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0302 	and.w	r3, r3, #2
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0f0      	beq.n	8005468 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005486:	4b2d      	ldr	r3, [pc, #180]	; (800553c <HAL_RCC_OscConfig+0x280>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	4929      	ldr	r1, [pc, #164]	; (800553c <HAL_RCC_OscConfig+0x280>)
 8005496:	4313      	orrs	r3, r2
 8005498:	600b      	str	r3, [r1, #0]
 800549a:	e018      	b.n	80054ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800549c:	4b27      	ldr	r3, [pc, #156]	; (800553c <HAL_RCC_OscConfig+0x280>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a26      	ldr	r2, [pc, #152]	; (800553c <HAL_RCC_OscConfig+0x280>)
 80054a2:	f023 0301 	bic.w	r3, r3, #1
 80054a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a8:	f7fc fb76 	bl	8001b98 <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054b0:	f7fc fb72 	bl	8001b98 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e1a3      	b.n	800580a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054c2:	4b1e      	ldr	r3, [pc, #120]	; (800553c <HAL_RCC_OscConfig+0x280>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0302 	and.w	r3, r3, #2
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d1f0      	bne.n	80054b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0308 	and.w	r3, r3, #8
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d038      	beq.n	800554c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d019      	beq.n	8005516 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054e2:	4b16      	ldr	r3, [pc, #88]	; (800553c <HAL_RCC_OscConfig+0x280>)
 80054e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e6:	4a15      	ldr	r2, [pc, #84]	; (800553c <HAL_RCC_OscConfig+0x280>)
 80054e8:	f043 0301 	orr.w	r3, r3, #1
 80054ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ee:	f7fc fb53 	bl	8001b98 <HAL_GetTick>
 80054f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054f4:	e008      	b.n	8005508 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054f6:	f7fc fb4f 	bl	8001b98 <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	2b02      	cmp	r3, #2
 8005502:	d901      	bls.n	8005508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e180      	b.n	800580a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005508:	4b0c      	ldr	r3, [pc, #48]	; (800553c <HAL_RCC_OscConfig+0x280>)
 800550a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800550c:	f003 0302 	and.w	r3, r3, #2
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0f0      	beq.n	80054f6 <HAL_RCC_OscConfig+0x23a>
 8005514:	e01a      	b.n	800554c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005516:	4b09      	ldr	r3, [pc, #36]	; (800553c <HAL_RCC_OscConfig+0x280>)
 8005518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800551a:	4a08      	ldr	r2, [pc, #32]	; (800553c <HAL_RCC_OscConfig+0x280>)
 800551c:	f023 0301 	bic.w	r3, r3, #1
 8005520:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005522:	f7fc fb39 	bl	8001b98 <HAL_GetTick>
 8005526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005528:	e00a      	b.n	8005540 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800552a:	f7fc fb35 	bl	8001b98 <HAL_GetTick>
 800552e:	4602      	mov	r2, r0
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d903      	bls.n	8005540 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005538:	2303      	movs	r3, #3
 800553a:	e166      	b.n	800580a <HAL_RCC_OscConfig+0x54e>
 800553c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005540:	4b92      	ldr	r3, [pc, #584]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 8005542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005544:	f003 0302 	and.w	r3, r3, #2
 8005548:	2b00      	cmp	r3, #0
 800554a:	d1ee      	bne.n	800552a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0304 	and.w	r3, r3, #4
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 80a4 	beq.w	80056a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800555a:	4b8c      	ldr	r3, [pc, #560]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10d      	bne.n	8005582 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005566:	4b89      	ldr	r3, [pc, #548]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 8005568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556a:	4a88      	ldr	r2, [pc, #544]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 800556c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005570:	6413      	str	r3, [r2, #64]	; 0x40
 8005572:	4b86      	ldr	r3, [pc, #536]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 8005574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800557a:	60bb      	str	r3, [r7, #8]
 800557c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800557e:	2301      	movs	r3, #1
 8005580:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005582:	4b83      	ldr	r3, [pc, #524]	; (8005790 <HAL_RCC_OscConfig+0x4d4>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558a:	2b00      	cmp	r3, #0
 800558c:	d118      	bne.n	80055c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800558e:	4b80      	ldr	r3, [pc, #512]	; (8005790 <HAL_RCC_OscConfig+0x4d4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a7f      	ldr	r2, [pc, #508]	; (8005790 <HAL_RCC_OscConfig+0x4d4>)
 8005594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800559a:	f7fc fafd 	bl	8001b98 <HAL_GetTick>
 800559e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055a0:	e008      	b.n	80055b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055a2:	f7fc faf9 	bl	8001b98 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	2b64      	cmp	r3, #100	; 0x64
 80055ae:	d901      	bls.n	80055b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e12a      	b.n	800580a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055b4:	4b76      	ldr	r3, [pc, #472]	; (8005790 <HAL_RCC_OscConfig+0x4d4>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0f0      	beq.n	80055a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d106      	bne.n	80055d6 <HAL_RCC_OscConfig+0x31a>
 80055c8:	4b70      	ldr	r3, [pc, #448]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 80055ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055cc:	4a6f      	ldr	r2, [pc, #444]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 80055ce:	f043 0301 	orr.w	r3, r3, #1
 80055d2:	6713      	str	r3, [r2, #112]	; 0x70
 80055d4:	e02d      	b.n	8005632 <HAL_RCC_OscConfig+0x376>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10c      	bne.n	80055f8 <HAL_RCC_OscConfig+0x33c>
 80055de:	4b6b      	ldr	r3, [pc, #428]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 80055e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e2:	4a6a      	ldr	r2, [pc, #424]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 80055e4:	f023 0301 	bic.w	r3, r3, #1
 80055e8:	6713      	str	r3, [r2, #112]	; 0x70
 80055ea:	4b68      	ldr	r3, [pc, #416]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 80055ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ee:	4a67      	ldr	r2, [pc, #412]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 80055f0:	f023 0304 	bic.w	r3, r3, #4
 80055f4:	6713      	str	r3, [r2, #112]	; 0x70
 80055f6:	e01c      	b.n	8005632 <HAL_RCC_OscConfig+0x376>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	2b05      	cmp	r3, #5
 80055fe:	d10c      	bne.n	800561a <HAL_RCC_OscConfig+0x35e>
 8005600:	4b62      	ldr	r3, [pc, #392]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 8005602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005604:	4a61      	ldr	r2, [pc, #388]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 8005606:	f043 0304 	orr.w	r3, r3, #4
 800560a:	6713      	str	r3, [r2, #112]	; 0x70
 800560c:	4b5f      	ldr	r3, [pc, #380]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 800560e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005610:	4a5e      	ldr	r2, [pc, #376]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 8005612:	f043 0301 	orr.w	r3, r3, #1
 8005616:	6713      	str	r3, [r2, #112]	; 0x70
 8005618:	e00b      	b.n	8005632 <HAL_RCC_OscConfig+0x376>
 800561a:	4b5c      	ldr	r3, [pc, #368]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 800561c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561e:	4a5b      	ldr	r2, [pc, #364]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 8005620:	f023 0301 	bic.w	r3, r3, #1
 8005624:	6713      	str	r3, [r2, #112]	; 0x70
 8005626:	4b59      	ldr	r3, [pc, #356]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 8005628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562a:	4a58      	ldr	r2, [pc, #352]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 800562c:	f023 0304 	bic.w	r3, r3, #4
 8005630:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d015      	beq.n	8005666 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800563a:	f7fc faad 	bl	8001b98 <HAL_GetTick>
 800563e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005640:	e00a      	b.n	8005658 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005642:	f7fc faa9 	bl	8001b98 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005650:	4293      	cmp	r3, r2
 8005652:	d901      	bls.n	8005658 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e0d8      	b.n	800580a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005658:	4b4c      	ldr	r3, [pc, #304]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 800565a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d0ee      	beq.n	8005642 <HAL_RCC_OscConfig+0x386>
 8005664:	e014      	b.n	8005690 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005666:	f7fc fa97 	bl	8001b98 <HAL_GetTick>
 800566a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800566c:	e00a      	b.n	8005684 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800566e:	f7fc fa93 	bl	8001b98 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	f241 3288 	movw	r2, #5000	; 0x1388
 800567c:	4293      	cmp	r3, r2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e0c2      	b.n	800580a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005684:	4b41      	ldr	r3, [pc, #260]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 8005686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1ee      	bne.n	800566e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005690:	7dfb      	ldrb	r3, [r7, #23]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d105      	bne.n	80056a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005696:	4b3d      	ldr	r3, [pc, #244]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	4a3c      	ldr	r2, [pc, #240]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 800569c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 80ae 	beq.w	8005808 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056ac:	4b37      	ldr	r3, [pc, #220]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f003 030c 	and.w	r3, r3, #12
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d06d      	beq.n	8005794 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d14b      	bne.n	8005758 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056c0:	4b32      	ldr	r3, [pc, #200]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a31      	ldr	r2, [pc, #196]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 80056c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056cc:	f7fc fa64 	bl	8001b98 <HAL_GetTick>
 80056d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056d2:	e008      	b.n	80056e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056d4:	f7fc fa60 	bl	8001b98 <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e091      	b.n	800580a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056e6:	4b29      	ldr	r3, [pc, #164]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1f0      	bne.n	80056d4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	69da      	ldr	r2, [r3, #28]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005700:	019b      	lsls	r3, r3, #6
 8005702:	431a      	orrs	r2, r3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005708:	085b      	lsrs	r3, r3, #1
 800570a:	3b01      	subs	r3, #1
 800570c:	041b      	lsls	r3, r3, #16
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005714:	061b      	lsls	r3, r3, #24
 8005716:	431a      	orrs	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571c:	071b      	lsls	r3, r3, #28
 800571e:	491b      	ldr	r1, [pc, #108]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 8005720:	4313      	orrs	r3, r2
 8005722:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005724:	4b19      	ldr	r3, [pc, #100]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a18      	ldr	r2, [pc, #96]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 800572a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800572e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005730:	f7fc fa32 	bl	8001b98 <HAL_GetTick>
 8005734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005736:	e008      	b.n	800574a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005738:	f7fc fa2e 	bl	8001b98 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b02      	cmp	r3, #2
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e05f      	b.n	800580a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800574a:	4b10      	ldr	r3, [pc, #64]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d0f0      	beq.n	8005738 <HAL_RCC_OscConfig+0x47c>
 8005756:	e057      	b.n	8005808 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005758:	4b0c      	ldr	r3, [pc, #48]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a0b      	ldr	r2, [pc, #44]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 800575e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005764:	f7fc fa18 	bl	8001b98 <HAL_GetTick>
 8005768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800576a:	e008      	b.n	800577e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800576c:	f7fc fa14 	bl	8001b98 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	2b02      	cmp	r3, #2
 8005778:	d901      	bls.n	800577e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e045      	b.n	800580a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800577e:	4b03      	ldr	r3, [pc, #12]	; (800578c <HAL_RCC_OscConfig+0x4d0>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1f0      	bne.n	800576c <HAL_RCC_OscConfig+0x4b0>
 800578a:	e03d      	b.n	8005808 <HAL_RCC_OscConfig+0x54c>
 800578c:	40023800 	.word	0x40023800
 8005790:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005794:	4b1f      	ldr	r3, [pc, #124]	; (8005814 <HAL_RCC_OscConfig+0x558>)
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d030      	beq.n	8005804 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d129      	bne.n	8005804 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d122      	bne.n	8005804 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80057c4:	4013      	ands	r3, r2
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d119      	bne.n	8005804 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057da:	085b      	lsrs	r3, r3, #1
 80057dc:	3b01      	subs	r3, #1
 80057de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d10f      	bne.n	8005804 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d107      	bne.n	8005804 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005800:	429a      	cmp	r2, r3
 8005802:	d001      	beq.n	8005808 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005804:	2301      	movs	r3, #1
 8005806:	e000      	b.n	800580a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3718      	adds	r7, #24
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	40023800 	.word	0x40023800

08005818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005822:	2300      	movs	r3, #0
 8005824:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d101      	bne.n	8005830 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e0d0      	b.n	80059d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005830:	4b6a      	ldr	r3, [pc, #424]	; (80059dc <HAL_RCC_ClockConfig+0x1c4>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 030f 	and.w	r3, r3, #15
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	429a      	cmp	r2, r3
 800583c:	d910      	bls.n	8005860 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800583e:	4b67      	ldr	r3, [pc, #412]	; (80059dc <HAL_RCC_ClockConfig+0x1c4>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f023 020f 	bic.w	r2, r3, #15
 8005846:	4965      	ldr	r1, [pc, #404]	; (80059dc <HAL_RCC_ClockConfig+0x1c4>)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	4313      	orrs	r3, r2
 800584c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800584e:	4b63      	ldr	r3, [pc, #396]	; (80059dc <HAL_RCC_ClockConfig+0x1c4>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 030f 	and.w	r3, r3, #15
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	429a      	cmp	r2, r3
 800585a:	d001      	beq.n	8005860 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e0b8      	b.n	80059d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b00      	cmp	r3, #0
 800586a:	d020      	beq.n	80058ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0304 	and.w	r3, r3, #4
 8005874:	2b00      	cmp	r3, #0
 8005876:	d005      	beq.n	8005884 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005878:	4b59      	ldr	r3, [pc, #356]	; (80059e0 <HAL_RCC_ClockConfig+0x1c8>)
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	4a58      	ldr	r2, [pc, #352]	; (80059e0 <HAL_RCC_ClockConfig+0x1c8>)
 800587e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005882:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0308 	and.w	r3, r3, #8
 800588c:	2b00      	cmp	r3, #0
 800588e:	d005      	beq.n	800589c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005890:	4b53      	ldr	r3, [pc, #332]	; (80059e0 <HAL_RCC_ClockConfig+0x1c8>)
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	4a52      	ldr	r2, [pc, #328]	; (80059e0 <HAL_RCC_ClockConfig+0x1c8>)
 8005896:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800589a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800589c:	4b50      	ldr	r3, [pc, #320]	; (80059e0 <HAL_RCC_ClockConfig+0x1c8>)
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	494d      	ldr	r1, [pc, #308]	; (80059e0 <HAL_RCC_ClockConfig+0x1c8>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d040      	beq.n	800593c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d107      	bne.n	80058d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058c2:	4b47      	ldr	r3, [pc, #284]	; (80059e0 <HAL_RCC_ClockConfig+0x1c8>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d115      	bne.n	80058fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e07f      	b.n	80059d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d107      	bne.n	80058ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058da:	4b41      	ldr	r3, [pc, #260]	; (80059e0 <HAL_RCC_ClockConfig+0x1c8>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d109      	bne.n	80058fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e073      	b.n	80059d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058ea:	4b3d      	ldr	r3, [pc, #244]	; (80059e0 <HAL_RCC_ClockConfig+0x1c8>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e06b      	b.n	80059d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058fa:	4b39      	ldr	r3, [pc, #228]	; (80059e0 <HAL_RCC_ClockConfig+0x1c8>)
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f023 0203 	bic.w	r2, r3, #3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	4936      	ldr	r1, [pc, #216]	; (80059e0 <HAL_RCC_ClockConfig+0x1c8>)
 8005908:	4313      	orrs	r3, r2
 800590a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800590c:	f7fc f944 	bl	8001b98 <HAL_GetTick>
 8005910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005912:	e00a      	b.n	800592a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005914:	f7fc f940 	bl	8001b98 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005922:	4293      	cmp	r3, r2
 8005924:	d901      	bls.n	800592a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e053      	b.n	80059d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800592a:	4b2d      	ldr	r3, [pc, #180]	; (80059e0 <HAL_RCC_ClockConfig+0x1c8>)
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f003 020c 	and.w	r2, r3, #12
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	009b      	lsls	r3, r3, #2
 8005938:	429a      	cmp	r2, r3
 800593a:	d1eb      	bne.n	8005914 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800593c:	4b27      	ldr	r3, [pc, #156]	; (80059dc <HAL_RCC_ClockConfig+0x1c4>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 030f 	and.w	r3, r3, #15
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	429a      	cmp	r2, r3
 8005948:	d210      	bcs.n	800596c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800594a:	4b24      	ldr	r3, [pc, #144]	; (80059dc <HAL_RCC_ClockConfig+0x1c4>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f023 020f 	bic.w	r2, r3, #15
 8005952:	4922      	ldr	r1, [pc, #136]	; (80059dc <HAL_RCC_ClockConfig+0x1c4>)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	4313      	orrs	r3, r2
 8005958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800595a:	4b20      	ldr	r3, [pc, #128]	; (80059dc <HAL_RCC_ClockConfig+0x1c4>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	429a      	cmp	r2, r3
 8005966:	d001      	beq.n	800596c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e032      	b.n	80059d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0304 	and.w	r3, r3, #4
 8005974:	2b00      	cmp	r3, #0
 8005976:	d008      	beq.n	800598a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005978:	4b19      	ldr	r3, [pc, #100]	; (80059e0 <HAL_RCC_ClockConfig+0x1c8>)
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	4916      	ldr	r1, [pc, #88]	; (80059e0 <HAL_RCC_ClockConfig+0x1c8>)
 8005986:	4313      	orrs	r3, r2
 8005988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0308 	and.w	r3, r3, #8
 8005992:	2b00      	cmp	r3, #0
 8005994:	d009      	beq.n	80059aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005996:	4b12      	ldr	r3, [pc, #72]	; (80059e0 <HAL_RCC_ClockConfig+0x1c8>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	00db      	lsls	r3, r3, #3
 80059a4:	490e      	ldr	r1, [pc, #56]	; (80059e0 <HAL_RCC_ClockConfig+0x1c8>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80059aa:	f000 f885 	bl	8005ab8 <HAL_RCC_GetSysClockFreq>
 80059ae:	4602      	mov	r2, r0
 80059b0:	4b0b      	ldr	r3, [pc, #44]	; (80059e0 <HAL_RCC_ClockConfig+0x1c8>)
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	091b      	lsrs	r3, r3, #4
 80059b6:	f003 030f 	and.w	r3, r3, #15
 80059ba:	490a      	ldr	r1, [pc, #40]	; (80059e4 <HAL_RCC_ClockConfig+0x1cc>)
 80059bc:	5ccb      	ldrb	r3, [r1, r3]
 80059be:	fa22 f303 	lsr.w	r3, r2, r3
 80059c2:	4a09      	ldr	r2, [pc, #36]	; (80059e8 <HAL_RCC_ClockConfig+0x1d0>)
 80059c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80059c6:	4b09      	ldr	r3, [pc, #36]	; (80059ec <HAL_RCC_ClockConfig+0x1d4>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f7fb f88c 	bl	8000ae8 <HAL_InitTick>

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	40023c00 	.word	0x40023c00
 80059e0:	40023800 	.word	0x40023800
 80059e4:	0800a19c 	.word	0x0800a19c
 80059e8:	20000000 	.word	0x20000000
 80059ec:	20000018 	.word	0x20000018

080059f0 <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b08c      	sub	sp, #48	; 0x30
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d127      	bne.n	8005a52 <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8005a02:	4b2a      	ldr	r3, [pc, #168]	; (8005aac <HAL_RCC_MCOConfig+0xbc>)
 8005a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a06:	4a29      	ldr	r2, [pc, #164]	; (8005aac <HAL_RCC_MCOConfig+0xbc>)
 8005a08:	f043 0301 	orr.w	r3, r3, #1
 8005a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a0e:	4b27      	ldr	r3, [pc, #156]	; (8005aac <HAL_RCC_MCOConfig+0xbc>)
 8005a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	61bb      	str	r3, [r7, #24]
 8005a18:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005a1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a20:	2302      	movs	r3, #2
 8005a22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005a24:	2303      	movs	r3, #3
 8005a26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005a30:	f107 031c 	add.w	r3, r7, #28
 8005a34:	4619      	mov	r1, r3
 8005a36:	481e      	ldr	r0, [pc, #120]	; (8005ab0 <HAL_RCC_MCOConfig+0xc0>)
 8005a38:	f7fd fe1a 	bl	8003670 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005a3c:	4b1b      	ldr	r3, [pc, #108]	; (8005aac <HAL_RCC_MCOConfig+0xbc>)
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8005a44:	68b9      	ldr	r1, [r7, #8]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	430b      	orrs	r3, r1
 8005a4a:	4918      	ldr	r1, [pc, #96]	; (8005aac <HAL_RCC_MCOConfig+0xbc>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 8005a50:	e027      	b.n	8005aa2 <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
 8005a52:	4b16      	ldr	r3, [pc, #88]	; (8005aac <HAL_RCC_MCOConfig+0xbc>)
 8005a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a56:	4a15      	ldr	r2, [pc, #84]	; (8005aac <HAL_RCC_MCOConfig+0xbc>)
 8005a58:	f043 0304 	orr.w	r3, r3, #4
 8005a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a5e:	4b13      	ldr	r3, [pc, #76]	; (8005aac <HAL_RCC_MCOConfig+0xbc>)
 8005a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a62:	f003 0304 	and.w	r3, r3, #4
 8005a66:	617b      	str	r3, [r7, #20]
 8005a68:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005a6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a70:	2302      	movs	r3, #2
 8005a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005a74:	2303      	movs	r3, #3
 8005a76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005a80:	f107 031c 	add.w	r3, r7, #28
 8005a84:	4619      	mov	r1, r3
 8005a86:	480b      	ldr	r0, [pc, #44]	; (8005ab4 <HAL_RCC_MCOConfig+0xc4>)
 8005a88:	f7fd fdf2 	bl	8003670 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 8005a8c:	4b07      	ldr	r3, [pc, #28]	; (8005aac <HAL_RCC_MCOConfig+0xbc>)
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	00d9      	lsls	r1, r3, #3
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	430b      	orrs	r3, r1
 8005a9c:	4903      	ldr	r1, [pc, #12]	; (8005aac <HAL_RCC_MCOConfig+0xbc>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	608b      	str	r3, [r1, #8]
}
 8005aa2:	bf00      	nop
 8005aa4:	3730      	adds	r7, #48	; 0x30
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	40023800 	.word	0x40023800
 8005ab0:	40020000 	.word	0x40020000
 8005ab4:	40020800 	.word	0x40020800

08005ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005abc:	b090      	sub	sp, #64	; 0x40
 8005abe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ac8:	2300      	movs	r3, #0
 8005aca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8005acc:	2300      	movs	r3, #0
 8005ace:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ad0:	4b59      	ldr	r3, [pc, #356]	; (8005c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	f003 030c 	and.w	r3, r3, #12
 8005ad8:	2b08      	cmp	r3, #8
 8005ada:	d00d      	beq.n	8005af8 <HAL_RCC_GetSysClockFreq+0x40>
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	f200 80a1 	bhi.w	8005c24 <HAL_RCC_GetSysClockFreq+0x16c>
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d002      	beq.n	8005aec <HAL_RCC_GetSysClockFreq+0x34>
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	d003      	beq.n	8005af2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005aea:	e09b      	b.n	8005c24 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005aec:	4b53      	ldr	r3, [pc, #332]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x184>)
 8005aee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005af0:	e09b      	b.n	8005c2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005af2:	4b53      	ldr	r3, [pc, #332]	; (8005c40 <HAL_RCC_GetSysClockFreq+0x188>)
 8005af4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005af6:	e098      	b.n	8005c2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005af8:	4b4f      	ldr	r3, [pc, #316]	; (8005c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b00:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005b02:	4b4d      	ldr	r3, [pc, #308]	; (8005c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d028      	beq.n	8005b60 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b0e:	4b4a      	ldr	r3, [pc, #296]	; (8005c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	099b      	lsrs	r3, r3, #6
 8005b14:	2200      	movs	r2, #0
 8005b16:	623b      	str	r3, [r7, #32]
 8005b18:	627a      	str	r2, [r7, #36]	; 0x24
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005b20:	2100      	movs	r1, #0
 8005b22:	4b47      	ldr	r3, [pc, #284]	; (8005c40 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b24:	fb03 f201 	mul.w	r2, r3, r1
 8005b28:	2300      	movs	r3, #0
 8005b2a:	fb00 f303 	mul.w	r3, r0, r3
 8005b2e:	4413      	add	r3, r2
 8005b30:	4a43      	ldr	r2, [pc, #268]	; (8005c40 <HAL_RCC_GetSysClockFreq+0x188>)
 8005b32:	fba0 1202 	umull	r1, r2, r0, r2
 8005b36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b38:	460a      	mov	r2, r1
 8005b3a:	62ba      	str	r2, [r7, #40]	; 0x28
 8005b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b3e:	4413      	add	r3, r2
 8005b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b44:	2200      	movs	r2, #0
 8005b46:	61bb      	str	r3, [r7, #24]
 8005b48:	61fa      	str	r2, [r7, #28]
 8005b4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005b52:	f7fa fb75 	bl	8000240 <__aeabi_uldivmod>
 8005b56:	4602      	mov	r2, r0
 8005b58:	460b      	mov	r3, r1
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b5e:	e053      	b.n	8005c08 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b60:	4b35      	ldr	r3, [pc, #212]	; (8005c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	099b      	lsrs	r3, r3, #6
 8005b66:	2200      	movs	r2, #0
 8005b68:	613b      	str	r3, [r7, #16]
 8005b6a:	617a      	str	r2, [r7, #20]
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005b72:	f04f 0b00 	mov.w	fp, #0
 8005b76:	4652      	mov	r2, sl
 8005b78:	465b      	mov	r3, fp
 8005b7a:	f04f 0000 	mov.w	r0, #0
 8005b7e:	f04f 0100 	mov.w	r1, #0
 8005b82:	0159      	lsls	r1, r3, #5
 8005b84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b88:	0150      	lsls	r0, r2, #5
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	ebb2 080a 	subs.w	r8, r2, sl
 8005b92:	eb63 090b 	sbc.w	r9, r3, fp
 8005b96:	f04f 0200 	mov.w	r2, #0
 8005b9a:	f04f 0300 	mov.w	r3, #0
 8005b9e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005ba2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005ba6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005baa:	ebb2 0408 	subs.w	r4, r2, r8
 8005bae:	eb63 0509 	sbc.w	r5, r3, r9
 8005bb2:	f04f 0200 	mov.w	r2, #0
 8005bb6:	f04f 0300 	mov.w	r3, #0
 8005bba:	00eb      	lsls	r3, r5, #3
 8005bbc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bc0:	00e2      	lsls	r2, r4, #3
 8005bc2:	4614      	mov	r4, r2
 8005bc4:	461d      	mov	r5, r3
 8005bc6:	eb14 030a 	adds.w	r3, r4, sl
 8005bca:	603b      	str	r3, [r7, #0]
 8005bcc:	eb45 030b 	adc.w	r3, r5, fp
 8005bd0:	607b      	str	r3, [r7, #4]
 8005bd2:	f04f 0200 	mov.w	r2, #0
 8005bd6:	f04f 0300 	mov.w	r3, #0
 8005bda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bde:	4629      	mov	r1, r5
 8005be0:	028b      	lsls	r3, r1, #10
 8005be2:	4621      	mov	r1, r4
 8005be4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005be8:	4621      	mov	r1, r4
 8005bea:	028a      	lsls	r2, r1, #10
 8005bec:	4610      	mov	r0, r2
 8005bee:	4619      	mov	r1, r3
 8005bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	60bb      	str	r3, [r7, #8]
 8005bf6:	60fa      	str	r2, [r7, #12]
 8005bf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bfc:	f7fa fb20 	bl	8000240 <__aeabi_uldivmod>
 8005c00:	4602      	mov	r2, r0
 8005c02:	460b      	mov	r3, r1
 8005c04:	4613      	mov	r3, r2
 8005c06:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005c08:	4b0b      	ldr	r3, [pc, #44]	; (8005c38 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	0c1b      	lsrs	r3, r3, #16
 8005c0e:	f003 0303 	and.w	r3, r3, #3
 8005c12:	3301      	adds	r3, #1
 8005c14:	005b      	lsls	r3, r3, #1
 8005c16:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8005c18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005c22:	e002      	b.n	8005c2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c24:	4b05      	ldr	r3, [pc, #20]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x184>)
 8005c26:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005c28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3740      	adds	r7, #64	; 0x40
 8005c30:	46bd      	mov	sp, r7
 8005c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c36:	bf00      	nop
 8005c38:	40023800 	.word	0x40023800
 8005c3c:	00f42400 	.word	0x00f42400
 8005c40:	017d7840 	.word	0x017d7840

08005c44 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c48:	4b03      	ldr	r3, [pc, #12]	; (8005c58 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	20000000 	.word	0x20000000

08005c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c60:	f7ff fff0 	bl	8005c44 <HAL_RCC_GetHCLKFreq>
 8005c64:	4602      	mov	r2, r0
 8005c66:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	0a9b      	lsrs	r3, r3, #10
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	4903      	ldr	r1, [pc, #12]	; (8005c80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c72:	5ccb      	ldrb	r3, [r1, r3]
 8005c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	40023800 	.word	0x40023800
 8005c80:	0800a1ac 	.word	0x0800a1ac

08005c84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	220f      	movs	r2, #15
 8005c92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005c94:	4b12      	ldr	r3, [pc, #72]	; (8005ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	f003 0203 	and.w	r2, r3, #3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005ca0:	4b0f      	ldr	r3, [pc, #60]	; (8005ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005cac:	4b0c      	ldr	r3, [pc, #48]	; (8005ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005cb8:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	08db      	lsrs	r3, r3, #3
 8005cbe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005cc6:	4b07      	ldr	r3, [pc, #28]	; (8005ce4 <HAL_RCC_GetClockConfig+0x60>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 020f 	and.w	r2, r3, #15
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	601a      	str	r2, [r3, #0]
}
 8005cd2:	bf00      	nop
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	40023800 	.word	0x40023800
 8005ce4:	40023c00 	.word	0x40023c00

08005ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b088      	sub	sp, #32
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005d00:	2300      	movs	r3, #0
 8005d02:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0301 	and.w	r3, r3, #1
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d012      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d10:	4b69      	ldr	r3, [pc, #420]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	4a68      	ldr	r2, [pc, #416]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d16:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005d1a:	6093      	str	r3, [r2, #8]
 8005d1c:	4b66      	ldr	r3, [pc, #408]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d1e:	689a      	ldr	r2, [r3, #8]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d24:	4964      	ldr	r1, [pc, #400]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005d32:	2301      	movs	r3, #1
 8005d34:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d017      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d42:	4b5d      	ldr	r3, [pc, #372]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d50:	4959      	ldr	r1, [pc, #356]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d52:	4313      	orrs	r3, r2
 8005d54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d60:	d101      	bne.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005d62:	2301      	movs	r3, #1
 8005d64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d017      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005d7e:	4b4e      	ldr	r3, [pc, #312]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d84:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8c:	494a      	ldr	r1, [pc, #296]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d9c:	d101      	bne.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d101      	bne.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005daa:	2301      	movs	r3, #1
 8005dac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0320 	and.w	r3, r3, #32
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	f000 808b 	beq.w	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005dcc:	4b3a      	ldr	r3, [pc, #232]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd0:	4a39      	ldr	r2, [pc, #228]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8005dd8:	4b37      	ldr	r3, [pc, #220]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005de0:	60bb      	str	r3, [r7, #8]
 8005de2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005de4:	4b35      	ldr	r3, [pc, #212]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a34      	ldr	r2, [pc, #208]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005df0:	f7fb fed2 	bl	8001b98 <HAL_GetTick>
 8005df4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005df6:	e008      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005df8:	f7fb fece 	bl	8001b98 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b64      	cmp	r3, #100	; 0x64
 8005e04:	d901      	bls.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e38f      	b.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005e0a:	4b2c      	ldr	r3, [pc, #176]	; (8005ebc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0f0      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e16:	4b28      	ldr	r3, [pc, #160]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e1e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d035      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d02e      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e34:	4b20      	ldr	r3, [pc, #128]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e3c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e3e:	4b1e      	ldr	r3, [pc, #120]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e42:	4a1d      	ldr	r2, [pc, #116]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e48:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e4a:	4b1b      	ldr	r3, [pc, #108]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4e:	4a1a      	ldr	r2, [pc, #104]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e54:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005e56:	4a18      	ldr	r2, [pc, #96]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e5c:	4b16      	ldr	r3, [pc, #88]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d114      	bne.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e68:	f7fb fe96 	bl	8001b98 <HAL_GetTick>
 8005e6c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e6e:	e00a      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e70:	f7fb fe92 	bl	8001b98 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d901      	bls.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e351      	b.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e86:	4b0c      	ldr	r3, [pc, #48]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d0ee      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e9e:	d111      	bne.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005ea0:	4b05      	ldr	r3, [pc, #20]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005eac:	4b04      	ldr	r3, [pc, #16]	; (8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005eae:	400b      	ands	r3, r1
 8005eb0:	4901      	ldr	r1, [pc, #4]	; (8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	608b      	str	r3, [r1, #8]
 8005eb6:	e00b      	b.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005eb8:	40023800 	.word	0x40023800
 8005ebc:	40007000 	.word	0x40007000
 8005ec0:	0ffffcff 	.word	0x0ffffcff
 8005ec4:	4bac      	ldr	r3, [pc, #688]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	4aab      	ldr	r2, [pc, #684]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005eca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005ece:	6093      	str	r3, [r2, #8]
 8005ed0:	4ba9      	ldr	r3, [pc, #676]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ed2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005edc:	49a6      	ldr	r1, [pc, #664]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0310 	and.w	r3, r3, #16
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d010      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005eee:	4ba2      	ldr	r3, [pc, #648]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ef4:	4aa0      	ldr	r2, [pc, #640]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ef6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005efa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005efe:	4b9e      	ldr	r3, [pc, #632]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f00:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f08:	499b      	ldr	r1, [pc, #620]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00a      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f1c:	4b96      	ldr	r3, [pc, #600]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f2a:	4993      	ldr	r1, [pc, #588]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d00a      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f3e:	4b8e      	ldr	r3, [pc, #568]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f4c:	498a      	ldr	r1, [pc, #552]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00a      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f60:	4b85      	ldr	r3, [pc, #532]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f6e:	4982      	ldr	r1, [pc, #520]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f70:	4313      	orrs	r3, r2
 8005f72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00a      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f82:	4b7d      	ldr	r3, [pc, #500]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f90:	4979      	ldr	r1, [pc, #484]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00a      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fa4:	4b74      	ldr	r3, [pc, #464]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005faa:	f023 0203 	bic.w	r2, r3, #3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb2:	4971      	ldr	r1, [pc, #452]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00a      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fc6:	4b6c      	ldr	r3, [pc, #432]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fcc:	f023 020c 	bic.w	r2, r3, #12
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fd4:	4968      	ldr	r1, [pc, #416]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00a      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005fe8:	4b63      	ldr	r3, [pc, #396]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ff6:	4960      	ldr	r1, [pc, #384]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00a      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800600a:	4b5b      	ldr	r3, [pc, #364]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800600c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006010:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006018:	4957      	ldr	r1, [pc, #348]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800601a:	4313      	orrs	r3, r2
 800601c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00a      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800602c:	4b52      	ldr	r3, [pc, #328]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800602e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006032:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800603a:	494f      	ldr	r1, [pc, #316]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800603c:	4313      	orrs	r3, r2
 800603e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00a      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800604e:	4b4a      	ldr	r3, [pc, #296]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006054:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800605c:	4946      	ldr	r1, [pc, #280]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800605e:	4313      	orrs	r3, r2
 8006060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00a      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006070:	4b41      	ldr	r3, [pc, #260]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006076:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800607e:	493e      	ldr	r1, [pc, #248]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006080:	4313      	orrs	r3, r2
 8006082:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00a      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006092:	4b39      	ldr	r3, [pc, #228]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006094:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006098:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060a0:	4935      	ldr	r1, [pc, #212]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00a      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80060b4:	4b30      	ldr	r3, [pc, #192]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060c2:	492d      	ldr	r1, [pc, #180]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d011      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80060d6:	4b28      	ldr	r3, [pc, #160]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060e4:	4924      	ldr	r1, [pc, #144]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060f4:	d101      	bne.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80060f6:	2301      	movs	r3, #1
 80060f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0308 	and.w	r3, r3, #8
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006106:	2301      	movs	r3, #1
 8006108:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006116:	4b18      	ldr	r3, [pc, #96]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800611c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006124:	4914      	ldr	r1, [pc, #80]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8006126:	4313      	orrs	r3, r2
 8006128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00b      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006138:	4b0f      	ldr	r3, [pc, #60]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800613a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800613e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006148:	490b      	ldr	r1, [pc, #44]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800614a:	4313      	orrs	r3, r2
 800614c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00f      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800615c:	4b06      	ldr	r3, [pc, #24]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800615e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006162:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800616c:	4902      	ldr	r1, [pc, #8]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800616e:	4313      	orrs	r3, r2
 8006170:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006174:	e002      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8006176:	bf00      	nop
 8006178:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00b      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006188:	4b8a      	ldr	r3, [pc, #552]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800618a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800618e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006198:	4986      	ldr	r1, [pc, #536]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800619a:	4313      	orrs	r3, r2
 800619c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00b      	beq.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80061ac:	4b81      	ldr	r3, [pc, #516]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061bc:	497d      	ldr	r1, [pc, #500]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d006      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f000 80d6 	beq.w	8006384 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80061d8:	4b76      	ldr	r3, [pc, #472]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a75      	ldr	r2, [pc, #468]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80061de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80061e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061e4:	f7fb fcd8 	bl	8001b98 <HAL_GetTick>
 80061e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061ea:	e008      	b.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80061ec:	f7fb fcd4 	bl	8001b98 <HAL_GetTick>
 80061f0:	4602      	mov	r2, r0
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	2b64      	cmp	r3, #100	; 0x64
 80061f8:	d901      	bls.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e195      	b.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061fe:	4b6d      	ldr	r3, [pc, #436]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1f0      	bne.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	2b00      	cmp	r3, #0
 8006214:	d021      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800621a:	2b00      	cmp	r3, #0
 800621c:	d11d      	bne.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800621e:	4b65      	ldr	r3, [pc, #404]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006224:	0c1b      	lsrs	r3, r3, #16
 8006226:	f003 0303 	and.w	r3, r3, #3
 800622a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800622c:	4b61      	ldr	r3, [pc, #388]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800622e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006232:	0e1b      	lsrs	r3, r3, #24
 8006234:	f003 030f 	and.w	r3, r3, #15
 8006238:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	019a      	lsls	r2, r3, #6
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	041b      	lsls	r3, r3, #16
 8006244:	431a      	orrs	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	061b      	lsls	r3, r3, #24
 800624a:	431a      	orrs	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	071b      	lsls	r3, r3, #28
 8006252:	4958      	ldr	r1, [pc, #352]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006254:	4313      	orrs	r3, r2
 8006256:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d004      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800626e:	d00a      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006278:	2b00      	cmp	r3, #0
 800627a:	d02e      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006284:	d129      	bne.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006286:	4b4b      	ldr	r3, [pc, #300]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800628c:	0c1b      	lsrs	r3, r3, #16
 800628e:	f003 0303 	and.w	r3, r3, #3
 8006292:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006294:	4b47      	ldr	r3, [pc, #284]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800629a:	0f1b      	lsrs	r3, r3, #28
 800629c:	f003 0307 	and.w	r3, r3, #7
 80062a0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	019a      	lsls	r2, r3, #6
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	041b      	lsls	r3, r3, #16
 80062ac:	431a      	orrs	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	061b      	lsls	r3, r3, #24
 80062b4:	431a      	orrs	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	071b      	lsls	r3, r3, #28
 80062ba:	493e      	ldr	r1, [pc, #248]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80062c2:	4b3c      	ldr	r3, [pc, #240]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062c8:	f023 021f 	bic.w	r2, r3, #31
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d0:	3b01      	subs	r3, #1
 80062d2:	4938      	ldr	r1, [pc, #224]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d01d      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80062e6:	4b33      	ldr	r3, [pc, #204]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062ec:	0e1b      	lsrs	r3, r3, #24
 80062ee:	f003 030f 	and.w	r3, r3, #15
 80062f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80062f4:	4b2f      	ldr	r3, [pc, #188]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80062f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062fa:	0f1b      	lsrs	r3, r3, #28
 80062fc:	f003 0307 	and.w	r3, r3, #7
 8006300:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	019a      	lsls	r2, r3, #6
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	041b      	lsls	r3, r3, #16
 800630e:	431a      	orrs	r2, r3
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	061b      	lsls	r3, r3, #24
 8006314:	431a      	orrs	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	071b      	lsls	r3, r3, #28
 800631a:	4926      	ldr	r1, [pc, #152]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800631c:	4313      	orrs	r3, r2
 800631e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d011      	beq.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	019a      	lsls	r2, r3, #6
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	041b      	lsls	r3, r3, #16
 800633a:	431a      	orrs	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	061b      	lsls	r3, r3, #24
 8006342:	431a      	orrs	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	071b      	lsls	r3, r3, #28
 800634a:	491a      	ldr	r1, [pc, #104]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800634c:	4313      	orrs	r3, r2
 800634e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006352:	4b18      	ldr	r3, [pc, #96]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a17      	ldr	r2, [pc, #92]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006358:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800635c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800635e:	f7fb fc1b 	bl	8001b98 <HAL_GetTick>
 8006362:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006364:	e008      	b.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006366:	f7fb fc17 	bl	8001b98 <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	2b64      	cmp	r3, #100	; 0x64
 8006372:	d901      	bls.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e0d8      	b.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006378:	4b0e      	ldr	r3, [pc, #56]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d0f0      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	2b01      	cmp	r3, #1
 8006388:	f040 80ce 	bne.w	8006528 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800638c:	4b09      	ldr	r3, [pc, #36]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a08      	ldr	r2, [pc, #32]	; (80063b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006396:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006398:	f7fb fbfe 	bl	8001b98 <HAL_GetTick>
 800639c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800639e:	e00b      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80063a0:	f7fb fbfa 	bl	8001b98 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	2b64      	cmp	r3, #100	; 0x64
 80063ac:	d904      	bls.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e0bb      	b.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80063b2:	bf00      	nop
 80063b4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80063b8:	4b5e      	ldr	r3, [pc, #376]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063c4:	d0ec      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d003      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d009      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d02e      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d12a      	bne.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80063ee:	4b51      	ldr	r3, [pc, #324]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80063f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f4:	0c1b      	lsrs	r3, r3, #16
 80063f6:	f003 0303 	and.w	r3, r3, #3
 80063fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80063fc:	4b4d      	ldr	r3, [pc, #308]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80063fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006402:	0f1b      	lsrs	r3, r3, #28
 8006404:	f003 0307 	and.w	r3, r3, #7
 8006408:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	019a      	lsls	r2, r3, #6
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	041b      	lsls	r3, r3, #16
 8006414:	431a      	orrs	r2, r3
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	061b      	lsls	r3, r3, #24
 800641c:	431a      	orrs	r2, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	071b      	lsls	r3, r3, #28
 8006422:	4944      	ldr	r1, [pc, #272]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006424:	4313      	orrs	r3, r2
 8006426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800642a:	4b42      	ldr	r3, [pc, #264]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800642c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006430:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006438:	3b01      	subs	r3, #1
 800643a:	021b      	lsls	r3, r3, #8
 800643c:	493d      	ldr	r1, [pc, #244]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800643e:	4313      	orrs	r3, r2
 8006440:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d022      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006454:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006458:	d11d      	bne.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800645a:	4b36      	ldr	r3, [pc, #216]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800645c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006460:	0e1b      	lsrs	r3, r3, #24
 8006462:	f003 030f 	and.w	r3, r3, #15
 8006466:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006468:	4b32      	ldr	r3, [pc, #200]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800646a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800646e:	0f1b      	lsrs	r3, r3, #28
 8006470:	f003 0307 	and.w	r3, r3, #7
 8006474:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	019a      	lsls	r2, r3, #6
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a1b      	ldr	r3, [r3, #32]
 8006480:	041b      	lsls	r3, r3, #16
 8006482:	431a      	orrs	r2, r3
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	061b      	lsls	r3, r3, #24
 8006488:	431a      	orrs	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	071b      	lsls	r3, r3, #28
 800648e:	4929      	ldr	r1, [pc, #164]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006490:	4313      	orrs	r3, r2
 8006492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0308 	and.w	r3, r3, #8
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d028      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80064a2:	4b24      	ldr	r3, [pc, #144]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a8:	0e1b      	lsrs	r3, r3, #24
 80064aa:	f003 030f 	and.w	r3, r3, #15
 80064ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80064b0:	4b20      	ldr	r3, [pc, #128]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b6:	0c1b      	lsrs	r3, r3, #16
 80064b8:	f003 0303 	and.w	r3, r3, #3
 80064bc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	019a      	lsls	r2, r3, #6
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	041b      	lsls	r3, r3, #16
 80064c8:	431a      	orrs	r2, r3
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	061b      	lsls	r3, r3, #24
 80064ce:	431a      	orrs	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	69db      	ldr	r3, [r3, #28]
 80064d4:	071b      	lsls	r3, r3, #28
 80064d6:	4917      	ldr	r1, [pc, #92]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80064de:	4b15      	ldr	r3, [pc, #84]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ec:	4911      	ldr	r1, [pc, #68]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80064f4:	4b0f      	ldr	r3, [pc, #60]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a0e      	ldr	r2, [pc, #56]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80064fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006500:	f7fb fb4a 	bl	8001b98 <HAL_GetTick>
 8006504:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006506:	e008      	b.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006508:	f7fb fb46 	bl	8001b98 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b64      	cmp	r3, #100	; 0x64
 8006514:	d901      	bls.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e007      	b.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800651a:	4b06      	ldr	r3, [pc, #24]	; (8006534 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006522:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006526:	d1ef      	bne.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3720      	adds	r7, #32
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	40023800 	.word	0x40023800

08006538 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d101      	bne.n	800654c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e025      	b.n	8006598 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b00      	cmp	r3, #0
 8006556:	d106      	bne.n	8006566 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f7fa fab7 	bl	8000ad4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2202      	movs	r2, #2
 800656a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	3304      	adds	r3, #4
 8006576:	4619      	mov	r1, r3
 8006578:	4610      	mov	r0, r2
 800657a:	f000 fb43 	bl	8006c04 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6818      	ldr	r0, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	461a      	mov	r2, r3
 8006588:	6839      	ldr	r1, [r7, #0]
 800658a:	f000 fb97 	bl	8006cbc <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80065b2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80065b4:	7dfb      	ldrb	r3, [r7, #23]
 80065b6:	2b02      	cmp	r3, #2
 80065b8:	d101      	bne.n	80065be <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80065ba:	2302      	movs	r3, #2
 80065bc:	e021      	b.n	8006602 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80065be:	7dfb      	ldrb	r3, [r7, #23]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d002      	beq.n	80065ca <HAL_SDRAM_SendCommand+0x2a>
 80065c4:	7dfb      	ldrb	r3, [r7, #23]
 80065c6:	2b05      	cmp	r3, #5
 80065c8:	d118      	bne.n	80065fc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2202      	movs	r2, #2
 80065ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	68b9      	ldr	r1, [r7, #8]
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fbd8 	bl	8006d90 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d104      	bne.n	80065f2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2205      	movs	r2, #5
 80065ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80065f0:	e006      	b.n	8006600 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80065fa:	e001      	b.n	8006600 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e000      	b.n	8006602 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3718      	adds	r7, #24
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800660a:	b580      	push	{r7, lr}
 800660c:	b082      	sub	sp, #8
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
 8006612:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b02      	cmp	r3, #2
 800661e:	d101      	bne.n	8006624 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006620:	2302      	movs	r3, #2
 8006622:	e016      	b.n	8006652 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b01      	cmp	r3, #1
 800662e:	d10f      	bne.n	8006650 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2202      	movs	r2, #2
 8006634:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6839      	ldr	r1, [r7, #0]
 800663e:	4618      	mov	r0, r3
 8006640:	f000 fbca 	bl	8006dd8 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800664c:	2300      	movs	r3, #0
 800664e:	e000      	b.n	8006652 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
}
 8006652:	4618      	mov	r0, r3
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b082      	sub	sp, #8
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e049      	b.n	8006700 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006672:	b2db      	uxtb	r3, r3
 8006674:	2b00      	cmp	r3, #0
 8006676:	d106      	bne.n	8006686 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f7fa f94d 	bl	8000920 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2202      	movs	r2, #2
 800668a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	3304      	adds	r3, #4
 8006696:	4619      	mov	r1, r3
 8006698:	4610      	mov	r0, r2
 800669a:	f000 f9f5 	bl	8006a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2201      	movs	r2, #1
 80066a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3708      	adds	r7, #8
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b01      	cmp	r3, #1
 800671a:	d001      	beq.n	8006720 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e054      	b.n	80067ca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2202      	movs	r2, #2
 8006724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68da      	ldr	r2, [r3, #12]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f042 0201 	orr.w	r2, r2, #1
 8006736:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a26      	ldr	r2, [pc, #152]	; (80067d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d022      	beq.n	8006788 <HAL_TIM_Base_Start_IT+0x80>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800674a:	d01d      	beq.n	8006788 <HAL_TIM_Base_Start_IT+0x80>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a22      	ldr	r2, [pc, #136]	; (80067dc <HAL_TIM_Base_Start_IT+0xd4>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d018      	beq.n	8006788 <HAL_TIM_Base_Start_IT+0x80>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a21      	ldr	r2, [pc, #132]	; (80067e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d013      	beq.n	8006788 <HAL_TIM_Base_Start_IT+0x80>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a1f      	ldr	r2, [pc, #124]	; (80067e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d00e      	beq.n	8006788 <HAL_TIM_Base_Start_IT+0x80>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a1e      	ldr	r2, [pc, #120]	; (80067e8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d009      	beq.n	8006788 <HAL_TIM_Base_Start_IT+0x80>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a1c      	ldr	r2, [pc, #112]	; (80067ec <HAL_TIM_Base_Start_IT+0xe4>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d004      	beq.n	8006788 <HAL_TIM_Base_Start_IT+0x80>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a1b      	ldr	r2, [pc, #108]	; (80067f0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d115      	bne.n	80067b4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	689a      	ldr	r2, [r3, #8]
 800678e:	4b19      	ldr	r3, [pc, #100]	; (80067f4 <HAL_TIM_Base_Start_IT+0xec>)
 8006790:	4013      	ands	r3, r2
 8006792:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2b06      	cmp	r3, #6
 8006798:	d015      	beq.n	80067c6 <HAL_TIM_Base_Start_IT+0xbe>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067a0:	d011      	beq.n	80067c6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f042 0201 	orr.w	r2, r2, #1
 80067b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067b2:	e008      	b.n	80067c6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f042 0201 	orr.w	r2, r2, #1
 80067c2:	601a      	str	r2, [r3, #0]
 80067c4:	e000      	b.n	80067c8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	40010000 	.word	0x40010000
 80067dc:	40000400 	.word	0x40000400
 80067e0:	40000800 	.word	0x40000800
 80067e4:	40000c00 	.word	0x40000c00
 80067e8:	40010400 	.word	0x40010400
 80067ec:	40014000 	.word	0x40014000
 80067f0:	40001800 	.word	0x40001800
 80067f4:	00010007 	.word	0x00010007

080067f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	f003 0302 	and.w	r3, r3, #2
 800680a:	2b02      	cmp	r3, #2
 800680c:	d122      	bne.n	8006854 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	2b02      	cmp	r3, #2
 800681a:	d11b      	bne.n	8006854 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f06f 0202 	mvn.w	r2, #2
 8006824:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	f003 0303 	and.w	r3, r3, #3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f905 	bl	8006a4a <HAL_TIM_IC_CaptureCallback>
 8006840:	e005      	b.n	800684e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f8f7 	bl	8006a36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 f908 	bl	8006a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	f003 0304 	and.w	r3, r3, #4
 800685e:	2b04      	cmp	r3, #4
 8006860:	d122      	bne.n	80068a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	f003 0304 	and.w	r3, r3, #4
 800686c:	2b04      	cmp	r3, #4
 800686e:	d11b      	bne.n	80068a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f06f 0204 	mvn.w	r2, #4
 8006878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2202      	movs	r2, #2
 800687e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800688a:	2b00      	cmp	r3, #0
 800688c:	d003      	beq.n	8006896 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f8db 	bl	8006a4a <HAL_TIM_IC_CaptureCallback>
 8006894:	e005      	b.n	80068a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 f8cd 	bl	8006a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 f8de 	bl	8006a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	f003 0308 	and.w	r3, r3, #8
 80068b2:	2b08      	cmp	r3, #8
 80068b4:	d122      	bne.n	80068fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	f003 0308 	and.w	r3, r3, #8
 80068c0:	2b08      	cmp	r3, #8
 80068c2:	d11b      	bne.n	80068fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f06f 0208 	mvn.w	r2, #8
 80068cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2204      	movs	r2, #4
 80068d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	69db      	ldr	r3, [r3, #28]
 80068da:	f003 0303 	and.w	r3, r3, #3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 f8b1 	bl	8006a4a <HAL_TIM_IC_CaptureCallback>
 80068e8:	e005      	b.n	80068f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 f8a3 	bl	8006a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 f8b4 	bl	8006a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	f003 0310 	and.w	r3, r3, #16
 8006906:	2b10      	cmp	r3, #16
 8006908:	d122      	bne.n	8006950 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	f003 0310 	and.w	r3, r3, #16
 8006914:	2b10      	cmp	r3, #16
 8006916:	d11b      	bne.n	8006950 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f06f 0210 	mvn.w	r2, #16
 8006920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2208      	movs	r2, #8
 8006926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	69db      	ldr	r3, [r3, #28]
 800692e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006932:	2b00      	cmp	r3, #0
 8006934:	d003      	beq.n	800693e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 f887 	bl	8006a4a <HAL_TIM_IC_CaptureCallback>
 800693c:	e005      	b.n	800694a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f879 	bl	8006a36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 f88a 	bl	8006a5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b01      	cmp	r3, #1
 800695c:	d10e      	bne.n	800697c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	2b01      	cmp	r3, #1
 800696a:	d107      	bne.n	800697c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f06f 0201 	mvn.w	r2, #1
 8006974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7f9 feda 	bl	8000730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006986:	2b80      	cmp	r3, #128	; 0x80
 8006988:	d10e      	bne.n	80069a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68db      	ldr	r3, [r3, #12]
 8006990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006994:	2b80      	cmp	r3, #128	; 0x80
 8006996:	d107      	bne.n	80069a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80069a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 f91a 	bl	8006bdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069b6:	d10e      	bne.n	80069d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c2:	2b80      	cmp	r3, #128	; 0x80
 80069c4:	d107      	bne.n	80069d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80069ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 f90d 	bl	8006bf0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e0:	2b40      	cmp	r3, #64	; 0x40
 80069e2:	d10e      	bne.n	8006a02 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ee:	2b40      	cmp	r3, #64	; 0x40
 80069f0:	d107      	bne.n	8006a02 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80069fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 f838 	bl	8006a72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	f003 0320 	and.w	r3, r3, #32
 8006a0c:	2b20      	cmp	r3, #32
 8006a0e:	d10e      	bne.n	8006a2e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68db      	ldr	r3, [r3, #12]
 8006a16:	f003 0320 	and.w	r3, r3, #32
 8006a1a:	2b20      	cmp	r3, #32
 8006a1c:	d107      	bne.n	8006a2e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f06f 0220 	mvn.w	r2, #32
 8006a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f8cd 	bl	8006bc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a2e:	bf00      	nop
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a36:	b480      	push	{r7}
 8006a38:	b083      	sub	sp, #12
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a3e:	bf00      	nop
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b083      	sub	sp, #12
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a52:	bf00      	nop
 8006a54:	370c      	adds	r7, #12
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b083      	sub	sp, #12
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a66:	bf00      	nop
 8006a68:	370c      	adds	r7, #12
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr

08006a72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a72:	b480      	push	{r7}
 8006a74:	b083      	sub	sp, #12
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a7a:	bf00      	nop
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
	...

08006a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a40      	ldr	r2, [pc, #256]	; (8006b9c <TIM_Base_SetConfig+0x114>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d013      	beq.n	8006ac8 <TIM_Base_SetConfig+0x40>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aa6:	d00f      	beq.n	8006ac8 <TIM_Base_SetConfig+0x40>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a3d      	ldr	r2, [pc, #244]	; (8006ba0 <TIM_Base_SetConfig+0x118>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d00b      	beq.n	8006ac8 <TIM_Base_SetConfig+0x40>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a3c      	ldr	r2, [pc, #240]	; (8006ba4 <TIM_Base_SetConfig+0x11c>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d007      	beq.n	8006ac8 <TIM_Base_SetConfig+0x40>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a3b      	ldr	r2, [pc, #236]	; (8006ba8 <TIM_Base_SetConfig+0x120>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d003      	beq.n	8006ac8 <TIM_Base_SetConfig+0x40>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a3a      	ldr	r2, [pc, #232]	; (8006bac <TIM_Base_SetConfig+0x124>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d108      	bne.n	8006ada <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ace:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a2f      	ldr	r2, [pc, #188]	; (8006b9c <TIM_Base_SetConfig+0x114>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d02b      	beq.n	8006b3a <TIM_Base_SetConfig+0xb2>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ae8:	d027      	beq.n	8006b3a <TIM_Base_SetConfig+0xb2>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a2c      	ldr	r2, [pc, #176]	; (8006ba0 <TIM_Base_SetConfig+0x118>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d023      	beq.n	8006b3a <TIM_Base_SetConfig+0xb2>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a2b      	ldr	r2, [pc, #172]	; (8006ba4 <TIM_Base_SetConfig+0x11c>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d01f      	beq.n	8006b3a <TIM_Base_SetConfig+0xb2>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a2a      	ldr	r2, [pc, #168]	; (8006ba8 <TIM_Base_SetConfig+0x120>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d01b      	beq.n	8006b3a <TIM_Base_SetConfig+0xb2>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a29      	ldr	r2, [pc, #164]	; (8006bac <TIM_Base_SetConfig+0x124>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d017      	beq.n	8006b3a <TIM_Base_SetConfig+0xb2>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a28      	ldr	r2, [pc, #160]	; (8006bb0 <TIM_Base_SetConfig+0x128>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d013      	beq.n	8006b3a <TIM_Base_SetConfig+0xb2>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a27      	ldr	r2, [pc, #156]	; (8006bb4 <TIM_Base_SetConfig+0x12c>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d00f      	beq.n	8006b3a <TIM_Base_SetConfig+0xb2>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a26      	ldr	r2, [pc, #152]	; (8006bb8 <TIM_Base_SetConfig+0x130>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d00b      	beq.n	8006b3a <TIM_Base_SetConfig+0xb2>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a25      	ldr	r2, [pc, #148]	; (8006bbc <TIM_Base_SetConfig+0x134>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d007      	beq.n	8006b3a <TIM_Base_SetConfig+0xb2>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a24      	ldr	r2, [pc, #144]	; (8006bc0 <TIM_Base_SetConfig+0x138>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d003      	beq.n	8006b3a <TIM_Base_SetConfig+0xb2>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a23      	ldr	r2, [pc, #140]	; (8006bc4 <TIM_Base_SetConfig+0x13c>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d108      	bne.n	8006b4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	689a      	ldr	r2, [r3, #8]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a0a      	ldr	r2, [pc, #40]	; (8006b9c <TIM_Base_SetConfig+0x114>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d003      	beq.n	8006b80 <TIM_Base_SetConfig+0xf8>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a0c      	ldr	r2, [pc, #48]	; (8006bac <TIM_Base_SetConfig+0x124>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d103      	bne.n	8006b88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	691a      	ldr	r2, [r3, #16]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	615a      	str	r2, [r3, #20]
}
 8006b8e:	bf00      	nop
 8006b90:	3714      	adds	r7, #20
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	40010000 	.word	0x40010000
 8006ba0:	40000400 	.word	0x40000400
 8006ba4:	40000800 	.word	0x40000800
 8006ba8:	40000c00 	.word	0x40000c00
 8006bac:	40010400 	.word	0x40010400
 8006bb0:	40014000 	.word	0x40014000
 8006bb4:	40014400 	.word	0x40014400
 8006bb8:	40014800 	.word	0x40014800
 8006bbc:	40001800 	.word	0x40001800
 8006bc0:	40001c00 	.word	0x40001c00
 8006bc4:	40002000 	.word	0x40002000

08006bc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d121      	bne.n	8006c5a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	4b27      	ldr	r3, [pc, #156]	; (8006cb8 <FMC_SDRAM_Init+0xb4>)
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	6851      	ldr	r1, [r2, #4]
 8006c22:	683a      	ldr	r2, [r7, #0]
 8006c24:	6892      	ldr	r2, [r2, #8]
 8006c26:	4311      	orrs	r1, r2
 8006c28:	683a      	ldr	r2, [r7, #0]
 8006c2a:	68d2      	ldr	r2, [r2, #12]
 8006c2c:	4311      	orrs	r1, r2
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	6912      	ldr	r2, [r2, #16]
 8006c32:	4311      	orrs	r1, r2
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	6952      	ldr	r2, [r2, #20]
 8006c38:	4311      	orrs	r1, r2
 8006c3a:	683a      	ldr	r2, [r7, #0]
 8006c3c:	6992      	ldr	r2, [r2, #24]
 8006c3e:	4311      	orrs	r1, r2
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	69d2      	ldr	r2, [r2, #28]
 8006c44:	4311      	orrs	r1, r2
 8006c46:	683a      	ldr	r2, [r7, #0]
 8006c48:	6a12      	ldr	r2, [r2, #32]
 8006c4a:	4311      	orrs	r1, r2
 8006c4c:	683a      	ldr	r2, [r7, #0]
 8006c4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c50:	430a      	orrs	r2, r1
 8006c52:	431a      	orrs	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	601a      	str	r2, [r3, #0]
 8006c58:	e026      	b.n	8006ca8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	69d9      	ldr	r1, [r3, #28]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	4319      	orrs	r1, r3
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c70:	430b      	orrs	r3, r1
 8006c72:	431a      	orrs	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	4b0e      	ldr	r3, [pc, #56]	; (8006cb8 <FMC_SDRAM_Init+0xb4>)
 8006c7e:	4013      	ands	r3, r2
 8006c80:	683a      	ldr	r2, [r7, #0]
 8006c82:	6851      	ldr	r1, [r2, #4]
 8006c84:	683a      	ldr	r2, [r7, #0]
 8006c86:	6892      	ldr	r2, [r2, #8]
 8006c88:	4311      	orrs	r1, r2
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	68d2      	ldr	r2, [r2, #12]
 8006c8e:	4311      	orrs	r1, r2
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	6912      	ldr	r2, [r2, #16]
 8006c94:	4311      	orrs	r1, r2
 8006c96:	683a      	ldr	r2, [r7, #0]
 8006c98:	6952      	ldr	r2, [r2, #20]
 8006c9a:	4311      	orrs	r1, r2
 8006c9c:	683a      	ldr	r2, [r7, #0]
 8006c9e:	6992      	ldr	r2, [r2, #24]
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	431a      	orrs	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	370c      	adds	r7, #12
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr
 8006cb6:	bf00      	nop
 8006cb8:	ffff8000 	.word	0xffff8000

08006cbc <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d128      	bne.n	8006d20 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	1e59      	subs	r1, r3, #1
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	011b      	lsls	r3, r3, #4
 8006ce4:	4319      	orrs	r1, r3
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	3b01      	subs	r3, #1
 8006cec:	021b      	lsls	r3, r3, #8
 8006cee:	4319      	orrs	r1, r3
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	031b      	lsls	r3, r3, #12
 8006cf8:	4319      	orrs	r1, r3
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	041b      	lsls	r3, r3, #16
 8006d02:	4319      	orrs	r1, r3
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	695b      	ldr	r3, [r3, #20]
 8006d08:	3b01      	subs	r3, #1
 8006d0a:	051b      	lsls	r3, r3, #20
 8006d0c:	4319      	orrs	r1, r3
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	3b01      	subs	r3, #1
 8006d14:	061b      	lsls	r3, r3, #24
 8006d16:	430b      	orrs	r3, r1
 8006d18:	431a      	orrs	r2, r3
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	609a      	str	r2, [r3, #8]
 8006d1e:	e02d      	b.n	8006d7c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	689a      	ldr	r2, [r3, #8]
 8006d24:	4b19      	ldr	r3, [pc, #100]	; (8006d8c <FMC_SDRAM_Timing_Init+0xd0>)
 8006d26:	4013      	ands	r3, r2
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	68d2      	ldr	r2, [r2, #12]
 8006d2c:	3a01      	subs	r2, #1
 8006d2e:	0311      	lsls	r1, r2, #12
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	6952      	ldr	r2, [r2, #20]
 8006d34:	3a01      	subs	r2, #1
 8006d36:	0512      	lsls	r2, r2, #20
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	431a      	orrs	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	1e59      	subs	r1, r3, #1
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	011b      	lsls	r3, r3, #4
 8006d56:	4319      	orrs	r1, r3
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	021b      	lsls	r3, r3, #8
 8006d60:	4319      	orrs	r1, r3
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	3b01      	subs	r3, #1
 8006d68:	041b      	lsls	r3, r3, #16
 8006d6a:	4319      	orrs	r1, r3
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	699b      	ldr	r3, [r3, #24]
 8006d70:	3b01      	subs	r3, #1
 8006d72:	061b      	lsls	r3, r3, #24
 8006d74:	430b      	orrs	r3, r1
 8006d76:	431a      	orrs	r2, r3
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3714      	adds	r7, #20
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	ff0f0fff 	.word	0xff0f0fff

08006d90 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	60f8      	str	r0, [r7, #12]
 8006d98:	60b9      	str	r1, [r7, #8]
 8006d9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	691a      	ldr	r2, [r3, #16]
 8006da0:	4b0c      	ldr	r3, [pc, #48]	; (8006dd4 <FMC_SDRAM_SendCommand+0x44>)
 8006da2:	4013      	ands	r3, r2
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	6811      	ldr	r1, [r2, #0]
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	6852      	ldr	r2, [r2, #4]
 8006dac:	4311      	orrs	r1, r2
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	6892      	ldr	r2, [r2, #8]
 8006db2:	3a01      	subs	r2, #1
 8006db4:	0152      	lsls	r2, r2, #5
 8006db6:	4311      	orrs	r1, r2
 8006db8:	68ba      	ldr	r2, [r7, #8]
 8006dba:	68d2      	ldr	r2, [r2, #12]
 8006dbc:	0252      	lsls	r2, r2, #9
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr
 8006dd4:	ffc00000 	.word	0xffc00000

08006dd8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	695a      	ldr	r2, [r3, #20]
 8006de6:	4b07      	ldr	r3, [pc, #28]	; (8006e04 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8006de8:	4013      	ands	r3, r2
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	0052      	lsls	r2, r2, #1
 8006dee:	431a      	orrs	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	370c      	adds	r7, #12
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	ffffc001 	.word	0xffffc001

08006e08 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b087      	sub	sp, #28
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	4613      	mov	r3, r2
 8006e14:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006e16:	79fb      	ldrb	r3, [r7, #7]
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d165      	bne.n	8006ee8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	4a41      	ldr	r2, [pc, #260]	; (8006f24 <USB_SetTurnaroundTime+0x11c>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d906      	bls.n	8006e32 <USB_SetTurnaroundTime+0x2a>
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	4a40      	ldr	r2, [pc, #256]	; (8006f28 <USB_SetTurnaroundTime+0x120>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d202      	bcs.n	8006e32 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006e2c:	230f      	movs	r3, #15
 8006e2e:	617b      	str	r3, [r7, #20]
 8006e30:	e062      	b.n	8006ef8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	4a3c      	ldr	r2, [pc, #240]	; (8006f28 <USB_SetTurnaroundTime+0x120>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d306      	bcc.n	8006e48 <USB_SetTurnaroundTime+0x40>
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	4a3b      	ldr	r2, [pc, #236]	; (8006f2c <USB_SetTurnaroundTime+0x124>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d202      	bcs.n	8006e48 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006e42:	230e      	movs	r3, #14
 8006e44:	617b      	str	r3, [r7, #20]
 8006e46:	e057      	b.n	8006ef8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	4a38      	ldr	r2, [pc, #224]	; (8006f2c <USB_SetTurnaroundTime+0x124>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d306      	bcc.n	8006e5e <USB_SetTurnaroundTime+0x56>
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	4a37      	ldr	r2, [pc, #220]	; (8006f30 <USB_SetTurnaroundTime+0x128>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d202      	bcs.n	8006e5e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006e58:	230d      	movs	r3, #13
 8006e5a:	617b      	str	r3, [r7, #20]
 8006e5c:	e04c      	b.n	8006ef8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	4a33      	ldr	r2, [pc, #204]	; (8006f30 <USB_SetTurnaroundTime+0x128>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d306      	bcc.n	8006e74 <USB_SetTurnaroundTime+0x6c>
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	4a32      	ldr	r2, [pc, #200]	; (8006f34 <USB_SetTurnaroundTime+0x12c>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d802      	bhi.n	8006e74 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006e6e:	230c      	movs	r3, #12
 8006e70:	617b      	str	r3, [r7, #20]
 8006e72:	e041      	b.n	8006ef8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	4a2f      	ldr	r2, [pc, #188]	; (8006f34 <USB_SetTurnaroundTime+0x12c>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d906      	bls.n	8006e8a <USB_SetTurnaroundTime+0x82>
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	4a2e      	ldr	r2, [pc, #184]	; (8006f38 <USB_SetTurnaroundTime+0x130>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d802      	bhi.n	8006e8a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006e84:	230b      	movs	r3, #11
 8006e86:	617b      	str	r3, [r7, #20]
 8006e88:	e036      	b.n	8006ef8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	4a2a      	ldr	r2, [pc, #168]	; (8006f38 <USB_SetTurnaroundTime+0x130>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d906      	bls.n	8006ea0 <USB_SetTurnaroundTime+0x98>
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	4a29      	ldr	r2, [pc, #164]	; (8006f3c <USB_SetTurnaroundTime+0x134>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d802      	bhi.n	8006ea0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006e9a:	230a      	movs	r3, #10
 8006e9c:	617b      	str	r3, [r7, #20]
 8006e9e:	e02b      	b.n	8006ef8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	4a26      	ldr	r2, [pc, #152]	; (8006f3c <USB_SetTurnaroundTime+0x134>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d906      	bls.n	8006eb6 <USB_SetTurnaroundTime+0xae>
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	4a25      	ldr	r2, [pc, #148]	; (8006f40 <USB_SetTurnaroundTime+0x138>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d202      	bcs.n	8006eb6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006eb0:	2309      	movs	r3, #9
 8006eb2:	617b      	str	r3, [r7, #20]
 8006eb4:	e020      	b.n	8006ef8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	4a21      	ldr	r2, [pc, #132]	; (8006f40 <USB_SetTurnaroundTime+0x138>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d306      	bcc.n	8006ecc <USB_SetTurnaroundTime+0xc4>
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	4a20      	ldr	r2, [pc, #128]	; (8006f44 <USB_SetTurnaroundTime+0x13c>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d802      	bhi.n	8006ecc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006ec6:	2308      	movs	r3, #8
 8006ec8:	617b      	str	r3, [r7, #20]
 8006eca:	e015      	b.n	8006ef8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	4a1d      	ldr	r2, [pc, #116]	; (8006f44 <USB_SetTurnaroundTime+0x13c>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d906      	bls.n	8006ee2 <USB_SetTurnaroundTime+0xda>
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	4a1c      	ldr	r2, [pc, #112]	; (8006f48 <USB_SetTurnaroundTime+0x140>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d202      	bcs.n	8006ee2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006edc:	2307      	movs	r3, #7
 8006ede:	617b      	str	r3, [r7, #20]
 8006ee0:	e00a      	b.n	8006ef8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006ee2:	2306      	movs	r3, #6
 8006ee4:	617b      	str	r3, [r7, #20]
 8006ee6:	e007      	b.n	8006ef8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006ee8:	79fb      	ldrb	r3, [r7, #7]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d102      	bne.n	8006ef4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006eee:	2309      	movs	r3, #9
 8006ef0:	617b      	str	r3, [r7, #20]
 8006ef2:	e001      	b.n	8006ef8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006ef4:	2309      	movs	r3, #9
 8006ef6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	68da      	ldr	r2, [r3, #12]
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	029b      	lsls	r3, r3, #10
 8006f0c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006f10:	431a      	orrs	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	371c      	adds	r7, #28
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr
 8006f24:	00d8acbf 	.word	0x00d8acbf
 8006f28:	00e4e1c0 	.word	0x00e4e1c0
 8006f2c:	00f42400 	.word	0x00f42400
 8006f30:	01067380 	.word	0x01067380
 8006f34:	011a499f 	.word	0x011a499f
 8006f38:	01312cff 	.word	0x01312cff
 8006f3c:	014ca43f 	.word	0x014ca43f
 8006f40:	016e3600 	.word	0x016e3600
 8006f44:	01a6ab1f 	.word	0x01a6ab1f
 8006f48:	01e84800 	.word	0x01e84800

08006f4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f56:	2300      	movs	r3, #0
 8006f58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	4a13      	ldr	r2, [pc, #76]	; (8006fb0 <USB_FlushTxFifo+0x64>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d901      	bls.n	8006f6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	e01b      	b.n	8006fa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	daf2      	bge.n	8006f5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f74:	2300      	movs	r3, #0
 8006f76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	019b      	lsls	r3, r3, #6
 8006f7c:	f043 0220 	orr.w	r2, r3, #32
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	3301      	adds	r3, #1
 8006f88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	4a08      	ldr	r2, [pc, #32]	; (8006fb0 <USB_FlushTxFifo+0x64>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d901      	bls.n	8006f96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e006      	b.n	8006fa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	f003 0320 	and.w	r3, r3, #32
 8006f9e:	2b20      	cmp	r3, #32
 8006fa0:	d0f0      	beq.n	8006f84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3714      	adds	r7, #20
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr
 8006fb0:	00030d40 	.word	0x00030d40

08006fb4 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b087      	sub	sp, #28
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	f003 0306 	and.w	r3, r3, #6
 8006fcc:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d102      	bne.n	8006fda <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	75fb      	strb	r3, [r7, #23]
 8006fd8:	e00a      	b.n	8006ff0 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d002      	beq.n	8006fe6 <USB_GetDevSpeed+0x32>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2b06      	cmp	r3, #6
 8006fe4:	d102      	bne.n	8006fec <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006fe6:	2302      	movs	r3, #2
 8006fe8:	75fb      	strb	r3, [r7, #23]
 8006fea:	e001      	b.n	8006ff0 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006fec:	230f      	movs	r3, #15
 8006fee:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	371c      	adds	r7, #28
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr

08006ffe <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ffe:	b480      	push	{r7}
 8007000:	b087      	sub	sp, #28
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
 8007006:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007008:	2300      	movs	r3, #0
 800700a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800700c:	2300      	movs	r3, #0
 800700e:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	785b      	ldrb	r3, [r3, #1]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d14a      	bne.n	80070b2 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	015a      	lsls	r2, r3, #5
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	4413      	add	r3, r2
 8007026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007030:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007034:	f040 8086 	bne.w	8007144 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	015a      	lsls	r2, r3, #5
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	4413      	add	r3, r2
 8007042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	683a      	ldr	r2, [r7, #0]
 800704a:	7812      	ldrb	r2, [r2, #0]
 800704c:	0151      	lsls	r1, r2, #5
 800704e:	693a      	ldr	r2, [r7, #16]
 8007050:	440a      	add	r2, r1
 8007052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007056:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800705a:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	4413      	add	r3, r2
 8007066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	7812      	ldrb	r2, [r2, #0]
 8007070:	0151      	lsls	r1, r2, #5
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	440a      	add	r2, r1
 8007076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800707a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800707e:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	3301      	adds	r3, #1
 8007084:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f242 7210 	movw	r2, #10000	; 0x2710
 800708c:	4293      	cmp	r3, r2
 800708e:	d902      	bls.n	8007096 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	75fb      	strb	r3, [r7, #23]
          break;
 8007094:	e056      	b.n	8007144 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070ae:	d0e7      	beq.n	8007080 <USB_EPStopXfer+0x82>
 80070b0:	e048      	b.n	8007144 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	015a      	lsls	r2, r3, #5
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070ca:	d13b      	bne.n	8007144 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	015a      	lsls	r2, r3, #5
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	4413      	add	r3, r2
 80070d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	683a      	ldr	r2, [r7, #0]
 80070de:	7812      	ldrb	r2, [r2, #0]
 80070e0:	0151      	lsls	r1, r2, #5
 80070e2:	693a      	ldr	r2, [r7, #16]
 80070e4:	440a      	add	r2, r1
 80070e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	015a      	lsls	r2, r3, #5
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	683a      	ldr	r2, [r7, #0]
 8007102:	7812      	ldrb	r2, [r2, #0]
 8007104:	0151      	lsls	r1, r2, #5
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	440a      	add	r2, r1
 800710a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800710e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007112:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	3301      	adds	r3, #1
 8007118:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f242 7210 	movw	r2, #10000	; 0x2710
 8007120:	4293      	cmp	r3, r2
 8007122:	d902      	bls.n	800712a <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	75fb      	strb	r3, [r7, #23]
          break;
 8007128:	e00c      	b.n	8007144 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	015a      	lsls	r2, r3, #5
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	4413      	add	r3, r2
 8007134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800713e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007142:	d0e7      	beq.n	8007114 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007144:	7dfb      	ldrb	r3, [r7, #23]
}
 8007146:	4618      	mov	r0, r3
 8007148:	371c      	adds	r7, #28
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr

08007152 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007152:	b480      	push	{r7}
 8007154:	b089      	sub	sp, #36	; 0x24
 8007156:	af00      	add	r7, sp, #0
 8007158:	60f8      	str	r0, [r7, #12]
 800715a:	60b9      	str	r1, [r7, #8]
 800715c:	4611      	mov	r1, r2
 800715e:	461a      	mov	r2, r3
 8007160:	460b      	mov	r3, r1
 8007162:	71fb      	strb	r3, [r7, #7]
 8007164:	4613      	mov	r3, r2
 8007166:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007170:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007174:	2b00      	cmp	r3, #0
 8007176:	d123      	bne.n	80071c0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007178:	88bb      	ldrh	r3, [r7, #4]
 800717a:	3303      	adds	r3, #3
 800717c:	089b      	lsrs	r3, r3, #2
 800717e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007180:	2300      	movs	r3, #0
 8007182:	61bb      	str	r3, [r7, #24]
 8007184:	e018      	b.n	80071b8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007186:	79fb      	ldrb	r3, [r7, #7]
 8007188:	031a      	lsls	r2, r3, #12
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	4413      	add	r3, r2
 800718e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007192:	461a      	mov	r2, r3
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	6013      	str	r3, [r2, #0]
      pSrc++;
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	3301      	adds	r3, #1
 800719e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	3301      	adds	r3, #1
 80071a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	3301      	adds	r3, #1
 80071aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	3301      	adds	r3, #1
 80071b0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	3301      	adds	r3, #1
 80071b6:	61bb      	str	r3, [r7, #24]
 80071b8:	69ba      	ldr	r2, [r7, #24]
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d3e2      	bcc.n	8007186 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3724      	adds	r7, #36	; 0x24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b08b      	sub	sp, #44	; 0x2c
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	60f8      	str	r0, [r7, #12]
 80071d6:	60b9      	str	r1, [r7, #8]
 80071d8:	4613      	mov	r3, r2
 80071da:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80071e4:	88fb      	ldrh	r3, [r7, #6]
 80071e6:	089b      	lsrs	r3, r3, #2
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80071ec:	88fb      	ldrh	r3, [r7, #6]
 80071ee:	f003 0303 	and.w	r3, r3, #3
 80071f2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80071f4:	2300      	movs	r3, #0
 80071f6:	623b      	str	r3, [r7, #32]
 80071f8:	e014      	b.n	8007224 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007204:	601a      	str	r2, [r3, #0]
    pDest++;
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	3301      	adds	r3, #1
 800720a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800720c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720e:	3301      	adds	r3, #1
 8007210:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007214:	3301      	adds	r3, #1
 8007216:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721a:	3301      	adds	r3, #1
 800721c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800721e:	6a3b      	ldr	r3, [r7, #32]
 8007220:	3301      	adds	r3, #1
 8007222:	623b      	str	r3, [r7, #32]
 8007224:	6a3a      	ldr	r2, [r7, #32]
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	429a      	cmp	r2, r3
 800722a:	d3e6      	bcc.n	80071fa <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800722c:	8bfb      	ldrh	r3, [r7, #30]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d01e      	beq.n	8007270 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007232:	2300      	movs	r3, #0
 8007234:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800723c:	461a      	mov	r2, r3
 800723e:	f107 0310 	add.w	r3, r7, #16
 8007242:	6812      	ldr	r2, [r2, #0]
 8007244:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	b2db      	uxtb	r3, r3
 800724c:	00db      	lsls	r3, r3, #3
 800724e:	fa22 f303 	lsr.w	r3, r2, r3
 8007252:	b2da      	uxtb	r2, r3
 8007254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007256:	701a      	strb	r2, [r3, #0]
      i++;
 8007258:	6a3b      	ldr	r3, [r7, #32]
 800725a:	3301      	adds	r3, #1
 800725c:	623b      	str	r3, [r7, #32]
      pDest++;
 800725e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007260:	3301      	adds	r3, #1
 8007262:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007264:	8bfb      	ldrh	r3, [r7, #30]
 8007266:	3b01      	subs	r3, #1
 8007268:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800726a:	8bfb      	ldrh	r3, [r7, #30]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1ea      	bne.n	8007246 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007272:	4618      	mov	r0, r3
 8007274:	372c      	adds	r7, #44	; 0x2c
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800727e:	b480      	push	{r7}
 8007280:	b085      	sub	sp, #20
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	695b      	ldr	r3, [r3, #20]
 800728a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	4013      	ands	r3, r2
 8007294:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007296:	68fb      	ldr	r3, [r7, #12]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3714      	adds	r7, #20
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b085      	sub	sp, #20
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072b6:	699b      	ldr	r3, [r3, #24]
 80072b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c0:	69db      	ldr	r3, [r3, #28]
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	4013      	ands	r3, r2
 80072c6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	0c1b      	lsrs	r3, r3, #16
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3714      	adds	r7, #20
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072f4:	69db      	ldr	r3, [r3, #28]
 80072f6:	68ba      	ldr	r2, [r7, #8]
 80072f8:	4013      	ands	r3, r2
 80072fa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	b29b      	uxth	r3, r3
}
 8007300:	4618      	mov	r0, r3
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	460b      	mov	r3, r1
 8007316:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800731c:	78fb      	ldrb	r3, [r7, #3]
 800731e:	015a      	lsls	r2, r3, #5
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	4413      	add	r3, r2
 8007324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007332:	695b      	ldr	r3, [r3, #20]
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	4013      	ands	r3, r2
 8007338:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800733a:	68bb      	ldr	r3, [r7, #8]
}
 800733c:	4618      	mov	r0, r3
 800733e:	3714      	adds	r7, #20
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007348:	b480      	push	{r7}
 800734a:	b087      	sub	sp, #28
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	460b      	mov	r3, r1
 8007352:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800736a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800736c:	78fb      	ldrb	r3, [r7, #3]
 800736e:	f003 030f 	and.w	r3, r3, #15
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	fa22 f303 	lsr.w	r3, r2, r3
 8007378:	01db      	lsls	r3, r3, #7
 800737a:	b2db      	uxtb	r3, r3
 800737c:	693a      	ldr	r2, [r7, #16]
 800737e:	4313      	orrs	r3, r2
 8007380:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007382:	78fb      	ldrb	r3, [r7, #3]
 8007384:	015a      	lsls	r2, r3, #5
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	4413      	add	r3, r2
 800738a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	4013      	ands	r3, r2
 8007394:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007396:	68bb      	ldr	r3, [r7, #8]
}
 8007398:	4618      	mov	r0, r3
 800739a:	371c      	adds	r7, #28
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	f003 0301 	and.w	r3, r3, #1
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	370c      	adds	r7, #12
 80073b8:	46bd      	mov	sp, r7
 80073ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073be:	4770      	bx	lr

080073c0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073da:	4619      	mov	r1, r3
 80073dc:	4b09      	ldr	r3, [pc, #36]	; (8007404 <USB_ActivateSetup+0x44>)
 80073de:	4013      	ands	r3, r2
 80073e0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr
 8007404:	fffff800 	.word	0xfffff800

08007408 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007408:	b480      	push	{r7}
 800740a:	b087      	sub	sp, #28
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	460b      	mov	r3, r1
 8007412:	607a      	str	r2, [r7, #4]
 8007414:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	333c      	adds	r3, #60	; 0x3c
 800741e:	3304      	adds	r3, #4
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	4a26      	ldr	r2, [pc, #152]	; (80074c0 <USB_EP0_OutStart+0xb8>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d90a      	bls.n	8007442 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007438:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800743c:	d101      	bne.n	8007442 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800743e:	2300      	movs	r3, #0
 8007440:	e037      	b.n	80074b2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007448:	461a      	mov	r2, r3
 800744a:	2300      	movs	r3, #0
 800744c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800745c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007460:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007470:	f043 0318 	orr.w	r3, r3, #24
 8007474:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	697a      	ldr	r2, [r7, #20]
 8007480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007484:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007488:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800748a:	7afb      	ldrb	r3, [r7, #11]
 800748c:	2b01      	cmp	r3, #1
 800748e:	d10f      	bne.n	80074b0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007496:	461a      	mov	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	697a      	ldr	r2, [r7, #20]
 80074a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074aa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80074ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	371c      	adds	r7, #28
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	4f54300a 	.word	0x4f54300a

080074c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80074c4:	b480      	push	{r7}
 80074c6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80074c8:	bf00      	nop
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
	...

080074d4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074da:	f3ef 8305 	mrs	r3, IPSR
 80074de:	60bb      	str	r3, [r7, #8]
  return(result);
 80074e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10f      	bne.n	8007506 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074e6:	f3ef 8310 	mrs	r3, PRIMASK
 80074ea:	607b      	str	r3, [r7, #4]
  return(result);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d105      	bne.n	80074fe <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80074f2:	f3ef 8311 	mrs	r3, BASEPRI
 80074f6:	603b      	str	r3, [r7, #0]
  return(result);
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d007      	beq.n	800750e <osKernelInitialize+0x3a>
 80074fe:	4b0e      	ldr	r3, [pc, #56]	; (8007538 <osKernelInitialize+0x64>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2b02      	cmp	r3, #2
 8007504:	d103      	bne.n	800750e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007506:	f06f 0305 	mvn.w	r3, #5
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	e00c      	b.n	8007528 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800750e:	4b0a      	ldr	r3, [pc, #40]	; (8007538 <osKernelInitialize+0x64>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d105      	bne.n	8007522 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007516:	4b08      	ldr	r3, [pc, #32]	; (8007538 <osKernelInitialize+0x64>)
 8007518:	2201      	movs	r2, #1
 800751a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800751c:	2300      	movs	r3, #0
 800751e:	60fb      	str	r3, [r7, #12]
 8007520:	e002      	b.n	8007528 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007522:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007526:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007528:	68fb      	ldr	r3, [r7, #12]
}
 800752a:	4618      	mov	r0, r3
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	200009f4 	.word	0x200009f4

0800753c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007542:	f3ef 8305 	mrs	r3, IPSR
 8007546:	60bb      	str	r3, [r7, #8]
  return(result);
 8007548:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10f      	bne.n	800756e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800754e:	f3ef 8310 	mrs	r3, PRIMASK
 8007552:	607b      	str	r3, [r7, #4]
  return(result);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d105      	bne.n	8007566 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800755a:	f3ef 8311 	mrs	r3, BASEPRI
 800755e:	603b      	str	r3, [r7, #0]
  return(result);
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d007      	beq.n	8007576 <osKernelStart+0x3a>
 8007566:	4b0f      	ldr	r3, [pc, #60]	; (80075a4 <osKernelStart+0x68>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2b02      	cmp	r3, #2
 800756c:	d103      	bne.n	8007576 <osKernelStart+0x3a>
    stat = osErrorISR;
 800756e:	f06f 0305 	mvn.w	r3, #5
 8007572:	60fb      	str	r3, [r7, #12]
 8007574:	e010      	b.n	8007598 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007576:	4b0b      	ldr	r3, [pc, #44]	; (80075a4 <osKernelStart+0x68>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d109      	bne.n	8007592 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800757e:	f7ff ffa1 	bl	80074c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007582:	4b08      	ldr	r3, [pc, #32]	; (80075a4 <osKernelStart+0x68>)
 8007584:	2202      	movs	r2, #2
 8007586:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007588:	f001 f8b6 	bl	80086f8 <vTaskStartScheduler>
      stat = osOK;
 800758c:	2300      	movs	r3, #0
 800758e:	60fb      	str	r3, [r7, #12]
 8007590:	e002      	b.n	8007598 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8007592:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007596:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007598:	68fb      	ldr	r3, [r7, #12]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	200009f4 	.word	0x200009f4

080075a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b090      	sub	sp, #64	; 0x40
 80075ac:	af04      	add	r7, sp, #16
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80075b4:	2300      	movs	r3, #0
 80075b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075b8:	f3ef 8305 	mrs	r3, IPSR
 80075bc:	61fb      	str	r3, [r7, #28]
  return(result);
 80075be:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f040 808f 	bne.w	80076e4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075c6:	f3ef 8310 	mrs	r3, PRIMASK
 80075ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d105      	bne.n	80075de <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80075d2:	f3ef 8311 	mrs	r3, BASEPRI
 80075d6:	617b      	str	r3, [r7, #20]
  return(result);
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d003      	beq.n	80075e6 <osThreadNew+0x3e>
 80075de:	4b44      	ldr	r3, [pc, #272]	; (80076f0 <osThreadNew+0x148>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d07e      	beq.n	80076e4 <osThreadNew+0x13c>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d07b      	beq.n	80076e4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80075ec:	2380      	movs	r3, #128	; 0x80
 80075ee:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80075f0:	2318      	movs	r3, #24
 80075f2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80075f4:	2300      	movs	r3, #0
 80075f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80075f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075fc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d045      	beq.n	8007690 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d002      	beq.n	8007612 <osThreadNew+0x6a>
        name = attr->name;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d002      	beq.n	8007620 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	2b00      	cmp	r3, #0
 8007624:	d008      	beq.n	8007638 <osThreadNew+0x90>
 8007626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007628:	2b38      	cmp	r3, #56	; 0x38
 800762a:	d805      	bhi.n	8007638 <osThreadNew+0x90>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	f003 0301 	and.w	r3, r3, #1
 8007634:	2b00      	cmp	r3, #0
 8007636:	d001      	beq.n	800763c <osThreadNew+0x94>
        return (NULL);
 8007638:	2300      	movs	r3, #0
 800763a:	e054      	b.n	80076e6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d003      	beq.n	800764c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	089b      	lsrs	r3, r3, #2
 800764a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00e      	beq.n	8007672 <osThreadNew+0xca>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	2b5f      	cmp	r3, #95	; 0x5f
 800765a:	d90a      	bls.n	8007672 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007660:	2b00      	cmp	r3, #0
 8007662:	d006      	beq.n	8007672 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	695b      	ldr	r3, [r3, #20]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d002      	beq.n	8007672 <osThreadNew+0xca>
        mem = 1;
 800766c:	2301      	movs	r3, #1
 800766e:	623b      	str	r3, [r7, #32]
 8007670:	e010      	b.n	8007694 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10c      	bne.n	8007694 <osThreadNew+0xec>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d108      	bne.n	8007694 <osThreadNew+0xec>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d104      	bne.n	8007694 <osThreadNew+0xec>
          mem = 0;
 800768a:	2300      	movs	r3, #0
 800768c:	623b      	str	r3, [r7, #32]
 800768e:	e001      	b.n	8007694 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8007690:	2300      	movs	r3, #0
 8007692:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8007694:	6a3b      	ldr	r3, [r7, #32]
 8007696:	2b01      	cmp	r3, #1
 8007698:	d110      	bne.n	80076bc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80076a2:	9202      	str	r2, [sp, #8]
 80076a4:	9301      	str	r3, [sp, #4]
 80076a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f000 fe3f 	bl	8008334 <xTaskCreateStatic>
 80076b6:	4603      	mov	r3, r0
 80076b8:	613b      	str	r3, [r7, #16]
 80076ba:	e013      	b.n	80076e4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80076bc:	6a3b      	ldr	r3, [r7, #32]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d110      	bne.n	80076e4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80076c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	f107 0310 	add.w	r3, r7, #16
 80076ca:	9301      	str	r3, [sp, #4]
 80076cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ce:	9300      	str	r3, [sp, #0]
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 fe90 	bl	80083fa <xTaskCreate>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d001      	beq.n	80076e4 <osThreadNew+0x13c>
          hTask = NULL;
 80076e0:	2300      	movs	r3, #0
 80076e2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80076e4:	693b      	ldr	r3, [r7, #16]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3730      	adds	r7, #48	; 0x30
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	200009f4 	.word	0x200009f4

080076f4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b086      	sub	sp, #24
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076fc:	f3ef 8305 	mrs	r3, IPSR
 8007700:	613b      	str	r3, [r7, #16]
  return(result);
 8007702:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007704:	2b00      	cmp	r3, #0
 8007706:	d10f      	bne.n	8007728 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007708:	f3ef 8310 	mrs	r3, PRIMASK
 800770c:	60fb      	str	r3, [r7, #12]
  return(result);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d105      	bne.n	8007720 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007714:	f3ef 8311 	mrs	r3, BASEPRI
 8007718:	60bb      	str	r3, [r7, #8]
  return(result);
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d007      	beq.n	8007730 <osDelay+0x3c>
 8007720:	4b0a      	ldr	r3, [pc, #40]	; (800774c <osDelay+0x58>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2b02      	cmp	r3, #2
 8007726:	d103      	bne.n	8007730 <osDelay+0x3c>
    stat = osErrorISR;
 8007728:	f06f 0305 	mvn.w	r3, #5
 800772c:	617b      	str	r3, [r7, #20]
 800772e:	e007      	b.n	8007740 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007730:	2300      	movs	r3, #0
 8007732:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d002      	beq.n	8007740 <osDelay+0x4c>
      vTaskDelay(ticks);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 ffa6 	bl	800868c <vTaskDelay>
    }
  }

  return (stat);
 8007740:	697b      	ldr	r3, [r7, #20]
}
 8007742:	4618      	mov	r0, r3
 8007744:	3718      	adds	r7, #24
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	200009f4 	.word	0x200009f4

08007750 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	4a07      	ldr	r2, [pc, #28]	; (800777c <vApplicationGetIdleTaskMemory+0x2c>)
 8007760:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	4a06      	ldr	r2, [pc, #24]	; (8007780 <vApplicationGetIdleTaskMemory+0x30>)
 8007766:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2280      	movs	r2, #128	; 0x80
 800776c:	601a      	str	r2, [r3, #0]
}
 800776e:	bf00      	nop
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	200009f8 	.word	0x200009f8
 8007780:	20000a58 	.word	0x20000a58

08007784 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	4a07      	ldr	r2, [pc, #28]	; (80077b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8007794:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	4a06      	ldr	r2, [pc, #24]	; (80077b4 <vApplicationGetTimerTaskMemory+0x30>)
 800779a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077a2:	601a      	str	r2, [r3, #0]
}
 80077a4:	bf00      	nop
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	20000c58 	.word	0x20000c58
 80077b4:	20000cb8 	.word	0x20000cb8

080077b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f103 0208 	add.w	r2, r3, #8
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f103 0208 	add.w	r2, r3, #8
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f103 0208 	add.w	r2, r3, #8
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007806:	bf00      	nop
 8007808:	370c      	adds	r7, #12
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr

08007812 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007812:	b480      	push	{r7}
 8007814:	b085      	sub	sp, #20
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
 800781a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	689a      	ldr	r2, [r3, #8]
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	683a      	ldr	r2, [r7, #0]
 8007836:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	683a      	ldr	r2, [r7, #0]
 800783c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	1c5a      	adds	r2, r3, #1
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	601a      	str	r2, [r3, #0]
}
 800784e:	bf00      	nop
 8007850:	3714      	adds	r7, #20
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800785a:	b480      	push	{r7}
 800785c:	b085      	sub	sp, #20
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
 8007862:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007870:	d103      	bne.n	800787a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	e00c      	b.n	8007894 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	3308      	adds	r3, #8
 800787e:	60fb      	str	r3, [r7, #12]
 8007880:	e002      	b.n	8007888 <vListInsert+0x2e>
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	60fb      	str	r3, [r7, #12]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	429a      	cmp	r2, r3
 8007892:	d2f6      	bcs.n	8007882 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	685a      	ldr	r2, [r3, #4]
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	683a      	ldr	r2, [r7, #0]
 80078a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	683a      	ldr	r2, [r7, #0]
 80078ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	1c5a      	adds	r2, r3, #1
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	601a      	str	r2, [r3, #0]
}
 80078c0:	bf00      	nop
 80078c2:	3714      	adds	r7, #20
 80078c4:	46bd      	mov	sp, r7
 80078c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ca:	4770      	bx	lr

080078cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	691b      	ldr	r3, [r3, #16]
 80078d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	6892      	ldr	r2, [r2, #8]
 80078e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	6852      	ldr	r2, [r2, #4]
 80078ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d103      	bne.n	8007900 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	689a      	ldr	r2, [r3, #8]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	1e5a      	subs	r2, r3, #1
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
}
 8007914:	4618      	mov	r0, r3
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10c      	bne.n	800794e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007938:	b672      	cpsid	i
 800793a:	f383 8811 	msr	BASEPRI, r3
 800793e:	f3bf 8f6f 	isb	sy
 8007942:	f3bf 8f4f 	dsb	sy
 8007946:	b662      	cpsie	i
 8007948:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800794a:	bf00      	nop
 800794c:	e7fe      	b.n	800794c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800794e:	f002 f8a5 	bl	8009a9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800795a:	68f9      	ldr	r1, [r7, #12]
 800795c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800795e:	fb01 f303 	mul.w	r3, r1, r3
 8007962:	441a      	add	r2, r3
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2200      	movs	r2, #0
 800796c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800797e:	3b01      	subs	r3, #1
 8007980:	68f9      	ldr	r1, [r7, #12]
 8007982:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007984:	fb01 f303 	mul.w	r3, r1, r3
 8007988:	441a      	add	r2, r3
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	22ff      	movs	r2, #255	; 0xff
 8007992:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	22ff      	movs	r2, #255	; 0xff
 800799a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d114      	bne.n	80079ce <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	691b      	ldr	r3, [r3, #16]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d01a      	beq.n	80079e2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	3310      	adds	r3, #16
 80079b0:	4618      	mov	r0, r3
 80079b2:	f001 f95d 	bl	8008c70 <xTaskRemoveFromEventList>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d012      	beq.n	80079e2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80079bc:	4b0c      	ldr	r3, [pc, #48]	; (80079f0 <xQueueGenericReset+0xd0>)
 80079be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	f3bf 8f4f 	dsb	sy
 80079c8:	f3bf 8f6f 	isb	sy
 80079cc:	e009      	b.n	80079e2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	3310      	adds	r3, #16
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7ff fef0 	bl	80077b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	3324      	adds	r3, #36	; 0x24
 80079dc:	4618      	mov	r0, r3
 80079de:	f7ff feeb 	bl	80077b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80079e2:	f002 f88f 	bl	8009b04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80079e6:	2301      	movs	r3, #1
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3710      	adds	r7, #16
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	e000ed04 	.word	0xe000ed04

080079f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b08e      	sub	sp, #56	; 0x38
 80079f8:	af02      	add	r7, sp, #8
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
 8007a00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10c      	bne.n	8007a22 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0c:	b672      	cpsid	i
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	b662      	cpsie	i
 8007a1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a1e:	bf00      	nop
 8007a20:	e7fe      	b.n	8007a20 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10c      	bne.n	8007a42 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2c:	b672      	cpsid	i
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	b662      	cpsie	i
 8007a3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a3e:	bf00      	nop
 8007a40:	e7fe      	b.n	8007a40 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d002      	beq.n	8007a4e <xQueueGenericCreateStatic+0x5a>
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d001      	beq.n	8007a52 <xQueueGenericCreateStatic+0x5e>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e000      	b.n	8007a54 <xQueueGenericCreateStatic+0x60>
 8007a52:	2300      	movs	r3, #0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10c      	bne.n	8007a72 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5c:	b672      	cpsid	i
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	b662      	cpsie	i
 8007a6c:	623b      	str	r3, [r7, #32]
}
 8007a6e:	bf00      	nop
 8007a70:	e7fe      	b.n	8007a70 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d102      	bne.n	8007a7e <xQueueGenericCreateStatic+0x8a>
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d101      	bne.n	8007a82 <xQueueGenericCreateStatic+0x8e>
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e000      	b.n	8007a84 <xQueueGenericCreateStatic+0x90>
 8007a82:	2300      	movs	r3, #0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d10c      	bne.n	8007aa2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a8c:	b672      	cpsid	i
 8007a8e:	f383 8811 	msr	BASEPRI, r3
 8007a92:	f3bf 8f6f 	isb	sy
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	b662      	cpsie	i
 8007a9c:	61fb      	str	r3, [r7, #28]
}
 8007a9e:	bf00      	nop
 8007aa0:	e7fe      	b.n	8007aa0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007aa2:	2350      	movs	r3, #80	; 0x50
 8007aa4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	2b50      	cmp	r3, #80	; 0x50
 8007aaa:	d00c      	beq.n	8007ac6 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ab0:	b672      	cpsid	i
 8007ab2:	f383 8811 	msr	BASEPRI, r3
 8007ab6:	f3bf 8f6f 	isb	sy
 8007aba:	f3bf 8f4f 	dsb	sy
 8007abe:	b662      	cpsie	i
 8007ac0:	61bb      	str	r3, [r7, #24]
}
 8007ac2:	bf00      	nop
 8007ac4:	e7fe      	b.n	8007ac4 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007ac6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00d      	beq.n	8007aee <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ada:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	68b9      	ldr	r1, [r7, #8]
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f000 f805 	bl	8007af8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3730      	adds	r7, #48	; 0x30
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	607a      	str	r2, [r7, #4]
 8007b04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d103      	bne.n	8007b14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	69ba      	ldr	r2, [r7, #24]
 8007b10:	601a      	str	r2, [r3, #0]
 8007b12:	e002      	b.n	8007b1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007b20:	69bb      	ldr	r3, [r7, #24]
 8007b22:	68ba      	ldr	r2, [r7, #8]
 8007b24:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b26:	2101      	movs	r1, #1
 8007b28:	69b8      	ldr	r0, [r7, #24]
 8007b2a:	f7ff fef9 	bl	8007920 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	78fa      	ldrb	r2, [r7, #3]
 8007b32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007b36:	bf00      	nop
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
	...

08007b40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b08e      	sub	sp, #56	; 0x38
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	607a      	str	r2, [r7, #4]
 8007b4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d10c      	bne.n	8007b76 <xQueueGenericSend+0x36>
	__asm volatile
 8007b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b60:	b672      	cpsid	i
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	b662      	cpsie	i
 8007b70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b72:	bf00      	nop
 8007b74:	e7fe      	b.n	8007b74 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d103      	bne.n	8007b84 <xQueueGenericSend+0x44>
 8007b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d101      	bne.n	8007b88 <xQueueGenericSend+0x48>
 8007b84:	2301      	movs	r3, #1
 8007b86:	e000      	b.n	8007b8a <xQueueGenericSend+0x4a>
 8007b88:	2300      	movs	r3, #0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10c      	bne.n	8007ba8 <xQueueGenericSend+0x68>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b92:	b672      	cpsid	i
 8007b94:	f383 8811 	msr	BASEPRI, r3
 8007b98:	f3bf 8f6f 	isb	sy
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	b662      	cpsie	i
 8007ba2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007ba4:	bf00      	nop
 8007ba6:	e7fe      	b.n	8007ba6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d103      	bne.n	8007bb6 <xQueueGenericSend+0x76>
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d101      	bne.n	8007bba <xQueueGenericSend+0x7a>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e000      	b.n	8007bbc <xQueueGenericSend+0x7c>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10c      	bne.n	8007bda <xQueueGenericSend+0x9a>
	__asm volatile
 8007bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc4:	b672      	cpsid	i
 8007bc6:	f383 8811 	msr	BASEPRI, r3
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	b662      	cpsie	i
 8007bd4:	623b      	str	r3, [r7, #32]
}
 8007bd6:	bf00      	nop
 8007bd8:	e7fe      	b.n	8007bd8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007bda:	f001 fa11 	bl	8009000 <xTaskGetSchedulerState>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d102      	bne.n	8007bea <xQueueGenericSend+0xaa>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <xQueueGenericSend+0xae>
 8007bea:	2301      	movs	r3, #1
 8007bec:	e000      	b.n	8007bf0 <xQueueGenericSend+0xb0>
 8007bee:	2300      	movs	r3, #0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10c      	bne.n	8007c0e <xQueueGenericSend+0xce>
	__asm volatile
 8007bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf8:	b672      	cpsid	i
 8007bfa:	f383 8811 	msr	BASEPRI, r3
 8007bfe:	f3bf 8f6f 	isb	sy
 8007c02:	f3bf 8f4f 	dsb	sy
 8007c06:	b662      	cpsie	i
 8007c08:	61fb      	str	r3, [r7, #28]
}
 8007c0a:	bf00      	nop
 8007c0c:	e7fe      	b.n	8007c0c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c0e:	f001 ff45 	bl	8009a9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	d302      	bcc.n	8007c24 <xQueueGenericSend+0xe4>
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d129      	bne.n	8007c78 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c24:	683a      	ldr	r2, [r7, #0]
 8007c26:	68b9      	ldr	r1, [r7, #8]
 8007c28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c2a:	f000 fa15 	bl	8008058 <prvCopyDataToQueue>
 8007c2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d010      	beq.n	8007c5a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3a:	3324      	adds	r3, #36	; 0x24
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f001 f817 	bl	8008c70 <xTaskRemoveFromEventList>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d013      	beq.n	8007c70 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007c48:	4b3f      	ldr	r3, [pc, #252]	; (8007d48 <xQueueGenericSend+0x208>)
 8007c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c4e:	601a      	str	r2, [r3, #0]
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	e00a      	b.n	8007c70 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d007      	beq.n	8007c70 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007c60:	4b39      	ldr	r3, [pc, #228]	; (8007d48 <xQueueGenericSend+0x208>)
 8007c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c66:	601a      	str	r2, [r3, #0]
 8007c68:	f3bf 8f4f 	dsb	sy
 8007c6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007c70:	f001 ff48 	bl	8009b04 <vPortExitCritical>
				return pdPASS;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e063      	b.n	8007d40 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d103      	bne.n	8007c86 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c7e:	f001 ff41 	bl	8009b04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007c82:	2300      	movs	r3, #0
 8007c84:	e05c      	b.n	8007d40 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d106      	bne.n	8007c9a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c8c:	f107 0314 	add.w	r3, r7, #20
 8007c90:	4618      	mov	r0, r3
 8007c92:	f001 f853 	bl	8008d3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c96:	2301      	movs	r3, #1
 8007c98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c9a:	f001 ff33 	bl	8009b04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c9e:	f000 fd95 	bl	80087cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ca2:	f001 fefb 	bl	8009a9c <vPortEnterCritical>
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cac:	b25b      	sxtb	r3, r3
 8007cae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cb2:	d103      	bne.n	8007cbc <xQueueGenericSend+0x17c>
 8007cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cc2:	b25b      	sxtb	r3, r3
 8007cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cc8:	d103      	bne.n	8007cd2 <xQueueGenericSend+0x192>
 8007cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cd2:	f001 ff17 	bl	8009b04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007cd6:	1d3a      	adds	r2, r7, #4
 8007cd8:	f107 0314 	add.w	r3, r7, #20
 8007cdc:	4611      	mov	r1, r2
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f001 f842 	bl	8008d68 <xTaskCheckForTimeOut>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d124      	bne.n	8007d34 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007cea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cec:	f000 faac 	bl	8008248 <prvIsQueueFull>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d018      	beq.n	8007d28 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf8:	3310      	adds	r3, #16
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	4611      	mov	r1, r2
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 ff62 	bl	8008bc8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007d04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d06:	f000 fa37 	bl	8008178 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007d0a:	f000 fd6d 	bl	80087e8 <xTaskResumeAll>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f47f af7c 	bne.w	8007c0e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8007d16:	4b0c      	ldr	r3, [pc, #48]	; (8007d48 <xQueueGenericSend+0x208>)
 8007d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d1c:	601a      	str	r2, [r3, #0]
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	f3bf 8f6f 	isb	sy
 8007d26:	e772      	b.n	8007c0e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007d28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d2a:	f000 fa25 	bl	8008178 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d2e:	f000 fd5b 	bl	80087e8 <xTaskResumeAll>
 8007d32:	e76c      	b.n	8007c0e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007d34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d36:	f000 fa1f 	bl	8008178 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d3a:	f000 fd55 	bl	80087e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007d3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3738      	adds	r7, #56	; 0x38
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	e000ed04 	.word	0xe000ed04

08007d4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b08e      	sub	sp, #56	; 0x38
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
 8007d58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10c      	bne.n	8007d7e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d68:	b672      	cpsid	i
 8007d6a:	f383 8811 	msr	BASEPRI, r3
 8007d6e:	f3bf 8f6f 	isb	sy
 8007d72:	f3bf 8f4f 	dsb	sy
 8007d76:	b662      	cpsie	i
 8007d78:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d7a:	bf00      	nop
 8007d7c:	e7fe      	b.n	8007d7c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d103      	bne.n	8007d8c <xQueueGenericSendFromISR+0x40>
 8007d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d101      	bne.n	8007d90 <xQueueGenericSendFromISR+0x44>
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e000      	b.n	8007d92 <xQueueGenericSendFromISR+0x46>
 8007d90:	2300      	movs	r3, #0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d10c      	bne.n	8007db0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8007d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9a:	b672      	cpsid	i
 8007d9c:	f383 8811 	msr	BASEPRI, r3
 8007da0:	f3bf 8f6f 	isb	sy
 8007da4:	f3bf 8f4f 	dsb	sy
 8007da8:	b662      	cpsie	i
 8007daa:	623b      	str	r3, [r7, #32]
}
 8007dac:	bf00      	nop
 8007dae:	e7fe      	b.n	8007dae <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d103      	bne.n	8007dbe <xQueueGenericSendFromISR+0x72>
 8007db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d101      	bne.n	8007dc2 <xQueueGenericSendFromISR+0x76>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e000      	b.n	8007dc4 <xQueueGenericSendFromISR+0x78>
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10c      	bne.n	8007de2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dcc:	b672      	cpsid	i
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	b662      	cpsie	i
 8007ddc:	61fb      	str	r3, [r7, #28]
}
 8007dde:	bf00      	nop
 8007de0:	e7fe      	b.n	8007de0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007de2:	f001 ff43 	bl	8009c6c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007de6:	f3ef 8211 	mrs	r2, BASEPRI
 8007dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dee:	b672      	cpsid	i
 8007df0:	f383 8811 	msr	BASEPRI, r3
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	b662      	cpsie	i
 8007dfe:	61ba      	str	r2, [r7, #24]
 8007e00:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007e02:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d302      	bcc.n	8007e18 <xQueueGenericSendFromISR+0xcc>
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d12c      	bne.n	8007e72 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e22:	683a      	ldr	r2, [r7, #0]
 8007e24:	68b9      	ldr	r1, [r7, #8]
 8007e26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e28:	f000 f916 	bl	8008058 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007e2c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007e30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e34:	d112      	bne.n	8007e5c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d016      	beq.n	8007e6c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e40:	3324      	adds	r3, #36	; 0x24
 8007e42:	4618      	mov	r0, r3
 8007e44:	f000 ff14 	bl	8008c70 <xTaskRemoveFromEventList>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00e      	beq.n	8007e6c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d00b      	beq.n	8007e6c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2201      	movs	r2, #1
 8007e58:	601a      	str	r2, [r3, #0]
 8007e5a:	e007      	b.n	8007e6c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007e5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e60:	3301      	adds	r3, #1
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	b25a      	sxtb	r2, r3
 8007e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007e70:	e001      	b.n	8007e76 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007e72:	2300      	movs	r3, #0
 8007e74:	637b      	str	r3, [r7, #52]	; 0x34
 8007e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e78:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007e80:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3738      	adds	r7, #56	; 0x38
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b08c      	sub	sp, #48	; 0x30
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d10c      	bne.n	8007ec0 <xQueueReceive+0x34>
	__asm volatile
 8007ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eaa:	b672      	cpsid	i
 8007eac:	f383 8811 	msr	BASEPRI, r3
 8007eb0:	f3bf 8f6f 	isb	sy
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	b662      	cpsie	i
 8007eba:	623b      	str	r3, [r7, #32]
}
 8007ebc:	bf00      	nop
 8007ebe:	e7fe      	b.n	8007ebe <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d103      	bne.n	8007ece <xQueueReceive+0x42>
 8007ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d101      	bne.n	8007ed2 <xQueueReceive+0x46>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e000      	b.n	8007ed4 <xQueueReceive+0x48>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10c      	bne.n	8007ef2 <xQueueReceive+0x66>
	__asm volatile
 8007ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007edc:	b672      	cpsid	i
 8007ede:	f383 8811 	msr	BASEPRI, r3
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	b662      	cpsie	i
 8007eec:	61fb      	str	r3, [r7, #28]
}
 8007eee:	bf00      	nop
 8007ef0:	e7fe      	b.n	8007ef0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ef2:	f001 f885 	bl	8009000 <xTaskGetSchedulerState>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d102      	bne.n	8007f02 <xQueueReceive+0x76>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d101      	bne.n	8007f06 <xQueueReceive+0x7a>
 8007f02:	2301      	movs	r3, #1
 8007f04:	e000      	b.n	8007f08 <xQueueReceive+0x7c>
 8007f06:	2300      	movs	r3, #0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10c      	bne.n	8007f26 <xQueueReceive+0x9a>
	__asm volatile
 8007f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f10:	b672      	cpsid	i
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	b662      	cpsie	i
 8007f20:	61bb      	str	r3, [r7, #24]
}
 8007f22:	bf00      	nop
 8007f24:	e7fe      	b.n	8007f24 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f26:	f001 fdb9 	bl	8009a9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d01f      	beq.n	8007f76 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f36:	68b9      	ldr	r1, [r7, #8]
 8007f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f3a:	f000 f8f7 	bl	800812c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	1e5a      	subs	r2, r3, #1
 8007f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f44:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00f      	beq.n	8007f6e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f50:	3310      	adds	r3, #16
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 fe8c 	bl	8008c70 <xTaskRemoveFromEventList>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d007      	beq.n	8007f6e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007f5e:	4b3d      	ldr	r3, [pc, #244]	; (8008054 <xQueueReceive+0x1c8>)
 8007f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f64:	601a      	str	r2, [r3, #0]
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f6e:	f001 fdc9 	bl	8009b04 <vPortExitCritical>
				return pdPASS;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e069      	b.n	800804a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d103      	bne.n	8007f84 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f7c:	f001 fdc2 	bl	8009b04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f80:	2300      	movs	r3, #0
 8007f82:	e062      	b.n	800804a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d106      	bne.n	8007f98 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f8a:	f107 0310 	add.w	r3, r7, #16
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f000 fed4 	bl	8008d3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f94:	2301      	movs	r3, #1
 8007f96:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f98:	f001 fdb4 	bl	8009b04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f9c:	f000 fc16 	bl	80087cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007fa0:	f001 fd7c 	bl	8009a9c <vPortEnterCritical>
 8007fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007faa:	b25b      	sxtb	r3, r3
 8007fac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fb0:	d103      	bne.n	8007fba <xQueueReceive+0x12e>
 8007fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fc0:	b25b      	sxtb	r3, r3
 8007fc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fc6:	d103      	bne.n	8007fd0 <xQueueReceive+0x144>
 8007fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fd0:	f001 fd98 	bl	8009b04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007fd4:	1d3a      	adds	r2, r7, #4
 8007fd6:	f107 0310 	add.w	r3, r7, #16
 8007fda:	4611      	mov	r1, r2
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f000 fec3 	bl	8008d68 <xTaskCheckForTimeOut>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d123      	bne.n	8008030 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fe8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fea:	f000 f917 	bl	800821c <prvIsQueueEmpty>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d017      	beq.n	8008024 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff6:	3324      	adds	r3, #36	; 0x24
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	4611      	mov	r1, r2
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f000 fde3 	bl	8008bc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008002:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008004:	f000 f8b8 	bl	8008178 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008008:	f000 fbee 	bl	80087e8 <xTaskResumeAll>
 800800c:	4603      	mov	r3, r0
 800800e:	2b00      	cmp	r3, #0
 8008010:	d189      	bne.n	8007f26 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8008012:	4b10      	ldr	r3, [pc, #64]	; (8008054 <xQueueReceive+0x1c8>)
 8008014:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008018:	601a      	str	r2, [r3, #0]
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	f3bf 8f6f 	isb	sy
 8008022:	e780      	b.n	8007f26 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008026:	f000 f8a7 	bl	8008178 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800802a:	f000 fbdd 	bl	80087e8 <xTaskResumeAll>
 800802e:	e77a      	b.n	8007f26 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008030:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008032:	f000 f8a1 	bl	8008178 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008036:	f000 fbd7 	bl	80087e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800803a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800803c:	f000 f8ee 	bl	800821c <prvIsQueueEmpty>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	f43f af6f 	beq.w	8007f26 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008048:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800804a:	4618      	mov	r0, r3
 800804c:	3730      	adds	r7, #48	; 0x30
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	e000ed04 	.word	0xe000ed04

08008058 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008064:	2300      	movs	r3, #0
 8008066:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008072:	2b00      	cmp	r3, #0
 8008074:	d10d      	bne.n	8008092 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d14d      	bne.n	800811a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	4618      	mov	r0, r3
 8008084:	f000 ffda 	bl	800903c <xTaskPriorityDisinherit>
 8008088:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2200      	movs	r2, #0
 800808e:	609a      	str	r2, [r3, #8]
 8008090:	e043      	b.n	800811a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d119      	bne.n	80080cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6858      	ldr	r0, [r3, #4]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a0:	461a      	mov	r2, r3
 80080a2:	68b9      	ldr	r1, [r7, #8]
 80080a4:	f002 f834 	bl	800a110 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	685a      	ldr	r2, [r3, #4]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b0:	441a      	add	r2, r3
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	685a      	ldr	r2, [r3, #4]
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	429a      	cmp	r2, r3
 80080c0:	d32b      	bcc.n	800811a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	605a      	str	r2, [r3, #4]
 80080ca:	e026      	b.n	800811a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	68d8      	ldr	r0, [r3, #12]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d4:	461a      	mov	r2, r3
 80080d6:	68b9      	ldr	r1, [r7, #8]
 80080d8:	f002 f81a 	bl	800a110 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	68da      	ldr	r2, [r3, #12]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e4:	425b      	negs	r3, r3
 80080e6:	441a      	add	r2, r3
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	68da      	ldr	r2, [r3, #12]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d207      	bcs.n	8008108 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	689a      	ldr	r2, [r3, #8]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008100:	425b      	negs	r3, r3
 8008102:	441a      	add	r2, r3
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2b02      	cmp	r3, #2
 800810c:	d105      	bne.n	800811a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d002      	beq.n	800811a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	3b01      	subs	r3, #1
 8008118:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	1c5a      	adds	r2, r3, #1
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008122:	697b      	ldr	r3, [r7, #20]
}
 8008124:	4618      	mov	r0, r3
 8008126:	3718      	adds	r7, #24
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813a:	2b00      	cmp	r3, #0
 800813c:	d018      	beq.n	8008170 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	68da      	ldr	r2, [r3, #12]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008146:	441a      	add	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	68da      	ldr	r2, [r3, #12]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	689b      	ldr	r3, [r3, #8]
 8008154:	429a      	cmp	r2, r3
 8008156:	d303      	bcc.n	8008160 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	68d9      	ldr	r1, [r3, #12]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008168:	461a      	mov	r2, r3
 800816a:	6838      	ldr	r0, [r7, #0]
 800816c:	f001 ffd0 	bl	800a110 <memcpy>
	}
}
 8008170:	bf00      	nop
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008180:	f001 fc8c 	bl	8009a9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800818a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800818c:	e011      	b.n	80081b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008192:	2b00      	cmp	r3, #0
 8008194:	d012      	beq.n	80081bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	3324      	adds	r3, #36	; 0x24
 800819a:	4618      	mov	r0, r3
 800819c:	f000 fd68 	bl	8008c70 <xTaskRemoveFromEventList>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d001      	beq.n	80081aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80081a6:	f000 fe45 	bl	8008e34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80081aa:	7bfb      	ldrb	r3, [r7, #15]
 80081ac:	3b01      	subs	r3, #1
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	dce9      	bgt.n	800818e <prvUnlockQueue+0x16>
 80081ba:	e000      	b.n	80081be <prvUnlockQueue+0x46>
					break;
 80081bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	22ff      	movs	r2, #255	; 0xff
 80081c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80081c6:	f001 fc9d 	bl	8009b04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80081ca:	f001 fc67 	bl	8009a9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081d6:	e011      	b.n	80081fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d012      	beq.n	8008206 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	3310      	adds	r3, #16
 80081e4:	4618      	mov	r0, r3
 80081e6:	f000 fd43 	bl	8008c70 <xTaskRemoveFromEventList>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d001      	beq.n	80081f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80081f0:	f000 fe20 	bl	8008e34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80081f4:	7bbb      	ldrb	r3, [r7, #14]
 80081f6:	3b01      	subs	r3, #1
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008200:	2b00      	cmp	r3, #0
 8008202:	dce9      	bgt.n	80081d8 <prvUnlockQueue+0x60>
 8008204:	e000      	b.n	8008208 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008206:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	22ff      	movs	r2, #255	; 0xff
 800820c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008210:	f001 fc78 	bl	8009b04 <vPortExitCritical>
}
 8008214:	bf00      	nop
 8008216:	3710      	adds	r7, #16
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b084      	sub	sp, #16
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008224:	f001 fc3a 	bl	8009a9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822c:	2b00      	cmp	r3, #0
 800822e:	d102      	bne.n	8008236 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008230:	2301      	movs	r3, #1
 8008232:	60fb      	str	r3, [r7, #12]
 8008234:	e001      	b.n	800823a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008236:	2300      	movs	r3, #0
 8008238:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800823a:	f001 fc63 	bl	8009b04 <vPortExitCritical>

	return xReturn;
 800823e:	68fb      	ldr	r3, [r7, #12]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008250:	f001 fc24 	bl	8009a9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800825c:	429a      	cmp	r2, r3
 800825e:	d102      	bne.n	8008266 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008260:	2301      	movs	r3, #1
 8008262:	60fb      	str	r3, [r7, #12]
 8008264:	e001      	b.n	800826a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008266:	2300      	movs	r3, #0
 8008268:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800826a:	f001 fc4b 	bl	8009b04 <vPortExitCritical>

	return xReturn;
 800826e:	68fb      	ldr	r3, [r7, #12]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008278:	b480      	push	{r7}
 800827a:	b085      	sub	sp, #20
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008282:	2300      	movs	r3, #0
 8008284:	60fb      	str	r3, [r7, #12]
 8008286:	e014      	b.n	80082b2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008288:	4a0f      	ldr	r2, [pc, #60]	; (80082c8 <vQueueAddToRegistry+0x50>)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d10b      	bne.n	80082ac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008294:	490c      	ldr	r1, [pc, #48]	; (80082c8 <vQueueAddToRegistry+0x50>)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800829e:	4a0a      	ldr	r2, [pc, #40]	; (80082c8 <vQueueAddToRegistry+0x50>)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	00db      	lsls	r3, r3, #3
 80082a4:	4413      	add	r3, r2
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80082aa:	e006      	b.n	80082ba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	3301      	adds	r3, #1
 80082b0:	60fb      	str	r3, [r7, #12]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	2b07      	cmp	r3, #7
 80082b6:	d9e7      	bls.n	8008288 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80082b8:	bf00      	nop
 80082ba:	bf00      	nop
 80082bc:	3714      	adds	r7, #20
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	200010b8 	.word	0x200010b8

080082cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b086      	sub	sp, #24
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80082dc:	f001 fbde 	bl	8009a9c <vPortEnterCritical>
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082e6:	b25b      	sxtb	r3, r3
 80082e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082ec:	d103      	bne.n	80082f6 <vQueueWaitForMessageRestricted+0x2a>
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082fc:	b25b      	sxtb	r3, r3
 80082fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008302:	d103      	bne.n	800830c <vQueueWaitForMessageRestricted+0x40>
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	2200      	movs	r2, #0
 8008308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800830c:	f001 fbfa 	bl	8009b04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008314:	2b00      	cmp	r3, #0
 8008316:	d106      	bne.n	8008326 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	3324      	adds	r3, #36	; 0x24
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	68b9      	ldr	r1, [r7, #8]
 8008320:	4618      	mov	r0, r3
 8008322:	f000 fc77 	bl	8008c14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008326:	6978      	ldr	r0, [r7, #20]
 8008328:	f7ff ff26 	bl	8008178 <prvUnlockQueue>
	}
 800832c:	bf00      	nop
 800832e:	3718      	adds	r7, #24
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008334:	b580      	push	{r7, lr}
 8008336:	b08e      	sub	sp, #56	; 0x38
 8008338:	af04      	add	r7, sp, #16
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
 8008340:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008344:	2b00      	cmp	r3, #0
 8008346:	d10c      	bne.n	8008362 <xTaskCreateStatic+0x2e>
	__asm volatile
 8008348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834c:	b672      	cpsid	i
 800834e:	f383 8811 	msr	BASEPRI, r3
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	f3bf 8f4f 	dsb	sy
 800835a:	b662      	cpsie	i
 800835c:	623b      	str	r3, [r7, #32]
}
 800835e:	bf00      	nop
 8008360:	e7fe      	b.n	8008360 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10c      	bne.n	8008382 <xTaskCreateStatic+0x4e>
	__asm volatile
 8008368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836c:	b672      	cpsid	i
 800836e:	f383 8811 	msr	BASEPRI, r3
 8008372:	f3bf 8f6f 	isb	sy
 8008376:	f3bf 8f4f 	dsb	sy
 800837a:	b662      	cpsie	i
 800837c:	61fb      	str	r3, [r7, #28]
}
 800837e:	bf00      	nop
 8008380:	e7fe      	b.n	8008380 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008382:	2360      	movs	r3, #96	; 0x60
 8008384:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	2b60      	cmp	r3, #96	; 0x60
 800838a:	d00c      	beq.n	80083a6 <xTaskCreateStatic+0x72>
	__asm volatile
 800838c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008390:	b672      	cpsid	i
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	b662      	cpsie	i
 80083a0:	61bb      	str	r3, [r7, #24]
}
 80083a2:	bf00      	nop
 80083a4:	e7fe      	b.n	80083a4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80083a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80083a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d01e      	beq.n	80083ec <xTaskCreateStatic+0xb8>
 80083ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d01b      	beq.n	80083ec <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80083b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80083b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80083be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c0:	2202      	movs	r2, #2
 80083c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80083c6:	2300      	movs	r3, #0
 80083c8:	9303      	str	r3, [sp, #12]
 80083ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083cc:	9302      	str	r3, [sp, #8]
 80083ce:	f107 0314 	add.w	r3, r7, #20
 80083d2:	9301      	str	r3, [sp, #4]
 80083d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	68b9      	ldr	r1, [r7, #8]
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f000 f850 	bl	8008484 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083e6:	f000 f8e1 	bl	80085ac <prvAddNewTaskToReadyList>
 80083ea:	e001      	b.n	80083f0 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80083ec:	2300      	movs	r3, #0
 80083ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80083f0:	697b      	ldr	r3, [r7, #20]
	}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3728      	adds	r7, #40	; 0x28
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b08c      	sub	sp, #48	; 0x30
 80083fe:	af04      	add	r7, sp, #16
 8008400:	60f8      	str	r0, [r7, #12]
 8008402:	60b9      	str	r1, [r7, #8]
 8008404:	603b      	str	r3, [r7, #0]
 8008406:	4613      	mov	r3, r2
 8008408:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800840a:	88fb      	ldrh	r3, [r7, #6]
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	4618      	mov	r0, r3
 8008410:	f001 fc70 	bl	8009cf4 <pvPortMalloc>
 8008414:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00e      	beq.n	800843a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800841c:	2060      	movs	r0, #96	; 0x60
 800841e:	f001 fc69 	bl	8009cf4 <pvPortMalloc>
 8008422:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d003      	beq.n	8008432 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	697a      	ldr	r2, [r7, #20]
 800842e:	631a      	str	r2, [r3, #48]	; 0x30
 8008430:	e005      	b.n	800843e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008432:	6978      	ldr	r0, [r7, #20]
 8008434:	f001 fd2e 	bl	8009e94 <vPortFree>
 8008438:	e001      	b.n	800843e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800843a:	2300      	movs	r3, #0
 800843c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d017      	beq.n	8008474 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800844c:	88fa      	ldrh	r2, [r7, #6]
 800844e:	2300      	movs	r3, #0
 8008450:	9303      	str	r3, [sp, #12]
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	9302      	str	r3, [sp, #8]
 8008456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008458:	9301      	str	r3, [sp, #4]
 800845a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800845c:	9300      	str	r3, [sp, #0]
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	68b9      	ldr	r1, [r7, #8]
 8008462:	68f8      	ldr	r0, [r7, #12]
 8008464:	f000 f80e 	bl	8008484 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008468:	69f8      	ldr	r0, [r7, #28]
 800846a:	f000 f89f 	bl	80085ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800846e:	2301      	movs	r3, #1
 8008470:	61bb      	str	r3, [r7, #24]
 8008472:	e002      	b.n	800847a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008478:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800847a:	69bb      	ldr	r3, [r7, #24]
	}
 800847c:	4618      	mov	r0, r3
 800847e:	3720      	adds	r7, #32
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b088      	sub	sp, #32
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
 8008490:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008494:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	461a      	mov	r2, r3
 800849c:	21a5      	movs	r1, #165	; 0xa5
 800849e:	f001 fe45 	bl	800a12c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80084a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084a6:	6879      	ldr	r1, [r7, #4]
 80084a8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80084ac:	440b      	add	r3, r1
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4413      	add	r3, r2
 80084b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	f023 0307 	bic.w	r3, r3, #7
 80084ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	f003 0307 	and.w	r3, r3, #7
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00c      	beq.n	80084e0 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80084c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ca:	b672      	cpsid	i
 80084cc:	f383 8811 	msr	BASEPRI, r3
 80084d0:	f3bf 8f6f 	isb	sy
 80084d4:	f3bf 8f4f 	dsb	sy
 80084d8:	b662      	cpsie	i
 80084da:	617b      	str	r3, [r7, #20]
}
 80084dc:	bf00      	nop
 80084de:	e7fe      	b.n	80084de <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d01f      	beq.n	8008526 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084e6:	2300      	movs	r3, #0
 80084e8:	61fb      	str	r3, [r7, #28]
 80084ea:	e012      	b.n	8008512 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	4413      	add	r3, r2
 80084f2:	7819      	ldrb	r1, [r3, #0]
 80084f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	4413      	add	r3, r2
 80084fa:	3334      	adds	r3, #52	; 0x34
 80084fc:	460a      	mov	r2, r1
 80084fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008500:	68ba      	ldr	r2, [r7, #8]
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	4413      	add	r3, r2
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d006      	beq.n	800851a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	3301      	adds	r3, #1
 8008510:	61fb      	str	r3, [r7, #28]
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	2b0f      	cmp	r3, #15
 8008516:	d9e9      	bls.n	80084ec <prvInitialiseNewTask+0x68>
 8008518:	e000      	b.n	800851c <prvInitialiseNewTask+0x98>
			{
				break;
 800851a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800851c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851e:	2200      	movs	r2, #0
 8008520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008524:	e003      	b.n	800852e <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800852e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008530:	2b37      	cmp	r3, #55	; 0x37
 8008532:	d901      	bls.n	8008538 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008534:	2337      	movs	r3, #55	; 0x37
 8008536:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800853c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800853e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008542:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008546:	2200      	movs	r2, #0
 8008548:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800854a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854c:	3304      	adds	r3, #4
 800854e:	4618      	mov	r0, r3
 8008550:	f7ff f952 	bl	80077f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008556:	3318      	adds	r3, #24
 8008558:	4618      	mov	r0, r3
 800855a:	f7ff f94d 	bl	80077f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800855e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008562:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008566:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800856a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800856e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008572:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8008574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008576:	2200      	movs	r2, #0
 8008578:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800857a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857c:	2200      	movs	r2, #0
 800857e:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008582:	2200      	movs	r2, #0
 8008584:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	68f9      	ldr	r1, [r7, #12]
 800858c:	69b8      	ldr	r0, [r7, #24]
 800858e:	f001 f977 	bl	8009880 <pxPortInitialiseStack>
 8008592:	4602      	mov	r2, r0
 8008594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008596:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859a:	2b00      	cmp	r3, #0
 800859c:	d002      	beq.n	80085a4 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800859e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085a4:	bf00      	nop
 80085a6:	3720      	adds	r7, #32
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80085b4:	f001 fa72 	bl	8009a9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80085b8:	4b2d      	ldr	r3, [pc, #180]	; (8008670 <prvAddNewTaskToReadyList+0xc4>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	3301      	adds	r3, #1
 80085be:	4a2c      	ldr	r2, [pc, #176]	; (8008670 <prvAddNewTaskToReadyList+0xc4>)
 80085c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80085c2:	4b2c      	ldr	r3, [pc, #176]	; (8008674 <prvAddNewTaskToReadyList+0xc8>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d109      	bne.n	80085de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80085ca:	4a2a      	ldr	r2, [pc, #168]	; (8008674 <prvAddNewTaskToReadyList+0xc8>)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80085d0:	4b27      	ldr	r3, [pc, #156]	; (8008670 <prvAddNewTaskToReadyList+0xc4>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d110      	bne.n	80085fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80085d8:	f000 fc52 	bl	8008e80 <prvInitialiseTaskLists>
 80085dc:	e00d      	b.n	80085fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80085de:	4b26      	ldr	r3, [pc, #152]	; (8008678 <prvAddNewTaskToReadyList+0xcc>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d109      	bne.n	80085fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80085e6:	4b23      	ldr	r3, [pc, #140]	; (8008674 <prvAddNewTaskToReadyList+0xc8>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d802      	bhi.n	80085fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80085f4:	4a1f      	ldr	r2, [pc, #124]	; (8008674 <prvAddNewTaskToReadyList+0xc8>)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80085fa:	4b20      	ldr	r3, [pc, #128]	; (800867c <prvAddNewTaskToReadyList+0xd0>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	3301      	adds	r3, #1
 8008600:	4a1e      	ldr	r2, [pc, #120]	; (800867c <prvAddNewTaskToReadyList+0xd0>)
 8008602:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008604:	4b1d      	ldr	r3, [pc, #116]	; (800867c <prvAddNewTaskToReadyList+0xd0>)
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008610:	4b1b      	ldr	r3, [pc, #108]	; (8008680 <prvAddNewTaskToReadyList+0xd4>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	429a      	cmp	r2, r3
 8008616:	d903      	bls.n	8008620 <prvAddNewTaskToReadyList+0x74>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800861c:	4a18      	ldr	r2, [pc, #96]	; (8008680 <prvAddNewTaskToReadyList+0xd4>)
 800861e:	6013      	str	r3, [r2, #0]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008624:	4613      	mov	r3, r2
 8008626:	009b      	lsls	r3, r3, #2
 8008628:	4413      	add	r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	4a15      	ldr	r2, [pc, #84]	; (8008684 <prvAddNewTaskToReadyList+0xd8>)
 800862e:	441a      	add	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	3304      	adds	r3, #4
 8008634:	4619      	mov	r1, r3
 8008636:	4610      	mov	r0, r2
 8008638:	f7ff f8eb 	bl	8007812 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800863c:	f001 fa62 	bl	8009b04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008640:	4b0d      	ldr	r3, [pc, #52]	; (8008678 <prvAddNewTaskToReadyList+0xcc>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00e      	beq.n	8008666 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008648:	4b0a      	ldr	r3, [pc, #40]	; (8008674 <prvAddNewTaskToReadyList+0xc8>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008652:	429a      	cmp	r2, r3
 8008654:	d207      	bcs.n	8008666 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008656:	4b0c      	ldr	r3, [pc, #48]	; (8008688 <prvAddNewTaskToReadyList+0xdc>)
 8008658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800865c:	601a      	str	r2, [r3, #0]
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008666:	bf00      	nop
 8008668:	3708      	adds	r7, #8
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	200015cc 	.word	0x200015cc
 8008674:	200010f8 	.word	0x200010f8
 8008678:	200015d8 	.word	0x200015d8
 800867c:	200015e8 	.word	0x200015e8
 8008680:	200015d4 	.word	0x200015d4
 8008684:	200010fc 	.word	0x200010fc
 8008688:	e000ed04 	.word	0xe000ed04

0800868c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008694:	2300      	movs	r3, #0
 8008696:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d019      	beq.n	80086d2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800869e:	4b14      	ldr	r3, [pc, #80]	; (80086f0 <vTaskDelay+0x64>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d00c      	beq.n	80086c0 <vTaskDelay+0x34>
	__asm volatile
 80086a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086aa:	b672      	cpsid	i
 80086ac:	f383 8811 	msr	BASEPRI, r3
 80086b0:	f3bf 8f6f 	isb	sy
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	b662      	cpsie	i
 80086ba:	60bb      	str	r3, [r7, #8]
}
 80086bc:	bf00      	nop
 80086be:	e7fe      	b.n	80086be <vTaskDelay+0x32>
			vTaskSuspendAll();
 80086c0:	f000 f884 	bl	80087cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80086c4:	2100      	movs	r1, #0
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 fd2a 	bl	8009120 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80086cc:	f000 f88c 	bl	80087e8 <xTaskResumeAll>
 80086d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d107      	bne.n	80086e8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80086d8:	4b06      	ldr	r3, [pc, #24]	; (80086f4 <vTaskDelay+0x68>)
 80086da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	f3bf 8f4f 	dsb	sy
 80086e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80086e8:	bf00      	nop
 80086ea:	3710      	adds	r7, #16
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	200015f4 	.word	0x200015f4
 80086f4:	e000ed04 	.word	0xe000ed04

080086f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b08a      	sub	sp, #40	; 0x28
 80086fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80086fe:	2300      	movs	r3, #0
 8008700:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008702:	2300      	movs	r3, #0
 8008704:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008706:	463a      	mov	r2, r7
 8008708:	1d39      	adds	r1, r7, #4
 800870a:	f107 0308 	add.w	r3, r7, #8
 800870e:	4618      	mov	r0, r3
 8008710:	f7ff f81e 	bl	8007750 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008714:	6839      	ldr	r1, [r7, #0]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	68ba      	ldr	r2, [r7, #8]
 800871a:	9202      	str	r2, [sp, #8]
 800871c:	9301      	str	r3, [sp, #4]
 800871e:	2300      	movs	r3, #0
 8008720:	9300      	str	r3, [sp, #0]
 8008722:	2300      	movs	r3, #0
 8008724:	460a      	mov	r2, r1
 8008726:	4923      	ldr	r1, [pc, #140]	; (80087b4 <vTaskStartScheduler+0xbc>)
 8008728:	4823      	ldr	r0, [pc, #140]	; (80087b8 <vTaskStartScheduler+0xc0>)
 800872a:	f7ff fe03 	bl	8008334 <xTaskCreateStatic>
 800872e:	4603      	mov	r3, r0
 8008730:	4a22      	ldr	r2, [pc, #136]	; (80087bc <vTaskStartScheduler+0xc4>)
 8008732:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008734:	4b21      	ldr	r3, [pc, #132]	; (80087bc <vTaskStartScheduler+0xc4>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800873c:	2301      	movs	r3, #1
 800873e:	617b      	str	r3, [r7, #20]
 8008740:	e001      	b.n	8008746 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008742:	2300      	movs	r3, #0
 8008744:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d102      	bne.n	8008752 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800874c:	f000 fd3c 	bl	80091c8 <xTimerCreateTimerTask>
 8008750:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d118      	bne.n	800878a <vTaskStartScheduler+0x92>
	__asm volatile
 8008758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875c:	b672      	cpsid	i
 800875e:	f383 8811 	msr	BASEPRI, r3
 8008762:	f3bf 8f6f 	isb	sy
 8008766:	f3bf 8f4f 	dsb	sy
 800876a:	b662      	cpsie	i
 800876c:	613b      	str	r3, [r7, #16]
}
 800876e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008770:	4b13      	ldr	r3, [pc, #76]	; (80087c0 <vTaskStartScheduler+0xc8>)
 8008772:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008776:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008778:	4b12      	ldr	r3, [pc, #72]	; (80087c4 <vTaskStartScheduler+0xcc>)
 800877a:	2201      	movs	r2, #1
 800877c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800877e:	4b12      	ldr	r3, [pc, #72]	; (80087c8 <vTaskStartScheduler+0xd0>)
 8008780:	2200      	movs	r2, #0
 8008782:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008784:	f001 f90c 	bl	80099a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008788:	e010      	b.n	80087ac <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008790:	d10c      	bne.n	80087ac <vTaskStartScheduler+0xb4>
	__asm volatile
 8008792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008796:	b672      	cpsid	i
 8008798:	f383 8811 	msr	BASEPRI, r3
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	b662      	cpsie	i
 80087a6:	60fb      	str	r3, [r7, #12]
}
 80087a8:	bf00      	nop
 80087aa:	e7fe      	b.n	80087aa <vTaskStartScheduler+0xb2>
}
 80087ac:	bf00      	nop
 80087ae:	3718      	adds	r7, #24
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	0800a160 	.word	0x0800a160
 80087b8:	08008e4d 	.word	0x08008e4d
 80087bc:	200015f0 	.word	0x200015f0
 80087c0:	200015ec 	.word	0x200015ec
 80087c4:	200015d8 	.word	0x200015d8
 80087c8:	200015d0 	.word	0x200015d0

080087cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80087cc:	b480      	push	{r7}
 80087ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80087d0:	4b04      	ldr	r3, [pc, #16]	; (80087e4 <vTaskSuspendAll+0x18>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	3301      	adds	r3, #1
 80087d6:	4a03      	ldr	r2, [pc, #12]	; (80087e4 <vTaskSuspendAll+0x18>)
 80087d8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80087da:	bf00      	nop
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr
 80087e4:	200015f4 	.word	0x200015f4

080087e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80087ee:	2300      	movs	r3, #0
 80087f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80087f2:	2300      	movs	r3, #0
 80087f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80087f6:	4b43      	ldr	r3, [pc, #268]	; (8008904 <xTaskResumeAll+0x11c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d10c      	bne.n	8008818 <xTaskResumeAll+0x30>
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008802:	b672      	cpsid	i
 8008804:	f383 8811 	msr	BASEPRI, r3
 8008808:	f3bf 8f6f 	isb	sy
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	b662      	cpsie	i
 8008812:	603b      	str	r3, [r7, #0]
}
 8008814:	bf00      	nop
 8008816:	e7fe      	b.n	8008816 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008818:	f001 f940 	bl	8009a9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800881c:	4b39      	ldr	r3, [pc, #228]	; (8008904 <xTaskResumeAll+0x11c>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	3b01      	subs	r3, #1
 8008822:	4a38      	ldr	r2, [pc, #224]	; (8008904 <xTaskResumeAll+0x11c>)
 8008824:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008826:	4b37      	ldr	r3, [pc, #220]	; (8008904 <xTaskResumeAll+0x11c>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d162      	bne.n	80088f4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800882e:	4b36      	ldr	r3, [pc, #216]	; (8008908 <xTaskResumeAll+0x120>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d05e      	beq.n	80088f4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008836:	e02f      	b.n	8008898 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008838:	4b34      	ldr	r3, [pc, #208]	; (800890c <xTaskResumeAll+0x124>)
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	3318      	adds	r3, #24
 8008844:	4618      	mov	r0, r3
 8008846:	f7ff f841 	bl	80078cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	3304      	adds	r3, #4
 800884e:	4618      	mov	r0, r3
 8008850:	f7ff f83c 	bl	80078cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008858:	4b2d      	ldr	r3, [pc, #180]	; (8008910 <xTaskResumeAll+0x128>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	429a      	cmp	r2, r3
 800885e:	d903      	bls.n	8008868 <xTaskResumeAll+0x80>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008864:	4a2a      	ldr	r2, [pc, #168]	; (8008910 <xTaskResumeAll+0x128>)
 8008866:	6013      	str	r3, [r2, #0]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800886c:	4613      	mov	r3, r2
 800886e:	009b      	lsls	r3, r3, #2
 8008870:	4413      	add	r3, r2
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	4a27      	ldr	r2, [pc, #156]	; (8008914 <xTaskResumeAll+0x12c>)
 8008876:	441a      	add	r2, r3
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	3304      	adds	r3, #4
 800887c:	4619      	mov	r1, r3
 800887e:	4610      	mov	r0, r2
 8008880:	f7fe ffc7 	bl	8007812 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008888:	4b23      	ldr	r3, [pc, #140]	; (8008918 <xTaskResumeAll+0x130>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800888e:	429a      	cmp	r2, r3
 8008890:	d302      	bcc.n	8008898 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008892:	4b22      	ldr	r3, [pc, #136]	; (800891c <xTaskResumeAll+0x134>)
 8008894:	2201      	movs	r2, #1
 8008896:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008898:	4b1c      	ldr	r3, [pc, #112]	; (800890c <xTaskResumeAll+0x124>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1cb      	bne.n	8008838 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d001      	beq.n	80088aa <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80088a6:	f000 fb8b 	bl	8008fc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80088aa:	4b1d      	ldr	r3, [pc, #116]	; (8008920 <xTaskResumeAll+0x138>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d010      	beq.n	80088d8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80088b6:	f000 f847 	bl	8008948 <xTaskIncrementTick>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d002      	beq.n	80088c6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80088c0:	4b16      	ldr	r3, [pc, #88]	; (800891c <xTaskResumeAll+0x134>)
 80088c2:	2201      	movs	r2, #1
 80088c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	3b01      	subs	r3, #1
 80088ca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1f1      	bne.n	80088b6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80088d2:	4b13      	ldr	r3, [pc, #76]	; (8008920 <xTaskResumeAll+0x138>)
 80088d4:	2200      	movs	r2, #0
 80088d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80088d8:	4b10      	ldr	r3, [pc, #64]	; (800891c <xTaskResumeAll+0x134>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d009      	beq.n	80088f4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80088e0:	2301      	movs	r3, #1
 80088e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80088e4:	4b0f      	ldr	r3, [pc, #60]	; (8008924 <xTaskResumeAll+0x13c>)
 80088e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088ea:	601a      	str	r2, [r3, #0]
 80088ec:	f3bf 8f4f 	dsb	sy
 80088f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088f4:	f001 f906 	bl	8009b04 <vPortExitCritical>

	return xAlreadyYielded;
 80088f8:	68bb      	ldr	r3, [r7, #8]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	200015f4 	.word	0x200015f4
 8008908:	200015cc 	.word	0x200015cc
 800890c:	2000158c 	.word	0x2000158c
 8008910:	200015d4 	.word	0x200015d4
 8008914:	200010fc 	.word	0x200010fc
 8008918:	200010f8 	.word	0x200010f8
 800891c:	200015e0 	.word	0x200015e0
 8008920:	200015dc 	.word	0x200015dc
 8008924:	e000ed04 	.word	0xe000ed04

08008928 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800892e:	4b05      	ldr	r3, [pc, #20]	; (8008944 <xTaskGetTickCount+0x1c>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008934:	687b      	ldr	r3, [r7, #4]
}
 8008936:	4618      	mov	r0, r3
 8008938:	370c      	adds	r7, #12
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	200015d0 	.word	0x200015d0

08008948 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b086      	sub	sp, #24
 800894c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800894e:	2300      	movs	r3, #0
 8008950:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008952:	4b50      	ldr	r3, [pc, #320]	; (8008a94 <xTaskIncrementTick+0x14c>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	f040 808b 	bne.w	8008a72 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800895c:	4b4e      	ldr	r3, [pc, #312]	; (8008a98 <xTaskIncrementTick+0x150>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	3301      	adds	r3, #1
 8008962:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008964:	4a4c      	ldr	r2, [pc, #304]	; (8008a98 <xTaskIncrementTick+0x150>)
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d122      	bne.n	80089b6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008970:	4b4a      	ldr	r3, [pc, #296]	; (8008a9c <xTaskIncrementTick+0x154>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00c      	beq.n	8008994 <xTaskIncrementTick+0x4c>
	__asm volatile
 800897a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897e:	b672      	cpsid	i
 8008980:	f383 8811 	msr	BASEPRI, r3
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	b662      	cpsie	i
 800898e:	603b      	str	r3, [r7, #0]
}
 8008990:	bf00      	nop
 8008992:	e7fe      	b.n	8008992 <xTaskIncrementTick+0x4a>
 8008994:	4b41      	ldr	r3, [pc, #260]	; (8008a9c <xTaskIncrementTick+0x154>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	60fb      	str	r3, [r7, #12]
 800899a:	4b41      	ldr	r3, [pc, #260]	; (8008aa0 <xTaskIncrementTick+0x158>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a3f      	ldr	r2, [pc, #252]	; (8008a9c <xTaskIncrementTick+0x154>)
 80089a0:	6013      	str	r3, [r2, #0]
 80089a2:	4a3f      	ldr	r2, [pc, #252]	; (8008aa0 <xTaskIncrementTick+0x158>)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6013      	str	r3, [r2, #0]
 80089a8:	4b3e      	ldr	r3, [pc, #248]	; (8008aa4 <xTaskIncrementTick+0x15c>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	3301      	adds	r3, #1
 80089ae:	4a3d      	ldr	r2, [pc, #244]	; (8008aa4 <xTaskIncrementTick+0x15c>)
 80089b0:	6013      	str	r3, [r2, #0]
 80089b2:	f000 fb05 	bl	8008fc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80089b6:	4b3c      	ldr	r3, [pc, #240]	; (8008aa8 <xTaskIncrementTick+0x160>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	693a      	ldr	r2, [r7, #16]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d349      	bcc.n	8008a54 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089c0:	4b36      	ldr	r3, [pc, #216]	; (8008a9c <xTaskIncrementTick+0x154>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d104      	bne.n	80089d4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089ca:	4b37      	ldr	r3, [pc, #220]	; (8008aa8 <xTaskIncrementTick+0x160>)
 80089cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089d0:	601a      	str	r2, [r3, #0]
					break;
 80089d2:	e03f      	b.n	8008a54 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089d4:	4b31      	ldr	r3, [pc, #196]	; (8008a9c <xTaskIncrementTick+0x154>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80089e4:	693a      	ldr	r2, [r7, #16]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d203      	bcs.n	80089f4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80089ec:	4a2e      	ldr	r2, [pc, #184]	; (8008aa8 <xTaskIncrementTick+0x160>)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80089f2:	e02f      	b.n	8008a54 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	3304      	adds	r3, #4
 80089f8:	4618      	mov	r0, r3
 80089fa:	f7fe ff67 	bl	80078cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d004      	beq.n	8008a10 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	3318      	adds	r3, #24
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7fe ff5e 	bl	80078cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a14:	4b25      	ldr	r3, [pc, #148]	; (8008aac <xTaskIncrementTick+0x164>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d903      	bls.n	8008a24 <xTaskIncrementTick+0xdc>
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a20:	4a22      	ldr	r2, [pc, #136]	; (8008aac <xTaskIncrementTick+0x164>)
 8008a22:	6013      	str	r3, [r2, #0]
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a28:	4613      	mov	r3, r2
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	4413      	add	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	4a1f      	ldr	r2, [pc, #124]	; (8008ab0 <xTaskIncrementTick+0x168>)
 8008a32:	441a      	add	r2, r3
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	3304      	adds	r3, #4
 8008a38:	4619      	mov	r1, r3
 8008a3a:	4610      	mov	r0, r2
 8008a3c:	f7fe fee9 	bl	8007812 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a44:	4b1b      	ldr	r3, [pc, #108]	; (8008ab4 <xTaskIncrementTick+0x16c>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d3b8      	bcc.n	80089c0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a52:	e7b5      	b.n	80089c0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008a54:	4b17      	ldr	r3, [pc, #92]	; (8008ab4 <xTaskIncrementTick+0x16c>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a5a:	4915      	ldr	r1, [pc, #84]	; (8008ab0 <xTaskIncrementTick+0x168>)
 8008a5c:	4613      	mov	r3, r2
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	4413      	add	r3, r2
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	440b      	add	r3, r1
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d907      	bls.n	8008a7c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	617b      	str	r3, [r7, #20]
 8008a70:	e004      	b.n	8008a7c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008a72:	4b11      	ldr	r3, [pc, #68]	; (8008ab8 <xTaskIncrementTick+0x170>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	3301      	adds	r3, #1
 8008a78:	4a0f      	ldr	r2, [pc, #60]	; (8008ab8 <xTaskIncrementTick+0x170>)
 8008a7a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008a7c:	4b0f      	ldr	r3, [pc, #60]	; (8008abc <xTaskIncrementTick+0x174>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d001      	beq.n	8008a88 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008a84:	2301      	movs	r3, #1
 8008a86:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008a88:	697b      	ldr	r3, [r7, #20]
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3718      	adds	r7, #24
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	200015f4 	.word	0x200015f4
 8008a98:	200015d0 	.word	0x200015d0
 8008a9c:	20001584 	.word	0x20001584
 8008aa0:	20001588 	.word	0x20001588
 8008aa4:	200015e4 	.word	0x200015e4
 8008aa8:	200015ec 	.word	0x200015ec
 8008aac:	200015d4 	.word	0x200015d4
 8008ab0:	200010fc 	.word	0x200010fc
 8008ab4:	200010f8 	.word	0x200010f8
 8008ab8:	200015dc 	.word	0x200015dc
 8008abc:	200015e0 	.word	0x200015e0

08008ac0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b086      	sub	sp, #24
 8008ac4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008ac6:	4b3b      	ldr	r3, [pc, #236]	; (8008bb4 <vTaskSwitchContext+0xf4>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d003      	beq.n	8008ad6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008ace:	4b3a      	ldr	r3, [pc, #232]	; (8008bb8 <vTaskSwitchContext+0xf8>)
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008ad4:	e06a      	b.n	8008bac <vTaskSwitchContext+0xec>
		xYieldPending = pdFALSE;
 8008ad6:	4b38      	ldr	r3, [pc, #224]	; (8008bb8 <vTaskSwitchContext+0xf8>)
 8008ad8:	2200      	movs	r2, #0
 8008ada:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8008adc:	4b37      	ldr	r3, [pc, #220]	; (8008bbc <vTaskSwitchContext+0xfc>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae2:	613b      	str	r3, [r7, #16]
 8008ae4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8008ae8:	60fb      	str	r3, [r7, #12]
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d111      	bne.n	8008b18 <vTaskSwitchContext+0x58>
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	3304      	adds	r3, #4
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d10b      	bne.n	8008b18 <vTaskSwitchContext+0x58>
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	3308      	adds	r3, #8
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d105      	bne.n	8008b18 <vTaskSwitchContext+0x58>
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	330c      	adds	r3, #12
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d008      	beq.n	8008b2a <vTaskSwitchContext+0x6a>
 8008b18:	4b28      	ldr	r3, [pc, #160]	; (8008bbc <vTaskSwitchContext+0xfc>)
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	4b27      	ldr	r3, [pc, #156]	; (8008bbc <vTaskSwitchContext+0xfc>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	3334      	adds	r3, #52	; 0x34
 8008b22:	4619      	mov	r1, r3
 8008b24:	4610      	mov	r0, r2
 8008b26:	f7f7 fd14 	bl	8000552 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b2a:	4b25      	ldr	r3, [pc, #148]	; (8008bc0 <vTaskSwitchContext+0x100>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	617b      	str	r3, [r7, #20]
 8008b30:	e012      	b.n	8008b58 <vTaskSwitchContext+0x98>
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d10c      	bne.n	8008b52 <vTaskSwitchContext+0x92>
	__asm volatile
 8008b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3c:	b672      	cpsid	i
 8008b3e:	f383 8811 	msr	BASEPRI, r3
 8008b42:	f3bf 8f6f 	isb	sy
 8008b46:	f3bf 8f4f 	dsb	sy
 8008b4a:	b662      	cpsie	i
 8008b4c:	607b      	str	r3, [r7, #4]
}
 8008b4e:	bf00      	nop
 8008b50:	e7fe      	b.n	8008b50 <vTaskSwitchContext+0x90>
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	3b01      	subs	r3, #1
 8008b56:	617b      	str	r3, [r7, #20]
 8008b58:	491a      	ldr	r1, [pc, #104]	; (8008bc4 <vTaskSwitchContext+0x104>)
 8008b5a:	697a      	ldr	r2, [r7, #20]
 8008b5c:	4613      	mov	r3, r2
 8008b5e:	009b      	lsls	r3, r3, #2
 8008b60:	4413      	add	r3, r2
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	440b      	add	r3, r1
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d0e2      	beq.n	8008b32 <vTaskSwitchContext+0x72>
 8008b6c:	697a      	ldr	r2, [r7, #20]
 8008b6e:	4613      	mov	r3, r2
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	4413      	add	r3, r2
 8008b74:	009b      	lsls	r3, r3, #2
 8008b76:	4a13      	ldr	r2, [pc, #76]	; (8008bc4 <vTaskSwitchContext+0x104>)
 8008b78:	4413      	add	r3, r2
 8008b7a:	60bb      	str	r3, [r7, #8]
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	685a      	ldr	r2, [r3, #4]
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	605a      	str	r2, [r3, #4]
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	685a      	ldr	r2, [r3, #4]
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	3308      	adds	r3, #8
 8008b8e:	429a      	cmp	r2, r3
 8008b90:	d104      	bne.n	8008b9c <vTaskSwitchContext+0xdc>
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	685a      	ldr	r2, [r3, #4]
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	605a      	str	r2, [r3, #4]
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	4a06      	ldr	r2, [pc, #24]	; (8008bbc <vTaskSwitchContext+0xfc>)
 8008ba4:	6013      	str	r3, [r2, #0]
 8008ba6:	4a06      	ldr	r2, [pc, #24]	; (8008bc0 <vTaskSwitchContext+0x100>)
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	6013      	str	r3, [r2, #0]
}
 8008bac:	bf00      	nop
 8008bae:	3718      	adds	r7, #24
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	200015f4 	.word	0x200015f4
 8008bb8:	200015e0 	.word	0x200015e0
 8008bbc:	200010f8 	.word	0x200010f8
 8008bc0:	200015d4 	.word	0x200015d4
 8008bc4:	200010fc 	.word	0x200010fc

08008bc8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d10c      	bne.n	8008bf2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bdc:	b672      	cpsid	i
 8008bde:	f383 8811 	msr	BASEPRI, r3
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	b662      	cpsie	i
 8008bec:	60fb      	str	r3, [r7, #12]
}
 8008bee:	bf00      	nop
 8008bf0:	e7fe      	b.n	8008bf0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008bf2:	4b07      	ldr	r3, [pc, #28]	; (8008c10 <vTaskPlaceOnEventList+0x48>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	3318      	adds	r3, #24
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f7fe fe2d 	bl	800785a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c00:	2101      	movs	r1, #1
 8008c02:	6838      	ldr	r0, [r7, #0]
 8008c04:	f000 fa8c 	bl	8009120 <prvAddCurrentTaskToDelayedList>
}
 8008c08:	bf00      	nop
 8008c0a:	3710      	adds	r7, #16
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	200010f8 	.word	0x200010f8

08008c14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b086      	sub	sp, #24
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d10c      	bne.n	8008c40 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8008c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c2a:	b672      	cpsid	i
 8008c2c:	f383 8811 	msr	BASEPRI, r3
 8008c30:	f3bf 8f6f 	isb	sy
 8008c34:	f3bf 8f4f 	dsb	sy
 8008c38:	b662      	cpsie	i
 8008c3a:	617b      	str	r3, [r7, #20]
}
 8008c3c:	bf00      	nop
 8008c3e:	e7fe      	b.n	8008c3e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c40:	4b0a      	ldr	r3, [pc, #40]	; (8008c6c <vTaskPlaceOnEventListRestricted+0x58>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	3318      	adds	r3, #24
 8008c46:	4619      	mov	r1, r3
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f7fe fde2 	bl	8007812 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d002      	beq.n	8008c5a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008c54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c58:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008c5a:	6879      	ldr	r1, [r7, #4]
 8008c5c:	68b8      	ldr	r0, [r7, #8]
 8008c5e:	f000 fa5f 	bl	8009120 <prvAddCurrentTaskToDelayedList>
	}
 8008c62:	bf00      	nop
 8008c64:	3718      	adds	r7, #24
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	200010f8 	.word	0x200010f8

08008c70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b086      	sub	sp, #24
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d10c      	bne.n	8008ca0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8a:	b672      	cpsid	i
 8008c8c:	f383 8811 	msr	BASEPRI, r3
 8008c90:	f3bf 8f6f 	isb	sy
 8008c94:	f3bf 8f4f 	dsb	sy
 8008c98:	b662      	cpsie	i
 8008c9a:	60fb      	str	r3, [r7, #12]
}
 8008c9c:	bf00      	nop
 8008c9e:	e7fe      	b.n	8008c9e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	3318      	adds	r3, #24
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f7fe fe11 	bl	80078cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008caa:	4b1e      	ldr	r3, [pc, #120]	; (8008d24 <xTaskRemoveFromEventList+0xb4>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d11d      	bne.n	8008cee <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	3304      	adds	r3, #4
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f7fe fe08 	bl	80078cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cc0:	4b19      	ldr	r3, [pc, #100]	; (8008d28 <xTaskRemoveFromEventList+0xb8>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d903      	bls.n	8008cd0 <xTaskRemoveFromEventList+0x60>
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ccc:	4a16      	ldr	r2, [pc, #88]	; (8008d28 <xTaskRemoveFromEventList+0xb8>)
 8008cce:	6013      	str	r3, [r2, #0]
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	4413      	add	r3, r2
 8008cda:	009b      	lsls	r3, r3, #2
 8008cdc:	4a13      	ldr	r2, [pc, #76]	; (8008d2c <xTaskRemoveFromEventList+0xbc>)
 8008cde:	441a      	add	r2, r3
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	4610      	mov	r0, r2
 8008ce8:	f7fe fd93 	bl	8007812 <vListInsertEnd>
 8008cec:	e005      	b.n	8008cfa <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	3318      	adds	r3, #24
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	480e      	ldr	r0, [pc, #56]	; (8008d30 <xTaskRemoveFromEventList+0xc0>)
 8008cf6:	f7fe fd8c 	bl	8007812 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cfe:	4b0d      	ldr	r3, [pc, #52]	; (8008d34 <xTaskRemoveFromEventList+0xc4>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d905      	bls.n	8008d14 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d0c:	4b0a      	ldr	r3, [pc, #40]	; (8008d38 <xTaskRemoveFromEventList+0xc8>)
 8008d0e:	2201      	movs	r2, #1
 8008d10:	601a      	str	r2, [r3, #0]
 8008d12:	e001      	b.n	8008d18 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008d14:	2300      	movs	r3, #0
 8008d16:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008d18:	697b      	ldr	r3, [r7, #20]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3718      	adds	r7, #24
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	200015f4 	.word	0x200015f4
 8008d28:	200015d4 	.word	0x200015d4
 8008d2c:	200010fc 	.word	0x200010fc
 8008d30:	2000158c 	.word	0x2000158c
 8008d34:	200010f8 	.word	0x200010f8
 8008d38:	200015e0 	.word	0x200015e0

08008d3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d44:	4b06      	ldr	r3, [pc, #24]	; (8008d60 <vTaskInternalSetTimeOutState+0x24>)
 8008d46:	681a      	ldr	r2, [r3, #0]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d4c:	4b05      	ldr	r3, [pc, #20]	; (8008d64 <vTaskInternalSetTimeOutState+0x28>)
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	605a      	str	r2, [r3, #4]
}
 8008d54:	bf00      	nop
 8008d56:	370c      	adds	r7, #12
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr
 8008d60:	200015e4 	.word	0x200015e4
 8008d64:	200015d0 	.word	0x200015d0

08008d68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b088      	sub	sp, #32
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d10c      	bne.n	8008d92 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7c:	b672      	cpsid	i
 8008d7e:	f383 8811 	msr	BASEPRI, r3
 8008d82:	f3bf 8f6f 	isb	sy
 8008d86:	f3bf 8f4f 	dsb	sy
 8008d8a:	b662      	cpsie	i
 8008d8c:	613b      	str	r3, [r7, #16]
}
 8008d8e:	bf00      	nop
 8008d90:	e7fe      	b.n	8008d90 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d10c      	bne.n	8008db2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9c:	b672      	cpsid	i
 8008d9e:	f383 8811 	msr	BASEPRI, r3
 8008da2:	f3bf 8f6f 	isb	sy
 8008da6:	f3bf 8f4f 	dsb	sy
 8008daa:	b662      	cpsie	i
 8008dac:	60fb      	str	r3, [r7, #12]
}
 8008dae:	bf00      	nop
 8008db0:	e7fe      	b.n	8008db0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008db2:	f000 fe73 	bl	8009a9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008db6:	4b1d      	ldr	r3, [pc, #116]	; (8008e2c <xTaskCheckForTimeOut+0xc4>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	685b      	ldr	r3, [r3, #4]
 8008dc0:	69ba      	ldr	r2, [r7, #24]
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dce:	d102      	bne.n	8008dd6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	61fb      	str	r3, [r7, #28]
 8008dd4:	e023      	b.n	8008e1e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	4b15      	ldr	r3, [pc, #84]	; (8008e30 <xTaskCheckForTimeOut+0xc8>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d007      	beq.n	8008df2 <xTaskCheckForTimeOut+0x8a>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	69ba      	ldr	r2, [r7, #24]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d302      	bcc.n	8008df2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008dec:	2301      	movs	r3, #1
 8008dee:	61fb      	str	r3, [r7, #28]
 8008df0:	e015      	b.n	8008e1e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	697a      	ldr	r2, [r7, #20]
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d20b      	bcs.n	8008e14 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	1ad2      	subs	r2, r2, r3
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f7ff ff97 	bl	8008d3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	61fb      	str	r3, [r7, #28]
 8008e12:	e004      	b.n	8008e1e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	2200      	movs	r2, #0
 8008e18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e1e:	f000 fe71 	bl	8009b04 <vPortExitCritical>

	return xReturn;
 8008e22:	69fb      	ldr	r3, [r7, #28]
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3720      	adds	r7, #32
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	200015d0 	.word	0x200015d0
 8008e30:	200015e4 	.word	0x200015e4

08008e34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e34:	b480      	push	{r7}
 8008e36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e38:	4b03      	ldr	r3, [pc, #12]	; (8008e48 <vTaskMissedYield+0x14>)
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	601a      	str	r2, [r3, #0]
}
 8008e3e:	bf00      	nop
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr
 8008e48:	200015e0 	.word	0x200015e0

08008e4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e54:	f000 f854 	bl	8008f00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e58:	4b07      	ldr	r3, [pc, #28]	; (8008e78 <prvIdleTask+0x2c>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d907      	bls.n	8008e70 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008e60:	4b06      	ldr	r3, [pc, #24]	; (8008e7c <prvIdleTask+0x30>)
 8008e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e66:	601a      	str	r2, [r3, #0]
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8008e70:	f7f7 fb68 	bl	8000544 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008e74:	e7ee      	b.n	8008e54 <prvIdleTask+0x8>
 8008e76:	bf00      	nop
 8008e78:	200010fc 	.word	0x200010fc
 8008e7c:	e000ed04 	.word	0xe000ed04

08008e80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e86:	2300      	movs	r3, #0
 8008e88:	607b      	str	r3, [r7, #4]
 8008e8a:	e00c      	b.n	8008ea6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	4613      	mov	r3, r2
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	4413      	add	r3, r2
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	4a12      	ldr	r2, [pc, #72]	; (8008ee0 <prvInitialiseTaskLists+0x60>)
 8008e98:	4413      	add	r3, r2
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7fe fc8c 	bl	80077b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	607b      	str	r3, [r7, #4]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2b37      	cmp	r3, #55	; 0x37
 8008eaa:	d9ef      	bls.n	8008e8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008eac:	480d      	ldr	r0, [pc, #52]	; (8008ee4 <prvInitialiseTaskLists+0x64>)
 8008eae:	f7fe fc83 	bl	80077b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008eb2:	480d      	ldr	r0, [pc, #52]	; (8008ee8 <prvInitialiseTaskLists+0x68>)
 8008eb4:	f7fe fc80 	bl	80077b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008eb8:	480c      	ldr	r0, [pc, #48]	; (8008eec <prvInitialiseTaskLists+0x6c>)
 8008eba:	f7fe fc7d 	bl	80077b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008ebe:	480c      	ldr	r0, [pc, #48]	; (8008ef0 <prvInitialiseTaskLists+0x70>)
 8008ec0:	f7fe fc7a 	bl	80077b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ec4:	480b      	ldr	r0, [pc, #44]	; (8008ef4 <prvInitialiseTaskLists+0x74>)
 8008ec6:	f7fe fc77 	bl	80077b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008eca:	4b0b      	ldr	r3, [pc, #44]	; (8008ef8 <prvInitialiseTaskLists+0x78>)
 8008ecc:	4a05      	ldr	r2, [pc, #20]	; (8008ee4 <prvInitialiseTaskLists+0x64>)
 8008ece:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ed0:	4b0a      	ldr	r3, [pc, #40]	; (8008efc <prvInitialiseTaskLists+0x7c>)
 8008ed2:	4a05      	ldr	r2, [pc, #20]	; (8008ee8 <prvInitialiseTaskLists+0x68>)
 8008ed4:	601a      	str	r2, [r3, #0]
}
 8008ed6:	bf00      	nop
 8008ed8:	3708      	adds	r7, #8
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	200010fc 	.word	0x200010fc
 8008ee4:	2000155c 	.word	0x2000155c
 8008ee8:	20001570 	.word	0x20001570
 8008eec:	2000158c 	.word	0x2000158c
 8008ef0:	200015a0 	.word	0x200015a0
 8008ef4:	200015b8 	.word	0x200015b8
 8008ef8:	20001584 	.word	0x20001584
 8008efc:	20001588 	.word	0x20001588

08008f00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f06:	e019      	b.n	8008f3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f08:	f000 fdc8 	bl	8009a9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f0c:	4b10      	ldr	r3, [pc, #64]	; (8008f50 <prvCheckTasksWaitingTermination+0x50>)
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	3304      	adds	r3, #4
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7fe fcd7 	bl	80078cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f1e:	4b0d      	ldr	r3, [pc, #52]	; (8008f54 <prvCheckTasksWaitingTermination+0x54>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	3b01      	subs	r3, #1
 8008f24:	4a0b      	ldr	r2, [pc, #44]	; (8008f54 <prvCheckTasksWaitingTermination+0x54>)
 8008f26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f28:	4b0b      	ldr	r3, [pc, #44]	; (8008f58 <prvCheckTasksWaitingTermination+0x58>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	4a0a      	ldr	r2, [pc, #40]	; (8008f58 <prvCheckTasksWaitingTermination+0x58>)
 8008f30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f32:	f000 fde7 	bl	8009b04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 f810 	bl	8008f5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f3c:	4b06      	ldr	r3, [pc, #24]	; (8008f58 <prvCheckTasksWaitingTermination+0x58>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d1e1      	bne.n	8008f08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f44:	bf00      	nop
 8008f46:	bf00      	nop
 8008f48:	3708      	adds	r7, #8
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	200015a0 	.word	0x200015a0
 8008f54:	200015cc 	.word	0x200015cc
 8008f58:	200015b4 	.word	0x200015b4

08008f5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d108      	bne.n	8008f80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 ff8e 	bl	8009e94 <vPortFree>
				vPortFree( pxTCB );
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 ff8b 	bl	8009e94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f7e:	e01a      	b.n	8008fb6 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d103      	bne.n	8008f92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f000 ff82 	bl	8009e94 <vPortFree>
	}
 8008f90:	e011      	b.n	8008fb6 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	d00c      	beq.n	8008fb6 <prvDeleteTCB+0x5a>
	__asm volatile
 8008f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa0:	b672      	cpsid	i
 8008fa2:	f383 8811 	msr	BASEPRI, r3
 8008fa6:	f3bf 8f6f 	isb	sy
 8008faa:	f3bf 8f4f 	dsb	sy
 8008fae:	b662      	cpsie	i
 8008fb0:	60fb      	str	r3, [r7, #12]
}
 8008fb2:	bf00      	nop
 8008fb4:	e7fe      	b.n	8008fb4 <prvDeleteTCB+0x58>
	}
 8008fb6:	bf00      	nop
 8008fb8:	3710      	adds	r7, #16
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}
	...

08008fc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fc6:	4b0c      	ldr	r3, [pc, #48]	; (8008ff8 <prvResetNextTaskUnblockTime+0x38>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d104      	bne.n	8008fda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008fd0:	4b0a      	ldr	r3, [pc, #40]	; (8008ffc <prvResetNextTaskUnblockTime+0x3c>)
 8008fd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008fd8:	e008      	b.n	8008fec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fda:	4b07      	ldr	r3, [pc, #28]	; (8008ff8 <prvResetNextTaskUnblockTime+0x38>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	4a04      	ldr	r2, [pc, #16]	; (8008ffc <prvResetNextTaskUnblockTime+0x3c>)
 8008fea:	6013      	str	r3, [r2, #0]
}
 8008fec:	bf00      	nop
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr
 8008ff8:	20001584 	.word	0x20001584
 8008ffc:	200015ec 	.word	0x200015ec

08009000 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009006:	4b0b      	ldr	r3, [pc, #44]	; (8009034 <xTaskGetSchedulerState+0x34>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d102      	bne.n	8009014 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800900e:	2301      	movs	r3, #1
 8009010:	607b      	str	r3, [r7, #4]
 8009012:	e008      	b.n	8009026 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009014:	4b08      	ldr	r3, [pc, #32]	; (8009038 <xTaskGetSchedulerState+0x38>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d102      	bne.n	8009022 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800901c:	2302      	movs	r3, #2
 800901e:	607b      	str	r3, [r7, #4]
 8009020:	e001      	b.n	8009026 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009022:	2300      	movs	r3, #0
 8009024:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009026:	687b      	ldr	r3, [r7, #4]
	}
 8009028:	4618      	mov	r0, r3
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr
 8009034:	200015d8 	.word	0x200015d8
 8009038:	200015f4 	.word	0x200015f4

0800903c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800903c:	b580      	push	{r7, lr}
 800903e:	b086      	sub	sp, #24
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009048:	2300      	movs	r3, #0
 800904a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d05a      	beq.n	8009108 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009052:	4b30      	ldr	r3, [pc, #192]	; (8009114 <xTaskPriorityDisinherit+0xd8>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	693a      	ldr	r2, [r7, #16]
 8009058:	429a      	cmp	r2, r3
 800905a:	d00c      	beq.n	8009076 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800905c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009060:	b672      	cpsid	i
 8009062:	f383 8811 	msr	BASEPRI, r3
 8009066:	f3bf 8f6f 	isb	sy
 800906a:	f3bf 8f4f 	dsb	sy
 800906e:	b662      	cpsie	i
 8009070:	60fb      	str	r3, [r7, #12]
}
 8009072:	bf00      	nop
 8009074:	e7fe      	b.n	8009074 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800907a:	2b00      	cmp	r3, #0
 800907c:	d10c      	bne.n	8009098 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800907e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009082:	b672      	cpsid	i
 8009084:	f383 8811 	msr	BASEPRI, r3
 8009088:	f3bf 8f6f 	isb	sy
 800908c:	f3bf 8f4f 	dsb	sy
 8009090:	b662      	cpsie	i
 8009092:	60bb      	str	r3, [r7, #8]
}
 8009094:	bf00      	nop
 8009096:	e7fe      	b.n	8009096 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800909c:	1e5a      	subs	r2, r3, #1
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d02c      	beq.n	8009108 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d128      	bne.n	8009108 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	3304      	adds	r3, #4
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7fe fc06 	bl	80078cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090d8:	4b0f      	ldr	r3, [pc, #60]	; (8009118 <xTaskPriorityDisinherit+0xdc>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d903      	bls.n	80090e8 <xTaskPriorityDisinherit+0xac>
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e4:	4a0c      	ldr	r2, [pc, #48]	; (8009118 <xTaskPriorityDisinherit+0xdc>)
 80090e6:	6013      	str	r3, [r2, #0]
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ec:	4613      	mov	r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	4413      	add	r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	4a09      	ldr	r2, [pc, #36]	; (800911c <xTaskPriorityDisinherit+0xe0>)
 80090f6:	441a      	add	r2, r3
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	3304      	adds	r3, #4
 80090fc:	4619      	mov	r1, r3
 80090fe:	4610      	mov	r0, r2
 8009100:	f7fe fb87 	bl	8007812 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009104:	2301      	movs	r3, #1
 8009106:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009108:	697b      	ldr	r3, [r7, #20]
	}
 800910a:	4618      	mov	r0, r3
 800910c:	3718      	adds	r7, #24
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	200010f8 	.word	0x200010f8
 8009118:	200015d4 	.word	0x200015d4
 800911c:	200010fc 	.word	0x200010fc

08009120 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b084      	sub	sp, #16
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800912a:	4b21      	ldr	r3, [pc, #132]	; (80091b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009130:	4b20      	ldr	r3, [pc, #128]	; (80091b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	3304      	adds	r3, #4
 8009136:	4618      	mov	r0, r3
 8009138:	f7fe fbc8 	bl	80078cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009142:	d10a      	bne.n	800915a <prvAddCurrentTaskToDelayedList+0x3a>
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d007      	beq.n	800915a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800914a:	4b1a      	ldr	r3, [pc, #104]	; (80091b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	3304      	adds	r3, #4
 8009150:	4619      	mov	r1, r3
 8009152:	4819      	ldr	r0, [pc, #100]	; (80091b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009154:	f7fe fb5d 	bl	8007812 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009158:	e026      	b.n	80091a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	4413      	add	r3, r2
 8009160:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009162:	4b14      	ldr	r3, [pc, #80]	; (80091b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68ba      	ldr	r2, [r7, #8]
 8009168:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800916a:	68ba      	ldr	r2, [r7, #8]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	429a      	cmp	r2, r3
 8009170:	d209      	bcs.n	8009186 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009172:	4b12      	ldr	r3, [pc, #72]	; (80091bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	4b0f      	ldr	r3, [pc, #60]	; (80091b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	3304      	adds	r3, #4
 800917c:	4619      	mov	r1, r3
 800917e:	4610      	mov	r0, r2
 8009180:	f7fe fb6b 	bl	800785a <vListInsert>
}
 8009184:	e010      	b.n	80091a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009186:	4b0e      	ldr	r3, [pc, #56]	; (80091c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	4b0a      	ldr	r3, [pc, #40]	; (80091b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	3304      	adds	r3, #4
 8009190:	4619      	mov	r1, r3
 8009192:	4610      	mov	r0, r2
 8009194:	f7fe fb61 	bl	800785a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009198:	4b0a      	ldr	r3, [pc, #40]	; (80091c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68ba      	ldr	r2, [r7, #8]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d202      	bcs.n	80091a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80091a2:	4a08      	ldr	r2, [pc, #32]	; (80091c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	6013      	str	r3, [r2, #0]
}
 80091a8:	bf00      	nop
 80091aa:	3710      	adds	r7, #16
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	200015d0 	.word	0x200015d0
 80091b4:	200010f8 	.word	0x200010f8
 80091b8:	200015b8 	.word	0x200015b8
 80091bc:	20001588 	.word	0x20001588
 80091c0:	20001584 	.word	0x20001584
 80091c4:	200015ec 	.word	0x200015ec

080091c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b08a      	sub	sp, #40	; 0x28
 80091cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80091ce:	2300      	movs	r3, #0
 80091d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80091d2:	f000 fb15 	bl	8009800 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80091d6:	4b1d      	ldr	r3, [pc, #116]	; (800924c <xTimerCreateTimerTask+0x84>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d021      	beq.n	8009222 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80091de:	2300      	movs	r3, #0
 80091e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80091e2:	2300      	movs	r3, #0
 80091e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80091e6:	1d3a      	adds	r2, r7, #4
 80091e8:	f107 0108 	add.w	r1, r7, #8
 80091ec:	f107 030c 	add.w	r3, r7, #12
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7fe fac7 	bl	8007784 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80091f6:	6879      	ldr	r1, [r7, #4]
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	68fa      	ldr	r2, [r7, #12]
 80091fc:	9202      	str	r2, [sp, #8]
 80091fe:	9301      	str	r3, [sp, #4]
 8009200:	2302      	movs	r3, #2
 8009202:	9300      	str	r3, [sp, #0]
 8009204:	2300      	movs	r3, #0
 8009206:	460a      	mov	r2, r1
 8009208:	4911      	ldr	r1, [pc, #68]	; (8009250 <xTimerCreateTimerTask+0x88>)
 800920a:	4812      	ldr	r0, [pc, #72]	; (8009254 <xTimerCreateTimerTask+0x8c>)
 800920c:	f7ff f892 	bl	8008334 <xTaskCreateStatic>
 8009210:	4603      	mov	r3, r0
 8009212:	4a11      	ldr	r2, [pc, #68]	; (8009258 <xTimerCreateTimerTask+0x90>)
 8009214:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009216:	4b10      	ldr	r3, [pc, #64]	; (8009258 <xTimerCreateTimerTask+0x90>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d001      	beq.n	8009222 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800921e:	2301      	movs	r3, #1
 8009220:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d10c      	bne.n	8009242 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8009228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922c:	b672      	cpsid	i
 800922e:	f383 8811 	msr	BASEPRI, r3
 8009232:	f3bf 8f6f 	isb	sy
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	b662      	cpsie	i
 800923c:	613b      	str	r3, [r7, #16]
}
 800923e:	bf00      	nop
 8009240:	e7fe      	b.n	8009240 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009242:	697b      	ldr	r3, [r7, #20]
}
 8009244:	4618      	mov	r0, r3
 8009246:	3718      	adds	r7, #24
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	20001628 	.word	0x20001628
 8009250:	0800a168 	.word	0x0800a168
 8009254:	08009399 	.word	0x08009399
 8009258:	2000162c 	.word	0x2000162c

0800925c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b08a      	sub	sp, #40	; 0x28
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	607a      	str	r2, [r7, #4]
 8009268:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800926a:	2300      	movs	r3, #0
 800926c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d10c      	bne.n	800928e <xTimerGenericCommand+0x32>
	__asm volatile
 8009274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009278:	b672      	cpsid	i
 800927a:	f383 8811 	msr	BASEPRI, r3
 800927e:	f3bf 8f6f 	isb	sy
 8009282:	f3bf 8f4f 	dsb	sy
 8009286:	b662      	cpsie	i
 8009288:	623b      	str	r3, [r7, #32]
}
 800928a:	bf00      	nop
 800928c:	e7fe      	b.n	800928c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800928e:	4b1a      	ldr	r3, [pc, #104]	; (80092f8 <xTimerGenericCommand+0x9c>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d02a      	beq.n	80092ec <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	2b05      	cmp	r3, #5
 80092a6:	dc18      	bgt.n	80092da <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80092a8:	f7ff feaa 	bl	8009000 <xTaskGetSchedulerState>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	d109      	bne.n	80092c6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80092b2:	4b11      	ldr	r3, [pc, #68]	; (80092f8 <xTimerGenericCommand+0x9c>)
 80092b4:	6818      	ldr	r0, [r3, #0]
 80092b6:	f107 0110 	add.w	r1, r7, #16
 80092ba:	2300      	movs	r3, #0
 80092bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092be:	f7fe fc3f 	bl	8007b40 <xQueueGenericSend>
 80092c2:	6278      	str	r0, [r7, #36]	; 0x24
 80092c4:	e012      	b.n	80092ec <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80092c6:	4b0c      	ldr	r3, [pc, #48]	; (80092f8 <xTimerGenericCommand+0x9c>)
 80092c8:	6818      	ldr	r0, [r3, #0]
 80092ca:	f107 0110 	add.w	r1, r7, #16
 80092ce:	2300      	movs	r3, #0
 80092d0:	2200      	movs	r2, #0
 80092d2:	f7fe fc35 	bl	8007b40 <xQueueGenericSend>
 80092d6:	6278      	str	r0, [r7, #36]	; 0x24
 80092d8:	e008      	b.n	80092ec <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80092da:	4b07      	ldr	r3, [pc, #28]	; (80092f8 <xTimerGenericCommand+0x9c>)
 80092dc:	6818      	ldr	r0, [r3, #0]
 80092de:	f107 0110 	add.w	r1, r7, #16
 80092e2:	2300      	movs	r3, #0
 80092e4:	683a      	ldr	r2, [r7, #0]
 80092e6:	f7fe fd31 	bl	8007d4c <xQueueGenericSendFromISR>
 80092ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80092ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80092ee:	4618      	mov	r0, r3
 80092f0:	3728      	adds	r7, #40	; 0x28
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	20001628 	.word	0x20001628

080092fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b088      	sub	sp, #32
 8009300:	af02      	add	r7, sp, #8
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009306:	4b23      	ldr	r3, [pc, #140]	; (8009394 <prvProcessExpiredTimer+0x98>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	3304      	adds	r3, #4
 8009314:	4618      	mov	r0, r3
 8009316:	f7fe fad9 	bl	80078cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009320:	f003 0304 	and.w	r3, r3, #4
 8009324:	2b00      	cmp	r3, #0
 8009326:	d024      	beq.n	8009372 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	699a      	ldr	r2, [r3, #24]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	18d1      	adds	r1, r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	683a      	ldr	r2, [r7, #0]
 8009334:	6978      	ldr	r0, [r7, #20]
 8009336:	f000 f8d3 	bl	80094e0 <prvInsertTimerInActiveList>
 800933a:	4603      	mov	r3, r0
 800933c:	2b00      	cmp	r3, #0
 800933e:	d021      	beq.n	8009384 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009340:	2300      	movs	r3, #0
 8009342:	9300      	str	r3, [sp, #0]
 8009344:	2300      	movs	r3, #0
 8009346:	687a      	ldr	r2, [r7, #4]
 8009348:	2100      	movs	r1, #0
 800934a:	6978      	ldr	r0, [r7, #20]
 800934c:	f7ff ff86 	bl	800925c <xTimerGenericCommand>
 8009350:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d115      	bne.n	8009384 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8009358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935c:	b672      	cpsid	i
 800935e:	f383 8811 	msr	BASEPRI, r3
 8009362:	f3bf 8f6f 	isb	sy
 8009366:	f3bf 8f4f 	dsb	sy
 800936a:	b662      	cpsie	i
 800936c:	60fb      	str	r3, [r7, #12]
}
 800936e:	bf00      	nop
 8009370:	e7fe      	b.n	8009370 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009378:	f023 0301 	bic.w	r3, r3, #1
 800937c:	b2da      	uxtb	r2, r3
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	6a1b      	ldr	r3, [r3, #32]
 8009388:	6978      	ldr	r0, [r7, #20]
 800938a:	4798      	blx	r3
}
 800938c:	bf00      	nop
 800938e:	3718      	adds	r7, #24
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	20001620 	.word	0x20001620

08009398 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093a0:	f107 0308 	add.w	r3, r7, #8
 80093a4:	4618      	mov	r0, r3
 80093a6:	f000 f857 	bl	8009458 <prvGetNextExpireTime>
 80093aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	4619      	mov	r1, r3
 80093b0:	68f8      	ldr	r0, [r7, #12]
 80093b2:	f000 f803 	bl	80093bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80093b6:	f000 f8d5 	bl	8009564 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093ba:	e7f1      	b.n	80093a0 <prvTimerTask+0x8>

080093bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80093c6:	f7ff fa01 	bl	80087cc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80093ca:	f107 0308 	add.w	r3, r7, #8
 80093ce:	4618      	mov	r0, r3
 80093d0:	f000 f866 	bl	80094a0 <prvSampleTimeNow>
 80093d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d130      	bne.n	800943e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d10a      	bne.n	80093f8 <prvProcessTimerOrBlockTask+0x3c>
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d806      	bhi.n	80093f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80093ea:	f7ff f9fd 	bl	80087e8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80093ee:	68f9      	ldr	r1, [r7, #12]
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f7ff ff83 	bl	80092fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80093f6:	e024      	b.n	8009442 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d008      	beq.n	8009410 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80093fe:	4b13      	ldr	r3, [pc, #76]	; (800944c <prvProcessTimerOrBlockTask+0x90>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d101      	bne.n	800940c <prvProcessTimerOrBlockTask+0x50>
 8009408:	2301      	movs	r3, #1
 800940a:	e000      	b.n	800940e <prvProcessTimerOrBlockTask+0x52>
 800940c:	2300      	movs	r3, #0
 800940e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009410:	4b0f      	ldr	r3, [pc, #60]	; (8009450 <prvProcessTimerOrBlockTask+0x94>)
 8009412:	6818      	ldr	r0, [r3, #0]
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	683a      	ldr	r2, [r7, #0]
 800941c:	4619      	mov	r1, r3
 800941e:	f7fe ff55 	bl	80082cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009422:	f7ff f9e1 	bl	80087e8 <xTaskResumeAll>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d10a      	bne.n	8009442 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800942c:	4b09      	ldr	r3, [pc, #36]	; (8009454 <prvProcessTimerOrBlockTask+0x98>)
 800942e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009432:	601a      	str	r2, [r3, #0]
 8009434:	f3bf 8f4f 	dsb	sy
 8009438:	f3bf 8f6f 	isb	sy
}
 800943c:	e001      	b.n	8009442 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800943e:	f7ff f9d3 	bl	80087e8 <xTaskResumeAll>
}
 8009442:	bf00      	nop
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	20001624 	.word	0x20001624
 8009450:	20001628 	.word	0x20001628
 8009454:	e000ed04 	.word	0xe000ed04

08009458 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009460:	4b0e      	ldr	r3, [pc, #56]	; (800949c <prvGetNextExpireTime+0x44>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d101      	bne.n	800946e <prvGetNextExpireTime+0x16>
 800946a:	2201      	movs	r2, #1
 800946c:	e000      	b.n	8009470 <prvGetNextExpireTime+0x18>
 800946e:	2200      	movs	r2, #0
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d105      	bne.n	8009488 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800947c:	4b07      	ldr	r3, [pc, #28]	; (800949c <prvGetNextExpireTime+0x44>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	68db      	ldr	r3, [r3, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	60fb      	str	r3, [r7, #12]
 8009486:	e001      	b.n	800948c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009488:	2300      	movs	r3, #0
 800948a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800948c:	68fb      	ldr	r3, [r7, #12]
}
 800948e:	4618      	mov	r0, r3
 8009490:	3714      	adds	r7, #20
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	20001620 	.word	0x20001620

080094a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80094a8:	f7ff fa3e 	bl	8008928 <xTaskGetTickCount>
 80094ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80094ae:	4b0b      	ldr	r3, [pc, #44]	; (80094dc <prvSampleTimeNow+0x3c>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d205      	bcs.n	80094c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80094b8:	f000 f93c 	bl	8009734 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	601a      	str	r2, [r3, #0]
 80094c2:	e002      	b.n	80094ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80094ca:	4a04      	ldr	r2, [pc, #16]	; (80094dc <prvSampleTimeNow+0x3c>)
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80094d0:	68fb      	ldr	r3, [r7, #12]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	20001630 	.word	0x20001630

080094e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b086      	sub	sp, #24
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	60b9      	str	r1, [r7, #8]
 80094ea:	607a      	str	r2, [r7, #4]
 80094ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80094ee:	2300      	movs	r3, #0
 80094f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	68ba      	ldr	r2, [r7, #8]
 80094f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80094fe:	68ba      	ldr	r2, [r7, #8]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	429a      	cmp	r2, r3
 8009504:	d812      	bhi.n	800952c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	1ad2      	subs	r2, r2, r3
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	429a      	cmp	r2, r3
 8009512:	d302      	bcc.n	800951a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009514:	2301      	movs	r3, #1
 8009516:	617b      	str	r3, [r7, #20]
 8009518:	e01b      	b.n	8009552 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800951a:	4b10      	ldr	r3, [pc, #64]	; (800955c <prvInsertTimerInActiveList+0x7c>)
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	3304      	adds	r3, #4
 8009522:	4619      	mov	r1, r3
 8009524:	4610      	mov	r0, r2
 8009526:	f7fe f998 	bl	800785a <vListInsert>
 800952a:	e012      	b.n	8009552 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800952c:	687a      	ldr	r2, [r7, #4]
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	429a      	cmp	r2, r3
 8009532:	d206      	bcs.n	8009542 <prvInsertTimerInActiveList+0x62>
 8009534:	68ba      	ldr	r2, [r7, #8]
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	429a      	cmp	r2, r3
 800953a:	d302      	bcc.n	8009542 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800953c:	2301      	movs	r3, #1
 800953e:	617b      	str	r3, [r7, #20]
 8009540:	e007      	b.n	8009552 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009542:	4b07      	ldr	r3, [pc, #28]	; (8009560 <prvInsertTimerInActiveList+0x80>)
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	3304      	adds	r3, #4
 800954a:	4619      	mov	r1, r3
 800954c:	4610      	mov	r0, r2
 800954e:	f7fe f984 	bl	800785a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009552:	697b      	ldr	r3, [r7, #20]
}
 8009554:	4618      	mov	r0, r3
 8009556:	3718      	adds	r7, #24
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	20001624 	.word	0x20001624
 8009560:	20001620 	.word	0x20001620

08009564 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b08e      	sub	sp, #56	; 0x38
 8009568:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800956a:	e0d0      	b.n	800970e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2b00      	cmp	r3, #0
 8009570:	da1a      	bge.n	80095a8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009572:	1d3b      	adds	r3, r7, #4
 8009574:	3304      	adds	r3, #4
 8009576:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800957a:	2b00      	cmp	r3, #0
 800957c:	d10c      	bne.n	8009598 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800957e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009582:	b672      	cpsid	i
 8009584:	f383 8811 	msr	BASEPRI, r3
 8009588:	f3bf 8f6f 	isb	sy
 800958c:	f3bf 8f4f 	dsb	sy
 8009590:	b662      	cpsie	i
 8009592:	61fb      	str	r3, [r7, #28]
}
 8009594:	bf00      	nop
 8009596:	e7fe      	b.n	8009596 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800959e:	6850      	ldr	r0, [r2, #4]
 80095a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095a2:	6892      	ldr	r2, [r2, #8]
 80095a4:	4611      	mov	r1, r2
 80095a6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	f2c0 80ae 	blt.w	800970c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80095b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b6:	695b      	ldr	r3, [r3, #20]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d004      	beq.n	80095c6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095be:	3304      	adds	r3, #4
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7fe f983 	bl	80078cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80095c6:	463b      	mov	r3, r7
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7ff ff69 	bl	80094a0 <prvSampleTimeNow>
 80095ce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2b09      	cmp	r3, #9
 80095d4:	f200 809b 	bhi.w	800970e <prvProcessReceivedCommands+0x1aa>
 80095d8:	a201      	add	r2, pc, #4	; (adr r2, 80095e0 <prvProcessReceivedCommands+0x7c>)
 80095da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095de:	bf00      	nop
 80095e0:	08009609 	.word	0x08009609
 80095e4:	08009609 	.word	0x08009609
 80095e8:	08009609 	.word	0x08009609
 80095ec:	08009681 	.word	0x08009681
 80095f0:	08009695 	.word	0x08009695
 80095f4:	080096e3 	.word	0x080096e3
 80095f8:	08009609 	.word	0x08009609
 80095fc:	08009609 	.word	0x08009609
 8009600:	08009681 	.word	0x08009681
 8009604:	08009695 	.word	0x08009695
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800960a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800960e:	f043 0301 	orr.w	r3, r3, #1
 8009612:	b2da      	uxtb	r2, r3
 8009614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009616:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961e:	699b      	ldr	r3, [r3, #24]
 8009620:	18d1      	adds	r1, r2, r3
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009628:	f7ff ff5a 	bl	80094e0 <prvInsertTimerInActiveList>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d06d      	beq.n	800970e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009634:	6a1b      	ldr	r3, [r3, #32]
 8009636:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009638:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800963a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009640:	f003 0304 	and.w	r3, r3, #4
 8009644:	2b00      	cmp	r3, #0
 8009646:	d062      	beq.n	800970e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009648:	68ba      	ldr	r2, [r7, #8]
 800964a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964c:	699b      	ldr	r3, [r3, #24]
 800964e:	441a      	add	r2, r3
 8009650:	2300      	movs	r3, #0
 8009652:	9300      	str	r3, [sp, #0]
 8009654:	2300      	movs	r3, #0
 8009656:	2100      	movs	r1, #0
 8009658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800965a:	f7ff fdff 	bl	800925c <xTimerGenericCommand>
 800965e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009660:	6a3b      	ldr	r3, [r7, #32]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d153      	bne.n	800970e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8009666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966a:	b672      	cpsid	i
 800966c:	f383 8811 	msr	BASEPRI, r3
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	f3bf 8f4f 	dsb	sy
 8009678:	b662      	cpsie	i
 800967a:	61bb      	str	r3, [r7, #24]
}
 800967c:	bf00      	nop
 800967e:	e7fe      	b.n	800967e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009682:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009686:	f023 0301 	bic.w	r3, r3, #1
 800968a:	b2da      	uxtb	r2, r3
 800968c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009692:	e03c      	b.n	800970e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009696:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800969a:	f043 0301 	orr.w	r3, r3, #1
 800969e:	b2da      	uxtb	r2, r3
 80096a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80096a6:	68ba      	ldr	r2, [r7, #8]
 80096a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096aa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80096ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ae:	699b      	ldr	r3, [r3, #24]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d10c      	bne.n	80096ce <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80096b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b8:	b672      	cpsid	i
 80096ba:	f383 8811 	msr	BASEPRI, r3
 80096be:	f3bf 8f6f 	isb	sy
 80096c2:	f3bf 8f4f 	dsb	sy
 80096c6:	b662      	cpsie	i
 80096c8:	617b      	str	r3, [r7, #20]
}
 80096ca:	bf00      	nop
 80096cc:	e7fe      	b.n	80096cc <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80096ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d0:	699a      	ldr	r2, [r3, #24]
 80096d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d4:	18d1      	adds	r1, r2, r3
 80096d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096dc:	f7ff ff00 	bl	80094e0 <prvInsertTimerInActiveList>
					break;
 80096e0:	e015      	b.n	800970e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80096e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096e8:	f003 0302 	and.w	r3, r3, #2
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d103      	bne.n	80096f8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80096f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096f2:	f000 fbcf 	bl	8009e94 <vPortFree>
 80096f6:	e00a      	b.n	800970e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096fe:	f023 0301 	bic.w	r3, r3, #1
 8009702:	b2da      	uxtb	r2, r3
 8009704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009706:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800970a:	e000      	b.n	800970e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800970c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800970e:	4b08      	ldr	r3, [pc, #32]	; (8009730 <prvProcessReceivedCommands+0x1cc>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	1d39      	adds	r1, r7, #4
 8009714:	2200      	movs	r2, #0
 8009716:	4618      	mov	r0, r3
 8009718:	f7fe fbb8 	bl	8007e8c <xQueueReceive>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	f47f af24 	bne.w	800956c <prvProcessReceivedCommands+0x8>
	}
}
 8009724:	bf00      	nop
 8009726:	bf00      	nop
 8009728:	3730      	adds	r7, #48	; 0x30
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	20001628 	.word	0x20001628

08009734 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b088      	sub	sp, #32
 8009738:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800973a:	e04a      	b.n	80097d2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800973c:	4b2e      	ldr	r3, [pc, #184]	; (80097f8 <prvSwitchTimerLists+0xc4>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009746:	4b2c      	ldr	r3, [pc, #176]	; (80097f8 <prvSwitchTimerLists+0xc4>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	3304      	adds	r3, #4
 8009754:	4618      	mov	r0, r3
 8009756:	f7fe f8b9 	bl	80078cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	6a1b      	ldr	r3, [r3, #32]
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009768:	f003 0304 	and.w	r3, r3, #4
 800976c:	2b00      	cmp	r3, #0
 800976e:	d030      	beq.n	80097d2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	699b      	ldr	r3, [r3, #24]
 8009774:	693a      	ldr	r2, [r7, #16]
 8009776:	4413      	add	r3, r2
 8009778:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800977a:	68ba      	ldr	r2, [r7, #8]
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	429a      	cmp	r2, r3
 8009780:	d90e      	bls.n	80097a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	68ba      	ldr	r2, [r7, #8]
 8009786:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800978e:	4b1a      	ldr	r3, [pc, #104]	; (80097f8 <prvSwitchTimerLists+0xc4>)
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	3304      	adds	r3, #4
 8009796:	4619      	mov	r1, r3
 8009798:	4610      	mov	r0, r2
 800979a:	f7fe f85e 	bl	800785a <vListInsert>
 800979e:	e018      	b.n	80097d2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80097a0:	2300      	movs	r3, #0
 80097a2:	9300      	str	r3, [sp, #0]
 80097a4:	2300      	movs	r3, #0
 80097a6:	693a      	ldr	r2, [r7, #16]
 80097a8:	2100      	movs	r1, #0
 80097aa:	68f8      	ldr	r0, [r7, #12]
 80097ac:	f7ff fd56 	bl	800925c <xTimerGenericCommand>
 80097b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d10c      	bne.n	80097d2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 80097b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097bc:	b672      	cpsid	i
 80097be:	f383 8811 	msr	BASEPRI, r3
 80097c2:	f3bf 8f6f 	isb	sy
 80097c6:	f3bf 8f4f 	dsb	sy
 80097ca:	b662      	cpsie	i
 80097cc:	603b      	str	r3, [r7, #0]
}
 80097ce:	bf00      	nop
 80097d0:	e7fe      	b.n	80097d0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097d2:	4b09      	ldr	r3, [pc, #36]	; (80097f8 <prvSwitchTimerLists+0xc4>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d1af      	bne.n	800973c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80097dc:	4b06      	ldr	r3, [pc, #24]	; (80097f8 <prvSwitchTimerLists+0xc4>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80097e2:	4b06      	ldr	r3, [pc, #24]	; (80097fc <prvSwitchTimerLists+0xc8>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a04      	ldr	r2, [pc, #16]	; (80097f8 <prvSwitchTimerLists+0xc4>)
 80097e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80097ea:	4a04      	ldr	r2, [pc, #16]	; (80097fc <prvSwitchTimerLists+0xc8>)
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	6013      	str	r3, [r2, #0]
}
 80097f0:	bf00      	nop
 80097f2:	3718      	adds	r7, #24
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	20001620 	.word	0x20001620
 80097fc:	20001624 	.word	0x20001624

08009800 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009806:	f000 f949 	bl	8009a9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800980a:	4b15      	ldr	r3, [pc, #84]	; (8009860 <prvCheckForValidListAndQueue+0x60>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d120      	bne.n	8009854 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009812:	4814      	ldr	r0, [pc, #80]	; (8009864 <prvCheckForValidListAndQueue+0x64>)
 8009814:	f7fd ffd0 	bl	80077b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009818:	4813      	ldr	r0, [pc, #76]	; (8009868 <prvCheckForValidListAndQueue+0x68>)
 800981a:	f7fd ffcd 	bl	80077b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800981e:	4b13      	ldr	r3, [pc, #76]	; (800986c <prvCheckForValidListAndQueue+0x6c>)
 8009820:	4a10      	ldr	r2, [pc, #64]	; (8009864 <prvCheckForValidListAndQueue+0x64>)
 8009822:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009824:	4b12      	ldr	r3, [pc, #72]	; (8009870 <prvCheckForValidListAndQueue+0x70>)
 8009826:	4a10      	ldr	r2, [pc, #64]	; (8009868 <prvCheckForValidListAndQueue+0x68>)
 8009828:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800982a:	2300      	movs	r3, #0
 800982c:	9300      	str	r3, [sp, #0]
 800982e:	4b11      	ldr	r3, [pc, #68]	; (8009874 <prvCheckForValidListAndQueue+0x74>)
 8009830:	4a11      	ldr	r2, [pc, #68]	; (8009878 <prvCheckForValidListAndQueue+0x78>)
 8009832:	2110      	movs	r1, #16
 8009834:	200a      	movs	r0, #10
 8009836:	f7fe f8dd 	bl	80079f4 <xQueueGenericCreateStatic>
 800983a:	4603      	mov	r3, r0
 800983c:	4a08      	ldr	r2, [pc, #32]	; (8009860 <prvCheckForValidListAndQueue+0x60>)
 800983e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009840:	4b07      	ldr	r3, [pc, #28]	; (8009860 <prvCheckForValidListAndQueue+0x60>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d005      	beq.n	8009854 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009848:	4b05      	ldr	r3, [pc, #20]	; (8009860 <prvCheckForValidListAndQueue+0x60>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	490b      	ldr	r1, [pc, #44]	; (800987c <prvCheckForValidListAndQueue+0x7c>)
 800984e:	4618      	mov	r0, r3
 8009850:	f7fe fd12 	bl	8008278 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009854:	f000 f956 	bl	8009b04 <vPortExitCritical>
}
 8009858:	bf00      	nop
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	20001628 	.word	0x20001628
 8009864:	200015f8 	.word	0x200015f8
 8009868:	2000160c 	.word	0x2000160c
 800986c:	20001620 	.word	0x20001620
 8009870:	20001624 	.word	0x20001624
 8009874:	200016d4 	.word	0x200016d4
 8009878:	20001634 	.word	0x20001634
 800987c:	0800a170 	.word	0x0800a170

08009880 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009880:	b480      	push	{r7}
 8009882:	b085      	sub	sp, #20
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	3b04      	subs	r3, #4
 8009890:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009898:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	3b04      	subs	r3, #4
 800989e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	f023 0201 	bic.w	r2, r3, #1
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	3b04      	subs	r3, #4
 80098ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80098b0:	4a0c      	ldr	r2, [pc, #48]	; (80098e4 <pxPortInitialiseStack+0x64>)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	3b14      	subs	r3, #20
 80098ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	3b04      	subs	r3, #4
 80098c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f06f 0202 	mvn.w	r2, #2
 80098ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	3b20      	subs	r3, #32
 80098d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80098d6:	68fb      	ldr	r3, [r7, #12]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3714      	adds	r7, #20
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr
 80098e4:	080098e9 	.word	0x080098e9

080098e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80098ee:	2300      	movs	r3, #0
 80098f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80098f2:	4b14      	ldr	r3, [pc, #80]	; (8009944 <prvTaskExitError+0x5c>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098fa:	d00c      	beq.n	8009916 <prvTaskExitError+0x2e>
	__asm volatile
 80098fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009900:	b672      	cpsid	i
 8009902:	f383 8811 	msr	BASEPRI, r3
 8009906:	f3bf 8f6f 	isb	sy
 800990a:	f3bf 8f4f 	dsb	sy
 800990e:	b662      	cpsie	i
 8009910:	60fb      	str	r3, [r7, #12]
}
 8009912:	bf00      	nop
 8009914:	e7fe      	b.n	8009914 <prvTaskExitError+0x2c>
	__asm volatile
 8009916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991a:	b672      	cpsid	i
 800991c:	f383 8811 	msr	BASEPRI, r3
 8009920:	f3bf 8f6f 	isb	sy
 8009924:	f3bf 8f4f 	dsb	sy
 8009928:	b662      	cpsie	i
 800992a:	60bb      	str	r3, [r7, #8]
}
 800992c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800992e:	bf00      	nop
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d0fc      	beq.n	8009930 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009936:	bf00      	nop
 8009938:	bf00      	nop
 800993a:	3714      	adds	r7, #20
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr
 8009944:	20000020 	.word	0x20000020
	...

08009950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009950:	4b07      	ldr	r3, [pc, #28]	; (8009970 <pxCurrentTCBConst2>)
 8009952:	6819      	ldr	r1, [r3, #0]
 8009954:	6808      	ldr	r0, [r1, #0]
 8009956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800995a:	f380 8809 	msr	PSP, r0
 800995e:	f3bf 8f6f 	isb	sy
 8009962:	f04f 0000 	mov.w	r0, #0
 8009966:	f380 8811 	msr	BASEPRI, r0
 800996a:	4770      	bx	lr
 800996c:	f3af 8000 	nop.w

08009970 <pxCurrentTCBConst2>:
 8009970:	200010f8 	.word	0x200010f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009974:	bf00      	nop
 8009976:	bf00      	nop

08009978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009978:	4808      	ldr	r0, [pc, #32]	; (800999c <prvPortStartFirstTask+0x24>)
 800997a:	6800      	ldr	r0, [r0, #0]
 800997c:	6800      	ldr	r0, [r0, #0]
 800997e:	f380 8808 	msr	MSP, r0
 8009982:	f04f 0000 	mov.w	r0, #0
 8009986:	f380 8814 	msr	CONTROL, r0
 800998a:	b662      	cpsie	i
 800998c:	b661      	cpsie	f
 800998e:	f3bf 8f4f 	dsb	sy
 8009992:	f3bf 8f6f 	isb	sy
 8009996:	df00      	svc	0
 8009998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800999a:	bf00      	nop
 800999c:	e000ed08 	.word	0xe000ed08

080099a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80099a6:	4b37      	ldr	r3, [pc, #220]	; (8009a84 <xPortStartScheduler+0xe4>)
 80099a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	22ff      	movs	r2, #255	; 0xff
 80099b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	781b      	ldrb	r3, [r3, #0]
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80099c0:	78fb      	ldrb	r3, [r7, #3]
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80099c8:	b2da      	uxtb	r2, r3
 80099ca:	4b2f      	ldr	r3, [pc, #188]	; (8009a88 <xPortStartScheduler+0xe8>)
 80099cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80099ce:	4b2f      	ldr	r3, [pc, #188]	; (8009a8c <xPortStartScheduler+0xec>)
 80099d0:	2207      	movs	r2, #7
 80099d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099d4:	e009      	b.n	80099ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80099d6:	4b2d      	ldr	r3, [pc, #180]	; (8009a8c <xPortStartScheduler+0xec>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	3b01      	subs	r3, #1
 80099dc:	4a2b      	ldr	r2, [pc, #172]	; (8009a8c <xPortStartScheduler+0xec>)
 80099de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80099e0:	78fb      	ldrb	r3, [r7, #3]
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	005b      	lsls	r3, r3, #1
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80099ea:	78fb      	ldrb	r3, [r7, #3]
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099f2:	2b80      	cmp	r3, #128	; 0x80
 80099f4:	d0ef      	beq.n	80099d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80099f6:	4b25      	ldr	r3, [pc, #148]	; (8009a8c <xPortStartScheduler+0xec>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f1c3 0307 	rsb	r3, r3, #7
 80099fe:	2b04      	cmp	r3, #4
 8009a00:	d00c      	beq.n	8009a1c <xPortStartScheduler+0x7c>
	__asm volatile
 8009a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a06:	b672      	cpsid	i
 8009a08:	f383 8811 	msr	BASEPRI, r3
 8009a0c:	f3bf 8f6f 	isb	sy
 8009a10:	f3bf 8f4f 	dsb	sy
 8009a14:	b662      	cpsie	i
 8009a16:	60bb      	str	r3, [r7, #8]
}
 8009a18:	bf00      	nop
 8009a1a:	e7fe      	b.n	8009a1a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009a1c:	4b1b      	ldr	r3, [pc, #108]	; (8009a8c <xPortStartScheduler+0xec>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	021b      	lsls	r3, r3, #8
 8009a22:	4a1a      	ldr	r2, [pc, #104]	; (8009a8c <xPortStartScheduler+0xec>)
 8009a24:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a26:	4b19      	ldr	r3, [pc, #100]	; (8009a8c <xPortStartScheduler+0xec>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009a2e:	4a17      	ldr	r2, [pc, #92]	; (8009a8c <xPortStartScheduler+0xec>)
 8009a30:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	b2da      	uxtb	r2, r3
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009a3a:	4b15      	ldr	r3, [pc, #84]	; (8009a90 <xPortStartScheduler+0xf0>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a14      	ldr	r2, [pc, #80]	; (8009a90 <xPortStartScheduler+0xf0>)
 8009a40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009a44:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009a46:	4b12      	ldr	r3, [pc, #72]	; (8009a90 <xPortStartScheduler+0xf0>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a11      	ldr	r2, [pc, #68]	; (8009a90 <xPortStartScheduler+0xf0>)
 8009a4c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009a50:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009a52:	f000 f8dd 	bl	8009c10 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009a56:	4b0f      	ldr	r3, [pc, #60]	; (8009a94 <xPortStartScheduler+0xf4>)
 8009a58:	2200      	movs	r2, #0
 8009a5a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009a5c:	f000 f8fc 	bl	8009c58 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009a60:	4b0d      	ldr	r3, [pc, #52]	; (8009a98 <xPortStartScheduler+0xf8>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a0c      	ldr	r2, [pc, #48]	; (8009a98 <xPortStartScheduler+0xf8>)
 8009a66:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009a6a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009a6c:	f7ff ff84 	bl	8009978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009a70:	f7ff f826 	bl	8008ac0 <vTaskSwitchContext>
	prvTaskExitError();
 8009a74:	f7ff ff38 	bl	80098e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3710      	adds	r7, #16
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}
 8009a82:	bf00      	nop
 8009a84:	e000e400 	.word	0xe000e400
 8009a88:	20001724 	.word	0x20001724
 8009a8c:	20001728 	.word	0x20001728
 8009a90:	e000ed20 	.word	0xe000ed20
 8009a94:	20000020 	.word	0x20000020
 8009a98:	e000ef34 	.word	0xe000ef34

08009a9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
	__asm volatile
 8009aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa6:	b672      	cpsid	i
 8009aa8:	f383 8811 	msr	BASEPRI, r3
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	b662      	cpsie	i
 8009ab6:	607b      	str	r3, [r7, #4]
}
 8009ab8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009aba:	4b10      	ldr	r3, [pc, #64]	; (8009afc <vPortEnterCritical+0x60>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	3301      	adds	r3, #1
 8009ac0:	4a0e      	ldr	r2, [pc, #56]	; (8009afc <vPortEnterCritical+0x60>)
 8009ac2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009ac4:	4b0d      	ldr	r3, [pc, #52]	; (8009afc <vPortEnterCritical+0x60>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d111      	bne.n	8009af0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009acc:	4b0c      	ldr	r3, [pc, #48]	; (8009b00 <vPortEnterCritical+0x64>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00c      	beq.n	8009af0 <vPortEnterCritical+0x54>
	__asm volatile
 8009ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ada:	b672      	cpsid	i
 8009adc:	f383 8811 	msr	BASEPRI, r3
 8009ae0:	f3bf 8f6f 	isb	sy
 8009ae4:	f3bf 8f4f 	dsb	sy
 8009ae8:	b662      	cpsie	i
 8009aea:	603b      	str	r3, [r7, #0]
}
 8009aec:	bf00      	nop
 8009aee:	e7fe      	b.n	8009aee <vPortEnterCritical+0x52>
	}
}
 8009af0:	bf00      	nop
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr
 8009afc:	20000020 	.word	0x20000020
 8009b00:	e000ed04 	.word	0xe000ed04

08009b04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b04:	b480      	push	{r7}
 8009b06:	b083      	sub	sp, #12
 8009b08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b0a:	4b13      	ldr	r3, [pc, #76]	; (8009b58 <vPortExitCritical+0x54>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d10c      	bne.n	8009b2c <vPortExitCritical+0x28>
	__asm volatile
 8009b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b16:	b672      	cpsid	i
 8009b18:	f383 8811 	msr	BASEPRI, r3
 8009b1c:	f3bf 8f6f 	isb	sy
 8009b20:	f3bf 8f4f 	dsb	sy
 8009b24:	b662      	cpsie	i
 8009b26:	607b      	str	r3, [r7, #4]
}
 8009b28:	bf00      	nop
 8009b2a:	e7fe      	b.n	8009b2a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009b2c:	4b0a      	ldr	r3, [pc, #40]	; (8009b58 <vPortExitCritical+0x54>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	3b01      	subs	r3, #1
 8009b32:	4a09      	ldr	r2, [pc, #36]	; (8009b58 <vPortExitCritical+0x54>)
 8009b34:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b36:	4b08      	ldr	r3, [pc, #32]	; (8009b58 <vPortExitCritical+0x54>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d105      	bne.n	8009b4a <vPortExitCritical+0x46>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	f383 8811 	msr	BASEPRI, r3
}
 8009b48:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009b4a:	bf00      	nop
 8009b4c:	370c      	adds	r7, #12
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop
 8009b58:	20000020 	.word	0x20000020
 8009b5c:	00000000 	.word	0x00000000

08009b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009b60:	f3ef 8009 	mrs	r0, PSP
 8009b64:	f3bf 8f6f 	isb	sy
 8009b68:	4b15      	ldr	r3, [pc, #84]	; (8009bc0 <pxCurrentTCBConst>)
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	f01e 0f10 	tst.w	lr, #16
 8009b70:	bf08      	it	eq
 8009b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b7a:	6010      	str	r0, [r2, #0]
 8009b7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009b80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009b84:	b672      	cpsid	i
 8009b86:	f380 8811 	msr	BASEPRI, r0
 8009b8a:	f3bf 8f4f 	dsb	sy
 8009b8e:	f3bf 8f6f 	isb	sy
 8009b92:	b662      	cpsie	i
 8009b94:	f7fe ff94 	bl	8008ac0 <vTaskSwitchContext>
 8009b98:	f04f 0000 	mov.w	r0, #0
 8009b9c:	f380 8811 	msr	BASEPRI, r0
 8009ba0:	bc09      	pop	{r0, r3}
 8009ba2:	6819      	ldr	r1, [r3, #0]
 8009ba4:	6808      	ldr	r0, [r1, #0]
 8009ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009baa:	f01e 0f10 	tst.w	lr, #16
 8009bae:	bf08      	it	eq
 8009bb0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009bb4:	f380 8809 	msr	PSP, r0
 8009bb8:	f3bf 8f6f 	isb	sy
 8009bbc:	4770      	bx	lr
 8009bbe:	bf00      	nop

08009bc0 <pxCurrentTCBConst>:
 8009bc0:	200010f8 	.word	0x200010f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009bc4:	bf00      	nop
 8009bc6:	bf00      	nop

08009bc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8009bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd2:	b672      	cpsid	i
 8009bd4:	f383 8811 	msr	BASEPRI, r3
 8009bd8:	f3bf 8f6f 	isb	sy
 8009bdc:	f3bf 8f4f 	dsb	sy
 8009be0:	b662      	cpsie	i
 8009be2:	607b      	str	r3, [r7, #4]
}
 8009be4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009be6:	f7fe feaf 	bl	8008948 <xTaskIncrementTick>
 8009bea:	4603      	mov	r3, r0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d003      	beq.n	8009bf8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009bf0:	4b06      	ldr	r3, [pc, #24]	; (8009c0c <SysTick_Handler+0x44>)
 8009bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bf6:	601a      	str	r2, [r3, #0]
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	f383 8811 	msr	BASEPRI, r3
}
 8009c02:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c04:	bf00      	nop
 8009c06:	3708      	adds	r7, #8
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	e000ed04 	.word	0xe000ed04

08009c10 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c10:	b480      	push	{r7}
 8009c12:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c14:	4b0b      	ldr	r3, [pc, #44]	; (8009c44 <vPortSetupTimerInterrupt+0x34>)
 8009c16:	2200      	movs	r2, #0
 8009c18:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c1a:	4b0b      	ldr	r3, [pc, #44]	; (8009c48 <vPortSetupTimerInterrupt+0x38>)
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c20:	4b0a      	ldr	r3, [pc, #40]	; (8009c4c <vPortSetupTimerInterrupt+0x3c>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a0a      	ldr	r2, [pc, #40]	; (8009c50 <vPortSetupTimerInterrupt+0x40>)
 8009c26:	fba2 2303 	umull	r2, r3, r2, r3
 8009c2a:	099b      	lsrs	r3, r3, #6
 8009c2c:	4a09      	ldr	r2, [pc, #36]	; (8009c54 <vPortSetupTimerInterrupt+0x44>)
 8009c2e:	3b01      	subs	r3, #1
 8009c30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009c32:	4b04      	ldr	r3, [pc, #16]	; (8009c44 <vPortSetupTimerInterrupt+0x34>)
 8009c34:	2207      	movs	r2, #7
 8009c36:	601a      	str	r2, [r3, #0]
}
 8009c38:	bf00      	nop
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop
 8009c44:	e000e010 	.word	0xe000e010
 8009c48:	e000e018 	.word	0xe000e018
 8009c4c:	20000000 	.word	0x20000000
 8009c50:	10624dd3 	.word	0x10624dd3
 8009c54:	e000e014 	.word	0xe000e014

08009c58 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009c58:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009c68 <vPortEnableVFP+0x10>
 8009c5c:	6801      	ldr	r1, [r0, #0]
 8009c5e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009c62:	6001      	str	r1, [r0, #0]
 8009c64:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009c66:	bf00      	nop
 8009c68:	e000ed88 	.word	0xe000ed88

08009c6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b085      	sub	sp, #20
 8009c70:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009c72:	f3ef 8305 	mrs	r3, IPSR
 8009c76:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2b0f      	cmp	r3, #15
 8009c7c:	d916      	bls.n	8009cac <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009c7e:	4a19      	ldr	r2, [pc, #100]	; (8009ce4 <vPortValidateInterruptPriority+0x78>)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	4413      	add	r3, r2
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009c88:	4b17      	ldr	r3, [pc, #92]	; (8009ce8 <vPortValidateInterruptPriority+0x7c>)
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	7afa      	ldrb	r2, [r7, #11]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d20c      	bcs.n	8009cac <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c96:	b672      	cpsid	i
 8009c98:	f383 8811 	msr	BASEPRI, r3
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	b662      	cpsie	i
 8009ca6:	607b      	str	r3, [r7, #4]
}
 8009ca8:	bf00      	nop
 8009caa:	e7fe      	b.n	8009caa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009cac:	4b0f      	ldr	r3, [pc, #60]	; (8009cec <vPortValidateInterruptPriority+0x80>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009cb4:	4b0e      	ldr	r3, [pc, #56]	; (8009cf0 <vPortValidateInterruptPriority+0x84>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d90c      	bls.n	8009cd6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8009cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc0:	b672      	cpsid	i
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	b662      	cpsie	i
 8009cd0:	603b      	str	r3, [r7, #0]
}
 8009cd2:	bf00      	nop
 8009cd4:	e7fe      	b.n	8009cd4 <vPortValidateInterruptPriority+0x68>
	}
 8009cd6:	bf00      	nop
 8009cd8:	3714      	adds	r7, #20
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	e000e3f0 	.word	0xe000e3f0
 8009ce8:	20001724 	.word	0x20001724
 8009cec:	e000ed0c 	.word	0xe000ed0c
 8009cf0:	20001728 	.word	0x20001728

08009cf4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b08a      	sub	sp, #40	; 0x28
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d00:	f7fe fd64 	bl	80087cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d04:	4b5e      	ldr	r3, [pc, #376]	; (8009e80 <pvPortMalloc+0x18c>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d101      	bne.n	8009d10 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d0c:	f000 f920 	bl	8009f50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d10:	4b5c      	ldr	r3, [pc, #368]	; (8009e84 <pvPortMalloc+0x190>)
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	4013      	ands	r3, r2
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f040 8092 	bne.w	8009e42 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d01f      	beq.n	8009d64 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009d24:	2208      	movs	r2, #8
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	4413      	add	r3, r2
 8009d2a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f003 0307 	and.w	r3, r3, #7
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d016      	beq.n	8009d64 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f023 0307 	bic.w	r3, r3, #7
 8009d3c:	3308      	adds	r3, #8
 8009d3e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f003 0307 	and.w	r3, r3, #7
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00c      	beq.n	8009d64 <pvPortMalloc+0x70>
	__asm volatile
 8009d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d4e:	b672      	cpsid	i
 8009d50:	f383 8811 	msr	BASEPRI, r3
 8009d54:	f3bf 8f6f 	isb	sy
 8009d58:	f3bf 8f4f 	dsb	sy
 8009d5c:	b662      	cpsie	i
 8009d5e:	617b      	str	r3, [r7, #20]
}
 8009d60:	bf00      	nop
 8009d62:	e7fe      	b.n	8009d62 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d06b      	beq.n	8009e42 <pvPortMalloc+0x14e>
 8009d6a:	4b47      	ldr	r3, [pc, #284]	; (8009e88 <pvPortMalloc+0x194>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d866      	bhi.n	8009e42 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009d74:	4b45      	ldr	r3, [pc, #276]	; (8009e8c <pvPortMalloc+0x198>)
 8009d76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009d78:	4b44      	ldr	r3, [pc, #272]	; (8009e8c <pvPortMalloc+0x198>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d7e:	e004      	b.n	8009d8a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d903      	bls.n	8009d9c <pvPortMalloc+0xa8>
 8009d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d1f1      	bne.n	8009d80 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009d9c:	4b38      	ldr	r3, [pc, #224]	; (8009e80 <pvPortMalloc+0x18c>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009da2:	429a      	cmp	r2, r3
 8009da4:	d04d      	beq.n	8009e42 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009da6:	6a3b      	ldr	r3, [r7, #32]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	2208      	movs	r2, #8
 8009dac:	4413      	add	r3, r2
 8009dae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db2:	681a      	ldr	r2, [r3, #0]
 8009db4:	6a3b      	ldr	r3, [r7, #32]
 8009db6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dba:	685a      	ldr	r2, [r3, #4]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	1ad2      	subs	r2, r2, r3
 8009dc0:	2308      	movs	r3, #8
 8009dc2:	005b      	lsls	r3, r3, #1
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d921      	bls.n	8009e0c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4413      	add	r3, r2
 8009dce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	f003 0307 	and.w	r3, r3, #7
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d00c      	beq.n	8009df4 <pvPortMalloc+0x100>
	__asm volatile
 8009dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dde:	b672      	cpsid	i
 8009de0:	f383 8811 	msr	BASEPRI, r3
 8009de4:	f3bf 8f6f 	isb	sy
 8009de8:	f3bf 8f4f 	dsb	sy
 8009dec:	b662      	cpsie	i
 8009dee:	613b      	str	r3, [r7, #16]
}
 8009df0:	bf00      	nop
 8009df2:	e7fe      	b.n	8009df2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df6:	685a      	ldr	r2, [r3, #4]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	1ad2      	subs	r2, r2, r3
 8009dfc:	69bb      	ldr	r3, [r7, #24]
 8009dfe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e06:	69b8      	ldr	r0, [r7, #24]
 8009e08:	f000 f904 	bl	800a014 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e0c:	4b1e      	ldr	r3, [pc, #120]	; (8009e88 <pvPortMalloc+0x194>)
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	1ad3      	subs	r3, r2, r3
 8009e16:	4a1c      	ldr	r2, [pc, #112]	; (8009e88 <pvPortMalloc+0x194>)
 8009e18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e1a:	4b1b      	ldr	r3, [pc, #108]	; (8009e88 <pvPortMalloc+0x194>)
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	4b1c      	ldr	r3, [pc, #112]	; (8009e90 <pvPortMalloc+0x19c>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d203      	bcs.n	8009e2e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e26:	4b18      	ldr	r3, [pc, #96]	; (8009e88 <pvPortMalloc+0x194>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a19      	ldr	r2, [pc, #100]	; (8009e90 <pvPortMalloc+0x19c>)
 8009e2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e30:	685a      	ldr	r2, [r3, #4]
 8009e32:	4b14      	ldr	r3, [pc, #80]	; (8009e84 <pvPortMalloc+0x190>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	431a      	orrs	r2, r3
 8009e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3e:	2200      	movs	r2, #0
 8009e40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009e42:	f7fe fcd1 	bl	80087e8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8009e46:	69fb      	ldr	r3, [r7, #28]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d101      	bne.n	8009e50 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8009e4c:	f7f6 fb8c 	bl	8000568 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	f003 0307 	and.w	r3, r3, #7
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d00c      	beq.n	8009e74 <pvPortMalloc+0x180>
	__asm volatile
 8009e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5e:	b672      	cpsid	i
 8009e60:	f383 8811 	msr	BASEPRI, r3
 8009e64:	f3bf 8f6f 	isb	sy
 8009e68:	f3bf 8f4f 	dsb	sy
 8009e6c:	b662      	cpsie	i
 8009e6e:	60fb      	str	r3, [r7, #12]
}
 8009e70:	bf00      	nop
 8009e72:	e7fe      	b.n	8009e72 <pvPortMalloc+0x17e>
	return pvReturn;
 8009e74:	69fb      	ldr	r3, [r7, #28]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3728      	adds	r7, #40	; 0x28
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	20009734 	.word	0x20009734
 8009e84:	20009740 	.word	0x20009740
 8009e88:	20009738 	.word	0x20009738
 8009e8c:	2000972c 	.word	0x2000972c
 8009e90:	2000973c 	.word	0x2000973c

08009e94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b086      	sub	sp, #24
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d04c      	beq.n	8009f40 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ea6:	2308      	movs	r3, #8
 8009ea8:	425b      	negs	r3, r3
 8009eaa:	697a      	ldr	r2, [r7, #20]
 8009eac:	4413      	add	r3, r2
 8009eae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009eb0:	697b      	ldr	r3, [r7, #20]
 8009eb2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	685a      	ldr	r2, [r3, #4]
 8009eb8:	4b23      	ldr	r3, [pc, #140]	; (8009f48 <vPortFree+0xb4>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d10c      	bne.n	8009edc <vPortFree+0x48>
	__asm volatile
 8009ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec6:	b672      	cpsid	i
 8009ec8:	f383 8811 	msr	BASEPRI, r3
 8009ecc:	f3bf 8f6f 	isb	sy
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	b662      	cpsie	i
 8009ed6:	60fb      	str	r3, [r7, #12]
}
 8009ed8:	bf00      	nop
 8009eda:	e7fe      	b.n	8009eda <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d00c      	beq.n	8009efe <vPortFree+0x6a>
	__asm volatile
 8009ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee8:	b672      	cpsid	i
 8009eea:	f383 8811 	msr	BASEPRI, r3
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	f3bf 8f4f 	dsb	sy
 8009ef6:	b662      	cpsie	i
 8009ef8:	60bb      	str	r3, [r7, #8]
}
 8009efa:	bf00      	nop
 8009efc:	e7fe      	b.n	8009efc <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	685a      	ldr	r2, [r3, #4]
 8009f02:	4b11      	ldr	r3, [pc, #68]	; (8009f48 <vPortFree+0xb4>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4013      	ands	r3, r2
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d019      	beq.n	8009f40 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d115      	bne.n	8009f40 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	685a      	ldr	r2, [r3, #4]
 8009f18:	4b0b      	ldr	r3, [pc, #44]	; (8009f48 <vPortFree+0xb4>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	43db      	mvns	r3, r3
 8009f1e:	401a      	ands	r2, r3
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f24:	f7fe fc52 	bl	80087cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	685a      	ldr	r2, [r3, #4]
 8009f2c:	4b07      	ldr	r3, [pc, #28]	; (8009f4c <vPortFree+0xb8>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4413      	add	r3, r2
 8009f32:	4a06      	ldr	r2, [pc, #24]	; (8009f4c <vPortFree+0xb8>)
 8009f34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f36:	6938      	ldr	r0, [r7, #16]
 8009f38:	f000 f86c 	bl	800a014 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009f3c:	f7fe fc54 	bl	80087e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009f40:	bf00      	nop
 8009f42:	3718      	adds	r7, #24
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}
 8009f48:	20009740 	.word	0x20009740
 8009f4c:	20009738 	.word	0x20009738

08009f50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009f5c:	4b27      	ldr	r3, [pc, #156]	; (8009ffc <prvHeapInit+0xac>)
 8009f5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	f003 0307 	and.w	r3, r3, #7
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d00c      	beq.n	8009f84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	3307      	adds	r3, #7
 8009f6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f023 0307 	bic.w	r3, r3, #7
 8009f76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009f78:	68ba      	ldr	r2, [r7, #8]
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	1ad3      	subs	r3, r2, r3
 8009f7e:	4a1f      	ldr	r2, [pc, #124]	; (8009ffc <prvHeapInit+0xac>)
 8009f80:	4413      	add	r3, r2
 8009f82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009f88:	4a1d      	ldr	r2, [pc, #116]	; (800a000 <prvHeapInit+0xb0>)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009f8e:	4b1c      	ldr	r3, [pc, #112]	; (800a000 <prvHeapInit+0xb0>)
 8009f90:	2200      	movs	r2, #0
 8009f92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	68ba      	ldr	r2, [r7, #8]
 8009f98:	4413      	add	r3, r2
 8009f9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009f9c:	2208      	movs	r2, #8
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	1a9b      	subs	r3, r3, r2
 8009fa2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f023 0307 	bic.w	r3, r3, #7
 8009faa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	4a15      	ldr	r2, [pc, #84]	; (800a004 <prvHeapInit+0xb4>)
 8009fb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009fb2:	4b14      	ldr	r3, [pc, #80]	; (800a004 <prvHeapInit+0xb4>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009fba:	4b12      	ldr	r3, [pc, #72]	; (800a004 <prvHeapInit+0xb4>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	68fa      	ldr	r2, [r7, #12]
 8009fca:	1ad2      	subs	r2, r2, r3
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009fd0:	4b0c      	ldr	r3, [pc, #48]	; (800a004 <prvHeapInit+0xb4>)
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	4a0a      	ldr	r2, [pc, #40]	; (800a008 <prvHeapInit+0xb8>)
 8009fde:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	4a09      	ldr	r2, [pc, #36]	; (800a00c <prvHeapInit+0xbc>)
 8009fe6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009fe8:	4b09      	ldr	r3, [pc, #36]	; (800a010 <prvHeapInit+0xc0>)
 8009fea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009fee:	601a      	str	r2, [r3, #0]
}
 8009ff0:	bf00      	nop
 8009ff2:	3714      	adds	r7, #20
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr
 8009ffc:	2000172c 	.word	0x2000172c
 800a000:	2000972c 	.word	0x2000972c
 800a004:	20009734 	.word	0x20009734
 800a008:	2000973c 	.word	0x2000973c
 800a00c:	20009738 	.word	0x20009738
 800a010:	20009740 	.word	0x20009740

0800a014 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a014:	b480      	push	{r7}
 800a016:	b085      	sub	sp, #20
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a01c:	4b28      	ldr	r3, [pc, #160]	; (800a0c0 <prvInsertBlockIntoFreeList+0xac>)
 800a01e:	60fb      	str	r3, [r7, #12]
 800a020:	e002      	b.n	800a028 <prvInsertBlockIntoFreeList+0x14>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	60fb      	str	r3, [r7, #12]
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d8f7      	bhi.n	800a022 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	68ba      	ldr	r2, [r7, #8]
 800a03c:	4413      	add	r3, r2
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	429a      	cmp	r2, r3
 800a042:	d108      	bne.n	800a056 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	685a      	ldr	r2, [r3, #4]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	441a      	add	r2, r3
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	68ba      	ldr	r2, [r7, #8]
 800a060:	441a      	add	r2, r3
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	429a      	cmp	r2, r3
 800a068:	d118      	bne.n	800a09c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681a      	ldr	r2, [r3, #0]
 800a06e:	4b15      	ldr	r3, [pc, #84]	; (800a0c4 <prvInsertBlockIntoFreeList+0xb0>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	429a      	cmp	r2, r3
 800a074:	d00d      	beq.n	800a092 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	685a      	ldr	r2, [r3, #4]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	441a      	add	r2, r3
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	601a      	str	r2, [r3, #0]
 800a090:	e008      	b.n	800a0a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a092:	4b0c      	ldr	r3, [pc, #48]	; (800a0c4 <prvInsertBlockIntoFreeList+0xb0>)
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	601a      	str	r2, [r3, #0]
 800a09a:	e003      	b.n	800a0a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d002      	beq.n	800a0b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0b2:	bf00      	nop
 800a0b4:	3714      	adds	r7, #20
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop
 800a0c0:	2000972c 	.word	0x2000972c
 800a0c4:	20009734 	.word	0x20009734

0800a0c8 <__libc_init_array>:
 800a0c8:	b570      	push	{r4, r5, r6, lr}
 800a0ca:	4d0d      	ldr	r5, [pc, #52]	; (800a100 <__libc_init_array+0x38>)
 800a0cc:	4c0d      	ldr	r4, [pc, #52]	; (800a104 <__libc_init_array+0x3c>)
 800a0ce:	1b64      	subs	r4, r4, r5
 800a0d0:	10a4      	asrs	r4, r4, #2
 800a0d2:	2600      	movs	r6, #0
 800a0d4:	42a6      	cmp	r6, r4
 800a0d6:	d109      	bne.n	800a0ec <__libc_init_array+0x24>
 800a0d8:	4d0b      	ldr	r5, [pc, #44]	; (800a108 <__libc_init_array+0x40>)
 800a0da:	4c0c      	ldr	r4, [pc, #48]	; (800a10c <__libc_init_array+0x44>)
 800a0dc:	f000 f82e 	bl	800a13c <_init>
 800a0e0:	1b64      	subs	r4, r4, r5
 800a0e2:	10a4      	asrs	r4, r4, #2
 800a0e4:	2600      	movs	r6, #0
 800a0e6:	42a6      	cmp	r6, r4
 800a0e8:	d105      	bne.n	800a0f6 <__libc_init_array+0x2e>
 800a0ea:	bd70      	pop	{r4, r5, r6, pc}
 800a0ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0f0:	4798      	blx	r3
 800a0f2:	3601      	adds	r6, #1
 800a0f4:	e7ee      	b.n	800a0d4 <__libc_init_array+0xc>
 800a0f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0fa:	4798      	blx	r3
 800a0fc:	3601      	adds	r6, #1
 800a0fe:	e7f2      	b.n	800a0e6 <__libc_init_array+0x1e>
 800a100:	0800be90 	.word	0x0800be90
 800a104:	0800be90 	.word	0x0800be90
 800a108:	0800be90 	.word	0x0800be90
 800a10c:	0800be94 	.word	0x0800be94

0800a110 <memcpy>:
 800a110:	440a      	add	r2, r1
 800a112:	4291      	cmp	r1, r2
 800a114:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a118:	d100      	bne.n	800a11c <memcpy+0xc>
 800a11a:	4770      	bx	lr
 800a11c:	b510      	push	{r4, lr}
 800a11e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a122:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a126:	4291      	cmp	r1, r2
 800a128:	d1f9      	bne.n	800a11e <memcpy+0xe>
 800a12a:	bd10      	pop	{r4, pc}

0800a12c <memset>:
 800a12c:	4402      	add	r2, r0
 800a12e:	4603      	mov	r3, r0
 800a130:	4293      	cmp	r3, r2
 800a132:	d100      	bne.n	800a136 <memset+0xa>
 800a134:	4770      	bx	lr
 800a136:	f803 1b01 	strb.w	r1, [r3], #1
 800a13a:	e7f9      	b.n	800a130 <memset+0x4>

0800a13c <_init>:
 800a13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a13e:	bf00      	nop
 800a140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a142:	bc08      	pop	{r3}
 800a144:	469e      	mov	lr, r3
 800a146:	4770      	bx	lr

0800a148 <_fini>:
 800a148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a14a:	bf00      	nop
 800a14c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a14e:	bc08      	pop	{r3}
 800a150:	469e      	mov	lr, r3
 800a152:	4770      	bx	lr
